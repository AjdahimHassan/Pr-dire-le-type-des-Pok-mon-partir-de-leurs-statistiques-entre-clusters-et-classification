(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Wolfram 14.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       154,          7]
NotebookDataLength[   1053336,      18778]
NotebookOptionsPosition[   1045294,      18639]
NotebookOutlinePosition[   1045879,      18659]
CellTagsIndexPosition[   1045836,      18656]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[TextData[{
 "Pr\[EAcute]dire le type des Pok\[EAcute]mon inconnus : un pari gagnant ?\n",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJzsvQ3wdVdd36uYwL3TGa+gjDCUsVKxCNEYEpLIFSxYpIhlKKBGCDEkkDx5
SAgEgi9EiBnFQKhiBSqh12AILwGSPBESyotYKVBJgIuj2EHvoE4ZKzOZubW1
1qL3Ofd81jm/vX977bXWXnuffc75P//n+51Zz/k//5fzuvdan/39vaxvv+jK
Z11yv6/7uq97+f+2/OdZL/ipJ1111Qt+5tnftPzPj77k5Zdd+pIXvfBpL3nF
iy590VXnXvQNy2+ed7/VOGX59UKSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSDqn+8r7/tnjrzR9ZnP+a
Dy3+6M//330/HUmSJEmSpBNW9/3V3yze/4FPL8677PrF6c9+y+KMS48trrnx
M4v/8T+/tu+nJkmSJEmSdELpr/76bxuuesQZFy++44euC2z12MvuXDz+8t9a
3PHJP1scP358309TkiRJkiTpwAuuuutjnwtc9W1nHlk8/LQLFo980jWL0y55
f2Crxx45FsaP/vzHF3/6l/99309XkiRJkiTpwAov6vN/8OXFhVe+efHt575k
8bDTLw4DtvqeF7ynZStul+OMI3cqTihJkiRJklQQbPWUH7tu8dCzjoYBW33H
E65enHbBO3psZUNxQkmSJEmSpLS+/OdfXTz9sjc1bMV4xONfFtgKn4oRs5WN
p/7cx1RPKEmSJEmS5ETfBWKC37rkKQZsxe1jzntbw1YlvjpT9YSSJEmSJEmN
yGW/+rqbF9/6xFc2fMX4zue8ucNWJb464+hvKU4oSZIkSZK0FH7T9W86tnjw
k17V4avAVpceW3GV3Rb4SnFCSZIkSZKkxeJvv/Z3i5vf94nQ06rhq+X4rmf8
yuKxl/TZqoavVE8oSZIkSdLJKmJ49Ld65NOvD2xlfMX/6XGVYqsavlI9oSRJ
kiRJJ6s+de+XQgzwW55ybRjw1QN/5HWhx1WWrY4c63ytOKEkSZIkSdJKn/2T
+xb/9MK3L775ab/Q8BVfl9iK733vZb+1eOJLblk8+cU3lRlr/X3FCSVJkiRJ
OhlEj6sf/KnfDDxlA9/K97hKsRW3517+3sUNr/vhxVv+1RMDZ5UY6/R1nPCW
3/5/FCeUJEmSJOnQ6r6/+pvF+a/5UOAphrHVd55/U5atLCbI7dXXXbz4D7/x
Dxafvun+i2uufV7nZzkPS3FCSZIkSZIOq+hx9ZJf/cTigc/85YavGrZKxQOj
cdnPXLX4+L/9psV/fPsDwuDrC199TYgZlmKE/FxxQkmSJEmSDpvow3DdLV9Y
fONzfm3FV+vh2crnrvtx+qUfWPz4K25Y3PXWhy1+7+2nBu+Kwde3vulRi6e9
9MYVY8Uelvu/4oSSJEmSJB0mwTS/fscfLh70Ezd2+Ir/53pcGW/BVv/yVb+6
uOPfPCLwlHlXNvjer97wz0JeVi9OGPGW4oSSJEmSJB0GwVb0oXrkxe8MbGUD
tir2uFqzFXWC//62cxd//YlTFp+7ZeVbxYxFPhZ5WU0uVoav8LhefOO9IU4p
SZIkSZJ0Igq2+uQXvxrY6gHPfdsotrJawXfd9C8Wf/+ZUxbH7z1l8V8+fGoT
HzS2sjjhh2988OLHX/WL3VysiK+4T8UJJUmSJEk6kUUs7qyrbg9sZcPYKpdr
5esB3/imCxdf+70HLBZLtlrce2rgrC/fef8m/ypmrF4uVqZvg+KEkiRJkiSd
iPrTv/zvgWM8WzHwsox9SrWCP3vDyxd/9cn/Y8lV91ss7jl1NZac9b8+fcri
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
nMX6SrwzVVcW5+SwzsKkOcYy/2p1u/oZMdxdXW+yvyA+gGep1BjiK3jlk7ed
6daxU1bryGdXAw+Tuqlpub3t+x+vMdbHGr6r9a/wrnwvhlG8d0/LWHgY8eft
537m+rB3T8NYw3nvPv/dag1r2IrfM67i2sfzkPeULX5r9bdWR8LgM7Jh37M6
EKvBzdWBlDiLW54Tni6emuXWl/jKD3y8HmMtByw6xFfEzv74w98+O1/x/vnP
3pg69FPP1A5288DGP27KN+Pr0j7PVkO46xwh46vcfNLszX1+3r+ChWCkHF/N
yVyBu6Yy1pKb4CS/z6L1/+UaILCV+10/4jpF8dbBFXmFXKeQt2B79BlT1fJV
iqvwB3wNoOVTMe92mWrf/LM7zjq+ritjzcqtsfZ+4SN0Gauch2W9sXZxjtG/
kjnA7zcS39oeukN8FWrwHE9xrY6n9Rs3Pnvxitf8VJdpZuIr45g6vop6MVTH
BfOMxXlQYiw++ymMVcNXPg4Iu3hP2a59rL7Arn/6cfpxI1UHUsNacX6i9dzy
jJXjK2OsUDfoPKxUbwbPV1Y7uIlnlDsOU3WsvP8wRRwjtNrBTfPAjid8M7/P
s7FUj6+Wz4HY1C5Vw1fMK0P+FTwU75U1JmZdYi78xhRzGW91mCtRT+iZib5m
xPV9D2B61fH6YqaKeetRr/ho52f04vK8pT2s9y/qj6wu0HjK9wkd4qscV/le
6hb/m6cW7AQerj8S6w1zXs7L6jFWJ+eq9a1gFs9XxAl3cc1JDTw+gHGUHw/8
kdc1t0N8RQ4W8TbymbilDh2uCNxzUcs1U3r/xGuMv4a39xbGqO3FEHKMk70Y
xq+zfP41jBWYYgRjDfGVxQI5T1krYj/Zrn22k/fY5S0eK/Zzc56uz08MXs/a
yxriKziMXH+f756qHezEFpdMc8UvvXpDpk+//lw/ddsnJxUn3DwPrL8/lMUl
w2Nk/CtGKQd7G+KxYI7UvOJHka+WTMM8AsvGfXR8D7JNcgWHmIv6xSJbrQdz
qN8rlFv2rnr00TvTfJXgrJS/5XmL+ifrNS/e2o04ji1/PcVVQ3w1xFUcxye3
V1UYax/DvKxSXpb5LMRw8rlYt3ZihsQJt90Xi/uHTWCo0qjhK+6H0enlbj0c
lozFa6cP0SZeQomvVj2wNu3FMP7zN8byNR7xZ4+3AWO1++iUGSvHV96zIhbI
mm57CrEGzV+zObzm2zkAc7AG1uQnMr9YX9amn0OBr2zgtcJXofdVonYw5qt5
awfbkcqFamJ1Cb4iD6wbP5/2Xsf9dS0+DgeU+Ir1eZcxJ/KQyE/JXa/567aS
f8Xn114LndLsez2Wuab6XKyFcOJQ/BBOxK/yfBXnXg1y1gBv4XMxYt5S39Pt
yOevl9gqxVdx3jpzv8UBLQZoeVUntVdVtcau5j6uk23tz62zvMehR1aSsW7t
5WThSW7zOoXzkhyVwFHP/OX2NhqDfLVmqtS+OcZXxAum7A3iR6qPNewS6vWy
fDW2F8PYz7/1MePe8jFjcf1Sw1gpvjK2glM5juzap5/7uK/zoc1PLHm6/v+8
Do6L4GNV8BXvB/n/rF3xvs6p/Ku5awdLx2FunxzbF2fzPLB0XLK0z7PFDMnx
2VUPY+Yr46uh67ah+GDoFxbeM+8392PW22Au4yw8ycH8rKN3hj7NFhtkdHKv
UuwUc5TnqUy+Vsxaxlt+/2rx1mbifaP2E39jiKtyfGV9FohZcR1pNbDGVd0Y
4L7m6xNtDOfkMKinCnvq9Bir5StjLOaobea64zMzNxtHfeNzfq259aOGr1Ke
lucrvIrp9entexznoHCdGWr1knw1tRfDiDGCsXiu9EywvQhr+crYiusgOM24
qnOOzv26NviMjq9ZoFQDYO8J/gufT02M0GoKOR5TvRk8X22ndrB9jalYXWqf
HPysNg9sk/l0xRFj9nk2/4o86l3u8wxfsT6VrtkYQ3xFfJccTt674M2u8zv7
1xLzMFfqOKXvRpGv1v2w6HOTzb2K2SnlW5V+b8TwfebhLeJb6sFVJ64N2NOE
/V5Pf/ZbRvOVsRUeiuXEml9luVX7vw4+QUcUL4rXFfuaayLW2LN7e0F3+YrB
z7fpYREzgOFintoGX5H7NEeMJN4nJOS9kEPe46tNezFM++w5j1KMZb0SYCzL
ea/hK8u14pj55C0PDevFZnWYuzgPVu8Ha9xQfqLFuGoYyzNVia+4n+3UDrav
LY7VpfbJsdz2l7/+p2eJS4/d59nnvO+y7wseQMNXhVHiq7iHO+8h5zHXaPDW
8DmQrs1IMVfcg8QfmyG/jVrDEl8RI3z69Q1f4WU1uVc5hiox1YB/VTvwt4y3
fA8u8VZfrLHsRUadQojvPuHqKrbyDEaOFfM0uUAcP+Kqbawtq3UlFSu0NZZ5
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
vIT59uUb9xzMFyW+NpWtfF77+POvXQc4fsL+Mgnvir4eQ/2ZmV+IBaXYKuRs
Xf7ecJ1S3w9/5R3DjPBOiq1KfEVuDn5o3J+G2v2DUjtYOp+tZmVbccqhfZ5L
fOVrCPncOTbIT8fbCjx0RT/+Nydf5fouDO056PfG2XbvWN8TOq5bKNYPDuRe
zdfHvz3P/PV6LjYY85Vig31x/UkeTI6rYCo/vuUp13Zy3XPxQct1Jz94N576
Fka0pzK5nrymHD/5uGnpe/7/vE94THhZjec/ibH6+ZO2h94QX22rB9aQ6HUL
P5X4KuzVdN7bBvlqU2/f1hbWtL3EtR1bwdz0jG/5atzoxwbHHUcWa7aeliu+
6o43vOvzYR3NibWWHDyOrRRbcUu+S8N/Vcd826PCejDU8hUMBVvFxxrfO0i1
g6nz2bMOPbe30wMzPYek9nmO2YrbV6xrZLhOg7WIA9oe0MZXY/2rzu9fEY1N
+CrTu32+/Rzz7y/XbnGerNUQDPJV/PVybIf72zmg02d+oH+7YoNp3fy+T2T9
qhRf4WHF3BD7Vz7Xff97ikw/znzcyPKZSnsFldgqd8v7RI8Brkunz+H9PfT2
wVecX1zDkM/FXMv9xoPv83Pi04/5viPJfjXe1yJnoukxGvGV34Nwk/XPauXG
rfczDdePn9dh+9lM5St4iJy0KXupGWdyHOVig/hRQ94VcSHW2FwvUfy5Vc+I
2nmh7VHRsNWRY1V8BVs9Yl2zmqpPHaodJKa0u9rB9nz2+dA2mIu256P1c7BT
+zz3/KslR+FdwNPcxj+v4auOx3XFql8Cw/6fuj/7neb3JvIVf9/k122FW7tz
dFy3kMxxr+jPANO85cbnzc79x++tiw16vlJsMC/LdS95Vn5889N+odevIeYr
G/x8Wo7tQRjdOmkGe/6m4oK1I9cHn1sYa3rOWn+Pl1q+mhofjPvWkGdzzY2f
CfWI1Ipxv7BbPPg+uTv8jvUXtXrquB+W5R8P8dXGtdX3rPz7nccFI7aCZzxb
TeUrfKfxcYO2D6LFotqeDC0nDdVDcDyw72/8d/bcuOauri92dZTUzQVmMraq
5Cv8T+td2+OrA1c72D2fLR/a2Gq7NRd1+zyn+Ik4ICP38yxfOZ7iFh8H1iDn
m3Wd/qYch8TQyLFm8DXfI25JbhgxMvwn7r/hrUwcsMRXwRfcar5wum7BevN3
+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
/TnBuVyKEdr+THiA8BXMlfKubJDDX3uNYrzHuhfyvzve1TBf8ft4LaxrvK5i
vY7zrLiOg124/7iuj7USvrDawjq26p73di2autY0T4J1mOMgy1dL/uC6eO5e
fLn53ed3WJ8J1nTeW5gEjrA+iqP5yg/720IOluX5bxJLOH5v/3ofhoG/WQvH
9A+1HBzWDgbrOPM5axqfo++hxnzPe9lZGyv7aNVwOY9vvbaqGevFHwiMBbPW
M2X++E5eu+xpWAyvxrviZ+2+Mfm4oLF5uM9X3LA65hPelc+/mroneZy/bj5+
Okae3v/Pjg1y9XyM0PPV/H3TV3Oc912t9rXJcXdcM3fulWKDB0+8tw87eqzo
W9mtjSF2GuVvLfmKW9hkq+tm4ZyI66tK+z1zSzwHffnPvxpyaXgNqbggt/hI
jU8+OPe214jE4PreVZ6vLCYIW7HGsY4W5w23hhG7hBX4e9/PAc6Cd1gveX+m
sVX7WMfXOaAlxiL2EGJxmTghnLHd3v/l3FmbM7k1TwsOjj2tUXxVMfg7GGLz
PRnbPPIOf1utQiVbmbeU6+Vvn6fl+42OgSR8jBxj+T6ktYx1+jp3C28H366K
LTPvJ38DO+5vz/p2WFzQ9qQoeVfkXbHGNzWVhfs03mFuaWODubHqMTotvynd
+5ncgM4+BonXnPKwQoww41/BV/Pu+9fPc+zluLvY4Lx7CUyPDZb6x0jThYdl
9eE1XGWDOGEq191/j1wtcuIHe5Su+Wp//Ub7veFy+z2bh0V/C7w/cmfws3K+
1dj+E+Yvm4/j+zGU+MqzFazUebyBGAzxQBjQfLKGr5YswzxqucjWt+H4RLby
+fO+Fj9VW8icmIsT9vbO2cL6xGu1OXKoBtI8Ld4nfE/vac3NVxYj3HQdP77+
7Ef1xnc5xT43KjX4bM0X6zzXseySyMPJMRbD+pDWMJbtA42PxWj3/5nW/4JY
4/z7royfy4xN8JnCnnyJfgzeu8K/Kc9P7X1azInje+g4tnzN8Xt09PPWmQ+M
2Yhj9vMs0h6W7WONd5TjKxhk3L4aw+9/PLcxPzQ57q7vFTXRc+ZeKTZ4MMXe
xfiEOZ7y4+uvvCvcsvbHe97EXGWjuM8OfLVmLPyaJma/wzkqFTdP7fdsjEWu
FUyaYyv7Hmttfe+JNnYTcr3dXjglvjK2gpGYy2pr6pkHbE8gOJC9oT1fWU+E
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
V7wnY/bdO35vPw/A6qtr6geNZ8564W3N/Ml8yrU0axZxBuYKBp8RPjvzd9iP
YjmXd+azNV+V9qtP5XvYdVngq4vTvdxDfurIuoLmdgwjz3yc2XpgfSFTPcCY
19t+Q7cn+eqMJV8ZY8ETTT7g3l7bJu/Jite5fiEvhrXRfCjruV474LFUT5BN
nl98vcK1Vxwb9IxVm0tux78dC74O0Ppqxb5TfL40LFHwr9L79w0/p5TPav6d
9WuYj7FatuIYaPYgn+jXE3tJ8tXy2i99fPTzRJiDxvXJ6l6n2y3MNU/uVT82
GGIFBbZi/lVs8MTVHZ/8s8BNMVM98unXd9iK8V3P+JWVh1XgK/OwWC9210ux
f83GXMc698U7HzJuT1yGYysYpGWrWq5qvavxudzdczyuiRzLV9a/hvWcdRxP
AV+LOYo5LFxrsx7YuPLuDl9xjpe9pnT/GvaYSeVfWfwy39O5PDfBg3wmYb7b
I2f5fJtUnDC8/qae8PYsXxljcUvuIq9tdd4c5Njp+vxYvv/H134V6xjX4sQC
YaQzjtwZxhjvyvhqXDxs+Hn6fbSaeJzLbU95WHX5Tu2809k/8PIPhvtJ1ZzF
scpmr71c76vLXR7XiH2AUr5yzFjE8Nv9NacyVtsji7xKvEHO0/rzMt2bDB89
t79z+vhoP2ffu6q9jquPrfr9v2Dh+eL37VxpPc9UN3i4dd9f/U04v2OvKozE
9x5z3tuq+IoYSf0+yZuP+LqQOWx1no9cg7O+VW0vhrZmkL8bvx9Mn6/smntM
fNDzla3ntt4xmP8ZzN9hPXjJXT2+Yi4b3ku1PycVezSsY4TkubTv9fB7Yvur
sCYwj/P3++Wsdh+h2LvzuS7x+pXiK2Ms1ijYlzWhE8veS0w0/Zotrsz7znHB
8Q1HeK6yfKvaWkE/8nG1iWP5XP351MTjMnxl50ZdPnPXN2e99OdU/9zpezVD
vRnG1A7G82Gqf4qfU/DOeM6cT34/82HWao9lq0fkvITZGrYacUyl8tEs9yrF
V+l4ab9GlONyXB/S7n6Qc7NV3PNsKDaousETX/iOv37HH7YsFTHVNz/tF5pb
Bh5WyHMfYKzd9xtdzXWcG5xnk+ZnlyNJLC32rcbyVV19cv91pGryOjnuG/AV
8ZrHrmM2rCdDfJXPbU/PjzV8hX+V3/M1PecxL7E2Mo+HvobL+9gvZ+X3YvTe
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
9fsa+H1x4vjgLviqOjbo+EqxQSmWzatDXGV7xzL31HhYxBHH7Z8y7tiP/fdO
DtYAX4UcrIR3FddLFj2s9S1zWvMaDzJjhee2igfwnDtsNYKvyD2b4ksen8BX
Of8qPn5TftauOCvFV9M4a798Re0gvUl5/8jB8jV4UxlrU88rF2uEe1J85fko
97g5D4u/N+9qTDyx8W0y85TtiZBjLPIaYAmLOdYylucsGMl7T/COH/a7/vcG
maqWr65ccZ7vBTaFr6wu3GIRoUd6gq82f6y651MdG3R8pdiglBK5w8ypQ2xl
o8bD6vQbndnD8r384rnq6Ze9adDDshysUj5/2cNafZ/HoYaMPjhNLtZBYyy3
rwV5G8QVer7VCL6iP8W02oV5/auc5uYs1twSZ5X4ahxn7d+/Yg8d9s9iPqD2
hdwBajfZZ4e6QuYI+GVKPHZO7vKxRnovGHfBYUO9/m3fnJJ3lfq9XA1hNh/R
fabmg+QYC54g/mRxujF81eGjKwbGEEdN4Ks5cqLifXHoxxrXDu6ar3xskBzV
wFA5vlJsUCqIa9err7t5kKt8j8HaPXO2049zlYMVe+/WZ6AmB8v3/krlnhEf
ydcSttzFY9FXmv07Dhxjuf7LzH/E9pJMVclXoV/Ckpmn9Pfbln+V0644q4av
ajlr3/lXJvMETfRygbt4T9k/B+6ixoD+LnAXtQaeu3bNXg13DbCf/U3Y+9n1
woq9K9/7fSjHnc8x69Hf015X5BjLnwvsB0McqtbLqvafJoxebnuBszbr+dnf
F4fctBC/jFluzVfNvqdbmjdHxQbX45lv+NTivr/6m9nOQelwyfYdy3FVvMdr
7Z45+B3z99vtr9VNHmJlDhYenGer1DCO7McJV1+z545nLHysAxErdJ4VazbP
K/QOvfC2Pk+N4asl7/A6p/Wf2Y1/FYv8Qot7bYOzxvDVEGdx7BwEvsopxV2s
KcZd5MfDtFyrcbxtO9bI/cJ3PC4+W42vZt6UZ6c4rtjkw59/U7M3YM6/Ite8
GC+PGCsVK7T/M3/R9wm/hPPMM9Su+cr2uAl7IZ13U5av8JiI5U3vx9OvHWR/
+eRjLfmGeGcu523utaUTG8xwlcUHFRuUSiI2QBygxFXGVtwyH9X0avj+576z
mKMwxzWGz8HiGpD+EDU5WCnfKvbuQk/3Xg5Wy1eesYgV4tftph9gfn5Ysc/K
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
y1g5Bmdc7TI3zczHqmzVbvXnlZmmtu77KzPV96/NVxffm+edzDA0Dppa1lS+
Suapsc7cJ9nPgPdfrAN9JUM9dHt8cTRPnUD9qu8YOWtwbR356iCpS6cOPzYf
Pvv7XL5a0mN0n3y1NHclO6XmlQwzV7/K1+yDOW7nZ8sYaF6D3Gc5tv9UHW8q
X2WMNLW3qfpVxj9zXVW1+NSsz+edzcz3b8Yf2rn8N5Gv2rkm7hvkuq2p6Szt
N5pt3/7fU/tFra3QXzt1tg/WAy92c7By/Ml+kmPN0rn9lUW63g1nj7OkftXP
V3Nb+z3397LV4nw1UbMa67uR2txoH6w8zkPnme8yPz340k5+Ou/1PrfN56ub
rF/1Vc7K53eLnJV5xjl3t/cbfr98tZlkh7HXJH+e/DH3fuVr5oVP9sDaKF+t
WXewn68qY2Wsao2q803lq4xNdI8/0p+hzVlVg0vNOj0bMo8gY3lT8/3r3sGp
dXF28tXZ3y2b/2lskNNV/UbnssblvYRn55wf/IUXFmWsXH98a8M5WFXX7c/B
yvzNyTHCs1z0w4+8dOu1N87HDnKt187FWvJz52uu8drxwlPKV/dfzLNKzSr3
uE/lx7av2VSf0TZrja+lc3i+OoX6Vd8xcpZ8df1y/difozX0Xs32GD2BfFX1
qyfOPgdz91i28lnOMWEuX82u8TxwT2FqUJWTxub7p09oMlWO1akZVa6ZnH91
TfnK2CDHVNd4S8fM1vQbzfzu834F24wRtv1/2/uaH/vNd0/mq/suvj73pX+/
/LnTb7run1yasaqWlWNRf+77Tear5MfU1zIHo8YMpt7P+vPF+WpyrcK7q37V
l3NTXs/ryFmVpYZylny1jezn2S/m3qO8L90crEdfvr1m4VzeuoF8le0X//Af
uuviparn/VS+Gu0tunLrcslZNrrMXo+d17xqvn/G47q1F0fuHax8le/t+kFs
mK+MDXIT6vpmac5Y0290/3tOrm7tPb7tWjlPP/Ujk3Ow7ruoYT35zFd3rvsy
byHHnSVjhW3Gyq9zXM4xaegew2PkqxoHzHPIeT8/R3JAfr78XHP5Klu+9yTy
1dl2qvmq5Bjb5qy1a72M5ay2L0Obs+SrbSxZT6e/fnTem+wbGTPsekLl3sK2
f8Oe8662ylfv+ODfXa4XtEQy5ty9g1O9RQ/KW481W6/etShfbdaveXds8LL/
lrFBrlnbb3RJxhisYfXyVvLM1v1Gv9XrAdzOwUrfrbl8lTlY7bVIfu7KWEvr
WEM5K/Ws856kL17JRofmq6FaVV77zK/q5uae5aiMj+YYWj9T5vrOzanreuOc
Pe+TyFcPnm79qlVrHxxSz2qzVr5/KGdV31H56nC1VsWa/Nv2y8p7lNxVPeAz
jpg+nl2vqLPc1dW6jpyvMmZVcx2WyBjpbG+Gid6im2SrZpv9vot8tdsfZpux
wVqPyNggx1TXeUvnfK+pYV3e13twr4bb+0ibsdK/cmoO1n0Dc7BaySY5Bi+t
Yw3lrIwb1nrAXdY6+//G6lGjOWtkTlXqVJWpai3F6h2Ye6f617J5LzMmMpev
8njXm692xwC7vhNnP0utz9PVCN5x3vsw54A1c0puWpuz5ub3rMlZb3vkM1ez
lXy1t5pfesj7M5a7sr9nH8rnOLkr71+NMY7VubbIV8kgr7z2X4tfg3xOD+0t
ehP5KvO3tspX7f1RxgY5thy3+z3Op87Na/qN5v7+/dcFHa7xrpmDdV/z63YO
ViuZJPcV1rjaPjmrviePUcffbu3YsyyR1yrZouuJcPGc2i15rJ89cuyu9cL6
9wImD45lkuStuaxcGXlq7vqyfFUZ6qXJDJX/q9bqyM+S1yhj0plDvmas49RU
zso5fMuc1a0F3WQr+Wo/2T/Sy2Cf92VN5qr3b8kY46H5Kr/+5CtvLPr5a2zi
Ts1X2/T4ud3fx9ggN6WbC7qw32iNL42ND7b5KmN3l2vPH1jDatc2aOdgpT/f
2Bysy3x1lmHe+/RXuj5YQ6rPcV6DtbWsoaxV3195ItliZ8zhYqtxphyjK38M
PVa2msM+lUnyc9T9kZP1q4k1cia3XzrvA5YMlfNHm6HymPk52vU6+q9Hsl9e
5zs5V/XlNU9fx8pZa+dnDeWsvL5tzpKv9lN1xnzuKgPv8/4cUuuaGmPs1tuZ
qG1dqV+dbUs/C3XdPJWtuufX1OHa55Z+pqN9G+6gfFXjHjlXpGdi91yMDXJE
yR3VG2pJjsjxY2kNK2PpW6yZ087BqoxV1yRjc7DafJW1nsfO6zkWZUvOzHly
n1rWXN5as7UZL5kv1+FjfRT77+Ncz43qnTq6Rs5FhkotqusN9NOfuJKh5rLg
UK7q99i+W9RnJ/WsrXNW1bPkq/2khpX8mxp15lsmb2VcPce6XIfkmqXeq2Pn
rqExxstc8yt/fZmv2my19B7CfFameotmree5TNh/fmuy16H5KuMe59fjh58z
2rHBB3/7SWOD3Ii1/UYXrZmTXHN2/Zjec4f3G91da6Gdg5V+EENjhG2+yhys
ueuSWnuj1ofdImftk8naXJXMt3R+Uh1Tl47xtuN5eT9rXDLH2TUZqv/65HXL
Zym5KueznN/eLK6jnvWxF16XrzaU65Bca+WaJce91FRT68l7lrHr5K66V3TL
3HXIGGNlmp/98JcXnf/zOczc1LFctea5Lcleb3n4+d3slTV9qlZ0sS3NV1m3
8fBr8ttjgzlPGBvkJtX+uGW/0eSafE2/uMPrvcNr5WR78kPvnMxX9fWTn/2X
xftO9T/Ka5Ks0M8/15Gpam5Srfuxdt73krl09X+trUMN/ezd+mdnOTDPOeem
/N85VyVfJBemXvVmPVb1c9Y+5+O7ue53avI5TV0or3U+u3nv8trnGifXWqcy
xjhVh2+1vUWnctWhuXAse7XjoVey10y+Sm/4LfKVsUFOyZp+o/k6t2ZO9WrY
qt9o2yeuPwer+/8m5rdnm5qDNSbnyYwtJDvkeJXXZyyPrB0rrExVa97nmH7o
3KScE9r3aJ+xy34tKhkqzzFZc2j9s1xP1+v6Zs1TY9bmrJyvUj/J523JmDDX
qz/GmPsy+mOM11Hr6ueatha85DORnJjnd12ZcGn+GspeyVxD9aw2Xx16X5Sx
QU5J9tk1/UazZZ+Z6tXQ5auLGtbLz719g36jt9cL7c/B+vFHP36lhrWTr86e
x4/92udvffN//m+v16Zen4wnJF/kfJljXmo4lbnmtsoqeY1zfM7j5Jidx93q
PJrj/5I8NTaelwyV55ZjeR4rzy/n+TzHXN/3n6fz/zI5R+ezM5azKletHRPm
+PKZHxpjzHuX+RBbjTG2n4m19ew8v3beWdXi8vlr5561+ehY2SvX5VP5Kmvs
HJavVo4NXowPGhvkOuWzVfWPJeNac2vmVLZK7nn3kx/u1l0/tOabtXL6c7By
ffLL73v/bL5KX6k1/WOm5PjVjiUki+S1S92h3ZJTcuzNMS7H4Rwn23pPve5b
yXMZGsusDJXjao6vyVB5fnne9bzy8yRDObdfn8pZef1rfla+5vc5F66tr3I6
+mOMba5ZM8Z4XZ+Jen7JhWPZq7LhdWWvpfnqsN7Uuz1FjQ1yKpb0qGy3qX6j
Vb/Kln6jr770Awf2arinG5fvz8HKPjQ0B+u+K79+8Whzhdv/45jXRNWXfmpO
VM7xlaGqNsfx1HkuOSvvT96bNevKceeoe/lyTdWOMY7Np8/X1MCu+zMxVIeu
7JVrrevKXvn33b2xE/Ov3vV7v3tQvhodG5yoXxkb5BhyLKg50kvmYU31G23H
B5N9PvihRzcdV2/nYP3pH9zXZbip+Vd5LlmP5W4+l9X1c79GxmmSbd+82jHG
5Kmqc5/aeT7nhKXZa27tqDZf9WtY2+Sr3fugMjb49g/8hfsGOQnVB2ppr4Za
b2WufpUtfape/6t7D65hpfbbn4P1hT/+ru66r61hDeWrfedg3UkcJ4Bj6Gev
uZ75S/LVT/3W07f+7ZXvPr8Wz7nitVorZ0neWjk2ePbnxgY5prX9RsdqWP18
lXsJP/rUuw689/Z8Dlath5589coz397Vr5bkqy3nYAFwW2pwc3PLpvJVtrc+
/vmu5pT7CF/4s5/o1gA5r2f1stbANbr7BrkTpF69plfDUL/RNltd6Te6uoZ1
z+X+leuaV5/7zi5T/fpHHu7ueTsfG3xxcnywfq9fI8D2Ds5Xj92uY2XL73Pv
X8YMP/HMO2999XNv7Xr9dNfoXdZq14FeOTb4vvPHNzbIsSXPr+03mn7gk/Wr
i215v9HbmSr7039/+TtufelT93c1sOS0ZKrUq5as79yfg5U53gBsJ3P3F+Wr
rPczML99aLvMWr/6yq23Pf6ZbvwwaxT+zad+qLtWP5/Te36e0FOUO0HyfPaV
Jb2dxvqN9nNVrUn4c0881WWl4TVz7rkcc89+k/0n+1HWpEqmqrnyY5lqSb7K
HKyv/+f/3vRLDHBXWZKvMl93Tb66kree+GKXt2ocMf0cahzxX//y2y7XqDU2
yCnLfWi5139pDavfb3SsfpW/+/SzP7o7ln6RqTLOnrmN+fvcb9hmqsvHmMlV
U/mq/uyzr/7HTb+8AHeV3Fc4N7/90Hw1WNu6GEdMbStzRlK7mh0b1FOUG3Ro
v9GxbLXTb7TJVLkGeeJ3PtD1Yu9nqvP1b168Msdq33z1kee+Zr8C2NCx89WV
7SI7pbY1Vbfq3zeYeyCfff7Pb33s95/qzkH5+vdf+WL39Wv/9I87/6Z+D4fK
PbdZ02VpDavtNzpWv6p+o5mHlS2f5/RuuFKn6m975quxPljmYAFsp7svaqIH
Vjf/6uwc0a1B+J6Xd+a5H5yt2rlWA5lramwwfSaSm5KfshZIev/m9zmn5fyU
a/H6fTIkbCGfu/Q0WVrDynyt1LCmslW7dk6+XqlTbZSvdrcXu/n3eW7ph5ce
edaBAdhGMshcvqqMlX+TnJW57sla9z7y6a6mtVm+mttGxgaToZKnIj29krWy
Za5MsldqDfIVW0oW2aff6FTGGspbs9vafHX2PenLlXn32ZfTXzi96bOvhPFB
gO0syVf9dZ/z+8zdTdb63p//k/2z1op8lbHBoT6Ila9ybsh54tHfeLwbI2zH
DuUrtpRx59R81vYbXZqvFm9L8lUvU+W55Hll/Ybs+9aMAbgeGVdbkq/mslau
0b/nZ/7o1lsefv7W9733C9vmq7N/M3bf4FC+yjys1K2Sr7LJV2xtn36jR8tX
TabKvlmZKs8ldbeMb2ZtVQCuzz75aixr1Thim7UyZ2s0V62oX43d3/SNb77R
Zaj8XcYH8+vkrIwR1vys5C3YSj5ryfo/+cDyfqPZVzLfaft8tZupkuP6mao2
NSuA40kmyT3n6auT+RhTvbD2yVoZk8h19L0PPHuetR7729X1q7GxwZzncq7I
fU/5debn5tft14zlOJ+wtXzesvbB0jHC6je6Zbaq+emVqdIPop+putqZmhXA
jUkeef2fv9GdMzK3JFmrMtPWWavuRezy1YLa1b49RaveZd4u12Ftv9FaM+eQ
XNVmqjxeMlWbp+q5ZHw86/nk2in7tWsMgJuXmk/6/KS3+3ve/0x3DsmxfKva
Vjs/vu5FHMxaF7WtjA26d5xTk9z+0Y9/bqdGtaTf6OJ7By/G/SpTZdw9+85U
psq1Ua6Rsv9mPwbgNOW6N+MKmSOeMYbM4biurLVzL+LM2CDctOSrpf1GKwd1
/UYne1rtZqr8++wn/UxVj5s6czJVroXaTKVmC3D66lhdWStzZCtrJRttOWer
fy+i9QY5Zdkn1vQbHaxhDfRRyL7Qn0tV/UqTqVJXTqbK/mjsD+DukfG6zD9J
1kqPwtxLtWXWSo0s1+WpXbkW55TlHtyl/UbzNfmpstVQb6p+nSqZKmP0yXGp
I7eZyr4BcPeq3gg5z2Q+SrLWvvciJlfl+3MeUbfiTrBPv9HMT1+aqXINk2sZ
cxAB3tySi7KGyNq+D8lVGfNIVoM7Ra4vcj2wpN9oW8caylQZc089uDKV+hQA
Q8b6PrRjgjmn5O9rHTS40+SaYE2/0bY3VWWq1H/zODIVAGv0+z7kfJTxRH0P
udNN9Rsd6vdZn/3UeY2DA3CInIPq2jxZK9fq5pRwt8h1QvUbHctUGTNvM1W7
TwAAsCs5KeN8l72pLnqop66VMfKMlQMAsE5yVLsujUwFAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAcHz/Dwir2bQ=
     "], {{0, 450.}, {450., 0}}, {0, 255},
     ColorFunction->RGBColor,
     ImageResolution->{96., 96.},
     RasterInterpolation->"High"],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSize->{208.92857142855135`, Automatic},
   ImageSizeRaw->{450., 450.},
   PlotRange->{{0, 450.}, {0, 450.}}]], "Input",ExpressionUUID->
  "bf681af3-f64f-384e-bc65-49fa17c143d2"]
}], "Title",
 CellChangeTimes->{{3.952933011881033*^9, 3.95293301368886*^9}, {
  3.952934300374214*^9, 
  3.952934341319477*^9}},ExpressionUUID->"fb717318-f344-1f4f-b221-\
cc450818d27f"],

Cell[CellGroupData[{

Cell["Introduction : ", "Chapter",
 CellChangeTimes->{{3.9529330376565914`*^9, 3.952933051215946*^9}, {
  3.9529343170759983`*^9, 
  3.9529343223467255`*^9}},ExpressionUUID->"c2169d29-b1b9-9b43-a4e5-\
5ffad79c768e"],

Cell[TextData[{
 "Dans le cadre de la SA\[CapitalEAcute] S4.03 \[Dash] \
\[OpenCurlyDoubleQuote]Traitement et visualisation d\[CloseCurlyQuote]un jeu \
de donn\[EAcute]es\[CloseCurlyDoubleQuote] \[Dash] chaque \[EAcute]tudiant \
est invit\[EAcute] \[AGrave] explorer librement un ensemble de \
donn\[EAcute]es \[AGrave] travers une approche descriptive ou \
math\[EAcute]matique, avec une forte attention port\[EAcute]e \[AGrave] la \
qualit\[EAcute] des repr\[EAcute]sentations visuelles.\n\n\
J\[CloseCurlyQuote]ai choisi de m\[CloseCurlyQuote]orienter vers une analyse \
statistique descriptive appliqu\[EAcute]e \[AGrave] un univers riche et \
structur\[EAcute] : l\[CloseCurlyQuote]univers des Pok\[EAcute]mon. Ces cr\
\[EAcute]atures fictives, connues mondialement, sont class\[EAcute]es selon \
plusieurs types (eau, feu, plante, etc.) et caract\[EAcute]ris\[EAcute]es par \
des statistiques de combat (attaque, d\[EAcute]fense, vitesse, etc.).\n\nMa \
probl\[EAcute]matique principale est la suivante :\n\n",
 StyleBox["Peut-on pr\[EAcute]dire le ou les types d\[CloseCurlyQuote]un Pok\
\[EAcute]mon \[AGrave] partir de ses statistiques ?",
  FontWeight->"Bold"],
 "\n \nOu au contraire, ces types sont-ils d\[EAcute]finis de mani\[EGrave]re \
arbitraire par les cr\[EAcute]ateurs, sans lien r\[EAcute]el avec les donn\
\[EAcute]es chiffr\[EAcute]es ?\n\nCe projet propose donc une exploration \
statistique autour de cette id\[EAcute]e : chercher \[AGrave] identifier des \
regroupements naturels dans l\[CloseCurlyQuote]espace des statistiques, via \
des techniques de ",
 StyleBox["clustering",
  IgnoreSpellCheck->True],
 " non supervis\[EAcute] telles que KMeans ou CAH (Classification Ascendante \
Hi\[EAcute]rarchique), et analyser si ces regroupements correspondent ou non \
aux types connus.\n\nL\[CloseCurlyQuote]objectif final est double :\n\n\
Comprendre s\[CloseCurlyQuote]il existe une coh\[EAcute]rence statistique \
entre les types.\n\nExplorer les possibilit\[EAcute]s de pr\[EAcute]diction \
ou d\[CloseCurlyQuote]approximation automatique du type d\[CloseCurlyQuote]un \
Pok\[EAcute]mon via ses caract\[EAcute]ristiques num\[EAcute]riques.\n\nCe \
travail mobilise \[AGrave] la fois des comp\[EAcute]tences en \
pr\[EAcute]paration de donn\[EAcute]es, normalisation, choix de \
m\[EAcute]triques, et bien s\[UHat]r, visualisation pour interpr\[EAcute]ter \
les regroupements obtenus."
}], "Text",
 CellChangeTimes->{
  3.9529387859291096`*^9, {3.952950093329895*^9, 
   3.95295010265876*^9}},ExpressionUUID->"3e08dfeb-c7bb-ed48-9bb1-\
4e31b849324c"],

Cell[CellGroupData[{

Cell["Importation et  pr\[EAcute]paration des donn\[EAcute]es ", "Section",
 CellChangeTimes->{{3.9529330629380474`*^9, 
  3.952933078432476*^9}},ExpressionUUID->"f383a589-1b5c-2a43-b058-\
64513c97c4c8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "\|01f4e5", " ", "Importation", " ", "du", " ", "fichier", " ", 
    "Pok\[EAcute]mon"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"df", " ", "=", " ", 
     RowBox[{"Import", "[", 
      RowBox[{
       RowBox[{"FileNameJoin", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"NotebookDirectory", "[", "]"}], ",", " ", "\"\<pokemon\>\"",
           ",", " ", "\"\<pokemon.csv\>\""}], "}"}], "]"}], ",", 
       " ", "\"\<Dataset\>\""}], "]"}]}], ";"}], "\n", "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"\|01f4ca", " ", "Colonnes", " ", "de", " ", "stats"}], " ", 
    "*)"}], "\n", 
   RowBox[{
    RowBox[{"statsCols", " ", "=", " ", 
     RowBox[{"{", 
      RowBox[{"\"\<hp\>\"", ",", " ", "\"\<attack\>\"", ",", 
       " ", "\"\<defense\>\"", ",", " ", "\"\<sp_attack\>\"", ",", 
       " ", "\"\<sp_defense\>\"", ",", " ", "\"\<speed\>\""}], "}"}]}], ";"}],
    "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"\|01f9f9", " ", 
     RowBox[{"Nettoyage", " ", ":", " ", 
      RowBox[{
      "on", " ", "garde", " ", "seulement", " ", "les", " ", "lignes", " ", 
       "avec", " ", "toutes", " ", "les", " ", "stats", " ", 
       "num\[EAcute]riques"}]}]}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"dfClean", " ", "=", " ", 
     RowBox[{"Select", "[", 
      RowBox[{"df", ",", " ", 
       RowBox[{
        RowBox[{"AllTrue", "[", 
         RowBox[{"statsCols", ",", " ", 
          RowBox[{"Function", "[", 
           RowBox[{"col", ",", " ", 
            RowBox[{"NumericQ", "[", 
             RowBox[{"Lookup", "[", 
              RowBox[{"#", ",", " ", "col", ",", " ", 
               RowBox[{"Missing", "[", "]"}]}], "]"}], "]"}]}], "]"}]}], 
         "]"}], " ", "&"}]}], "]"}]}], ";"}], "\n", "\n", 
   RowBox[{
    RowBox[{"Print", "[", 
     RowBox[{"\"\<\:2705 Donn\[EAcute]es import\[EAcute]es et \
nettoy\[EAcute]es. \>\"", ",", " ", 
      RowBox[{"Length", "[", "dfClean", "]"}], ",", 
      " ", "\"\< Pok\[EAcute]mon valides.\>\""}], "]"}], ";"}], "\n", 
   "\n"}]}]], "Code",
 CellChangeTimes->{
  3.95293308628582*^9, {3.9529345903994637`*^9, 3.952934601303507*^9}, {
   3.9529347377302265`*^9, 3.9529347524117928`*^9}, 3.952936601317068*^9},
 CellLabel->
  "In[181]:=",ExpressionUUID->"1de8c188-4d0d-444a-af79-fde691ca7e29"]
}, Closed]],

Cell[CellGroupData[{

Cell["Visualisation de cluster simple", "Section",
 CellChangeTimes->{{3.9529331141523647`*^9, 
  3.952933119407501*^9}},ExpressionUUID->"5859ff63-110b-964e-8726-\
bf3a2b0c07da"],

Cell["\<\
Ce bloc de code a pour but de r\[EAcute]aliser un test visuel simple du \
clustering KMeans sur trois statistiques : \[OpenCurlyDoubleQuote]hp\
\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]attack\
\[CloseCurlyDoubleQuote] et \[OpenCurlyDoubleQuote]speed\
\[CloseCurlyDoubleQuote], avec un nombre de clusters fix\[EAcute] \
arbitrairement \[AGrave] k = 4.

L\[CloseCurlyQuote]objectif ici n\[CloseCurlyQuote]est pas de \
d\[EAcute]terminer les meilleurs param\[EGrave]tres, mais simplement de :

V\[EAcute]rifier que la proc\[EAcute]dure de standardisation et de clustering \
fonctionne correctement ;

Observer \[AGrave] quoi ressemble un regroupement visuel dans un espace \
\[AGrave] 2 ou 3 dimensions.

Il s\[CloseCurlyQuote]agit donc d\[CloseCurlyQuote]une premi\[EGrave]re exp\
\[EAcute]rimentation exploratoire, sans pr\[EAcute]tention \
d\[CloseCurlyQuote]optimisation, qui servira plus tard \[AGrave] nourrir l\
\[CloseCurlyQuote]outil de visualisation dynamique du projet.\
\>", "Text",
 CellChangeTimes->{
  3.952938998068306*^9},ExpressionUUID->"fa3ae523-93ff-e147-a571-\
1b5265762494"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"\|01f4cc", " ", "Param\[EGrave]tres"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"selectedStats", " ", "=", " ", 
     RowBox[{"{", 
      RowBox[{"\"\<hp\>\"", ",", " ", "\"\<attack\>\"", ",", 
       " ", "\"\<speed\>\""}], "}"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"k", " ", "=", " ", "4"}], ";"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Extraction", " ", "des", " ", "donn\[EAcute]es"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"X", " ", "=", " ", 
     RowBox[{"Normal", "[", 
      RowBox[{"dfClean", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", " ", "selectedStats"}], "]"}], "]"}], "]"}]}], 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"XMatrix", " ", "=", " ", 
     RowBox[{"Values", " ", "/@", " ", "X"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"XStandardized", " ", "=", " ", 
     RowBox[{
      RowBox[{"Standardize", " ", "/@", " ", 
       RowBox[{"Transpose", "[", "XMatrix", "]"}]}], " ", "//", " ", 
      "Transpose"}]}], ";"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Clustering", " ", "KMeans"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"clusters", " ", "=", " ", 
     RowBox[{"FindClusters", "[", 
      RowBox[{"XStandardized", ",", " ", "k", ",", " ", 
       RowBox[{"Method", " ", "->", " ", "\"\<KMeans\>\""}]}], "]"}]}], ";"}],
    "\n", "\n", 
   RowBox[{
    RowBox[{"Print", "[", 
     RowBox[{"\"\<\:2705 Clustering effectu\[EAcute] avec succ\[EGrave]s sur \
\>\"", ",", " ", "selectedStats", ",", " ", "\"\< | k = \>\"", ",", " ", "k", 
      ",", " ", "\"\<.\>\""}], "]"}], ";"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
    "\:2705", " ", "Conversion", " ", "en", " ", "nombres", " ", 
     "r\[EAcute]els"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"pointsByCluster", " ", "=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{"N", ",", " ", "clusters", ",", " ", 
       RowBox[{"{", "2", "}"}]}], "]"}]}], ";"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
    "\|01f5bc\:fe0f", " ", "Affichage", " ", "dynamique", " ", "selon", " ", 
     "le", " ", "nombre", " ", "de", " ", "stats"}], " ", "*)"}], "\n", 
   RowBox[{"Which", "[", "\n", "  ", 
    RowBox[{
     RowBox[{
      RowBox[{"Length", "[", "selectedStats", "]"}], " ", "==", " ", "2"}], ",",
      "\n", "  ", 
     RowBox[{"ListPlot", "[", "\n", "    ", 
      RowBox[{"pointsByCluster", ",", "\n", "    ", 
       RowBox[{"PlotStyle", " ", "->", " ", 
        RowBox[{"PointSize", "[", "Medium", "]"}]}], ",", "\n", "    ", 
       RowBox[{"AxesLabel", " ", "->", " ", "selectedStats"}], ",", "\n", 
       "    ", 
       RowBox[{"PlotLabel", " ", "->", " ", 
        RowBox[{"Style", "[", 
         RowBox[{"\"\<Clustering 2D\>\"", ",", " ", "Bold", ",", " ", "14"}], 
         "]"}]}], ",", "\n", "    ", 
       RowBox[{"PlotLegends", " ", "->", " ", 
        RowBox[{"Placed", "[", 
         RowBox[{"Automatic", ",", " ", "Right"}], "]"}]}]}], "\n", "  ", 
      "]"}], ",", "\n", "  ", "\n", "  ", 
     RowBox[{
      RowBox[{"Length", "[", "selectedStats", "]"}], " ", "==", " ", "3"}], ",",
      "\n", "  ", 
     RowBox[{"Graphics3D", "[", "\n", "    ", 
      RowBox[{
       RowBox[{"Table", "[", "\n", "      ", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"ColorData", "[", "97", "]"}], "[", "i", "]"}], ",", " ", 
           RowBox[{"PointSize", "[", "Medium", "]"}], ",", " ", 
           RowBox[{"Point", "[", 
            RowBox[{"pointsByCluster", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "]"}]}], "}"}], ",", "\n", 
         "      ", 
         RowBox[{"{", 
          RowBox[{"i", ",", " ", 
           RowBox[{"Length", "[", "pointsByCluster", "]"}]}], "}"}]}], "\n", 
        "    ", "]"}], ",", "\n", "    ", 
       RowBox[{"Axes", " ", "->", " ", "True"}], ",", "\n", "    ", 
       RowBox[{"AxesLabel", " ", "->", " ", "selectedStats"}], ",", "\n", 
       "    ", 
       RowBox[{"PlotLabel", " ", "->", " ", 
        RowBox[{"Style", "[", 
         RowBox[{"\"\<Clustering 3D\>\"", ",", " ", "Bold", ",", " ", "14"}], 
         "]"}]}]}], "\n", "  ", "]"}], ",", "\n", "  ", "\n", "  ", "True", ",",
      "\n", "  ", 
     RowBox[{
     "Print", "[", "\"\<\:274c Il faut 2 ou 3 dimensions pour visualiser le \
clustering.\>\"", "]"}]}], "\n", "]"}]}]}]], "Code",
 CellChangeTimes->{3.952933129615494*^9},
 CellLabel->
  "In[194]:=",ExpressionUUID->"a29d5978-6e92-f24c-96c0-2ad368285510"],

Cell["\<\
Ce graphique montre une premi\[EGrave]re visualisation 3D du clustering \
KMeans appliqu\[EAcute] aux statistiques \[OpenCurlyDoubleQuote]hp\
\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]attack\
\[CloseCurlyDoubleQuote] et \[OpenCurlyDoubleQuote]speed\
\[CloseCurlyDoubleQuote]. On observe la formation de groupes distincts dans l\
\[CloseCurlyQuote]espace des caract\[EAcute]ristiques, ce qui sugg\[EGrave]re \
l\[CloseCurlyQuote]existence de structures naturelles parmi les \
Pok\[EAcute]mon selon ces crit\[EGrave]res.\
\>", "Text",
 CellChangeTimes->{{3.952939082689394*^9, 
  3.9529390852319508`*^9}},ExpressionUUID->"8aa77e87-82fa-3f4f-91ff-\
dd73d79a7abd"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Outil de visualisation des clusterings", "Chapter",
 CellChangeTimes->{{3.9529331500647793`*^9, 
  3.952933160991167*^9}},ExpressionUUID->"9b4324f8-61b3-6140-9556-\
c9406131c7dd"],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["Visualistaion",
  IgnoreSpellCheck->True],
 " interactive des clusters "
}], "Section",
 CellChangeTimes->{{3.9529391407762737`*^9, 
  3.9529391501372604`*^9}},ExpressionUUID->"d12f39cc-a1a6-3e4b-bcc8-\
e91b2ed791a1"],

Cell["\<\
L\[CloseCurlyQuote]outil de visualisation d\[EAcute]velopp\[EAcute] dans ce \
projet constitue une interface interactive permettant \
d\[CloseCurlyQuote]explorer les regroupements statistiques form\[EAcute]s par \
diff\[EAcute]rents algorithmes de clustering appliqu\[EAcute]s aux Pok\
\[EAcute]mon. Il repose sur la s\[EAcute]lection libre de deux ou trois \
caract\[EAcute]ristiques num\[EAcute]riques parmi les statistiques de combat \
classiques telles que les points de vie (hp), l\[CloseCurlyQuote]attaque, la \
d\[EAcute]fense ou la vitesse. Gr\[AHat]ce \[AGrave] un menu \
d\[EAcute]roulant, l\[CloseCurlyQuote]utilisateur peut choisir les variables \
qu\[CloseCurlyQuote]il souhaite analyser, le nombre de groupes \[AGrave] g\
\[EAcute]n\[EAcute]rer (k), ainsi que la m\[EAcute]thode de clustering : \
KMeans ou CAH (Classification Ascendante Hi\[EAcute]rarchique).

Cette interface offre \[EAcute]galement des options de filtrage permettant de \
restreindre l\[CloseCurlyQuote]analyse \[AGrave] un type sp\[EAcute]cifique \
de Pok\[EAcute]mon ou de ne consid\[EAcute]rer que les Pok\[EAcute]mon l\
\[EAcute]gendaires ou non l\[EAcute]gendaires. Une fois les \
param\[EGrave]tres d\[EAcute]finis, les donn\[EAcute]es sont automatiquement \
filtr\[EAcute]es, standardis\[EAcute]es, et utilis\[EAcute]es pour \
g\[EAcute]n\[EAcute]rer un clustering. Si deux variables sont \
s\[EAcute]lectionn\[EAcute]es, le r\[EAcute]sultat est affich\[EAcute] dans \
un plan 2D ; si trois sont choisies, un graphique 3D est \
g\[EAcute]n\[EAcute]r\[EAcute], chaque cluster \[EAcute]tant \
repr\[EAcute]sent\[EAcute] par une couleur diff\[EAcute]rente pour faciliter \
la lecture.

L\[CloseCurlyQuote]int\[EAcute]r\[EHat]t de cet outil est de permettre une \
exploration libre et intuitive des structures pr\[EAcute]sentes dans les donn\
\[EAcute]es, et d\[CloseCurlyQuote]observer si certains regroupements \
statistiques semblent correspondre aux types d\[EAcute]finis par les \
concepteurs du jeu.
 En laissant \[AGrave] l\[CloseCurlyQuote]utilisateur la libert\[EAcute] de \
tester diff\[EAcute]rentes combinaisons.\
\>", "Text",
 CellChangeTimes->{
  3.952939256410324*^9, {3.952946943710268*^9, 
   3.9529469549901676`*^9}},ExpressionUUID->"918909d6-469e-5243-9691-\
fb440e6a8519"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"donnees", " ", "=", " ", 
    RowBox[{"Import", "[", 
     RowBox[{
      RowBox[{"FileNameJoin", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"NotebookDirectory", "[", "]"}], ",", " ", "\"\<pokemon\>\"",
          ",", " ", "\"\<pokemon.csv\>\""}], "}"}], "]"}], ",", 
      " ", "\"\<Dataset\>\""}], "]"}]}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"statsColonnes", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{"\"\<hp\>\"", ",", " ", "\"\<attack\>\"", ",", 
     " ", "\"\<defense\>\"", ",", " ", "\"\<sp_attack\>\"", ",", 
     " ", "\"\<sp_defense\>\"", ",", " ", "\"\<speed\>\""}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"typeColonnes", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{"\"\<type1\>\"", ",", " ", "\"\<type2\>\""}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"allTypes", " ", "=", " ", 
   RowBox[{"DeleteDuplicates", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"Values", " ", "/@", " ", 
      RowBox[{"donnees", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", " ", "typeColonnes"}], "]"}], "]"}]}], "]"}], 
    "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"allTypesClean", " ", "=", " ", 
    RowBox[{"DeleteCases", "[", 
     RowBox[{"allTypes", ",", " ", "_Missing"}], "]"}]}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"DynamicModule", "[", "\n", "  ", 
   RowBox[{
    RowBox[{"{", "\n", "    ", 
     RowBox[{
      RowBox[{"stat1", " ", "=", " ", "\"\<None\>\""}], ",", " ", 
      RowBox[{"stat2", " ", "=", " ", "\"\<None\>\""}], ",", " ", 
      RowBox[{"stat3", " ", "=", " ", "\"\<None\>\""}], ",", "\n", "    ", 
      RowBox[{"selectedK", " ", "=", " ", "3"}], ",", " ", 
      RowBox[{"typeFilter", " ", "=", " ", "\"\<Tous\>\""}], ",", " ", 
      RowBox[{"legendaryFilter", " ", "=", " ", "\"\<Tous\>\""}], ",", "\n", 
      "    ", 
      RowBox[{"methodChoice", " ", "=", " ", "\"\<KMeans\>\""}]}], "\n", "  ",
      "}"}], ",", "\n", "  ", "\n", "  ", 
    RowBox[{"Column", "[", 
     RowBox[{"{", "\n", "  ", "\n", "    ", 
      RowBox[{
       RowBox[{"Style", "[", 
        RowBox[{"\"\<\|01f50d Interface interactive de clustering dynamique\>\
\"", ",", " ", "Bold", ",", " ", "16"}], "]"}], ",", "\n", "    ", "\n", 
       "    ", 
       RowBox[{"Row", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<\|01f4ca Statistique 1 : \>\"", ",", " ", 
          RowBox[{"PopupMenu", "[", 
           RowBox[{
            RowBox[{"Dynamic", "[", "stat1", "]"}], ",", " ", 
            RowBox[{"Prepend", "[", 
             RowBox[{"statsColonnes", ",", " ", "\"\<None\>\""}], "]"}]}], 
           "]"}]}], "}"}], "]"}], ",", "\n", "    ", 
       RowBox[{"Row", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<Statistique 2 : \>\"", ",", " ", 
          RowBox[{"PopupMenu", "[", 
           RowBox[{
            RowBox[{"Dynamic", "[", "stat2", "]"}], ",", " ", 
            RowBox[{"Prepend", "[", 
             RowBox[{"statsColonnes", ",", " ", "\"\<None\>\""}], "]"}]}], 
           "]"}]}], "}"}], "]"}], ",", "\n", "    ", 
       RowBox[{"Row", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<Statistique 3 : \>\"", ",", " ", 
          RowBox[{"PopupMenu", "[", 
           RowBox[{
            RowBox[{"Dynamic", "[", "stat3", "]"}], ",", " ", 
            RowBox[{"Prepend", "[", 
             RowBox[{"statsColonnes", ",", " ", "\"\<None\>\""}], "]"}]}], 
           "]"}]}], "}"}], "]"}], ",", "\n", "    ", "\n", "    ", 
       RowBox[{"Row", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<\|01f539 k (nombre de clusters) : \>\"", ",", " ", 
          RowBox[{"Slider", "[", 
           RowBox[{
            RowBox[{"Dynamic", "[", "selectedK", "]"}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"2", ",", " ", "20", ",", " ", "1"}], "}"}]}], "]"}], ",",
           " ", 
          RowBox[{"Dynamic", "[", "selectedK", "]"}]}], "}"}], "]"}], ",", 
       "\n", "    ", "\n", "    ", 
       RowBox[{"Row", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<\|01f527 M\[EAcute]thode : \>\"", ",", " ", 
          RowBox[{"PopupMenu", "[", 
           RowBox[{
            RowBox[{"Dynamic", "[", "methodChoice", "]"}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"\"\<KMeans\>\"", ",", " ", "\"\<CAH\>\""}], "}"}]}], 
           "]"}]}], "}"}], "]"}], ",", "\n", "    ", "\n", "    ", 
       RowBox[{"Row", "[", 
        RowBox[{"{", "\n", "      ", 
         RowBox[{"\"\<\|01f9ec Type : \>\"", ",", "\n", "      ", 
          RowBox[{"PopupMenu", "[", 
           RowBox[{
            RowBox[{"Dynamic", "[", "typeFilter", "]"}], ",", " ", 
            RowBox[{"Prepend", "[", 
             RowBox[{
              RowBox[{"{", "\n", "        ", 
               
               RowBox[{"\"\<grass\>\"", ",", " ", "\"\<water\>\"", ",", 
                " ", "\"\<fire\>\"", ",", " ", "\"\<electric\>\"", ",", 
                " ", "\"\<psychic\>\"", ",", " ", "\"\<ghost\>\"", ",", 
                " ", "\"\<normal\>\"", ",", "\n", 
                "        ", "\"\<fighting\>\"", ",", " ", "\"\<flying\>\"", ",",
                 " ", "\"\<poison\>\"", ",", " ", "\"\<ground\>\"", ",", 
                " ", "\"\<rock\>\"", ",", " ", "\"\<bug\>\"", ",", 
                " ", "\"\<ice\>\"", ",", "\n", "        ", "\"\<dragon\>\"", ",",
                 " ", "\"\<dark\>\"", ",", " ", "\"\<steel\>\"", ",", 
                " ", "\"\<fairy\>\""}], "\n", "      ", "}"}], ",", 
              " ", "\"\<Tous\>\""}], "]"}]}], "]"}]}], "\n", "    ", "}"}], 
        "]"}], ",", "\n", "\t\t    ", "\n", "    ", 
       RowBox[{"Row", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<\:2728 L\[EAcute]gendaire : \>\"", ",", " ", 
          RowBox[{"PopupMenu", "[", 
           RowBox[{
            RowBox[{"Dynamic", "[", "legendaryFilter", "]"}], ",", " ", 
            RowBox[{"{", 
             
             RowBox[{"\"\<Tous\>\"", ",", " ", "\"\<1\>\"", ",", 
              " ", "\"\<0\>\""}], "}"}]}], "]"}]}], "}"}], "]"}], ",", "\n", 
       "    ", "\n", "    ", 
       RowBox[{"Dynamic", "[", "\n", "      ", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "selectedStats", ",", " ", "filtered", ",", " ", "X", ",", " ", 
            "XMatrix", ",", " ", "XStandardized", ",", " ", "clusters", ",", 
            " ", "pointsByCluster"}], "}"}], ",", "\n", "      ", "\n", 
          "        ", 
          RowBox[{
           RowBox[{"selectedStats", " ", "=", " ", 
            RowBox[{"DeleteCases", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"stat1", ",", " ", "stat2", ",", " ", "stat3"}], "}"}],
               ",", " ", "\"\<None\>\""}], "]"}]}], ";", "\n", "        ", 
           "\n", "        ", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"Length", "[", "selectedStats", "]"}], " ", "<", " ", 
               "2"}], " ", "||", " ", 
              RowBox[{
               RowBox[{"Length", "[", "selectedStats", "]"}], " ", ">", " ", 
               "3"}]}], ",", "\n", "          ", 
             RowBox[{"Return", "[", 
              RowBox[{"Style", "[", 
               
               RowBox[{"\"\<\:274c Choisis 2 ou 3 statistiques \
diff\[EAcute]rentes.\>\"", ",", " ", "Red"}], "]"}], "]"}]}], "\n", 
            "        ", "]"}], ";", "\n", "        ", "\n", "        ", 
           RowBox[{"filtered", " ", "=", " ", 
            RowBox[{"Quiet", "@", 
             RowBox[{"Check", "[", 
              RowBox[{
               RowBox[{"Normal", "[", "donnees", "]"}], ",", " ", 
               RowBox[{"{", "}"}]}], "]"}]}]}], ";", "\n", "        ", "\n", 
           "        ", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"typeFilter", " ", "=!=", " ", "\"\<Tous\>\""}], ",", 
             "\n", "          ", 
             RowBox[{"filtered", " ", "=", " ", 
              RowBox[{"Select", "[", 
               RowBox[{"filtered", ",", " ", 
                RowBox[{
                 RowBox[{
                  RowBox[{"#", "[", "\"\<type1\>\"", "]"}], " ", "===", " ", 
                  "typeFilter"}], " ", "&"}]}], "]"}]}]}], "\n", "        ", 
            "]"}], ";", "\n", "        ", "\n", "        ", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"legendaryFilter", " ", "=!=", " ", "\"\<Tous\>\""}], ",",
              "\n", "          ", 
             RowBox[{"filtered", " ", "=", " ", 
              RowBox[{"Select", "[", 
               RowBox[{"filtered", ",", " ", 
                RowBox[{
                 RowBox[{
                  RowBox[{"ToString", "[", 
                   RowBox[{"#", "[", "\"\<is_legendary\>\"", "]"}], "]"}], 
                  " ", "===", " ", "legendaryFilter"}], " ", "&"}]}], 
               "]"}]}]}], "\n", "        ", "]"}], ";", "\n", "        ", 
           "\n", "        ", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", "filtered", "]"}], " ", "<", " ", 
              "selectedK"}], ",", "\n", "          ", 
             RowBox[{"Return", "[", 
              RowBox[{"Style", "[", 
               RowBox[{
                
                RowBox[{"\"\<\:26a0\:fe0f Pas assez de donn\[EAcute]es pour k \
= \>\"", " ", "<>", " ", 
                 RowBox[{"ToString", "[", "selectedK", "]"}]}], ",", " ", 
                "Red"}], "]"}], "]"}]}], "\n", "        ", "]"}], ";", "\n", 
           "        ", "\n", "        ", 
           RowBox[{"X", " ", "=", " ", 
            RowBox[{"filtered", "[", 
             RowBox[{"[", 
              RowBox[{"All", ",", " ", "selectedStats"}], "]"}], "]"}]}], ";",
            "\n", "        ", 
           RowBox[{"XMatrix", " ", "=", " ", 
            RowBox[{"Values", " ", "/@", " ", "X"}]}], ";", "\n", "        ", 
           RowBox[{"XStandardized", " ", "=", " ", 
            RowBox[{"N", "[", 
             RowBox[{"Transpose", "[", 
              RowBox[{"Standardize", " ", "/@", " ", 
               RowBox[{"Transpose", "[", "XMatrix", "]"}]}], "]"}], "]"}]}], ";",
            "\n", "        ", "\n", "\t\t\t", 
           RowBox[{"clusters", " ", "=", " ", 
            RowBox[{"Which", "[", "\n", "\t\t\t  ", 
             RowBox[{
              RowBox[{"methodChoice", " ", "===", " ", "\"\<KMeans\>\""}], ",",
               "\n", "\t\t\t    ", 
              RowBox[{"FindClusters", "[", 
               RowBox[{"XStandardized", ",", " ", "selectedK", ",", " ", 
                RowBox[{"Method", " ", "->", " ", "\"\<KMeans\>\""}]}], "]"}],
               ",", "\n", "\t\t\t", "\n", "\t\t\t  ", 
              RowBox[{"methodChoice", " ", "===", " ", "\"\<CAH\>\""}], ",", 
              "\n", "\t\t\t    ", 
              RowBox[{"FindClusters", "[", 
               RowBox[{"XStandardized", ",", " ", "selectedK", ",", " ", 
                RowBox[{"Method", " ", "->", " ", "\"\<Agglomerate\>\""}]}], 
               "]"}], ",", "\n", "\t\t\t", "\n", "\t\t\t  ", "True", ",", 
              "\n", "\t\t\t    ", 
              RowBox[{"{", "}"}]}], "\n", "\t\t\t", "]"}]}], ";", "\n", "\n", 
           "        ", "\n", "        ", 
           RowBox[{"pointsByCluster", " ", "=", " ", 
            RowBox[{"Map", "[", 
             RowBox[{"N", ",", " ", "clusters", ",", " ", 
              RowBox[{"{", "2", "}"}]}], "]"}]}], ";", "\n", "        ", "\n",
            "        ", 
           RowBox[{"Which", "[", "\n", "          ", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", "selectedStats", "]"}], " ", "==", " ", 
              "2"}], ",", "\n", "          ", 
             RowBox[{"ListPlot", "[", "\n", "            ", 
              RowBox[{
               RowBox[{"Table", "[", 
                RowBox[{
                 RowBox[{"pointsByCluster", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"i", ",", " ", 
                   RowBox[{"Length", "[", "pointsByCluster", "]"}]}], "}"}]}],
                 "]"}], ",", "\n", "            ", 
               RowBox[{"PlotStyle", " ", "->", " ", 
                RowBox[{"Table", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"ColorData", "[", "97", "]"}], "[", "i", "]"}], ",",
                     " ", 
                    RowBox[{"PointSize", "[", "Medium", "]"}]}], "}"}], ",", 
                  " ", 
                  RowBox[{"{", 
                   RowBox[{"i", ",", " ", 
                    RowBox[{"Length", "[", "pointsByCluster", "]"}]}], 
                   "}"}]}], "]"}]}], ",", "\n", "            ", 
               RowBox[{"PlotMarkers", " ", "->", " ", "Automatic"}], ",", 
               "\n", "            ", 
               RowBox[{"AxesLabel", " ", "->", " ", "selectedStats"}], ",", 
               "\n", "            ", 
               RowBox[{"PlotLabel", " ", "->", " ", 
                RowBox[{"Style", "[", 
                 RowBox[{
                  
                  RowBox[{"\"\<Clustering 2D (\>\"", " ", "<>", " ", 
                   "methodChoice", " ", "<>", " ", "\"\<)\>\""}], ",", " ", 
                  "Bold", ",", " ", "14"}], "]"}]}], ",", "\n", 
               "            ", 
               RowBox[{"PlotLegends", " ", "->", " ", 
                RowBox[{"Placed", "[", 
                 RowBox[{"Automatic", ",", " ", "Right"}], "]"}]}]}], "\n", 
              "          ", "]"}], ",", "\n", "          ", "\n", 
             "          ", 
             RowBox[{
              RowBox[{"Length", "[", "selectedStats", "]"}], " ", "==", " ", 
              "3"}], ",", "\n", "          ", 
             RowBox[{"Graphics3D", "[", "\n", "            ", 
              RowBox[{
               RowBox[{"Table", "[", "\n", "              ", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"ColorData", "[", "97", "]"}], "[", "i", "]"}], ",",
                    " ", 
                   RowBox[{"PointSize", "[", "Medium", "]"}], ",", " ", 
                   RowBox[{"Point", "[", 
                    RowBox[{"pointsByCluster", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "]"}]}], "}"}], ",", "\n",
                  "              ", 
                 RowBox[{"{", 
                  RowBox[{"i", ",", " ", 
                   RowBox[{"Length", "[", "pointsByCluster", "]"}]}], "}"}]}],
                 "\n", "            ", "]"}], ",", "\n", "            ", 
               RowBox[{"Axes", " ", "->", " ", "True"}], ",", "\n", 
               "            ", 
               RowBox[{"AxesLabel", " ", "->", " ", "selectedStats"}], ",", 
               "\n", "            ", 
               RowBox[{"PlotLabel", " ", "->", " ", 
                RowBox[{"Style", "[", 
                 RowBox[{
                  
                  RowBox[{"\"\<Clustering 3D (\>\"", " ", "<>", " ", 
                   "methodChoice", " ", "<>", " ", "\"\<)\>\""}], ",", " ", 
                  "Bold", ",", " ", "14"}], "]"}]}]}], "\n", "          ", 
              "]"}], ",", "\n", "          ", "\n", "          ", "True", ",",
              "\n", "          ", 
             RowBox[{"Style", "[", 
              
              RowBox[{"\"\<\:274c Choisis 2 ou 3 statistiques seulement.\>\"",
                ",", " ", "Red"}], "]"}]}], "\n", "        ", "]"}]}]}], "\n",
          "      ", "]"}], "\n", "    ", "]"}]}], "\n", "  ", "}"}], "]"}]}], 
   "\n", "]"}], "\n"}], "\n"}], "Code",
 CellChangeTimes->{
  3.952933175209749*^9, {3.952933212611971*^9, 3.9529332134122524`*^9}, {
   3.9529332554771214`*^9, 3.9529332682904625`*^9}, {3.9529348486032887`*^9, 
   3.9529348500170574`*^9}, {3.952936614551344*^9, 3.9529366449768124`*^9}, {
   3.9529367460574665`*^9, 3.9529367525905666`*^9}, {3.9529368274814034`*^9, 
   3.952936849049864*^9}, {3.952936961938944*^9, 3.952936963214058*^9}, {
   3.952937023666115*^9, 3.9529370370823784`*^9}, {3.952937150466114*^9, 
   3.9529371689892387`*^9}, {3.952937215184721*^9, 3.9529372195015697`*^9}, {
   3.9529372709603577`*^9, 3.9529372750613155`*^9}, {3.952937322398739*^9, 
   3.9529373472462482`*^9}, 3.9529374988346195`*^9, 3.9529376231299477`*^9, {
   3.952937722224291*^9, 3.9529377541966896`*^9}, {3.9529469254122314`*^9, 
   3.9529469263779144`*^9}},
 CellLabel->
  "In[203]:=",ExpressionUUID->"3abfaaa4-9182-8a47-8924-7473566459be"],

Cell["\<\
En CAH, on observe souvent un gros bloc de points regroup\[EAcute]s dans un \
seul cluster, contrairement \[AGrave] KMeans. Cela vient du fait que la CAH \
fonctionne par fusions successives : elle commence par rassembler les points \
les plus proches, ce qui forme rapidement un cluster central tr\[EGrave]s \
dense. Si une grande partie des donn\[EAcute]es est homog\[EGrave]ne, elle \
sera vite fusionn\[EAcute]e, laissant peu de points \[AGrave] \
r\[EAcute]partir dans les autres groupes. KMeans, lui, cherche \[AGrave] r\
\[EAcute]partir les points de mani\[EGrave]re plus \[EAcute]quilibr\[EAcute]e \
autour de centres, ce qui \[EAcute]vite ce d\[EAcute]s\[EAcute]quilibre. \
Ainsi, CAH met en \[EAcute]vidence la structure naturelle des \
donn\[EAcute]es, mais peut cr\[EAcute]er des clusters tr\[EGrave]s \
d\[EAcute]s\[EAcute]quilibr\[EAcute]s visuellement.\
\>", "Text",
 CellChangeTimes->{
  3.9529394442169895`*^9},ExpressionUUID->"5b3c893e-888e-d448-9a98-\
f47a656c1e17"]
}, Closed]],

Cell[CellGroupData[{

Cell["Calcul des meilleurs clusterings ", "Section",
 CellChangeTimes->{{3.9529394935925198`*^9, 
  3.952939501272135*^9}},ExpressionUUID->"f0403bef-14bb-1847-9930-\
40cf752d983e"],

Cell["\<\
Ce bloc de code a pour objectif d\[CloseCurlyQuote]identifier les \
combinaisons de statistiques qui produisent les meilleurs regroupements en \
termes de coh\[EAcute]rence interne, \[AGrave] l\[CloseCurlyQuote]aide d\
\[CloseCurlyQuote]algorithmes de clustering non supervis\[EAcute]s. Pour \
cela, on teste syst\[EAcute]matiquement toutes les combinaisons possibles de \
deux ou trois statistiques parmi les six propos\[EAcute]es (hp, attack, \
defense, sp_attack, sp_defense, speed). Pour chaque combinaison, on applique \
le clustering KMeans (ou CAH si choisi), en faisant varier la valeur de k \
entre 2 et 10. On mesure ensuite la variance intra-cluster, c\
\[CloseCurlyQuote]est-\[AGrave]-dire la dispersion des points autour de leur \
centre de gravit\[EAcute], et on enregistre cette mesure pour chaque essai.

Apr\[EGrave]s avoir effectu\[EAcute] tous les calculs, les r\[EAcute]sultats \
sont tri\[EAcute]s par variance croissante afin de faire ressortir les \
combinaisons les plus compactes, donc potentiellement les plus significatives \
en termes de regroupement.\
\>", "Text",
 CellChangeTimes->{{3.952939691537876*^9, 3.9529397016808567`*^9}, 
   3.952939733319729*^9, 
   3.9529470823743877`*^9},ExpressionUUID->"e1b2f99b-2dfc-014e-b620-\
845850d4e21b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Choix", " ", "des", " ", "stats", " ", "de", " ", "base"}], " ", 
   "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"statsList", " ", "=", " ", 
     RowBox[{"{", 
      RowBox[{"\"\<hp\>\"", ",", " ", "\"\<attack\>\"", ",", 
       " ", "\"\<defense\>\"", ",", " ", "\"\<sp_attack\>\"", ",", 
       " ", "\"\<sp_defense\>\"", ",", " ", "\"\<speed\>\""}], "}"}]}], ";"}],
    "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Donn\[EAcute]es", " ", "filtr\[EAcute]es"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"Xdata", " ", "=", " ", 
     RowBox[{"Normal", "[", "donnees", "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"XdataClean", " ", "=", " ", 
     RowBox[{"Select", "[", 
      RowBox[{"Xdata", ",", " ", 
       RowBox[{
        RowBox[{"FreeQ", "[", 
         RowBox[{"#", ",", " ", "_Missing"}], "]"}], " ", "&"}]}], "]"}]}], 
    ";"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Combinaisons", " ", "de", " ", "stats", " ", "2", " ", "et", " ", "3", " ",
      "\[AGrave]", " ", "tester"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"combinaisons", " ", "=", " ", 
     RowBox[{"Join", "[", "\n", "  ", 
      RowBox[{
       RowBox[{"Subsets", "[", 
        RowBox[{"statsList", ",", " ", 
         RowBox[{"{", "2", "}"}]}], "]"}], ",", "\n", "  ", 
       RowBox[{"Subsets", "[", 
        RowBox[{"statsList", ",", " ", 
         RowBox[{"{", "3", "}"}]}], "]"}]}], "\n", "]"}]}], ";"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"M\[EAcute]thode", " ", "\[AGrave]", " ", 
     RowBox[{"tester", " ", ":", " ", 
      RowBox[{"\"\<KMeans\>\"", " ", "ou", " ", "\"\<CAH\>\""}]}]}], " ", 
    "*)"}], "\n", 
   RowBox[{
    RowBox[{"method", " ", "=", " ", "\"\<KMeans\>\""}], ";"}], " ", 
   RowBox[{"(*", " ", 
    RowBox[{"ou", " ", "\"\<CAH\>\""}], " ", "*)"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"Calcul", " ", "de", " ", "la", " ", "variance", " ", "intra"}], 
     "-", 
     RowBox[{
     "classe", " ", "pour", " ", "chaque", " ", "combinaison", " ", "et", " ",
       "chaque", " ", "k"}]}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"results", " ", "=", " ", 
     RowBox[{
      RowBox[{"Reap", "[", "\n", "  ", 
       RowBox[{"Do", "[", "\n", "    ", 
        RowBox[{
         RowBox[{
          RowBox[{"stats", " ", "=", " ", "combo"}], ";", "\n", "    ", 
          RowBox[{"X", " ", "=", " ", 
           RowBox[{"XdataClean", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", " ", "stats"}], "]"}], "]"}]}], ";", "\n", 
          "    ", 
          RowBox[{"Xmatrix", " ", "=", " ", 
           RowBox[{"N", "[", 
            RowBox[{"Transpose", "[", 
             RowBox[{"Standardize", " ", "/@", " ", 
              RowBox[{"Transpose", "[", 
               RowBox[{"Values", " ", "/@", " ", "X"}], "]"}]}], "]"}], 
            "]"}]}], ";", "\n", "    ", "\n", 
          RowBox[{"Do", "[", "\n", "  ", 
           RowBox[{
            RowBox[{
             RowBox[{"clusters", " ", "=", " ", 
              RowBox[{"Which", "[", "\n", "    ", 
               RowBox[{
                RowBox[{"method", " ", "===", " ", "\"\<KMeans\>\""}], ",", 
                "\n", "      ", 
                RowBox[{"FindClusters", "[", 
                 RowBox[{"Xmatrix", ",", " ", "k", ",", " ", 
                  RowBox[{"Method", " ", "->", " ", "\"\<KMeans\>\""}]}], 
                 "]"}], ",", "\n", "    ", 
                RowBox[{"method", " ", "===", " ", "\"\<CAH\>\""}], ",", "\n",
                 "      ", 
                RowBox[{"Module", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"linkage", ",", " ", "labels"}], "}"}], ",", "\n", 
                  "        ", 
                  RowBox[{
                   RowBox[{"linkage", " ", "=", " ", 
                    RowBox[{"Agglomerate", "[", 
                    RowBox[{"Xmatrix", ",", " ", "\"\<Ward\>\""}], "]"}]}], ";",
                    "\n", "        ", 
                   RowBox[{"labels", " ", "=", " ", 
                    RowBox[{"CutTree", "[", 
                    RowBox[{"linkage", ",", " ", "k"}], "]"}]}], ";", "\n", 
                   "        ", 
                   RowBox[{"Table", "[", "\n", "          ", 
                    RowBox[{
                    RowBox[{"Pick", "[", 
                    RowBox[{"Xmatrix", ",", " ", "labels", ",", " ", "i"}], 
                    "]"}], ",", "\n", "          ", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", " ", "1", ",", " ", "k"}], "}"}]}], 
                    "\n", "        ", "]"}]}]}], "\n", "      ", "]"}], ",", 
                "\n", "    ", "True", ",", "\n", "      ", 
                RowBox[{"{", "}"}]}], "\n", "  ", "]"}]}], ";", "\n", "  ", 
             "\n", "  ", 
             RowBox[{"variance", " ", "=", " ", 
              RowBox[{"Total", "[", "\n", "    ", 
               RowBox[{"Map", "[", "\n", "      ", 
                RowBox[{
                 RowBox[{"Function", "[", 
                  RowBox[{"cluster", ",", "\n", "        ", 
                   RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "cluster", "]"}], " ", "<=", " ", 
                    "1"}], ",", "\n", "          ", "0", ",", "\n", 
                    "          ", 
                    RowBox[{"Total", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Norm", "[", 
                    RowBox[{"#", " ", "-", " ", 
                    RowBox[{"Mean", "[", "cluster", "]"}]}], "]"}], "^", 
                    "2"}], " ", "&"}], " ", "/@", " ", "cluster"}], "]"}]}], 
                    "\n", "        ", "]"}]}], "\n", "      ", "]"}], ",", 
                 "\n", "      ", "clusters"}], "\n", "    ", "]"}], "\n", 
               "  ", "]"}]}], ";", "\n", "\n", "  ", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"MatchQ", "[", 
                RowBox[{"clusters", ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"_List", " ", ".."}], "}"}]}], "]"}], ",", "\n", 
               "    ", 
               RowBox[{"Sow", "[", 
                RowBox[{"{", 
                 RowBox[{
                 "stats", ",", " ", "k", ",", " ", "method", ",", " ", 
                  "variance"}], "}"}], "]"}]}], "\n", "  ", "]"}]}], ",", 
            "\n", "  ", "\n", "  ", 
            RowBox[{"{", 
             RowBox[{"k", ",", " ", "2", ",", " ", "10"}], "}"}]}], "\n", 
           "]"}]}], "\n", ",", "\n", "    ", 
         RowBox[{"{", 
          RowBox[{"combo", ",", " ", "combinaisons"}], "}"}]}], "\n", "  ", 
        "]"}], "\n", "]"}], "[", 
      RowBox[{"[", 
       RowBox[{"2", ",", " ", "1"}], "]"}], "]"}]}], ";"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Trier", " ", "pour", " ", "trouver", " ", "le", " ", "clustering", " ", 
     "optimal"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"sorted", " ", "=", " ", 
     RowBox[{"SortBy", "[", 
      RowBox[{"results", ",", " ", "Last"}], "]"}]}], ";"}], " ", 
   RowBox[{"(*", " ", 
    RowBox[{"par", " ", "variance"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"best", " ", "=", " ", 
     RowBox[{"First", "[", "sorted", "]"}]}], ";"}], "\n", 
   RowBox[{"Print", "[", "best", "]"}], "\n", "\n", "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Trier", " ", "tous", " ", "les", " ", "r\[EAcute]sultats", " ", "par", " ",
      "variance", " ", "croissante"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"sorted", " ", "=", " ", 
     RowBox[{"SortBy", "[", 
      RowBox[{"results", ",", " ", "Last"}], "]"}]}], ";"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"S\[EAcute]parer", " ", "en", " ", "2"}], "-", 
     RowBox[{"stats", " ", "et", " ", "3"}], "-", "stats"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"sorted2Stats", " ", "=", " ", 
     RowBox[{"Select", "[", 
      RowBox[{"sorted", ",", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"#", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "]"}], " ", "==", " ", "2"}], " ", 
        "&"}]}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"sorted3Stats", " ", "=", " ", 
     RowBox[{"Select", "[", 
      RowBox[{"sorted", ",", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"#", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "]"}], " ", "==", " ", "3"}], " ", 
        "&"}]}], "]"}]}], ";"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Prendre", " ", "les", " ", "top", " ", "5", " ", "de", " ", "chaque"}], 
    " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"top102stats", " ", "=", " ", 
     RowBox[{"Take", "[", 
      RowBox[{"sorted2Stats", ",", " ", 
       RowBox[{"UpTo", "[", "5", "]"}]}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"top103stats", " ", "=", " ", 
     RowBox[{"Take", "[", 
      RowBox[{"sorted3Stats", ",", " ", 
       RowBox[{"UpTo", "[", "5", "]"}]}], "]"}]}], ";"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Afficher", " ", "les", " ", "deux", " ", "tableaux", " ", "avec", " ", 
     "variances"}], " ", "*)"}], "\n", 
   RowBox[{"Grid", "[", 
    RowBox[{
     RowBox[{"{", "\n", "  ", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"Style", "[", 
         RowBox[{"\"\<\|01f539 Top 5 clusterings \[AGrave] 2 statistiques\>\"",
           ",", " ", "Bold", ",", " ", "14"}], "]"}], "}"}], ",", "\n", "  ", 
       RowBox[{"{", 
        RowBox[{"TableForm", "[", "\n", "    ", 
         RowBox[{"top102stats", ",", "\n", "    ", 
          RowBox[{"TableHeadings", " ", "->", " ", 
           RowBox[{"{", "\n", "      ", 
            RowBox[{"None", ",", "\n", "      ", 
             RowBox[{"{", 
              
              RowBox[{"\"\<Statistiques\>\"", ",", " ", "\"\<k\>\"", ",", 
               " ", "\"\<M\[EAcute]thode\>\"", ",", 
               " ", "\"\<Variance intra-cluster\>\""}], "}"}]}], "\n", "    ",
             "}"}]}]}], "\n", "  ", "]"}], "}"}], ",", "\n", "  ", 
       RowBox[{"{", 
        RowBox[{"Spacer", "[", "20", "]"}], "}"}], ",", "\n", "  ", 
       RowBox[{"{", 
        RowBox[{"Style", "[", 
         RowBox[{"\"\<\|01f538 Top 5 clusterings \[AGrave] 3 statistiques\>\"",
           ",", " ", "Bold", ",", " ", "14"}], "]"}], "}"}], ",", "\n", "  ", 
       RowBox[{"{", 
        RowBox[{"TableForm", "[", "\n", "    ", 
         RowBox[{"top103stats", ",", "\n", "    ", 
          RowBox[{"TableHeadings", " ", "->", " ", 
           RowBox[{"{", "\n", "      ", 
            RowBox[{"None", ",", "\n", "      ", 
             RowBox[{"{", 
              
              RowBox[{"\"\<Statistiques\>\"", ",", " ", "\"\<k\>\"", ",", 
               " ", "\"\<M\[EAcute]thode\>\"", ",", 
               " ", "\"\<Variance intra-cluster\>\""}], "}"}]}], "\n", "    ",
             "}"}]}]}], "\n", "  ", "]"}], "}"}]}], "\n", "}"}], ",", " ", 
     RowBox[{"Alignment", " ", "->", " ", "Left"}]}], "]"}], "\n"}]}]], "Code",
 CellChangeTimes->{
  3.952937926400835*^9, 3.9529380551213875`*^9, {3.9529381060595703`*^9, 
   3.952938150942484*^9}, {3.952938240641733*^9, 3.952938241749157*^9}, {
   3.9529383471576366`*^9, 3.9529383497696247`*^9}, 3.9529384260334435`*^9, {
   3.952938499804224*^9, 3.952938518682087*^9}, {3.952940176857544*^9, 
   3.952940194056404*^9}},
 CellLabel->
  "In[209]:=",ExpressionUUID->"521266de-849c-0143-9c5b-ecbd302105b1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"hp\"\>", ",", "\<\"sp_attack\"\>"}], "}"}], ",", "10", 
   ",", "\<\"KMeans\"\>", ",", "76.02674206116359`"}], "}"}]], "Print",
 CellChangeTimes->{3.952951775697836*^9},
 CellLabel->
  "Lors de l\[CloseCurlyQuote]\[EAcute]valuation de \
In[209]:=",ExpressionUUID->"8728d1f2-8965-4b14-a4b9-5ba410564d60"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     StyleBox["\<\"\|01f539 Top 5 clusterings \[AGrave] 2 statistiques\"\>",
      StripOnInput->False,
      FontSize->14,
      FontWeight->Bold]},
    {
     InterpretationBox[GridBox[{
        {"\<\"Statistiques\"\>", "\<\"k\"\>", "\<\"M\[EAcute]thode\"\>", \
"\<\"Variance intra-cluster\"\>"},
        {GridBox[{
           {"\<\"hp\"\>"},
           {"\<\"sp_attack\"\>"}
          },
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.7]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[0.1]}, 
              Offset[0.2]}}], "10", "\<\"KMeans\"\>", "76.02674206116359`"},
        {GridBox[{
           {"\<\"hp\"\>"},
           {"\<\"attack\"\>"}
          },
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.7]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[0.1]}, 
              Offset[0.2]}}], "10", "\<\"KMeans\"\>", "78.33239452798942`"},
        {GridBox[{
           {"\<\"attack\"\>"},
           {"\<\"speed\"\>"}
          },
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.7]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[0.1]}, 
              Offset[0.2]}}], "10", "\<\"KMeans\"\>", "82.79978417416501`"},
        {GridBox[{
           {"\<\"defense\"\>"},
           {"\<\"sp_attack\"\>"}
          },
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.7]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[0.1]}, 
              Offset[0.2]}}], "10", "\<\"KMeans\"\>", "82.93347213461952`"},
        {GridBox[{
           {"\<\"attack\"\>"},
           {"\<\"sp_attack\"\>"}
          },
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.7]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[0.1]}, 
              Offset[0.2]}}], "10", "\<\"KMeans\"\>", "83.01644709513342`"}
       },
       GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[2.0999999999999996`]}, 
           Offset[0.27999999999999997`]}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}}],
      TableForm[{{{"hp", "sp_attack"}, 10, "KMeans", 76.02674206116359}, {{
         "hp", "attack"}, 10, "KMeans", 78.33239452798942}, {{
         "attack", "speed"}, 10, "KMeans", 82.79978417416501}, {{
         "defense", "sp_attack"}, 10, "KMeans", 82.93347213461952}, {{
         "attack", "sp_attack"}, 10, "KMeans", 83.01644709513342}}, 
       TableHeadings -> {
        None, {"Statistiques", "k", "M\[EAcute]thode", 
          "Variance intra-cluster"}}]]},
    {
     TemplateBox[{20},
      "Spacer1"]},
    {
     StyleBox["\<\"\|01f538 Top 5 clusterings \[AGrave] 3 statistiques\"\>",
      StripOnInput->False,
      FontSize->14,
      FontWeight->Bold]},
    {
     InterpretationBox[GridBox[{
        {"\<\"Statistiques\"\>", "\<\"k\"\>", "\<\"M\[EAcute]thode\"\>", \
"\<\"Variance intra-cluster\"\>"},
        {GridBox[{
           {"\<\"hp\"\>"},
           {"\<\"attack\"\>"},
           {"\<\"sp_attack\"\>"}
          },
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.7]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[0.1]}, 
              Offset[0.2]}}], "10", "\<\"KMeans\"\>", "206.2974899084855`"},
        {GridBox[{
           {"\<\"hp\"\>"},
           {"\<\"attack\"\>"},
           {"\<\"defense\"\>"}
          },
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.7]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[0.1]}, 
              Offset[0.2]}}], "10", "\<\"KMeans\"\>", "211.49913320061393`"},
        {GridBox[{
           {"\<\"attack\"\>"},
           {"\<\"defense\"\>"},
           {"\<\"sp_defense\"\>"}
          },
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.7]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[0.1]}, 
              Offset[0.2]}}], "10", "\<\"KMeans\"\>", "214.59059138963215`"},
        {GridBox[{
           {"\<\"hp\"\>"},
           {"\<\"defense\"\>"},
           {"\<\"sp_attack\"\>"}
          },
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.7]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[0.1]}, 
              Offset[0.2]}}], "10", "\<\"KMeans\"\>", "214.86430860119722`"},
        {GridBox[{
           {"\<\"defense\"\>"},
           {"\<\"sp_attack\"\>"},
           {"\<\"sp_defense\"\>"}
          },
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.7]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[0.1]}, 
              Offset[0.2]}}], "10", "\<\"KMeans\"\>", "219.72345124659387`"}
       },
       GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[2.0999999999999996`]}, 
           Offset[0.27999999999999997`]}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}}],
      TableForm[{{{"hp", "attack", "sp_attack"}, 10, "KMeans", 
         206.2974899084855}, {{"hp", "attack", "defense"}, 10, "KMeans", 
         211.49913320061393`}, {{"attack", "defense", "sp_defense"}, 10, 
         "KMeans", 214.59059138963215`}, {{"hp", "defense", "sp_attack"}, 10, 
         "KMeans", 214.86430860119722`}, {{
         "defense", "sp_attack", "sp_defense"}, 10, "KMeans", 
         219.72345124659387`}}, 
       TableHeadings -> {
        None, {"Statistiques", "k", "M\[EAcute]thode", 
          "Variance intra-cluster"}}]]}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{3.952951775710279*^9},
 CellLabel->
  "Out[223]=",ExpressionUUID->"de932296-7258-4c29-af22-e6ad14b214ce"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Test d\[CloseCurlyQuote]hypoth\[EGrave]se de avec les clusterings ", \
"Section",
 CellChangeTimes->{{3.9529439054181385`*^9, 3.952943912873823*^9}, {
  3.952945739918953*^9, 
  3.9529457587565594`*^9}},ExpressionUUID->"5d7c68a1-bfd0-7147-baa0-\
2b90c45f9923"],

Cell[CellGroupData[{

Cell["\<\
Analyse de la r\[EAcute]partition des types selon les clusters obtenus par \
KMeans\
\>", "Subsubsection",
 CellChangeTimes->{
  3.9529458117649155`*^9},ExpressionUUID->"413630dc-b0f0-e343-ac64-\
d025deee82d7"],

Cell["\<\
Cette fonction  permet d\[CloseCurlyQuote]examiner si les regroupements cr\
\[EAcute]\[EAcute]s par l\[CloseCurlyQuote]algorithme de clustering non \
supervis\[EAcute] KMeans \[AGrave] partir des statistiques de combat des Pok\
\[EAcute]mon (comme leurs points de vie, attaque sp\[EAcute]ciale, etc.) \
correspondent ou non \[AGrave] une r\[EAcute]partition coh\[EAcute]rente \
selon les types de Pok\[EAcute]mon (comme feu, plante, eau\[Ellipsis]).

Dans le contexte du projet, cette fonction joue un r\[OHat]le cl\[EAcute] \
dans l\[CloseCurlyQuote]analyse exploratoire. Elle aide \[AGrave] \
v\[EAcute]rifier s\[CloseCurlyQuote]il existe un lien ou une \
coh\[EAcute]rence statistique entre les groupes form\[EAcute]s par l\
\[CloseCurlyQuote]algorithme et les types d\[EAcute]finis dans les donn\
\[EAcute]es originales. Concr\[EGrave]tement, elle prend en entr\[EAcute]e un \
ensemble de statistiques (par exemple {\[OpenCurlyDoubleQuote]hp\
\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]sp_attack\
\[CloseCurlyDoubleQuote]}) ainsi qu\[CloseCurlyQuote]un nombre de clusters k, \
puis elle applique un clustering KMeans sur les Pok\[EAcute]mon. Une fois les \
clusters form\[EAcute]s, elle calcule la r\[EAcute]partition en pourcentage \
de chaque type dans chaque cluster, ce qui permet d\[CloseCurlyQuote]observer \
si certains types sont sur-repr\[EAcute]sent\[EAcute]s dans certains groupes.

On utilise ici bien sur le meilleur clustering obtenu dans la section juste \
au dessus.\
\>", "Text",
 CellChangeTimes->{{3.9529458649542904`*^9, 3.9529459364716644`*^9}, 
   3.952947310732916*^9},ExpressionUUID->"d8a61598-23b9-0c4f-9a24-\
ccf341f9b981"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"TypeDistributionTable", "[", 
     RowBox[{"stats_List", ",", " ", "k_Integer"}], "]"}], " ", ":=", " ", 
    RowBox[{"Module", "[", "\n", "  ", 
     RowBox[{
      RowBox[{"{", "\n", "    ", 
       RowBox[{
       "donnees", ",", " ", "clean", ",", " ", "X", ",", " ", "XMatrix", ",", 
        " ", "XStandardized", ",", " ", "clusters", ",", " ", "types", ",", 
        "\n", "    ", "clusteredTypes", ",", " ", "percentByCluster", ",", 
        " ", "allTypes", ",", " ", "formattedTable", ",", " ", 
        "heatmapMatrix"}], "\n", "  ", "}"}], ",", "\n", "\n", "  ", 
      RowBox[{"(*", " ", 
       RowBox[{"\|01f4e5", " ", "Chargement", " ", "et", " ", "nettoyage"}], 
       " ", "*)"}], "\n", "  ", 
      RowBox[{
       RowBox[{"donnees", " ", "=", " ", 
        RowBox[{"Import", "[", 
         RowBox[{
          RowBox[{"FileNameJoin", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"NotebookDirectory", "[", "]"}], ",", 
             " ", "\"\<pokemon\>\"", ",", " ", "\"\<pokemon.csv\>\""}], "}"}],
            "]"}], ",", " ", "\"\<Dataset\>\""}], "]"}]}], ";", "\n", "  ", 
       RowBox[{"clean", " ", "=", " ", 
        RowBox[{"Select", "[", 
         RowBox[{
          RowBox[{"Normal", "[", "donnees", "]"}], ",", " ", 
          RowBox[{
           RowBox[{"FreeQ", "[", 
            RowBox[{"#", ",", " ", "_Missing"}], "]"}], " ", "&"}]}], "]"}]}],
        ";", "\n", "\n", "\n", "  ", "\n", "  ", 
       RowBox[{"X", " ", "=", " ", 
        RowBox[{"clean", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", " ", "stats"}], "]"}], "]"}]}], ";", "\n", "  ", 
       RowBox[{"XMatrix", " ", "=", " ", 
        RowBox[{"Values", " ", "/@", " ", "X"}]}], ";", "\n", "  ", 
       RowBox[{"XStandardized", " ", "=", " ", 
        RowBox[{"N", "@", 
         RowBox[{"Transpose", "[", 
          RowBox[{"Standardize", " ", "/@", " ", 
           RowBox[{"Transpose", "[", "XMatrix", "]"}]}], "]"}]}]}], ";", "\n",
        "\n", "\n", "  ", "\n", "  ", 
       RowBox[{"clusters", " ", "=", " ", 
        RowBox[{"ClusteringComponents", "[", 
         RowBox[{"XStandardized", ",", " ", "k", ",", " ", 
          RowBox[{"Method", " ", "->", " ", "\"\<KMeans\>\""}]}], "]"}]}], ";",
        "\n", "\n", "\n", "  ", "\n", "  ", 
       RowBox[{"types", " ", "=", " ", 
        RowBox[{"clean", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", " ", "\"\<type1\>\""}], "]"}], "]"}]}], ";", 
       "\n", "\n", "  ", "\n", "  ", "\n", "  ", 
       RowBox[{"clusteredTypes", " ", "=", " ", 
        RowBox[{"Table", "[", "\n", "    ", 
         RowBox[{
          RowBox[{"types", "[", 
           RowBox[{"[", 
            RowBox[{"Flatten", "[", 
             RowBox[{"Position", "[", 
              RowBox[{"clusters", ",", " ", "i"}], "]"}], "]"}], "]"}], "]"}],
           ",", "\n", "    ", 
          RowBox[{"{", 
           RowBox[{"i", ",", " ", "1", ",", " ", "k"}], "}"}]}], "\n", "  ", 
         "]"}]}], ";", "\n", "\n", "  ", "\n", "  ", "\n", "  ", 
       RowBox[{"percentByCluster", " ", "=", " ", 
        RowBox[{"Table", "[", "\n", "    ", 
         RowBox[{
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"dist", " ", "=", " ", 
               RowBox[{"Tally", "[", 
                RowBox[{"clusteredTypes", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], "]"}]}], ",", " ", "total", ",",
               " ", "assoc"}], "}"}], ",", "\n", "      ", 
            RowBox[{
             RowBox[{"total", " ", "=", " ", 
              RowBox[{"Total", "[", 
               RowBox[{"dist", "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", " ", "2"}], "]"}], "]"}], "]"}]}], ";", 
             "\n", "      ", 
             RowBox[{"assoc", " ", "=", " ", 
              RowBox[{"Association", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"#1", " ", "->", " ", 
                  RowBox[{"Round", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"#2", "/", "total"}], "*", "100"}], ",", " ", 
                    "0.1"}], "]"}]}], " ", "&"}], " ", "@@@", " ", "dist"}], 
               "]"}]}], ";", "\n", "      ", 
             RowBox[{"KeySort", "[", "assoc", "]"}]}]}], "\n", "    ", "]"}], 
          ",", "\n", "    ", 
          RowBox[{"{", 
           RowBox[{"i", ",", " ", "1", ",", " ", "k"}], "}"}]}], "\n", "  ", 
         "]"}]}], ";", "\n", "\n", " ", "\n", "  ", "\n", "  ", 
       RowBox[{"allTypes", " ", "=", " ", 
        RowBox[{"Union", "[", 
         RowBox[{"Flatten", "[", 
          RowBox[{"Keys", " ", "/@", " ", "percentByCluster"}], "]"}], 
         "]"}]}], ";", "\n", "\n", "\n", "  ", "\n", "  ", 
       RowBox[{"heatmapMatrix", " ", "=", " ", 
        RowBox[{"Table", "[", "\n", "    ", 
         RowBox[{
          RowBox[{"Lookup", "[", 
           RowBox[{
            RowBox[{"percentByCluster", "[", 
             RowBox[{"[", "i", "]"}], "]"}], ",", " ", "type", ",", " ", 
            "0"}], "]"}], ",", "\n", "    ", 
          RowBox[{"{", 
           RowBox[{"i", ",", " ", "1", ",", " ", "k"}], "}"}], ",", "\n", 
          "    ", 
          RowBox[{"{", 
           RowBox[{"type", ",", " ", "allTypes"}], "}"}]}], "\n", "  ", 
         "]"}]}], ";", "\n", "\n", "\n", "\n", "\n", "  ", 
       RowBox[{"formattedTable", " ", "=", " ", 
        RowBox[{"Prepend", "[", "\n", "    ", 
         RowBox[{
          RowBox[{"Table", "[", "\n", "      ", 
           RowBox[{
            RowBox[{"With", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"assoc", " ", "=", " ", 
                RowBox[{"percentByCluster", "[", 
                 RowBox[{"[", "i", "]"}], "]"}]}], "}"}], ",", "\n", 
              "        ", 
              RowBox[{"Prepend", "[", 
               RowBox[{
                RowBox[{"Lookup", "[", 
                 RowBox[{"assoc", ",", " ", "allTypes", ",", " ", "0"}], 
                 "]"}], ",", " ", 
                RowBox[{"\"\<Cluster \>\"", " ", "<>", " ", 
                 RowBox[{"ToString", "[", "i", "]"}]}]}], "]"}]}], "\n", 
             "      ", "]"}], ",", "\n", "      ", 
            RowBox[{"{", 
             RowBox[{"i", ",", " ", "1", ",", " ", "k"}], "}"}]}], "\n", 
           "    ", "]"}], ",", "\n", "    ", 
          RowBox[{"Prepend", "[", 
           RowBox[{"allTypes", ",", " ", "\"\<Cluster\>\""}], "]"}]}], "\n", 
         "  ", "]"}]}], ";", "\n", "\n", "\n", "\n", "\n", "  ", 
       RowBox[{"Column", "[", 
        RowBox[{"{", "\n", "    ", 
         RowBox[{
          RowBox[{"Style", "[", "\n", "      ", 
           RowBox[{
            
            RowBox[{"\"\<\|01f4ca R\[EAcute]partition des types \[LongDash] \
Stats : \>\"", " ", "<>", " ", 
             RowBox[{"StringJoin", "[", 
              RowBox[{"Riffle", "[", 
               RowBox[{"stats", ",", " ", "\"\<, \>\""}], "]"}], "]"}], " ", "<>",
              " ", "\"\< | k = \>\"", " ", "<>", " ", 
             RowBox[{"ToString", "[", "k", "]"}]}], ",", "\n", "      ", 
            "Bold", ",", " ", "16", ",", " ", "Blue"}], "\n", "    ", "]"}], ",",
           "\n", "    ", 
          RowBox[{"Grid", "[", 
           RowBox[{"formattedTable", ",", " ", 
            RowBox[{"Frame", " ", "->", " ", "All"}], ",", " ", 
            RowBox[{"ItemStyle", " ", "->", " ", 
             RowBox[{"Directive", "[", 
              RowBox[{
               RowBox[{"FontFamily", " ", "->", " ", "\"\<Helvetica\>\""}], ",",
                " ", "13"}], "]"}]}]}], "]"}], ",", "\n", "    ", 
          RowBox[{"Spacer", "[", "20", "]"}], ",", "\n", "    ", 
          RowBox[{"Style", "[", 
           
           RowBox[{"\"\<\|01f525 Heatmap des pourcentages par type et cluster\
\>\"", ",", " ", "Bold", ",", " ", "14", ",", " ", 
            RowBox[{"Darker", "[", "Red", "]"}]}], "]"}], ",", "\n", "    ", 
          RowBox[{"MatrixPlot", "[", "\n", "      ", 
           RowBox[{"heatmapMatrix", ",", "\n", "      ", 
            RowBox[{"ColorFunction", " ", "->", " ", "\"\<Rainbow\>\""}], ",",
             "\n", "      ", 
            RowBox[{"FrameTicks", " ", "->", " ", 
             RowBox[{"{", "\n", "        ", 
              RowBox[{
               RowBox[{"Table", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"i", ",", " ", 
                   RowBox[{"\"\<Cluster \>\"", " ", "<>", " ", 
                    RowBox[{"ToString", "[", "i", "]"}]}]}], "}"}], ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"i", ",", " ", "k"}], "}"}]}], "]"}], ",", "\n", 
               "        ", 
               RowBox[{"Table", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"j", ",", " ", 
                   RowBox[{"allTypes", "[", 
                    RowBox[{"[", "j", "]"}], "]"}]}], "}"}], ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"j", ",", " ", 
                   RowBox[{"Length", "[", "allTypes", "]"}]}], "}"}]}], 
                "]"}]}], "\n", "      ", "}"}]}], ",", "\n", "      ", 
            RowBox[{"FrameLabel", " ", "->", " ", 
             RowBox[{"{", "\n", "        ", 
              RowBox[{
               RowBox[{"Style", "[", 
                
                RowBox[{"\"\<Clusters\>\"", ",", " ", "Bold", ",", " ", 
                 "12"}], "]"}], ",", "\n", "        ", 
               RowBox[{"Style", "[", 
                RowBox[{"\"\<Types\>\"", ",", " ", "Bold", ",", " ", "12"}], 
                "]"}]}], "\n", "      ", "}"}]}], ",", "\n", "      ", 
            RowBox[{"ImageSize", " ", "->", " ", "Large"}], ",", "\n", 
            "      ", 
            RowBox[{"Mesh", " ", "->", " ", "True"}], ",", "\n", "      ", 
            RowBox[{"PlotLegends", " ", "->", " ", "Automatic"}]}], "\n", 
           "    ", "]"}]}], "\n", "  ", "}"}], "]"}]}]}], "\n", "]"}]}], 
   ";"}], "\n", "\n"}], "\n", 
 RowBox[{
  RowBox[{"TypeDistributionTable", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\"\<hp\>\"", ",", " ", "\"\<sp_attack\>\""}], "}"}], ",", " ", 
    "10"}], "]"}], "\n", "\n", "\n"}], "\n"}], "Code",
 CellChangeTimes->{
  3.952943927188797*^9, {3.9529439638104916`*^9, 3.95294396416453*^9}, {
   3.9529441118034897`*^9, 3.9529441119381256`*^9}, {3.9529442702822647`*^9, 
   3.9529442704529095`*^9}, {3.952944355740265*^9, 3.9529443617516365`*^9}, {
   3.952944568619135*^9, 3.952944583374874*^9}, {3.9529446291385307`*^9, 
   3.9529447023064194`*^9}, {3.9529447591354656`*^9, 3.95294485265938*^9}, {
   3.952944885457775*^9, 3.952944978377159*^9}, {3.9529450374276505`*^9, 
   3.952945121175106*^9}, 3.952945188617895*^9, 3.95294524199209*^9, 
   3.9529452793215847`*^9, 3.9529455001523113`*^9, 3.952945605224619*^9, {
   3.952945696980057*^9, 3.952945723480791*^9}, {3.9529459520812016`*^9, 
   3.952945958080347*^9}, {3.952947467159769*^9, 3.95294746755517*^9}, {
   3.952947521834385*^9, 3.952947523613947*^9}, {3.952947559596241*^9, 
   3.9529475640863705`*^9}, {3.952947605680727*^9, 3.952947627439972*^9}, {
   3.9529476660396423`*^9, 3.952947712208191*^9}, 3.9529478124559975`*^9, {
   3.952947843038685*^9, 3.9529478675923367`*^9}, {3.952951799307489*^9, 
   3.9529518005330153`*^9}},
 CellLabel->
  "In[226]:=",ExpressionUUID->"0c30bb8f-5ade-7f43-a89b-a9988c63cbea"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     StyleBox["\<\"\|01f4ca R\[EAcute]partition des types \[LongDash] Stats : \
hp, sp_attack | k = 10\"\>",
      StripOnInput->False,
      LineColor->RGBColor[0, 0, 1],
      FrontFaceColor->RGBColor[0, 0, 1],
      BackFaceColor->RGBColor[0, 0, 1],
      GraphicsColor->RGBColor[0, 0, 1],
      FontSize->16,
      FontWeight->Bold,
      FontColor->RGBColor[0, 0, 1]]},
    {
     TagBox[GridBox[{
        {"\<\"Cluster\"\>", "\<\"bug\"\>", "\<\"dark\"\>", "\<\"dragon\"\>", \
"\<\"electric\"\>", "\<\"fairy\"\>", "\<\"fighting\"\>", "\<\"fire\"\>", \
"\<\"flying\"\>", "\<\"ghost\"\>", "\<\"grass\"\>", "\<\"ground\"\>", \
"\<\"ice\"\>", "\<\"normal\"\>", "\<\"poison\"\>", "\<\"psychic\"\>", \
"\<\"rock\"\>", "\<\"steel\"\>", "\<\"water\"\>"},
        {"\<\"Cluster 1\"\>", "1.3`", "1.3`", "5.1000000000000005`", "1.3`", 
         "1.3`", "2.6`", "3.8000000000000003`", "0", "1.3`", 
         "56.400000000000006`", "1.3`", "2.6`", "2.6`", "2.6`", "0", 
         "3.8000000000000003`", "0", "12.8`"},
        {"\<\"Cluster 2\"\>", "9.`", "2.2`", "0.9`", "1.2000000000000002`", 
         "0.30000000000000004`", "0.6000000000000001`", "2.8000000000000003`",
          "0", "3.1`", "55.900000000000006`", "1.2000000000000002`", 
         "1.2000000000000002`", "5.300000000000001`", "2.2`", "1.6`", 
         "3.4000000000000004`", "2.5`", "6.5`"},
        {"\<\"Cluster 3\"\>", "7.300000000000001`", "5.1000000000000005`", 
         "0.9`", "0.9`", "0", "0.4`", "0", "0.4`", "3.`", 
         "53.800000000000004`", "3.`", "1.3`", "8.5`", "3.`", "0.4`", 
         "3.4000000000000004`", "3.`", "5.6000000000000005`"},
        {"\<\"Cluster 4\"\>", "4.2`", "0", "4.2`", "4.2`", "0", "0", "8.3`", 
         "0", "4.2`", "50.`", "0", "0", "4.2`", "0", "0", "4.2`", "4.2`", 
         "12.5`"},
        {"\<\"Cluster 5\"\>", "5.7`", "2.5`", "2.5`", "0", "0.8`", "0", 
         "4.9`", "1.6`", "5.7`", "54.900000000000006`", "1.6`", "1.6`", 
         "3.3000000000000003`", "2.5`", "2.5`", "2.5`", "0", "7.4`"},
        {"\<\"Cluster 6\"\>", "14.8`", "1.4000000000000001`", "0", "0", "0", 
         "0.7000000000000001`", "0", "0.7000000000000001`", 
         "0.7000000000000001`", "54.2`", "2.1`", "0.7000000000000001`", 
         "9.200000000000001`", "2.8000000000000003`", "3.5`", "4.2`", 
         "0.7000000000000001`", "4.2`"},
        {"\<\"Cluster 7\"\>", "4.6000000000000005`", "1.5`", "1.5`", "0.8`", 
         "0", "0.8`", "5.4`", "0", "1.5`", "56.900000000000006`", "1.5`", 
         "0.8`", "9.200000000000001`", "3.1`", "0", "3.1`", "0", 
         "9.200000000000001`"},
        {"\<\"Cluster 8\"\>", "1.7000000000000002`", "5.2`", 
         "3.4000000000000004`", "0", "0", "1.7000000000000002`", "8.6`", "0", 
         "0", "55.2`", "6.9`", "3.4000000000000004`", "5.2`", "0", "0", "0", 
         "0", "8.6`"},
        {"\<\"Cluster 9\"\>", "7.1000000000000005`", "2.5`", "1.3`", "1.3`", 
         "0.4`", "1.7000000000000002`", "3.4000000000000004`", "0", "0.4`", 
         "56.300000000000004`", "1.3`", "2.1`", "2.1`", "2.9000000000000004`",
          "2.9000000000000004`", "5.`", "1.3`", "8.`"},
        {"\<\"Cluster 10\"\>", "0", "0", "0", "0", "0", "0", "0", "0", "25.`",
          "50.`", "0", "0", "12.5`", "0", "12.5`", "0", "0", "0"}
       },
       AutoDelete->False,
       GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
       GridBoxItemStyle->{"Columns" -> {{
            Directive[FontFamily -> "Helvetica", 13]}}, "Rows" -> {{
            Directive[FontFamily -> "Helvetica", 13]}}}],
      "Grid"]},
    {
     TemplateBox[{20},
      "Spacer1"]},
    {
     StyleBox["\<\"\|01f525 Heatmap des pourcentages par type et cluster\"\>",
      StripOnInput->False,
      LineColor->RGBColor[
        Rational[2, 3], 0, 0],
      FrontFaceColor->RGBColor[
        Rational[2, 3], 0, 0],
      BackFaceColor->RGBColor[
        Rational[2, 3], 0, 0],
      GraphicsColor->RGBColor[
        Rational[2, 3], 0, 0],
      FontSize->14,
      FontWeight->Bold,
      FontColor->RGBColor[
        Rational[2, 3], 0, 0]]},
    {
     TemplateBox[{
       GraphicsBox[{
         RasterBox[CompressedData["
1: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
ayhf5vFBKwutdAtvmen+FW+pPmHNtuIfuduBPw==
          "], {{0, 0}, {18, 10}}, {0, 1}], {{Antialiasing -> False, 
           GrayLevel[
            NCache[-1 + GoldenRatio, 0.6180339887498949]], 
           
           LineBox[{{{0, 10}, {18, 10}}, {{0, 9}, {18, 9}}, {{0, 8}, {18, 
            8}}, {{0, 7}, {18, 7}}, {{0, 6}, {18, 6}}, {{0, 5}, {18, 5}}, {{0,
             4}, {18, 4}}, {{0, 3}, {18, 3}}, {{0, 2}, {18, 2}}, {{0, 1}, {18,
             1}}, {{0, 0}, {18, 0}}}]}, {Antialiasing -> False, 
           GrayLevel[
            NCache[-1 + GoldenRatio, 0.6180339887498949]], 
           
           LineBox[{{{0, 0}, {0, 10}}, {{1, 0}, {1, 10}}, {{2, 0}, {2, 
            10}}, {{3, 0}, {3, 10}}, {{4, 0}, {4, 10}}, {{5, 0}, {5, 10}}, {{
            6, 0}, {6, 10}}, {{7, 0}, {7, 10}}, {{8, 0}, {8, 10}}, {{9, 0}, {
            9, 10}}, {{10, 0}, {10, 10}}, {{11, 0}, {11, 10}}, {{12, 0}, {12, 
            10}}, {{13, 0}, {13, 10}}, {{14, 0}, {14, 10}}, {{15, 0}, {15, 
            10}}, {{16, 0}, {16, 10}}, {{17, 0}, {17, 10}}, {{18, 0}, {18, 
            10}}}]}}}, Frame -> True, FrameLabel -> {
          FormBox[
           StyleBox["\"Types\"", Bold, 12, StripOnInput -> False], 
           TraditionalForm], 
          FormBox[
           StyleBox["\"Clusters\"", Bold, 12, StripOnInput -> False], 
           TraditionalForm]}, FrameTicks -> {{{{9.5, 
             FormBox["\"Cluster 1\"", TraditionalForm]}, {8.5, 
             FormBox["\"Cluster 2\"", TraditionalForm]}, {7.5, 
             FormBox["\"Cluster 3\"", TraditionalForm]}, {6.5, 
             FormBox["\"Cluster 4\"", TraditionalForm]}, {5.5, 
             FormBox["\"Cluster 5\"", TraditionalForm]}, {4.5, 
             FormBox["\"Cluster 6\"", TraditionalForm]}, {3.5, 
             FormBox["\"Cluster 7\"", TraditionalForm]}, {2.5, 
             FormBox["\"Cluster 8\"", TraditionalForm]}, {1.5, 
             FormBox["\"Cluster 9\"", TraditionalForm]}, {0.5, 
             FormBox["\"Cluster 10\"", TraditionalForm]}}, None}, {{{0.5, 
             FormBox["\"bug\"", TraditionalForm]}, {1.5, 
             FormBox["\"dark\"", TraditionalForm]}, {2.5, 
             FormBox["\"dragon\"", TraditionalForm]}, {3.5, 
             FormBox["\"electric\"", TraditionalForm]}, {4.5, 
             FormBox["\"fairy\"", TraditionalForm]}, {5.5, 
             FormBox["\"fighting\"", TraditionalForm]}, {6.5, 
             FormBox["\"fire\"", TraditionalForm]}, {7.5, 
             FormBox["\"flying\"", TraditionalForm]}, {8.5, 
             FormBox["\"ghost\"", TraditionalForm]}, {9.5, 
             FormBox["\"grass\"", TraditionalForm]}, {10.5, 
             FormBox["\"ground\"", TraditionalForm]}, {11.5, 
             FormBox["\"ice\"", TraditionalForm]}, {12.5, 
             FormBox["\"normal\"", TraditionalForm]}, {13.5, 
             FormBox["\"poison\"", TraditionalForm]}, {14.5, 
             FormBox["\"psychic\"", TraditionalForm]}, {15.5, 
             FormBox["\"rock\"", TraditionalForm]}, {16.5, 
             FormBox["\"steel\"", TraditionalForm]}, {17.5, 
             FormBox["\"water\"", TraditionalForm]}}, None}}, GridLinesStyle -> 
        Directive[
          GrayLevel[0.5, 0.4]], ImageSize -> Large, 
        Method -> {
         "GridLinesInFront" -> True, "AxisPadding" -> Scaled[0.02], 
          "DefaultBoundaryStyle" -> Automatic, 
          "DefaultGraphicsInteraction" -> {
           "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
            "Effects" -> {
             "Highlight" -> {"ratio" -> 2}, 
              "HighlightPoint" -> {"ratio" -> 2}, 
              "Droplines" -> {
               "freeformCursorMode" -> True, 
                "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
          "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
          "RangePadding" -> Scaled[0.05]}], 
       FormBox[
        FormBox[
         TemplateBox[{
           FormBox[
            StyleBox[
             StyleBox[
              PaneBox[
               GraphicsBox[{
                 RasterBox[CompressedData["
1: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
iYrd4nUfUevoNhvN+4j/A6Govck=
                  "], {{
                    Rational[-15, 2], (-288)/GoldenRatio}, {
                    Rational[15, 2], 288/GoldenRatio}}], {
                 Antialiasing -> False, 
                  AbsoluteThickness[0.1], 
                  Directive[
                   Opacity[0.3], 
                   GrayLevel[0]], 
                  LineBox[
                   NCache[{{
                    Rational[15, 2], (-288)/GoldenRatio}, {
                    Rational[-15, 2], (-288)/GoldenRatio}, {
                    Rational[-15, 2], 288/GoldenRatio}, {
                    Rational[15, 2], 288/GoldenRatio}, {
                    Rational[15, 2], (-288)/GoldenRatio}}, {{
                    7.5, -177.9937887599697}, {-7.5, -177.9937887599697}, \
{-7.5, 177.9937887599697}, {7.5, 177.9937887599697}, {
                    7.5, -177.9937887599697}}]]}, {
                  CapForm[None], {}}, 
                 StyleBox[{Antialiasing -> False, 
                   StyleBox[
                    StyleBox[{{
                    StyleBox[
                    LineBox[{{{7.5, -177.9937887599697}, 
                    Offset[{4., 0}, {7.5, -177.9937887599697}]}, {{
                    7.5, -121.68643906437299`}, 
                    Offset[{4., 0}, {7.5, -121.68643906437299`}]}, {{
                    7.5, -59.12271718037658}, 
                    Offset[{4., 0}, {7.5, -59.12271718037658}]}, {{
                    7.5, -2.8153674847798698`}, 
                    Offset[{4., 0}, {7.5, -2.8153674847798698`}]}, {{7.5, 
                    59.748354399216566`}, 
                    Offset[{4., 0}, {7.5, 59.748354399216566`}]}, {{7.5, 
                    116.0557040948134}, 
                    Offset[{4., 0}, {7.5, 116.0557040948134}]}, {{7.5, 
                    172.36305379041}, 
                    Offset[{4., 0}, {7.5, 172.36305379041}]}}], {
                    Directive[
                    AbsoluteThickness[0.5], 
                    GrayLevel[0.4]]}, StripOnInput -> False]}, 
                    StyleBox[
                    StyleBox[{{
                    StyleBox[{
                    InsetBox[
                    FormBox["0", TraditionalForm], 
                    Offset[{7., 0.}, {7.5, -177.9937887599697}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["9", TraditionalForm], 
                    Offset[{7., 0.}, {7.5, -121.68643906437299`}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["19", TraditionalForm], 
                    Offset[{7., 0.}, {7.5, -59.12271718037658}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["28", TraditionalForm], 
                    Offset[{7., 0.}, {7.5, -2.8153674847798698`}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["38", TraditionalForm], 
                    Offset[{7., 0.}, {7.5, 59.748354399216566`}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["47", TraditionalForm], 
                    Offset[{7., 0.}, {7.5, 116.0557040948134}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["56", TraditionalForm], 
                    Offset[{7., 0.}, {7.5, 172.36305379041}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}]}, {
                    Directive[
                    AbsoluteThickness[0.5], 
                    GrayLevel[0.4]], {
                    Directive[
                    Opacity[1]]}}, StripOnInput -> False]}, {}}, {{
                    Directive[
                    Opacity[1]]}}, StripOnInput -> False], {"GraphicsLabel"}, 
                    StripOnInput -> False]}, {"GraphicsTicks"}, StripOnInput -> 
                    False], {{
                    Directive[
                    AbsoluteThickness[0.5], 
                    GrayLevel[0.4]]}}, StripOnInput -> False]}, {
                  "GraphicsAxes"}, StripOnInput -> False]}, PlotRangePadding -> 
                Scaled[0.02], PlotRange -> All, Frame -> True, 
                FrameTicks -> {{False, False}, {True, False}}, FrameStyle -> 
                Opacity[0], FrameTicksStyle -> Opacity[0], ImageSize -> 
                NCache[{Automatic, 576/GoldenRatio}, {
                  Automatic, 355.9875775199394}], BaseStyle -> {}], Alignment -> 
               Left, AppearanceElements -> None, 
               ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
               "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
             FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
             False], TraditionalForm]}, "BarLegend", DisplayFunction -> (#& ),
           InterpretationFunction :> (RowBox[{"BarLegend", "[", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{
                    RowBox[{"Blend", "[", 
                    RowBox[{"\"Rainbow\"", ",", "#1"}], "]"}], "&"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"0.5`", ",", "1.`"}], "}"}]}], "}"}], ",", 
               RowBox[{"LabelStyle", "\[Rule]", 
                 RowBox[{"{", "}"}]}], ",", 
               RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}], ",", 
               RowBox[{"LegendMarkerSize", "\[Rule]", 
                 FractionBox["576", "GoldenRatio"]}], ",", 
               RowBox[{"Ticks", "\[Rule]", 
                 RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0.5790861159929701`", ",", "9.`"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0.6669595782073814`", ",", "19.`"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0.7460456942003515`", ",", "28.`"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0.8339191564147628`", ",", "38.`"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0.9130052724077329`", ",", "47.`"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0.5`", ",", "0.`"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0.9920913884007029`", ",", "56.`"}], "}"}]}], 
                   "}"}]}], ",", 
               RowBox[{"\"PinningPoint\"", "\[Rule]", "0.5`"}], ",", 
               RowBox[{"\"SmoothRange\"", "\[Rule]", "False"}], ",", 
               RowBox[{"Charting`TickSide", "\[Rule]", "Right"}], ",", 
               RowBox[{"ColorFunctionScaling", "\[Rule]", "False"}]}], 
             "]"}]& )], TraditionalForm], TraditionalForm]},
      "Legended",
      DisplayFunction->(GridBox[{{
          TagBox[
           ItemBox[
            PaneBox[
             TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline},
              BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
           "SkipImageSizeLevel"], 
          ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
        AutoDelete -> False, GridBoxItemSize -> Automatic, 
        BaselinePosition -> {1, 1}]& ),
      Editable->True,
      InterpretationFunction->(RowBox[{"Legended", "[", 
         RowBox[{#, ",", 
           RowBox[{"Placed", "[", 
             RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{{3.9529517940947647`*^9, 3.952951804052928*^9}},
 CellLabel->
  "Out[227]=",ExpressionUUID->"306bd1c0-fb07-4913-beb8-3b4271c0268c"]
}, Open  ]],

Cell["\<\


Dans le cadre de ce projet, l\[CloseCurlyQuote]un des objectifs \[EAcute]tait \
de v\[EAcute]rifier si les regroupements form\[EAcute]s par les algorithmes \
de clustering (comme KMeans) sur les statistiques de combat des \
Pok\[EAcute]mon pouvaient refl\[EAcute]ter une certaine coh\[EAcute]rence \
avec leurs types (Type1).

Pour cela, nous avons analys\[EAcute] la r\[EAcute]partition des types \
\[AGrave] l\[CloseCurlyQuote]int\[EAcute]rieur des clusters obtenus via le \
meilleur clustering \[AGrave] deux variables (hp et sp_attack, avec k = 10). \
Le tableau montre, pour chaque cluster, la proportion des types \
pr\[EAcute]sents (en pourcentage).

Ce que l\[CloseCurlyQuote]on observe clairement, c\[CloseCurlyQuote]est que \
le type \[OpenCurlyDoubleQuote]grass\[CloseCurlyDoubleQuote] domine largement \
tous les clusters, avec des proportions variant de 50% \[AGrave] presque 57%. \
Cela sugg\[EGrave]re que les Pok\[EAcute]mon de type grass ont des profils \
statistiques assez homog\[EGrave]nes (en particulier en termes de hp et \
sp_attack), ce qui explique leur forte pr\[EAcute]sence dans tous les groupes \
form\[EAcute]s.

\[CapitalAGrave] l\[CloseCurlyQuote]inverse, les autres types comme \
\[OpenCurlyDoubleQuote]fire\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]psychic\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]electric\[CloseCurlyDoubleQuote], ou \
\[OpenCurlyDoubleQuote]fairy\[CloseCurlyDoubleQuote] sont largement sous-repr\
\[EAcute]sent\[EAcute]s, apparaissant de mani\[EGrave]re tr\[EGrave]s \
marginale dans la plupart des clusters. Le type \[OpenCurlyDoubleQuote]water\
\[CloseCurlyDoubleQuote], un peu plus r\[EAcute]pandu, \
n\[CloseCurlyQuote]atteint jamais une majorit\[EAcute] dans un cluster.

Par cons\[EAcute]quent, m\[EHat]me si certains types (notamment \
\[OpenCurlyDoubleQuote]grass\[CloseCurlyDoubleQuote]) ont des \
caract\[EAcute]ristiques bien identifiables par le clustering, on ne peut pas \
conclure \[AGrave] une v\[EAcute]ritable corr\[EAcute]lation globale entre \
les clusters form\[EAcute]s \[AGrave] partir des statistiques et les types \
Pok\[EAcute]mon. Les regroupements statistiques \
n\[CloseCurlyQuote]\[EAcute]pousent donc pas de mani\[EGrave]re significative \
les cat\[EAcute]gories existantes de types.

Ce constat souligne les limites de l\[CloseCurlyQuote]approche non-supervis\
\[EAcute]e dans ce contexte : les types ne sont pas d\[EAcute]finis \
uniquement par des statistiques de combat, mais aussi par des \
propri\[EAcute]t\[EAcute]s \[EAcute]l\[EAcute]mentaires ou conceptuelles \
(feu, eau, plante, etc.) qui ne sont pas toujours refl\[EAcute]t\[EAcute]es \
num\[EAcute]riquement.\
\>", "Text",
 CellChangeTimes->{{3.9529454041542416`*^9, 
  3.952945406608246*^9}},ExpressionUUID->"a90105b0-02e9-f64b-95cb-\
ac4bf1662f3a"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.9529448276349144`*^9, 
  3.9529448288736954`*^9}},ExpressionUUID->"d3c6a27c-8f12-f844-9864-\
46998859dc20"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Machine ",
 StyleBox["learning",
  IgnoreSpellCheck->True],
 " "
}], "Chapter",
 CellChangeTimes->{{3.952933668287161*^9, 3.9529336748474464`*^9}, {
  3.9529434175706825`*^9, 
  3.952943418202444*^9}},ExpressionUUID->"bdd0080a-10f3-b84e-a064-\
a16d9808856f"],

Cell[TextData[{
 "Apr\[EGrave]s avoir explor\[EAcute] les regroupements naturels \[AGrave] \
travers le clustering, j\[CloseCurlyQuote]ai voulu aller plus loin en \
utilisant une approche de machine learning supervis\[EAcute]. L\
\[CloseCurlyQuote]objectif ici \[EAcute]tait de pr\[EAcute]dire \
automatiquement le type d\[CloseCurlyQuote]un Pok\[EAcute]mon en se basant \
uniquement sur ses caract\[EAcute]ristiques num\[EAcute]riques comme les \
points de vie, la vitesse ou la d\[EAcute]fense.\n\nCe choix s\
\[CloseCurlyQuote]inscrit dans une d\[EAcute]marche logique : si les types \
sont suffisamment coh\[EAcute]rents avec les statistiques, alors un \
algorithme devrait \[EHat]tre capable de les apprendre et de les retrouver. J\
\[CloseCurlyQuote]ai donc formul\[EAcute] le probl\[EGrave]me comme une t\
\[AHat]che de classification, dans laquelle on entra\[IHat]ne un \
mod\[EGrave]le sur un ensemble de Pok\[EAcute]mon connus, puis on lui demande \
de deviner le type d\[CloseCurlyQuote]un nouveau Pok\[EAcute]mon jamais vu.\n\
\nCette partie du projet permet de tester concr\[EGrave]tement la \
coh\[EAcute]rence entre les types et les donn\[EAcute]es chiffr\[EAcute]es : \
si le mod\[EGrave]le obtient de bons r\[EAcute]sultats, cela indique que les \
types suivent des r\[EAcute]gularit\[EAcute]s exploitables par une machine. \
Dans le cas contraire, cela soul\[EGrave]verait des questions sur l\
\[CloseCurlyQuote]arbitraire ou la complexit\[EAcute] des crit\[EGrave]res \
utilis\[EAcute]s dans la conception des types.\n\nAfin de mieux comprendre la \
difficult\[EAcute] de pr\[EAcute]dire le type d\[CloseCurlyQuote]un Pok\
\[EAcute]mon \[AGrave] partir de ses statistiques, j\[CloseCurlyQuote]ai \
divis\[EAcute] l\[CloseCurlyQuote]analyse en trois sc\[EAcute]narios \
distincts, chacun correspondant \[AGrave] une situation concr\[EGrave]te :\n\n\
",
 StyleBox["Round 1 \[LongDash] Tous les Pok\[EAcute]mon",
  FontWeight->"Bold"],
 "\n",
 StyleBox["Dans ce premier cas, j\[CloseCurlyQuote]ai entra\[IHat]n\[EAcute] \
les mod\[EGrave]les \[AGrave] partir de l\[CloseCurlyQuote]ensemble complet \
des Pok\[EAcute]mon (qu\[CloseCurlyQuote]ils aient un seul ou deux types), en \
essayant de pr\[EAcute]dire uniquement le Type1. Cela repr\[EAcute]sente la \
situation la plus globale et r\[EAcute]aliste.\nLa meilleure m\[EAcute]thode \
dans ce cas a \[EAcute]t\[EAcute] RandomForest, capable de capturer la \
diversit\[EAcute] des profils tout en restant robuste aux variations. Malgr\
\[EAcute] cela, la pr\[EAcute]cision sur les g\[EAcute]n\[EAcute]rations 8 et \
9 reste relativement mod\[EAcute]r\[EAcute]e, ce qui sugg\[EGrave]re que \
certains types sont difficiles \[AGrave] diff\[EAcute]rencier uniquement \
\[AGrave] partir des statistiques.",
  FontSlant->"Italic"],
 "\n\n",
 StyleBox["Round 2 \[LongDash] Pok\[EAcute]mon \[AGrave] Type Unique",
  FontWeight->"Bold"],
 "\n",
 StyleBox["J\[CloseCurlyQuote]ai ensuite filtr\[EAcute] les donn\[EAcute]es \
pour ne garder que les Pok\[EAcute]mon avec un seul type, afin d\
\[CloseCurlyQuote]\[EAcute]liminer l\[CloseCurlyQuote]ambigu\[IDoubleDot]t\
\[EAcute] introduite par le Type2. Dans ce cas, les mod\[EGrave]les ont \
nettement gagn\[EAcute] en pr\[EAcute]cision, car les classes sont plus \
clairement s\[EAcute]par\[EAcute]es. Cela montre que la pr\[EAcute]sence d\
\[CloseCurlyQuote]un second type complexifie beaucoup la t\[AHat]che pour un \
algorithme de machine learning.",
  FontSlant->"Italic"],
 "\n\n",
 StyleBox["Round 3 \[LongDash] Pok\[EAcute]mon \[AGrave] Double Type\n",
  FontWeight->"Bold"],
 StyleBox["Enfin, j\[CloseCurlyQuote]ai test\[EAcute] un mod\[EGrave]le sp\
\[EAcute]cifique pour les Pok\[EAcute]mon poss\[EAcute]dant deux types, \
toujours en essayant de pr\[EAcute]dire uniquement le Type1. C\
\[CloseCurlyQuote]est le cas le plus difficile \[AGrave] mod\[EAcute]liser, \
car les statistiques peuvent \[EHat]tre influenc\[EAcute]es par la \
combinaison des deux types, ce qui rend les cat\[EAcute]gories plus floues. \
Comme attendu, la pr\[EAcute]cision baisse par rapport au cas mono-type.",
  FontSlant->"Italic"]
}], "Text",
 CellChangeTimes->{
  3.952942511125038*^9, {3.9529427445958233`*^9, 3.952942745493328*^9}, {
   3.9529427848269024`*^9, 3.9529428160617657`*^9}, {3.9529428464756775`*^9, 
   3.9529428500672894`*^9}, {3.9529434393143215`*^9, 
   3.9529434469921436`*^9}},ExpressionUUID->"b78ce72b-9fa6-4546-9fbf-\
c003598b27b7"],

Cell[CellGroupData[{

Cell["Partie 1 - Pr\[EAcute]diction du Type 1 uniquement : ", "Subsection",
 CellChangeTimes->{{3.952933768918337*^9, 3.9529337715985527`*^9}, {
  3.9529338783429832`*^9, 
  3.952933885874716*^9}},ExpressionUUID->"48ca5c2d-4cf0-944e-8c65-\
167baa3e767f"],

Cell["", "Text",
 CellChangeTimes->{{3.9529336994718914`*^9, 3.9529337040305367`*^9}, {
   3.952933746314377*^9, 3.952933797742943*^9}, {3.952942613095932*^9, 
   3.952942657587679*^9}, 
   3.952948745364092*^9},ExpressionUUID->"80406caf-e29e-7e45-a66d-\
171c7e8118ee"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "1.", " ", "Chargement", " ", "du", " ", "fichier", " ", "complet"}], " ", 
   "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"full", " ", "=", " ", 
     RowBox[{"Import", "[", 
      RowBox[{
       RowBox[{"FileNameJoin", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"NotebookDirectory", "[", "]"}], ",", " ", "\"\<pokemon\>\"",
           ",", " ", "\"\<Pokemon_1_9.csv\>\""}], "}"}], "]"}], ",", 
       " ", "\"\<Dataset\>\""}], "]"}]}], ";"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"2.", " ", 
     RowBox[{"Nettoyage", " ", ":", " ", 
      RowBox[{
      "on", " ", "ne", " ", "garde", " ", "que", " ", "les", " ", "lignes", " ",
        "valides", " ", "avec", " ", "un", " ", "Type1", " ", "non", " ", 
       "vide"}]}]}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"cleaned", " ", "=", " ", 
     RowBox[{"Select", "[", "\n", "  ", 
      RowBox[{
       RowBox[{"Normal", "[", "full", "]"}], ",", "\n", "  ", 
       RowBox[{"Function", "[", 
        RowBox[{"row", ",", "\n", "    ", 
         RowBox[{
          RowBox[{"AssociationQ", "[", "row", "]"}], " ", "&&", "\n", "    ", 
          RowBox[{"KeyExistsQ", "[", 
           RowBox[{"row", ",", " ", "\"\<Type1\>\""}], "]"}], " ", "&&", "\n",
           "    ", 
          RowBox[{"!", " ", 
           RowBox[{"MissingQ", "[", 
            RowBox[{"row", "[", "\"\<Type1\>\"", "]"}], "]"}]}], " ", "&&", 
          "\n", "    ", 
          RowBox[{
           RowBox[{"row", "[", "\"\<Type1\>\"", "]"}], " ", "=!=", 
           " ", "\"\<\>\""}], " ", "&&", "\n", "    ", 
          RowBox[{"AllTrue", "[", 
           RowBox[{
            RowBox[{"{", 
             
             RowBox[{"\"\<Total\>\"", ",", " ", "\"\<HP\>\"", ",", 
              " ", "\"\<Attack\>\"", ",", " ", "\"\<Defense\>\"", ",", 
              " ", "\"\<Sp. Atk\>\"", ",", " ", "\"\<Sp. Def\>\"", ",", 
              " ", "\"\<Speed\>\"", ",", " ", "\"\<Generation\>\""}], "}"}], ",",
             " ", "\n", "      ", 
            RowBox[{
             RowBox[{"KeyExistsQ", "[", 
              RowBox[{"row", ",", " ", "#"}], "]"}], " ", "&"}]}], "]"}]}]}], 
        "\n", "  ", "]"}]}], "\n", "]"}]}], ";"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
    "3.", " ", "S\[EAcute]parer", " ", "les", " ", "donn\[EAcute]es", " ", 
     "en", " ", "deux", " ", 
     RowBox[{"groupes", " ", ":", " ", 
      RowBox[{"entra\[IHat]nement", " ", 
       RowBox[{"(", 
        RowBox[{"Gen", " ", "1", " ", "\[AGrave]", " ", "7"}], ")"}], " ", 
       "et", " ", "test", " ", 
       RowBox[{"(", 
        RowBox[{"Gen", " ", "8", " ", "et", " ", "9"}], ")"}]}]}]}], " ", 
    "*)"}], "\n", 
   RowBox[{
    RowBox[{"trainData", " ", "=", " ", 
     RowBox[{"Select", "[", 
      RowBox[{"cleaned", ",", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "[", "\"\<Generation\>\"", "]"}], " ", "<=", " ", "7"}],
         " ", "&"}]}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"testData", " ", "=", " ", 
     RowBox[{"Select", "[", 
      RowBox[{"cleaned", ",", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "[", "\"\<Generation\>\"", "]"}], " ", ">=", " ", "8"}],
         " ", "&"}]}], "]"}]}], ";"}], "\n", "\n", 
   RowBox[{
    RowBox[{"combatStats", " ", "=", " ", 
     RowBox[{"{", 
      RowBox[{"\"\<Total\>\"", ",", " ", "\"\<HP\>\"", ",", 
       " ", "\"\<Attack\>\"", ",", " ", "\"\<Defense\>\"", ",", 
       " ", "\"\<Sp. Atk\>\"", ",", " ", "\"\<Sp. Def\>\"", ",", 
       " ", "\"\<Speed\>\""}], "}"}]}], ";"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
     "4.", " ", "Cr\[EAcute]ation", " ", "du", " ", "jeu", " ", "de", " ", 
      "donn\[EAcute]es", " ", 
      RowBox[{"d", "'"}], 
      RowBox[{"entra\[IHat]nement", " ", ":", " ", "entr\[EAcute]e"}]}], " ", 
     "->", " ", "Type1"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"makeTrainingSet", "[", "data_", "]"}], " ", ":=", " ", 
     RowBox[{"Map", "[", "\n", "  ", 
      RowBox[{
       RowBox[{"row", " ", "\[Function]", " ", 
        RowBox[{
         RowBox[{"AssociationThread", "[", 
          RowBox[{"combatStats", ",", " ", 
           RowBox[{"Lookup", "[", 
            RowBox[{"row", ",", " ", "combatStats"}], "]"}]}], "]"}], " ", "->",
          " ", 
         RowBox[{"ToLowerCase", "[", 
          RowBox[{"row", "[", "\"\<Type1\>\"", "]"}], "]"}]}]}], ",", "\n", 
       "  ", "data"}], "\n", "]"}]}], ";"}], "\n", "\n", 
   RowBox[{
    RowBox[{"trainSet", " ", "=", " ", 
     RowBox[{"makeTrainingSet", "[", "trainData", "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"testSet", " ", "=", " ", 
     RowBox[{"makeTrainingSet", "[", "testData", "]"}]}], ";"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
    "5.", " ", "Entra\[IHat]nement", " ", "avec", " ", "diff\[EAcute]rents", " ",
      "mod\[EGrave]les", " ", "disponibles"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"methods", " ", "=", " ", 
     RowBox[{"{", 
      RowBox[{"\"\<RandomForest\>\"", ",", " ", "\"\<LogisticRegression\>\"", 
       ",", " ", "\"\<NearestNeighbors\>\"", ",", " ", "\"\<NaiveBayes\>\"", ",",
        " ", "\"\<NeuralNetwork\>\""}], "}"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"models", " ", "=", " ", 
     RowBox[{"AssociationMap", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Classify", "[", 
         RowBox[{"trainSet", ",", " ", 
          RowBox[{"Method", " ", "->", " ", "#"}]}], "]"}], " ", "&"}], ",", 
       " ", "methods"}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"modelsRound1", " ", "=", " ", "models"}], ";"}], "\n", "\n", 
   "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"6.", " ", "Affichage", " ", "des", " ", "pr\[EAcute]cisions"}], 
    " ", "*)"}], "\n", 
   RowBox[{"TableForm", "[", "\n", "  ", 
    RowBox[{
     RowBox[{"Table", "[", "\n", "    ", 
      RowBox[{
       RowBox[{"{", "\n", "      ", 
        RowBox[{"method", ",", "\n", "      ", 
         RowBox[{"\"\<Train Accuracy\>\"", " ", "->", " ", 
          RowBox[{"ClassifierMeasurements", "[", 
           RowBox[{
            RowBox[{"models", "[", "method", "]"}], ",", " ", "trainSet", ",",
             " ", "\"\<Accuracy\>\""}], "]"}]}], ",", "\n", "      ", 
         RowBox[{"\"\<Gen8+9 Accuracy\>\"", " ", "->", " ", 
          RowBox[{"ClassifierMeasurements", "[", 
           RowBox[{
            RowBox[{"models", "[", "method", "]"}], ",", " ", "testSet", ",", 
            " ", "\"\<Accuracy\>\""}], "]"}]}]}], "\n", "    ", "}"}], ",", 
       "\n", "    ", 
       RowBox[{"{", 
        RowBox[{"method", ",", " ", "methods"}], "}"}]}], "\n", "  ", "]"}], ",",
      "\n", "  ", 
     RowBox[{"TableHeadings", " ", "->", " ", 
      RowBox[{"{", 
       RowBox[{"None", ",", " ", 
        RowBox[{"{", 
         RowBox[{"\"\<M\[EAcute]thode\>\"", ",", 
          " ", "\"\<Pr\[EAcute]cision Entra\[IHat]nement\>\"", ",", 
          " ", "\"\<Pr\[EAcute]cision G\[EAcute]n 8-9\>\""}], "}"}]}], 
       "}"}]}]}], "\n", "]"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
     "\|01f51d", " ", "Extraction", " ", "du", " ", "meilleur", " ", 
      "mod\[EGrave]le", " ", "selon", " ", "la", " ", "pr\[EAcute]cision", " ",
       "sur", " ", "Gen", " ", "8"}], "-", "9"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"accuraciesRound1", " ", "=", " ", 
     RowBox[{"Table", "[", "\n", "  ", 
      RowBox[{
       RowBox[{"method", " ", "->", " ", 
        RowBox[{"ClassifierMeasurements", "[", 
         RowBox[{
          RowBox[{"models", "[", "method", "]"}], ",", " ", "testSet", ",", 
          " ", "\"\<Accuracy\>\""}], "]"}]}], ",", "\n", "  ", 
       RowBox[{"{", 
        RowBox[{"method", ",", " ", "methods"}], "}"}]}], "\n", "]"}]}], 
    ";"}], "\n", "\n", 
   RowBox[{
    RowBox[{"bestRound1", " ", "=", " ", 
     RowBox[{"First", "@", 
      RowBox[{"MaximalBy", "[", 
       RowBox[{"accuraciesRound1", ",", " ", "Last"}], "]"}]}]}], ";"}], "\n", 
   RowBox[{"print", 
    RowBox[{"(", "bestRound1", ")"}]}], "\[IndentingNewLine]", "\n", 
   RowBox[{"(*", 
    RowBox[{
    "\|01f9f1", " ", "Affichage", " ", "sous", " ", "forme", " ", "de", " ", 
     "BarChart"}], "*)"}], "\n", 
   RowBox[{"BarChart", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"Labeled", "[", 
        RowBox[{"#", ",", 
         RowBox[{"NumberForm", "[", 
          RowBox[{"#", ",", 
           RowBox[{"{", 
            RowBox[{"3", ",", "2"}], "}"}]}], "]"}], ",", "Above"}], "]"}], 
       "&"}], "/@", 
      RowBox[{"Values", "[", "accuraciesRound1", "]"}]}], ",", 
     RowBox[{"ChartLabels", "->", 
      RowBox[{"Placed", "[", 
       RowBox[{"methods", ",", "Center"}], "]"}]}], ",", 
     RowBox[{"ChartStyle", "->", "24"}], ",", "\n", 
     RowBox[{"PlotLabel", "->", 
      RowBox[{"Style", "[", 
       RowBox[{"\"\<Pr\[EAcute]cision des mod\[EGrave]les sur les g\[EAcute]n\
\[EAcute]rations 8 et 9\>\"", ",", "Bold", ",", "14"}], "]"}]}], ",", 
     RowBox[{"AxesLabel", "->", 
      RowBox[{"{", 
       RowBox[{"\"\<Mod\[EGrave]les\>\"", ",", "\"\<Pr\[EAcute]cision\>\""}], 
       "}"}]}], ",", 
     RowBox[{"PlotRange", "->", 
      RowBox[{"{", 
       RowBox[{"0", ",", "Automatic"}], "}"}]}], ",", 
     RowBox[{"ImageSize", "->", "Large"}]}], "]"}], "\n"}]}]], "Code",
 CellChangeTimes->{
  3.9529338070846176`*^9, {3.9529349466988583`*^9, 3.952934947783472*^9}, {
   3.95294840199683*^9, 3.952948402439287*^9}, {3.9529484486057434`*^9, 
   3.9529484588462887`*^9}, {3.9529486638951836`*^9, 3.9529486772548637`*^9}},
 CellLabel->
  "In[228]:=",ExpressionUUID->"c775eb44-4414-4645-ab0e-b6a828950df2"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      TagBox["\<\"M\[EAcute]thode\"\>",
       HoldForm], 
      TagBox["\<\"Pr\[EAcute]cision Entra\[IHat]nement\"\>",
       HoldForm], 
      TagBox["\<\"Pr\[EAcute]cision G\[EAcute]n 8-9\"\>",
       HoldForm]},
     {"\<\"RandomForest\"\>", 
      RowBox[{"\<\"Train Accuracy\"\>", "\[Rule]", "0.41594827586206895`"}], 
      RowBox[{"\<\"Gen8+9 Accuracy\"\>", "\[Rule]", "0.11149825783972125`"}]},
     {"\<\"LogisticRegression\"\>", 
      RowBox[{"\<\"Train Accuracy\"\>", "\[Rule]", "0.24676724137931033`"}], 
      RowBox[{"\<\"Gen8+9 Accuracy\"\>", "\[Rule]", "0.13937282229965156`"}]},
     {"\<\"NearestNeighbors\"\>", 
      RowBox[{"\<\"Train Accuracy\"\>", "\[Rule]", "0.22952586206896552`"}], 
      RowBox[{"\<\"Gen8+9 Accuracy\"\>", "\[Rule]", "0.10452961672473868`"}]},
     {"\<\"NaiveBayes\"\>", 
      RowBox[{"\<\"Train Accuracy\"\>", "\[Rule]", "0.39655172413793105`"}], 
      RowBox[{"\<\"Gen8+9 Accuracy\"\>", "\[Rule]", "0.10452961672473868`"}]},
     {"\<\"NeuralNetwork\"\>", 
      RowBox[{"\<\"Train Accuracy\"\>", "\[Rule]", "0.2413793103448276`"}], 
      RowBox[{"\<\"Gen8+9 Accuracy\"\>", "\[Rule]", "0.1289198606271777`"}]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxDividers->{
     "Columns" -> {{False}}, "Rows" -> {False, True, {False}, False}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[2.0999999999999996`]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}],
   {None, OutputFormsDump`HeadedColumns}],
  Function[BoxForm`e$, 
   TableForm[
   BoxForm`e$, 
    TableHeadings -> {
     None, {"M\[EAcute]thode", "Pr\[EAcute]cision Entra\[IHat]nement", 
       "Pr\[EAcute]cision G\[EAcute]n 8-9"}}]]]], "Output",
 CellChangeTimes->{3.9529518632772913`*^9},
 CellLabel->
  "Out[239]//TableForm=",ExpressionUUID->"ea6c48cb-d20f-4568-bc09-\
c324b247f136"],

Cell[BoxData[
 RowBox[{"print", " ", 
  RowBox[{"(", 
   RowBox[{"\<\"LogisticRegression\"\>", "\[Rule]", "0.13937282229965156`"}], 
   ")"}]}]], "Output",
 CellChangeTimes->{3.952951863344254*^9},
 CellLabel->
  "Out[242]=",ExpressionUUID->"630c0397-444d-40de-ac2e-477f291ad560"],

Cell[BoxData[
 GraphicsBox[{{
    {Opacity[0], 
     PointBox[{{0.45075018208302986`, 0.}, {5.451201747997087, 0.}}]}, {{}, 
     {RGBColor[1., 0.78, 0.2], EdgeForm[{Opacity[0.6649999999999999], 
      Thickness[Small]}], 
      {RGBColor[
       0.9215686274509803, 0.49411764705882355`, 0.43137254901960786`], 
       EdgeForm[{Opacity[0.6649999999999999], Thickness[Small]}], 
       TagBox[
        TooltipBox[
         TagBox[RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867, 0.11149825783972125},
           RoundingRadius->0],
          StatusArea[#, 0.11149825783972125`]& ,
          TagBoxNote->"0.11149825783972125"],
         StyleBox["0.11149825783972125`", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[0.11149825783972125`, {}], "Tooltip"]& ]}, 
      {RGBColor[1., 0.7215686274509804, 0.2196078431372549], EdgeForm[{
       Opacity[0.6649999999999999], Thickness[Small]}], 
       TagBox[
        TooltipBox[
         TagBox[RectangleBox[{1.5487982520029133, 0.}, {2.4512017479970867, 0.13937282229965156},
           RoundingRadius->0],
          StatusArea[#, 0.13937282229965156`]& ,
          TagBoxNote->"0.13937282229965156"],
         StyleBox["0.13937282229965156`", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[0.13937282229965156`, {}], "Tooltip"]& ]}, 
      {RGBColor[0.9490196078431372, 0.8627450980392157, 0.43529411764705883`],
        EdgeForm[{Opacity[0.6649999999999999], Thickness[Small]}], 
       TagBox[
        TooltipBox[
         TagBox[RectangleBox[{2.5487982520029133, 0.}, {3.4512017479970867, 0.10452961672473868},
           RoundingRadius->0],
          StatusArea[#, 0.10452961672473868`]& ,
          TagBoxNote->"0.10452961672473868"],
         StyleBox["0.10452961672473868`", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[0.10452961672473868`, {}], "Tooltip"]& ]}, 
      {RGBColor[0.6705882352941176, 0.8784313725490196, 0.9372549019607843], 
       EdgeForm[{Opacity[0.6649999999999999], Thickness[Small]}], 
       TagBox[
        TooltipBox[
         TagBox[RectangleBox[{3.5487982520029133, 0.}, {4.451201747997087, 0.10452961672473868},
           RoundingRadius->0],
          StatusArea[#, 0.10452961672473868`]& ,
          TagBoxNote->"0.10452961672473868"],
         StyleBox["0.10452961672473868`", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[0.10452961672473868`, {}], "Tooltip"]& ]}, 
      {RGBColor[0.3176470588235294, 0.6549019607843137, 0.7529411764705882], 
       EdgeForm[{Opacity[0.6649999999999999], Thickness[Small]}], 
       TagBox[
        TooltipBox[
         TagBox[RectangleBox[{4.548798252002913, 0.}, {5.451201747997087, 0.1289198606271777},
           RoundingRadius->0],
          StatusArea[#, 0.1289198606271777]& ,
          TagBoxNote->"0.1289198606271777"],
         StyleBox["0.1289198606271777`", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[0.1289198606271777, {}], "Tooltip"]& ]}}, {}, {}}, {}, {
     InsetBox[
      TagBox[
       InterpretationBox[
        StyleBox["\<\"0.11\"\>",
         ShowStringCharacters->False],
        0.11149825783972125`,
        AutoDelete->True],
       NumberForm[#, {3, 2}]& ], Offset[{0, 4}, {1., 0.11149825783972125}], 
      ImageScaled[{0.5, 0}]], 
     InsetBox["\<\"RandomForest\"\>", {1., 0.05574912891986063}, 
      ImageScaled[{0.5, 0.5}]], InsetBox[
      TagBox[
       InterpretationBox[
        StyleBox["\<\"0.14\"\>",
         ShowStringCharacters->False],
        0.13937282229965156`,
        AutoDelete->True],
       NumberForm[#, {3, 2}]& ], Offset[{0, 4}, {2., 0.13937282229965156}], 
      ImageScaled[{0.5, 0}]], 
     InsetBox["\<\"LogisticRegression\"\>", {2., 0.06968641114982578}, 
      ImageScaled[{0.5, 0.5}]], InsetBox[
      TagBox[
       InterpretationBox[
        StyleBox["\<\"0.10\"\>",
         ShowStringCharacters->False],
        0.10452961672473868`,
        AutoDelete->True],
       NumberForm[#, {3, 2}]& ], Offset[{0, 4}, {3., 0.10452961672473868}], 
      ImageScaled[{0.5, 0}]], 
     InsetBox["\<\"NearestNeighbors\"\>", {3., 0.05226480836236934}, 
      ImageScaled[{0.5, 0.5}]], InsetBox[
      TagBox[
       InterpretationBox[
        StyleBox["\<\"0.10\"\>",
         ShowStringCharacters->False],
        0.10452961672473868`,
        AutoDelete->True],
       NumberForm[#, {3, 2}]& ], Offset[{0, 4}, {4., 0.10452961672473868}], 
      ImageScaled[{0.5, 0}]], 
     InsetBox["\<\"NaiveBayes\"\>", {4., 0.05226480836236934}, 
      ImageScaled[{0.5, 0.5}]], InsetBox[
      TagBox[
       InterpretationBox[
        StyleBox["\<\"0.13\"\>",
         ShowStringCharacters->False],
        0.1289198606271777,
        AutoDelete->True],
       NumberForm[#, {3, 2}]& ], Offset[{0, 4}, {5., 0.1289198606271777}], 
      ImageScaled[{0.5, 0}]], 
     InsetBox["\<\"NeuralNetwork\"\>", {5., 0.06445993031358885}, 
      ImageScaled[{0.5, 0.5}]]}, {}, {}, 
    StyleBox[
     StyleBox[{
       {Thickness[Tiny], 
        LineBox[{{0.45075018208302986`, 0.}, {5.551210779315368, 0.}}], 
        StyleBox[
         {Thickness[Tiny], InsetBox[
           TagBox["\<\"Mod\[EGrave]les\"\>",
            HoldForm], Offset[{10., 0.}, {5.451201747997087, 0.}], NCache[
           ImageScaled[{0, Rational[1, 2]}], ImageScaled[{0, 0.5}]], 
           Automatic, {1, 0}]}, "GraphicsLabel",
         StripOnInput->False]}, 
       StyleBox[{
         {Thickness[Tiny], 
          LineBox[{{0.5487982520029133, 0.}, 
            Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
             0.}]}], LineBox[{{5.451201747997087, 0.}, 
            Offset[{-1.102182119232618*^-15, -6.}, {5.451201747997087, 
             0.}]}], {{}, {}, {}, {}, {}, {}, {}}}, 
         StyleBox[{}, "GraphicsLabel",
          StripOnInput->False]}, "GraphicsTicks",
        StripOnInput->False]},
      Antialiasing->False], "GraphicsAxes",
     StripOnInput->False]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, True},
  AxesLabel->{
    FormBox[
     TagBox["\"Mod\[EGrave]les\"", HoldForm], TraditionalForm], 
    FormBox[
     TagBox["\"Pr\[EAcute]cision\"", HoldForm], TraditionalForm]},
  AxesOrigin->{0.45075018208302986`, 0.},
  CoordinatesToolOptions:>{"DisplayFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& ), "CopiedValueFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& )},
  DisplayFunction->Identity,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->Large,
  PlotLabel->FormBox[
    StyleBox[
    "\"Pr\[EAcute]cision des mod\[EGrave]les sur les \
g\[EAcute]n\[EAcute]rations 8 et 9\"", Bold, 14, StripOnInput -> False], 
    TraditionalForm],
  PlotRange->{{All, All}, {0, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {0, 
     Scaled[0.05]}},
  Ticks->{None, Automatic}]], "Output",
 CellChangeTimes->{3.9529518633983307`*^9},
 CellLabel->
  "Out[243]=",ExpressionUUID->"cc5c7f22-c731-4ea7-91c4-c22f7af431a7"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Partie 2  \[LongDash] Pr\[EAcute]diction pour les Pok\[EAcute]mon \
\[AGrave] un seul type", "Subsection",
 CellChangeTimes->{{3.952933866851204*^9, 
  3.9529338702703705`*^9}},ExpressionUUID->"0926d658-2348-634a-8c38-\
80d96b279110"],

Cell["\<\
Ici, seuls les Pok\[EAcute]mon n\[CloseCurlyQuote]ayant \
qu\[CloseCurlyQuote]un seul type (pas de Type2) sont utilis\[EAcute]s. Le mod\
\[EGrave]le apprend \[AGrave] pr\[EAcute]dire ce type unique \[AGrave] partir \
des m\[EHat]mes statistiques de combat.\
\>", "Text",
 CellChangeTimes->{
  3.952933900081501*^9},ExpressionUUID->"a1e68e15-caad-7b49-85ec-\
f415a67089f2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "\|01f4c1", " ", "Chargement", " ", "du", " ", "dataset", " ", "contenant",
     " ", "toutes", " ", "les", " ", "g\[EAcute]n\[EAcute]rations"}], " ", 
   "*)"}], " ", "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"allData", " ", "=", " ", 
     RowBox[{"Normal", " ", "@", " ", 
      RowBox[{"Import", "[", 
       RowBox[{
        RowBox[{"FileNameJoin", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"NotebookDirectory", "[", "]"}], ",", 
           " ", "\"\<pokemon\>\"", ",", " ", "\"\<Pokemon_1_9.csv\>\""}], 
          "}"}], "]"}], ",", " ", "\"\<Dataset\>\""}], "]"}]}]}], ";"}], "\n",
    "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"\|01f9fc", " ", "Nettoyage", " ", "basique"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"allDataClean", " ", "=", " ", 
     RowBox[{"Select", "[", "\n", "  ", 
      RowBox[{"allData", ",", "\n", "  ", 
       RowBox[{"Function", "[", 
        RowBox[{"row", ",", "\n", "    ", 
         RowBox[{"And", "[", "\n", "      ", 
          RowBox[{
           RowBox[{"AllTrue", "[", 
            RowBox[{
             RowBox[{"{", 
              
              RowBox[{"\"\<Total\>\"", ",", " ", "\"\<HP\>\"", ",", 
               " ", "\"\<Attack\>\"", ",", " ", "\"\<Defense\>\"", ",", 
               " ", "\"\<Sp. Atk\>\"", ",", " ", "\"\<Sp. Def\>\"", ",", 
               " ", "\"\<Speed\>\"", ",", " ", "\"\<Type1\>\""}], "}"}], ",", 
             " ", 
             RowBox[{
              RowBox[{"KeyExistsQ", "[", 
               RowBox[{"row", ",", " ", "#"}], "]"}], " ", "&"}]}], "]"}], ",",
            "\n", "      ", 
           RowBox[{
            RowBox[{
             RowBox[{"row", "[", "\"\<Type1\>\"", "]"}], " ", "=!=", 
             " ", "\"\<\>\""}], " ", "&&", " ", 
            RowBox[{"!", " ", 
             RowBox[{"MissingQ", "[", 
              RowBox[{"row", "[", "\"\<Type1\>\"", "]"}], "]"}]}]}]}], "\n", 
          "    ", "]"}]}], "\n", "  ", "]"}]}], "\n", "]"}]}], ";"}], "\n", 
   "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
    "\|01f50d", " ", "S\[EAcute]paration", " ", "par", " ", 
     "g\[EAcute]n\[EAcute]ration"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"gen1to7Clean", " ", "=", " ", 
     RowBox[{"Select", "[", 
      RowBox[{"allDataClean", ",", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "[", "\"\<Generation\>\"", "]"}], " ", "<=", " ", "7"}],
         " ", "&"}]}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"gen8to9Clean", " ", "=", " ", 
     RowBox[{"Select", "[", 
      RowBox[{"allDataClean", ",", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "[", "\"\<Generation\>\"", "]"}], " ", ">=", " ", "8"}],
         " ", "&"}]}], "]"}]}], ";"}], "\n", "\n", 
   RowBox[{
    RowBox[{
    "Print", "[", "\"\<\\n\|01f50e ROUND 2 : Mod\[EGrave]le sur les Pok\
\[EAcute]mon \[AGrave] UN SEUL type (type2 vide).\>\"", "]"}], ";"}], "\n", 
   "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
    "\:2705", " ", "V\[EAcute]rifie", " ", "que", " ", "les", " ", "datasets",
      " ", "sont", " ", "bien", " ", "des", " ", "listes"}], " ", "*)"}], "\n", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"ListQ", "[", "gen1to7Clean", "]"}], " ", "&&", " ", 
      RowBox[{"ListQ", "[", "gen8to9Clean", "]"}]}], ",", "\n", "\n", "  ", 
     RowBox[{"(*", " ", 
      RowBox[{
      "\|01f50d", " ", "Filtrage", " ", "des", " ", "Pok\[EAcute]mon", " ", 
       "avec", " ", "un", " ", "seul", " ", "type"}], " ", "*)"}], "\n", "  ", 
     RowBox[{
      RowBox[{"singleTypeTrain", " ", "=", " ", 
       RowBox[{"Select", "[", 
        RowBox[{"gen1to7Clean", ",", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"!", 
            RowBox[{"KeyExistsQ", "[", 
             RowBox[{"#", ",", " ", "\"\<Type2\>\""}], "]"}]}], " ", "||", 
           " ", 
           RowBox[{
            RowBox[{"StringTrim", "[", 
             RowBox[{"ToString", "[", 
              RowBox[{"#", "[", "\"\<Type2\>\"", "]"}], "]"}], "]"}], " ", "==",
             " ", "\"\<\>\""}]}], " ", "&"}]}], "]"}]}], ";", "\n", "  ", 
      RowBox[{"singleTypeTest", " ", "=", " ", 
       RowBox[{"Select", "[", 
        RowBox[{"gen8to9Clean", ",", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"!", 
            RowBox[{"KeyExistsQ", "[", 
             RowBox[{"#", ",", " ", "\"\<Type2\>\""}], "]"}]}], " ", "||", 
           " ", 
           RowBox[{
            RowBox[{"StringTrim", "[", 
             RowBox[{"ToString", "[", 
              RowBox[{"#", "[", "\"\<Type2\>\"", "]"}], "]"}], "]"}], " ", "==",
             " ", "\"\<\>\""}]}], " ", "&"}]}], "]"}]}], ";", "\n", "\n", 
      "  ", 
      RowBox[{"(*", " ", 
       RowBox[{"\|01f4ca", " ", "Donn\[EAcute]es", " ", 
        RowBox[{"d", "'"}], "entr\[EAcute]e"}], " ", "*)"}], "\n", "  ", 
      RowBox[{"inputStats", " ", "=", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<Total\>\"", ",", " ", "\"\<HP\>\"", ",", 
         " ", "\"\<Attack\>\"", ",", " ", "\"\<Defense\>\"", ",", 
         " ", "\"\<Sp. Atk\>\"", ",", " ", "\"\<Sp. Def\>\"", ",", 
         " ", "\"\<Speed\>\""}], "}"}]}], ";", "\n", "\n", "  ", 
      RowBox[{"(*", " ", 
       RowBox[{
       "\|01f4c1", " ", "Construction", " ", "du", " ", "training", " ", 
        "set"}], " ", "*)"}], "\n", "  ", 
      RowBox[{"singleTypeTrainingData", " ", "=", " ", 
       RowBox[{"Map", "[", "\n", "    ", 
        RowBox[{
         RowBox[{"Function", "[", 
          RowBox[{"row", ",", "\n", "      ", 
           RowBox[{
            RowBox[{"Association", "[", 
             RowBox[{"KeyTake", "[", 
              RowBox[{"row", ",", " ", "inputStats"}], "]"}], "]"}], " ", "->",
             " ", 
            RowBox[{"ToLowerCase", "[", 
             RowBox[{"row", "[", "\"\<Type1\>\"", "]"}], "]"}]}]}], "\n", 
          "    ", "]"}], ",", "\n", "    ", "singleTypeTrain"}], "\n", "  ", 
        "]"}]}], ";", "\n", "\n", "  ", 
      RowBox[{"(*", " ", 
       RowBox[{
       "\|01f4c1", " ", "Construction", " ", "du", " ", "test", " ", "set"}], 
       " ", "*)"}], "\n", "  ", 
      RowBox[{"singleTypeTestingData", " ", "=", " ", 
       RowBox[{"Map", "[", "\n", "    ", 
        RowBox[{
         RowBox[{"Function", "[", 
          RowBox[{"row", ",", "\n", "      ", 
           RowBox[{
            RowBox[{"Association", "[", 
             RowBox[{"KeyTake", "[", 
              RowBox[{"row", ",", " ", "inputStats"}], "]"}], "]"}], " ", "->",
             " ", 
            RowBox[{"ToLowerCase", "[", 
             RowBox[{"row", "[", "\"\<Type1\>\"", "]"}], "]"}]}]}], "\n", 
          "    ", "]"}], ",", "\n", "    ", "singleTypeTest"}], "\n", "  ", 
        "]"}]}], ";", "\n", "\n", " ", "\n", "\n", "  ", 
      RowBox[{"(*", " ", 
       RowBox[{
       "\|01f9e0", " ", "Entra\[IHat]nement", " ", "de", " ", "tous", " ", 
        "les", " ", "mod\[EGrave]les"}], " ", "*)"}], "\n", "  ", 
      RowBox[{"methods", " ", "=", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<RandomForest\>\"", ",", " ", "\"\<DecisionTree\>\"", ",",
          " ", "\"\<LogisticRegression\>\"", ",", " ", "\"\<NaiveBayes\>\"", ",",
          " ", "\"\<NearestNeighbors\>\""}], "}"}]}], ";", "\n", "\n", "  ", 
      RowBox[{"(*", " ", 
       RowBox[{
       "\|01f4e6", " ", "Stocker", " ", "tous", " ", "les", " ", 
        "mod\[EGrave]les"}], " ", "*)"}], "\n", "  ", 
      RowBox[{"modelsRound2", " ", "=", " ", 
       RowBox[{"AssociationMap", "[", "\n", "    ", 
        RowBox[{
         RowBox[{"Function", "[", 
          RowBox[{"method", ",", " ", 
           RowBox[{"Classify", "[", 
            RowBox[{"singleTypeTrainingData", ",", " ", 
             RowBox[{"Method", " ", "->", " ", "method"}]}], "]"}]}], "]"}], ",",
          "\n", "    ", "methods"}], "\n", "  ", "]"}]}], ";", "\n", "\n", 
      "  ", 
      RowBox[{"(*", " ", 
       RowBox[{
       "\|01f4cb", " ", "Affichage", " ", "des", " ", "r\[EAcute]sultats", " ",
         "dans", " ", "un", " ", "tableau"}], " ", "*)"}], "\n", "  ", 
      RowBox[{"TableForm", "[", "\n", "    ", 
       RowBox[{
        RowBox[{"Table", "[", "\n", "      ", 
         RowBox[{
          RowBox[{"{", "\n", "        ", 
           RowBox[{"method", ",", "\n", "        ", 
            RowBox[{"ClassifierMeasurements", "[", 
             RowBox[{
              RowBox[{"modelsRound2", "[", "method", "]"}], ",", " ", 
              "singleTypeTrainingData", ",", " ", "\"\<Accuracy\>\""}], "]"}],
             ",", "\n", "        ", 
            RowBox[{"ClassifierMeasurements", "[", 
             RowBox[{
              RowBox[{"modelsRound2", "[", "method", "]"}], ",", " ", 
              "singleTypeTestingData", ",", " ", "\"\<Accuracy\>\""}], 
             "]"}]}], "\n", "      ", "}"}], ",", "\n", "      ", 
          RowBox[{"{", 
           RowBox[{"method", ",", " ", "methods"}], "}"}]}], "\n", "    ", 
         "]"}], ",", "\n", "    ", 
        RowBox[{"TableHeadings", " ", "->", " ", 
         RowBox[{"{", 
          RowBox[{"None", ",", " ", 
           RowBox[{"{", 
            
            RowBox[{"\"\<M\[EAcute]thode\>\"", ",", 
             " ", "\"\<Pr\[EAcute]cision Entra\[IHat]nement\>\"", ",", 
             " ", "\"\<Pr\[EAcute]cision G\[EAcute]n 8-9\>\""}], "}"}]}], 
          "}"}]}]}], "\n", "  ", "]"}]}]}], "\n", "  ", "]"}], "\n", " ", "\n", 
   RowBox[{
    RowBox[{"bestRound2", " ", "=", " ", 
     RowBox[{"First", "@", 
      RowBox[{"MaximalBy", "[", "\n", "  ", 
       RowBox[{
        RowBox[{"Table", "[", "\n", "    ", 
         RowBox[{
          RowBox[{"method", " ", "->", " ", 
           RowBox[{"ClassifierMeasurements", "[", 
            RowBox[{
             RowBox[{"modelsRound2", "[", "method", "]"}], ",", " ", 
             "singleTypeTestingData", ",", " ", "\"\<Accuracy\>\""}], "]"}]}],
           ",", "\n", "    ", 
          RowBox[{"{", 
           RowBox[{"method", ",", " ", 
            RowBox[{"Keys", "[", "modelsRound2", "]"}]}], "}"}]}], "\n", "  ",
          "]"}], ",", "\n", "  ", "Last"}], "\n", "]"}]}]}], ";"}], "\n", 
   "\n", "\n", 
   RowBox[{"print", 
    RowBox[{"(", "bestRound2", ")"}]}], "\n", "\n", 
   RowBox[{
    RowBox[{"accuraciesRound2", " ", "=", " ", 
     RowBox[{"Table", "[", "\n", "  ", 
      RowBox[{
       RowBox[{"method", " ", "->", " ", 
        RowBox[{"ClassifierMeasurements", "[", 
         RowBox[{
          RowBox[{"modelsRound2", "[", "method", "]"}], ",", " ", 
          "singleTypeTestingData", ",", " ", "\"\<Accuracy\>\""}], "]"}]}], ",",
        "\n", "  ", 
       RowBox[{"{", 
        RowBox[{"method", ",", " ", "methods"}], "}"}]}], "\n", "]"}]}], 
    ";"}], "\n", "\n", 
   RowBox[{"BarChart", "[", "\n", "  ", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"Labeled", "[", 
        RowBox[{"#", ",", " ", 
         RowBox[{"NumberForm", "[", 
          RowBox[{"#", ",", " ", 
           RowBox[{"{", 
            RowBox[{"3", ",", " ", "2"}], "}"}]}], "]"}], ",", " ", "Above"}],
         "]"}], " ", "&"}], " ", "/@", " ", 
      RowBox[{"Values", "[", "accuraciesRound2", "]"}]}], ",", "\n", "  ", 
     RowBox[{"ChartLabels", " ", "->", " ", 
      RowBox[{"Placed", "[", 
       RowBox[{"methods", ",", " ", "Center"}], "]"}]}], ",", "\n", "  ", 
     RowBox[{"ChartStyle", " ", "->", " ", "24"}], ",", "\n", "  ", 
     RowBox[{"PlotLabel", " ", "->", " ", 
      RowBox[{"Style", "[", 
       RowBox[{"\"\<Pr\[EAcute]cision des mod\[EGrave]les (Pok\[EAcute]mon \
\[AGrave] un seul type)\>\"", ",", " ", "Bold", ",", " ", "14"}], "]"}]}], ",",
      "\n", "  ", 
     RowBox[{"AxesLabel", " ", "->", " ", 
      RowBox[{"{", 
       RowBox[{"\"\<Mod\[EGrave]les\>\"", ",", 
        " ", "\"\<Pr\[EAcute]cision\>\""}], "}"}]}], ",", "\n", "  ", 
     RowBox[{"PlotRange", " ", "->", " ", 
      RowBox[{"{", 
       RowBox[{"0", ",", " ", "Automatic"}], "}"}]}], ",", "\n", "  ", 
     RowBox[{"ImageSize", " ", "->", " ", "Large"}]}], "\n", "]"}], "\n", 
   "\n"}]}]], "Code",
 CellChangeTimes->{{3.952933919782503*^9, 3.9529339315224457`*^9}, {
   3.952934971818327*^9, 3.952934973321455*^9}, {3.9529484838135643`*^9, 
   3.9529485099997845`*^9}, {3.952948570349251*^9, 3.952948592318001*^9}, {
   3.9529486520311337`*^9, 3.952948653869068*^9}, 3.9529501737975903`*^9, {
   3.9529518943455973`*^9, 3.952951896771482*^9}},
 CellLabel->
  "In[264]:=",ExpressionUUID->"c79ae938-e2c9-ef49-a680-0e5431af4e4f"],

Cell[BoxData["\<\"\\n\|01f50e ROUND 2 : Mod\[EGrave]le sur les \
Pok\[EAcute]mon \[AGrave] UN SEUL type (type2 vide).\"\>"], "Print",
 CellChangeTimes->{{3.952951884640678*^9, 3.952951909211658*^9}},
 CellLabel->
  "Lors de l\[CloseCurlyQuote]\[EAcute]valuation de \
In[264]:=",ExpressionUUID->"e7e85b42-00df-487b-ab64-fa202192fbd6"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      TagBox["\<\"M\[EAcute]thode\"\>",
       HoldForm], 
      TagBox["\<\"Pr\[EAcute]cision Entra\[IHat]nement\"\>",
       HoldForm], 
      TagBox["\<\"Pr\[EAcute]cision G\[EAcute]n 8-9\"\>",
       HoldForm]},
     {"\<\"RandomForest\"\>", "0.41705069124423966`", "0.16964285714285715`"},
     {"\<\"DecisionTree\"\>", "0.4032258064516129`", "0.13392857142857142`"},
     {"\<\"LogisticRegression\"\>", "0.347926267281106`", 
      "0.22321428571428573`"},
     {"\<\"NaiveBayes\"\>", "0.5046082949308756`", "0.08035714285714286`"},
     {"\<\"NearestNeighbors\"\>", "0.22350230414746544`", 
      "0.13392857142857142`"}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxDividers->{
     "Columns" -> {{False}}, "Rows" -> {False, True, {False}, False}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[2.0999999999999996`]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}],
   {None, OutputFormsDump`HeadedColumns}],
  Function[BoxForm`e$, 
   TableForm[
   BoxForm`e$, 
    TableHeadings -> {
     None, {"M\[EAcute]thode", "Pr\[EAcute]cision Entra\[IHat]nement", 
       "Pr\[EAcute]cision G\[EAcute]n 8-9"}}]]]], "Output",
 CellChangeTimes->{{3.952951886566457*^9, 3.9529519108407927`*^9}},
 CellLabel->
  "Out[269]//TableForm=",ExpressionUUID->"5355dbdb-2961-40e8-a920-\
0ea0654e9461"],

Cell[BoxData[
 RowBox[{"print", " ", 
  RowBox[{"(", 
   RowBox[{"\<\"LogisticRegression\"\>", "\[Rule]", "0.22321428571428573`"}], 
   ")"}]}]], "Output",
 CellChangeTimes->{{3.952951886566457*^9, 3.952951910885553*^9}},
 CellLabel->
  "Out[271]=",ExpressionUUID->"2a6c4c89-d407-4e5a-b838-26d8fa6e5cb7"],

Cell[BoxData[
 GraphicsBox[{{
    {Opacity[0], 
     PointBox[{{0.45075018208302986`, 0.}, {5.451201747997087, 0.}}]}, {{}, 
     {RGBColor[1., 0.78, 0.2], EdgeForm[{Opacity[0.6649999999999999], 
      Thickness[Small]}], 
      {RGBColor[
       0.9215686274509803, 0.49411764705882355`, 0.43137254901960786`], 
       EdgeForm[{Opacity[0.6649999999999999], Thickness[Small]}], 
       TagBox[
        TooltipBox[
         TagBox[RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867, 0.16964285714285715},
           RoundingRadius->0],
          StatusArea[#, 0.16964285714285715`]& ,
          TagBoxNote->"0.16964285714285715"],
         StyleBox["0.16964285714285715`", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[0.16964285714285715`, {}], "Tooltip"]& ]}, 
      {RGBColor[1., 0.7215686274509804, 0.2196078431372549], EdgeForm[{
       Opacity[0.6649999999999999], Thickness[Small]}], 
       TagBox[
        TooltipBox[
         TagBox[RectangleBox[{1.5487982520029133, 0.}, {2.4512017479970867, 0.13392857142857142},
           RoundingRadius->0],
          StatusArea[#, 0.13392857142857142`]& ,
          TagBoxNote->"0.13392857142857142"],
         StyleBox["0.13392857142857142`", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[0.13392857142857142`, {}], "Tooltip"]& ]}, 
      {RGBColor[0.9490196078431372, 0.8627450980392157, 0.43529411764705883`],
        EdgeForm[{Opacity[0.6649999999999999], Thickness[Small]}], 
       TagBox[
        TooltipBox[
         TagBox[RectangleBox[{2.5487982520029133, 0.}, {3.4512017479970867, 0.22321428571428573},
           RoundingRadius->0],
          StatusArea[#, 0.22321428571428573`]& ,
          TagBoxNote->"0.22321428571428573"],
         StyleBox["0.22321428571428573`", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[0.22321428571428573`, {}], "Tooltip"]& ]}, 
      {RGBColor[0.6705882352941176, 0.8784313725490196, 0.9372549019607843], 
       EdgeForm[{Opacity[0.6649999999999999], Thickness[Small]}], 
       TagBox[
        TooltipBox[
         TagBox[RectangleBox[{3.5487982520029133, 0.}, {4.451201747997087, 0.08035714285714286},
           RoundingRadius->0],
          StatusArea[#, 0.08035714285714286]& ,
          TagBoxNote->"0.08035714285714286"],
         StyleBox["0.08035714285714286`", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[0.08035714285714286, {}], "Tooltip"]& ]}, 
      {RGBColor[0.3176470588235294, 0.6549019607843137, 0.7529411764705882], 
       EdgeForm[{Opacity[0.6649999999999999], Thickness[Small]}], 
       TagBox[
        TooltipBox[
         TagBox[RectangleBox[{4.548798252002913, 0.}, {5.451201747997087, 0.13392857142857142},
           RoundingRadius->0],
          StatusArea[#, 0.13392857142857142`]& ,
          TagBoxNote->"0.13392857142857142"],
         StyleBox["0.13392857142857142`", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[0.13392857142857142`, {}], "Tooltip"]& ]}}, {}, {}}, {}, {
     InsetBox[
      TagBox[
       InterpretationBox[
        StyleBox["\<\"0.17\"\>",
         ShowStringCharacters->False],
        0.16964285714285715`,
        AutoDelete->True],
       NumberForm[#, {3, 2}]& ], Offset[{0, 4}, {1., 0.16964285714285715}], 
      ImageScaled[{0.5, 0}]], 
     InsetBox["\<\"RandomForest\"\>", {1., 0.08482142857142858}, 
      ImageScaled[{0.5, 0.5}]], InsetBox[
      TagBox[
       InterpretationBox[
        StyleBox["\<\"0.13\"\>",
         ShowStringCharacters->False],
        0.13392857142857142`,
        AutoDelete->True],
       NumberForm[#, {3, 2}]& ], Offset[{0, 4}, {2., 0.13392857142857142}], 
      ImageScaled[{0.5, 0}]], 
     InsetBox["\<\"DecisionTree\"\>", {2., 0.06696428571428571}, 
      ImageScaled[{0.5, 0.5}]], InsetBox[
      TagBox[
       InterpretationBox[
        StyleBox["\<\"0.22\"\>",
         ShowStringCharacters->False],
        0.22321428571428573`,
        AutoDelete->True],
       NumberForm[#, {3, 2}]& ], Offset[{0, 4}, {3., 0.22321428571428573}], 
      ImageScaled[{0.5, 0}]], 
     InsetBox["\<\"LogisticRegression\"\>", {3., 0.11160714285714286}, 
      ImageScaled[{0.5, 0.5}]], InsetBox[
      TagBox[
       InterpretationBox[
        StyleBox["\<\"0.08\"\>",
         ShowStringCharacters->False],
        0.08035714285714286,
        AutoDelete->True],
       NumberForm[#, {3, 2}]& ], Offset[{0, 4}, {4., 0.08035714285714286}], 
      ImageScaled[{0.5, 0}]], 
     InsetBox["\<\"NaiveBayes\"\>", {4., 0.04017857142857143}, 
      ImageScaled[{0.5, 0.5}]], InsetBox[
      TagBox[
       InterpretationBox[
        StyleBox["\<\"0.13\"\>",
         ShowStringCharacters->False],
        0.13392857142857142`,
        AutoDelete->True],
       NumberForm[#, {3, 2}]& ], Offset[{0, 4}, {5., 0.13392857142857142}], 
      ImageScaled[{0.5, 0}]], 
     InsetBox["\<\"NearestNeighbors\"\>", {5., 0.06696428571428571}, 
      ImageScaled[{0.5, 0.5}]]}, {}, {}, 
    StyleBox[
     StyleBox[{
       {Thickness[Tiny], 
        LineBox[{{0.45075018208302986`, 0.}, {5.551210779315368, 0.}}], 
        StyleBox[
         {Thickness[Tiny], InsetBox[
           TagBox["\<\"Mod\[EGrave]les\"\>",
            HoldForm], Offset[{10., 0.}, {5.451201747997087, 0.}], NCache[
           ImageScaled[{0, Rational[1, 2]}], ImageScaled[{0, 0.5}]], 
           Automatic, {1, 0}]}, "GraphicsLabel",
         StripOnInput->False]}, 
       StyleBox[{
         {Thickness[Tiny], 
          LineBox[{{0.5487982520029133, 0.}, 
            Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
             0.}]}], LineBox[{{5.451201747997087, 0.}, 
            Offset[{-1.102182119232618*^-15, -6.}, {5.451201747997087, 
             0.}]}], {{}, {}, {}, {}, {}, {}, {}}}, 
         StyleBox[{}, "GraphicsLabel",
          StripOnInput->False]}, "GraphicsTicks",
        StripOnInput->False]},
      Antialiasing->False], "GraphicsAxes",
     StripOnInput->False]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, True},
  AxesLabel->{
    FormBox[
     TagBox["\"Mod\[EGrave]les\"", HoldForm], TraditionalForm], 
    FormBox[
     TagBox["\"Pr\[EAcute]cision\"", HoldForm], TraditionalForm]},
  AxesOrigin->{0.45075018208302986`, 0.},
  CoordinatesToolOptions:>{"DisplayFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& ), "CopiedValueFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& )},
  DisplayFunction->Identity,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->Large,
  PlotLabel->FormBox[
    StyleBox[
    "\"Pr\[EAcute]cision des mod\[EGrave]les (Pok\[EAcute]mon \[AGrave] un \
seul type)\"", Bold, 14, StripOnInput -> False], TraditionalForm],
  PlotRange->{{All, All}, {0, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {0, 
     Scaled[0.05]}},
  Ticks->{None, Automatic}]], "Output",
 CellChangeTimes->{{3.952951886566457*^9, 3.952951910942664*^9}},
 CellLabel->
  "Out[273]=",ExpressionUUID->"a3a59354-e0ee-4bca-b6c5-91d212317ed2"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Partie 3 - Pr\[EAcute]diction des deux types combin\[EAcute]s", \
"Subsection",
 CellChangeTimes->{{3.952933946062216*^9, 
  3.9529339523842945`*^9}},ExpressionUUID->"afea28e6-b360-464c-a62e-\
5ab5916914ab"],

Cell[TextData[{
 "Cette partie cible les Pok\[EAcute]mon avec deux types (Type1 et Type2). Le \
mod\[EGrave]le est entra\[IHat]n\[EAcute] \[AGrave] pr\[EAcute]dire la \
combinaison des deux types (ex. ",
 StyleBox["grass",
  IgnoreSpellCheck->True],
 "+poison) \[AGrave] partir des statistiques de combat."
}], "Text",
 CellChangeTimes->{{3.9529339606955547`*^9, 
  3.9529339694150887`*^9}},ExpressionUUID->"bc43f115-6992-a34f-9e73-\
30a155e54026"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "\|01f522", " ", "Entra\[IHat]nement", " ", "et", " ", 
    "\[EAcute]valuation", " ", "des", " ", "mod\[EGrave]les", " ", "pour", " ",
     "Round", " ", "3", " ", 
    RowBox[{"(", 
     RowBox[{"DEUX", " ", "types"}], ")"}]}], " ", "*)"}], "\n", "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"dualTypeTrain", " ", "=", " ", 
     RowBox[{"Select", "[", 
      RowBox[{"gen1to7Clean", ",", " ", "\n", "  ", 
       RowBox[{
        RowBox[{
         RowBox[{"KeyExistsQ", "[", 
          RowBox[{"#", ",", " ", "\"\<Type2\>\""}], "]"}], " ", "&&", " ", 
         RowBox[{
          RowBox[{"StringTrim", "[", 
           RowBox[{"ToString", "[", 
            RowBox[{"#", "[", "\"\<Type2\>\"", "]"}], "]"}], "]"}], " ", "=!=",
           " ", "\"\<\>\""}]}], " ", "&"}]}], "]"}]}], ";"}], "\n", "\n", 
   RowBox[{
    RowBox[{"dualTypeTest", " ", "=", " ", 
     RowBox[{"Select", "[", 
      RowBox[{"gen8to9Clean", ",", " ", "\n", "  ", 
       RowBox[{
        RowBox[{
         RowBox[{"KeyExistsQ", "[", 
          RowBox[{"#", ",", " ", "\"\<Type2\>\""}], "]"}], " ", "&&", " ", 
         RowBox[{
          RowBox[{"StringTrim", "[", 
           RowBox[{"ToString", "[", 
            RowBox[{"#", "[", "\"\<Type2\>\"", "]"}], "]"}], "]"}], " ", "=!=",
           " ", "\"\<\>\""}]}], " ", "&"}]}], "]"}]}], ";"}], "\n", "\n", 
   RowBox[{
    RowBox[{"methods", " ", "=", " ", 
     RowBox[{"{", 
      RowBox[{"\"\<RandomForest\>\"", ",", " ", "\"\<DecisionTree\>\"", ",", 
       " ", "\"\<LogisticRegression\>\"", ",", " ", "\"\<NaiveBayes\>\"", ",",
        " ", "\"\<NearestNeighbors\>\""}], "}"}]}], ";"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"Cr\[EAcute]ation", " ", "des", " ", "donn\[EAcute]es", " ", 
      RowBox[{"d", "'"}], "entra\[IHat]nement", " ", "et", " ", "test", " ", 
      "avec", " ", "target"}], " ", "=", " ", 
     RowBox[{"Type1", " ", "+", " ", "\"\<+\>\"", " ", "+", " ", "Type2"}]}], 
    " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"dualTypeTrainingData", " ", "=", " ", 
     RowBox[{"Map", "[", "\n", "  ", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"row", ",", "\n", "    ", 
         RowBox[{
          RowBox[{"Association", "[", 
           RowBox[{"KeyTake", "[", 
            RowBox[{"row", ",", " ", "inputStats"}], "]"}], "]"}], " ", "->", 
          " ", "\n", "      ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"ToLowerCase", "[", 
             RowBox[{"StringTrim", "[", 
              RowBox[{"row", "[", "\"\<Type1\>\"", "]"}], "]"}], "]"}], " ", "<>",
             " ", "\"\<+\>\"", " ", "<>", " ", 
            RowBox[{"ToLowerCase", "[", 
             RowBox[{"StringTrim", "[", 
              RowBox[{"row", "[", "\"\<Type2\>\"", "]"}], "]"}], "]"}]}], 
           ")"}]}]}], "\n", "  ", "]"}], ",", "\n", "  ", "dualTypeTrain"}], 
      "\n", "]"}]}], ";"}], "\n", "\n", 
   RowBox[{
    RowBox[{"dualTypeTestingData", " ", "=", " ", 
     RowBox[{"Map", "[", "\n", "  ", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"row", ",", "\n", "    ", 
         RowBox[{
          RowBox[{"Association", "[", 
           RowBox[{"KeyTake", "[", 
            RowBox[{"row", ",", " ", "inputStats"}], "]"}], "]"}], " ", "->", 
          " ", "\n", "      ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"ToLowerCase", "[", 
             RowBox[{"StringTrim", "[", 
              RowBox[{"row", "[", "\"\<Type1\>\"", "]"}], "]"}], "]"}], " ", "<>",
             " ", "\"\<+\>\"", " ", "<>", " ", 
            RowBox[{"ToLowerCase", "[", 
             RowBox[{"StringTrim", "[", 
              RowBox[{"row", "[", "\"\<Type2\>\"", "]"}], "]"}], "]"}]}], 
           ")"}]}]}], "\n", "  ", "]"}], ",", "\n", "  ", "dualTypeTest"}], 
      "\n", "]"}]}], ";"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Entra\[IHat]nement", " ", "des", " ", "mod\[EGrave]les"}], " ", 
    "*)"}], "\n", 
   RowBox[{
    RowBox[{"modelsRound3", " ", "=", " ", 
     RowBox[{"AssociationMap", "[", "\n", "  ", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"method", ",", " ", 
         RowBox[{"Classify", "[", 
          RowBox[{"dualTypeTrainingData", ",", " ", 
           RowBox[{"Method", " ", "->", " ", "method"}]}], "]"}]}], "]"}], ",",
        "\n", "  ", "methods"}], "\n", "]"}]}], ";"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Affichage", " ", "en", " ", "tableau"}], " ", "*)"}], "\n", 
   RowBox[{"TableForm", "[", "\n", "  ", 
    RowBox[{
     RowBox[{"Table", "[", "\n", "    ", 
      RowBox[{
       RowBox[{"{", "\n", "      ", 
        RowBox[{"method", ",", "\n", "      ", 
         RowBox[{"ClassifierMeasurements", "[", 
          RowBox[{
           RowBox[{"modelsRound3", "[", "method", "]"}], ",", " ", 
           "dualTypeTrainingData", ",", " ", "\"\<Accuracy\>\""}], "]"}], ",",
          "\n", "      ", 
         RowBox[{"ClassifierMeasurements", "[", 
          RowBox[{
           RowBox[{"modelsRound3", "[", "method", "]"}], ",", " ", 
           "dualTypeTestingData", ",", " ", "\"\<Accuracy\>\""}], "]"}]}], 
        "\n", "    ", "}"}], ",", "\n", "    ", 
       RowBox[{"{", 
        RowBox[{"method", ",", " ", "methods"}], "}"}]}], "\n", "  ", "]"}], ",",
      "\n", "  ", 
     RowBox[{"TableHeadings", " ", "->", " ", 
      RowBox[{"{", 
       RowBox[{"None", ",", " ", 
        RowBox[{"{", 
         RowBox[{"\"\<M\[EAcute]thode\>\"", ",", 
          " ", "\"\<Pr\[EAcute]cision Entra\[IHat]nement\>\"", ",", 
          " ", "\"\<Pr\[EAcute]cision G\[EAcute]n 8-9\>\""}], "}"}]}], 
       "}"}]}]}], "\n", "]"}], "\n", "\n", 
   RowBox[{
    RowBox[{"accuraciesRound3", " ", "=", " ", 
     RowBox[{"Table", "[", "\n", "  ", 
      RowBox[{
       RowBox[{"method", " ", "->", " ", 
        RowBox[{"ClassifierMeasurements", "[", 
         RowBox[{
          RowBox[{"modelsRound3", "[", "method", "]"}], ",", " ", 
          "dualTypeTestingData", ",", " ", "\"\<Accuracy\>\""}], "]"}]}], ",",
        "\n", "  ", 
       RowBox[{"{", 
        RowBox[{"method", ",", " ", "methods"}], "}"}]}], "\n", "]"}]}], 
    ";"}], "\n", "\n", 
   RowBox[{
    RowBox[{"bestRound3", " ", "=", " ", 
     RowBox[{"First", "@", 
      RowBox[{"MaximalBy", "[", 
       RowBox[{"accuraciesRound3", ",", " ", "Last"}], "]"}]}]}], ";"}], "\n",
    "\n", "\n", 
   RowBox[{"print", 
    RowBox[{"(", "bestRound3", ")"}]}], "\n", "\n", 
   RowBox[{
    RowBox[{"accuraciesRound3", " ", "=", " ", 
     RowBox[{"Table", "[", "\n", "  ", 
      RowBox[{
       RowBox[{"method", " ", "->", " ", 
        RowBox[{"ClassifierMeasurements", "[", 
         RowBox[{
          RowBox[{"modelsRound3", "[", "method", "]"}], ",", " ", 
          "dualTypeTestingData", ",", " ", "\"\<Accuracy\>\""}], "]"}]}], ",",
        "\n", "  ", 
       RowBox[{"{", 
        RowBox[{"method", ",", " ", "methods"}], "}"}]}], "\n", "]"}]}], 
    ";"}], "\n", "\n", 
   RowBox[{"BarChart", "[", "\n", "  ", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"Labeled", "[", 
        RowBox[{"#", ",", " ", 
         RowBox[{"NumberForm", "[", 
          RowBox[{"#", ",", " ", 
           RowBox[{"{", 
            RowBox[{"3", ",", " ", "2"}], "}"}]}], "]"}], ",", " ", "Above"}],
         "]"}], " ", "&"}], " ", "/@", " ", 
      RowBox[{"Values", "[", "accuraciesRound3", "]"}]}], ",", "\n", "  ", 
     RowBox[{"ChartLabels", " ", "->", " ", 
      RowBox[{"Placed", "[", 
       RowBox[{"methods", ",", " ", "Center"}], "]"}]}], ",", "\n", "  ", 
     RowBox[{"ChartStyle", " ", "->", " ", "24"}], ",", "\n", "  ", 
     RowBox[{"PlotLabel", " ", "->", " ", 
      RowBox[{"Style", "[", 
       RowBox[{"\"\<Pr\[EAcute]cision des mod\[EGrave]les (Pok\[EAcute]mon \
\[AGrave] double type)\>\"", ",", " ", "Bold", ",", " ", "14"}], "]"}]}], ",",
      "\n", "  ", 
     RowBox[{"AxesLabel", " ", "->", " ", 
      RowBox[{"{", 
       RowBox[{"\"\<Mod\[EGrave]les\>\"", ",", 
        " ", "\"\<Pr\[EAcute]cision\>\""}], "}"}]}], ",", "\n", "  ", 
     RowBox[{"PlotRange", " ", "->", " ", 
      RowBox[{"{", 
       RowBox[{"0", ",", " ", "Automatic"}], "}"}]}], ",", "\n", "  ", 
     RowBox[{"ImageSize", " ", "->", " ", "Large"}]}], "\n", "]"}], 
   "\n"}]}]], "Code",
 CellChangeTimes->{{3.9529339789993687`*^9, 3.9529339886825237`*^9}, {
  3.9529487240843506`*^9, 3.9529487254176292`*^9}, {3.9529487565107765`*^9, 
  3.9529487587094135`*^9}, {3.9529519456217117`*^9, 3.952951947227338*^9}},
 CellLabel->
  "In[286]:=",ExpressionUUID->"15357cc7-ccb6-5e47-9f43-79226b647f71"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      TagBox["\<\"M\[EAcute]thode\"\>",
       HoldForm], 
      TagBox["\<\"Pr\[EAcute]cision Entra\[IHat]nement\"\>",
       HoldForm], 
      TagBox["\<\"Pr\[EAcute]cision G\[EAcute]n 8-9\"\>",
       HoldForm]},
     {"\<\"RandomForest\"\>", "0.1194331983805668`", "0.022857142857142857`"},
     {"\<\"DecisionTree\"\>", "0.1437246963562753`", "0.03428571428571429`"},
     {"\<\"LogisticRegression\"\>", "0.24696356275303644`", 
      "0.022857142857142857`"},
     {"\<\"NaiveBayes\"\>", "0.694331983805668`", "0.011428571428571429`"},
     {"\<\"NearestNeighbors\"\>", "0.9757085020242915`", 
      "0.005714285714285714`"}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxDividers->{
     "Columns" -> {{False}}, "Rows" -> {False, True, {False}, False}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[2.0999999999999996`]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}],
   {None, OutputFormsDump`HeadedColumns}],
  Function[BoxForm`e$, 
   TableForm[
   BoxForm`e$, 
    TableHeadings -> {
     None, {"M\[EAcute]thode", "Pr\[EAcute]cision Entra\[IHat]nement", 
       "Pr\[EAcute]cision G\[EAcute]n 8-9"}}]]]], "Output",
 CellChangeTimes->{{3.952951934602375*^9, 3.952951951001461*^9}},
 CellLabel->
  "Out[292]//TableForm=",ExpressionUUID->"051b2b8b-119a-4f12-8d90-\
572ed12192bf"],

Cell[BoxData[
 RowBox[{"print", " ", 
  RowBox[{"(", 
   RowBox[{"\<\"DecisionTree\"\>", "\[Rule]", "0.03428571428571429`"}], 
   ")"}]}]], "Output",
 CellChangeTimes->{{3.952951934602375*^9, 3.952951951092174*^9}},
 CellLabel->
  "Out[295]=",ExpressionUUID->"063b5549-d706-4640-82da-e1df183c2722"],

Cell[BoxData[
 GraphicsBox[{{
    {Opacity[0], 
     PointBox[{{0.45075018208302986`, 0.}, {5.451201747997087, 0.}}]}, {{}, 
     {RGBColor[1., 0.78, 0.2], EdgeForm[{Opacity[0.6649999999999999], 
      Thickness[Small]}], 
      {RGBColor[
       0.9215686274509803, 0.49411764705882355`, 0.43137254901960786`], 
       EdgeForm[{Opacity[0.6649999999999999], Thickness[Small]}], 
       TagBox[
        TooltipBox[
         TagBox[RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867, 0.022857142857142857},
           RoundingRadius->0],
          StatusArea[#, 0.022857142857142857`]& ,
          TagBoxNote->"0.022857142857142857"],
         StyleBox["0.022857142857142857`", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[0.022857142857142857`, {}], "Tooltip"]& ]}, 
      {RGBColor[1., 0.7215686274509804, 0.2196078431372549], EdgeForm[{
       Opacity[0.6649999999999999], Thickness[Small]}], 
       TagBox[
        TooltipBox[
         TagBox[RectangleBox[{1.5487982520029133, 0.}, {2.4512017479970867, 0.03428571428571429},
           RoundingRadius->0],
          StatusArea[#, 0.03428571428571429]& ,
          TagBoxNote->"0.03428571428571429"],
         StyleBox["0.03428571428571429`", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[0.03428571428571429, {}], "Tooltip"]& ]}, 
      {RGBColor[0.9490196078431372, 0.8627450980392157, 0.43529411764705883`],
        EdgeForm[{Opacity[0.6649999999999999], Thickness[Small]}], 
       TagBox[
        TooltipBox[
         TagBox[RectangleBox[{2.5487982520029133, 0.}, {3.4512017479970867, 0.022857142857142857},
           RoundingRadius->0],
          StatusArea[#, 0.022857142857142857`]& ,
          TagBoxNote->"0.022857142857142857"],
         StyleBox["0.022857142857142857`", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[0.022857142857142857`, {}], "Tooltip"]& ]}, 
      {RGBColor[0.6705882352941176, 0.8784313725490196, 0.9372549019607843], 
       EdgeForm[{Opacity[0.6649999999999999], Thickness[Small]}], 
       TagBox[
        TooltipBox[
         TagBox[RectangleBox[{3.5487982520029133, 0.}, {4.451201747997087, 0.011428571428571429},
           RoundingRadius->0],
          StatusArea[#, 0.011428571428571429`]& ,
          TagBoxNote->"0.011428571428571429"],
         StyleBox["0.011428571428571429`", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[0.011428571428571429`, {}], "Tooltip"]& ]}, 
      {RGBColor[0.3176470588235294, 0.6549019607843137, 0.7529411764705882], 
       EdgeForm[{Opacity[0.6649999999999999], Thickness[Small]}], 
       TagBox[
        TooltipBox[
         TagBox[RectangleBox[{4.548798252002913, 0.}, {5.451201747997087, 0.005714285714285714},
           RoundingRadius->0],
          StatusArea[#, 0.005714285714285714]& ,
          TagBoxNote->"0.005714285714285714"],
         StyleBox["0.005714285714285714`", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[0.005714285714285714, {}], "Tooltip"]& ]}}, {}, {}}, {}, {
     InsetBox[
      TagBox[
       InterpretationBox[
        StyleBox["\<\"0.02\"\>",
         ShowStringCharacters->False],
        0.022857142857142857`,
        AutoDelete->True],
       NumberForm[#, {3, 2}]& ], Offset[{0, 4}, {1., 0.022857142857142857}], 
      ImageScaled[{0.5, 0}]], 
     InsetBox["\<\"RandomForest\"\>", {1., 0.011428571428571429}, 
      ImageScaled[{0.5, 0.5}]], InsetBox[
      TagBox[
       InterpretationBox[
        StyleBox["\<\"0.03\"\>",
         ShowStringCharacters->False],
        0.03428571428571429,
        AutoDelete->True],
       NumberForm[#, {3, 2}]& ], Offset[{0, 4}, {2., 0.03428571428571429}], 
      ImageScaled[{0.5, 0}]], 
     InsetBox["\<\"DecisionTree\"\>", {2., 0.017142857142857144}, 
      ImageScaled[{0.5, 0.5}]], InsetBox[
      TagBox[
       InterpretationBox[
        StyleBox["\<\"0.02\"\>",
         ShowStringCharacters->False],
        0.022857142857142857`,
        AutoDelete->True],
       NumberForm[#, {3, 2}]& ], Offset[{0, 4}, {3., 0.022857142857142857}], 
      ImageScaled[{0.5, 0}]], 
     InsetBox["\<\"LogisticRegression\"\>", {3., 0.011428571428571429}, 
      ImageScaled[{0.5, 0.5}]], InsetBox[
      TagBox[
       InterpretationBox[
        StyleBox["\<\"0.01\"\>",
         ShowStringCharacters->False],
        0.011428571428571429`,
        AutoDelete->True],
       NumberForm[#, {3, 2}]& ], Offset[{0, 4}, {4., 0.011428571428571429}], 
      ImageScaled[{0.5, 0}]], 
     InsetBox["\<\"NaiveBayes\"\>", {4., 0.005714285714285714}, 
      ImageScaled[{0.5, 0.5}]], InsetBox[
      TagBox[
       InterpretationBox[
        StyleBox["\<\"0.01\"\>",
         ShowStringCharacters->False],
        0.005714285714285714,
        AutoDelete->True],
       NumberForm[#, {3, 2}]& ], Offset[{0, 4}, {5., 0.005714285714285714}], 
      ImageScaled[{0.5, 0}]], 
     InsetBox["\<\"NearestNeighbors\"\>", {5., 0.002857142857142857}, 
      ImageScaled[{0.5, 0.5}]]}, {}, {}, 
    StyleBox[
     StyleBox[{
       {Thickness[Tiny], 
        LineBox[{{0.45075018208302986`, 0.}, {5.551210779315368, 0.}}], 
        StyleBox[
         {Thickness[Tiny], InsetBox[
           TagBox["\<\"Mod\[EGrave]les\"\>",
            HoldForm], Offset[{10., 0.}, {5.451201747997087, 0.}], NCache[
           ImageScaled[{0, Rational[1, 2]}], ImageScaled[{0, 0.5}]], 
           Automatic, {1, 0}]}, "GraphicsLabel",
         StripOnInput->False]}, 
       StyleBox[{
         {Thickness[Tiny], 
          LineBox[{{0.5487982520029133, 0.}, 
            Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
             0.}]}], LineBox[{{5.451201747997087, 0.}, 
            Offset[{-1.102182119232618*^-15, -6.}, {5.451201747997087, 
             0.}]}], {{}, {}, {}, {}, {}, {}, {}}}, 
         StyleBox[{}, "GraphicsLabel",
          StripOnInput->False]}, "GraphicsTicks",
        StripOnInput->False]},
      Antialiasing->False], "GraphicsAxes",
     StripOnInput->False]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, True},
  AxesLabel->{
    FormBox[
     TagBox["\"Mod\[EGrave]les\"", HoldForm], TraditionalForm], 
    FormBox[
     TagBox["\"Pr\[EAcute]cision\"", HoldForm], TraditionalForm]},
  AxesOrigin->{0.45075018208302986`, 0.},
  CoordinatesToolOptions:>{"DisplayFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& ), "CopiedValueFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& )},
  DisplayFunction->Identity,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->Large,
  PlotLabel->FormBox[
    StyleBox[
    "\"Pr\[EAcute]cision des mod\[EGrave]les (Pok\[EAcute]mon \[AGrave] \
double type)\"", Bold, 14, StripOnInput -> False], TraditionalForm],
  PlotRange->{{All, All}, {0, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {0, 
     Scaled[0.05]}},
  Ticks->{None, Automatic}]], "Output",
 CellChangeTimes->{{3.952951934602375*^9, 3.952951951190091*^9}},
 CellLabel->
  "Out[297]=",ExpressionUUID->"fd54c7dd-c3e4-45e5-a527-959b1cb1d1b7"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Comparaison des mod\[EGrave]les ", "Section",
 CellChangeTimes->{{3.952934031950756*^9, 
  3.952934045933676*^9}},ExpressionUUID->"4b1c55fa-ec1e-2c4b-9121-\
dba81089212c"],

Cell["\<\
Ce bloc de code a pour objectif d\[CloseCurlyQuote]\[EAcute]valuer la \
performance de plusieurs algorithmes d\[CloseCurlyQuote]apprentissage \
supervis\[EAcute] pour la pr\[EAcute]diction du type principal des Pok\
\[EAcute]mon (Type1). Il compare cinq m\[EAcute]thodes classiques de \
classification : Random Forest, Arbre de D\[EAcute]cision, R\[EAcute]gression \
Logistique, Naive Bayes et K plus proches voisins.

Trois s\[EAcute]ries d\[CloseCurlyQuote]entra\[IHat]nements sont \
test\[EAcute]es :

Round 1 : tous les Pok\[EAcute]mon, peu importe leur nombre de types.

Round 2 : uniquement les Pok\[EAcute]mon avec un seul type.

Round 3 : uniquement les Pok\[EAcute]mon \[AGrave] double type.

Pour chaque round, les mod\[EGrave]les sont \[EAcute]valu\[EAcute]s selon \
deux m\[EAcute]triques : la pr\[EAcute]cision sur les donn\[EAcute]es d\
\[CloseCurlyQuote]entra\[IHat]nement et la pr\[EAcute]cision sur les Pok\
\[EAcute]mon de la 8\:1d49 et 9\:1d49 g\[EAcute]n\[EAcute]ration (jeu de \
test). Le meilleur mod\[EGrave]le de chaque round est s\[EAcute]lectionn\
\[EAcute] en fonction de sa performance sur le test, et un tableau \
r\[EAcute]capitulatif permet de comparer les r\[EAcute]sultats obtenus.\
\>", "Text",
 CellChangeTimes->{
  3.9529460721847687`*^9},ExpressionUUID->"7d7be42b-7736-164b-a75d-\
37f28782505e"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"methods", " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{"\"\<RandomForest\>\"", ",", " ", "\"\<DecisionTree\>\"", ",", 
      " ", "\"\<LogisticRegression\>\"", ",", " ", "\"\<NaiveBayes\>\"", ",", 
      " ", "\"\<NearestNeighbors\>\""}], "}"}]}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"safeAccuracyMeasure", "[", 
     RowBox[{"train_", ",", " ", "test_", ",", " ", "method_"}], "]"}], " ", ":=",
     " ", 
    RowBox[{"Module", "[", "\n", "  ", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"model", ",", " ", "accTrain", ",", " ", "accTest"}], "}"}], ",",
       "\n", "  ", 
      RowBox[{"Quiet", "[", "\n", "    ", 
       RowBox[{"Check", "[", "\n", "      ", 
        RowBox[{
         RowBox[{
          RowBox[{"model", " ", "=", " ", 
           RowBox[{"Classify", "[", 
            RowBox[{"train", ",", " ", 
             RowBox[{"Method", " ", "->", " ", "method"}]}], "]"}]}], ";", 
          "\n", "      ", 
          RowBox[{"accTrain", " ", "=", " ", 
           RowBox[{"ClassifierMeasurements", "[", 
            RowBox[{
            "model", ",", " ", "train", ",", " ", "\"\<Accuracy\>\""}], 
            "]"}]}], ";", "\n", "      ", 
          RowBox[{"accTest", " ", "=", " ", 
           RowBox[{"ClassifierMeasurements", "[", 
            RowBox[{"model", ",", " ", "test", ",", " ", "\"\<Accuracy\>\""}],
             "]"}]}], ";", "\n", "      ", 
          RowBox[{"{", 
           RowBox[{"method", ",", " ", "accTrain", ",", " ", "accTest"}], 
           "}"}]}], ",", "\n", "      ", 
         RowBox[{"Missing", "[", "\"\<Failed\>\"", "]"}]}], "\n", "    ", 
        "]"}], "\n", "  ", "]"}]}], "\n", "]"}]}], ";"}], "\n", "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"ROUND", " ", "1"}], " ", "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"round1Results", " ", "=", " ", 
   RowBox[{"DeleteCases", "[", "\n", "  ", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"safeAccuracyMeasure", "[", 
        RowBox[{"trainSet", ",", " ", "testSet", ",", " ", "#"}], "]"}], " ", 
       "&"}], " ", "/@", " ", "methods"}], ",", "\n", "  ", 
     RowBox[{"Missing", "[", "\"\<Failed\>\"", "]"}]}], "\n", "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"best1", " ", "=", " ", 
    RowBox[{"MaximalBy", "[", 
     RowBox[{"round1Results", ",", " ", 
      RowBox[{
       RowBox[{"#", "[", 
        RowBox[{"[", "3", "]"}], "]"}], " ", "&"}]}], "]"}]}], ";"}], "\n", 
  "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"ROUND", " ", "2"}], " ", "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"round2Results", " ", "=", " ", 
   RowBox[{"DeleteCases", "[", "\n", "  ", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"safeAccuracyMeasure", "[", 
        RowBox[{
        "singleTypeTrainingData", ",", " ", "singleTypeTestingData", ",", " ",
          "#"}], "]"}], " ", "&"}], " ", "/@", " ", "methods"}], ",", "\n", 
     "  ", 
     RowBox[{"Missing", "[", "\"\<Failed\>\"", "]"}]}], "\n", "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"best2", " ", "=", " ", 
    RowBox[{"MaximalBy", "[", 
     RowBox[{"round2Results", ",", " ", 
      RowBox[{
       RowBox[{"#", "[", 
        RowBox[{"[", "3", "]"}], "]"}], " ", "&"}]}], "]"}]}], ";"}], "\n", 
  "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"ROUND", " ", "3"}], " ", "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"round3Results", " ", "=", " ", 
   RowBox[{"DeleteCases", "[", "\n", "  ", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"safeAccuracyMeasure", "[", 
        RowBox[{
        "dualTypeTrainingData", ",", " ", "dualTypeTestingData", ",", " ", 
         "#"}], "]"}], " ", "&"}], " ", "/@", " ", "methods"}], ",", "\n", 
     "  ", 
     RowBox[{"Missing", "[", "\"\<Failed\>\"", "]"}]}], "\n", "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"best3", " ", "=", " ", 
    RowBox[{"MaximalBy", "[", 
     RowBox[{"round3Results", ",", " ", 
      RowBox[{
       RowBox[{"#", "[", 
        RowBox[{"[", "3", "]"}], "]"}], " ", "&"}]}], "]"}]}], ";"}], "\n", 
  "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"R\[EAcute]sum\[EAcute]", " ", "en", " ", "tableau"}], " ", 
   "*)"}]}], "\n", 
 RowBox[{"TableForm", "[", "\n", "  ", 
  RowBox[{
   RowBox[{"{", "\n", "    ", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<Round\>\"", ",", " ", "\"\<M\[EAcute]thode\>\"", ",", 
       " ", "\"\<Pr\[EAcute]cision G\[EAcute]n 8-9\>\"", ",", 
       " ", "\"\<Pr\[EAcute]cision Entra\[IHat]nement\>\""}], "}"}], ",", 
     "\n", "    ", 
     RowBox[{"{", 
      RowBox[{"\"\<Round 1 (Tous)\>\"", ",", " ", 
       RowBox[{"best1", "[", 
        RowBox[{"[", 
         RowBox[{"1", ",", " ", "1"}], "]"}], "]"}], ",", " ", 
       RowBox[{"NumberForm", "[", 
        RowBox[{
         RowBox[{"best1", "[", 
          RowBox[{"[", 
           RowBox[{"1", ",", " ", "3"}], "]"}], "]"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"3", ",", " ", "2"}], "}"}]}], "]"}], ",", " ", 
       RowBox[{"NumberForm", "[", 
        RowBox[{
         RowBox[{"best1", "[", 
          RowBox[{"[", 
           RowBox[{"1", ",", " ", "2"}], "]"}], "]"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"3", ",", " ", "2"}], "}"}]}], "]"}]}], "}"}], ",", "\n", 
     "    ", 
     RowBox[{"{", 
      RowBox[{"\"\<Round 2 (Mono-type)\>\"", ",", " ", 
       RowBox[{"best2", "[", 
        RowBox[{"[", 
         RowBox[{"1", ",", " ", "1"}], "]"}], "]"}], ",", " ", 
       RowBox[{"NumberForm", "[", 
        RowBox[{
         RowBox[{"best2", "[", 
          RowBox[{"[", 
           RowBox[{"1", ",", " ", "3"}], "]"}], "]"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"3", ",", " ", "2"}], "}"}]}], "]"}], ",", " ", 
       RowBox[{"NumberForm", "[", 
        RowBox[{
         RowBox[{"best2", "[", 
          RowBox[{"[", 
           RowBox[{"1", ",", " ", "2"}], "]"}], "]"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"3", ",", " ", "2"}], "}"}]}], "]"}]}], "}"}], ",", "\n", 
     "    ", 
     RowBox[{"{", 
      RowBox[{"\"\<Round 3 (Double-type)\>\"", ",", " ", 
       RowBox[{"best3", "[", 
        RowBox[{"[", 
         RowBox[{"1", ",", " ", "1"}], "]"}], "]"}], ",", " ", 
       RowBox[{"NumberForm", "[", 
        RowBox[{
         RowBox[{"best3", "[", 
          RowBox[{"[", 
           RowBox[{"1", ",", " ", "3"}], "]"}], "]"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"3", ",", " ", "2"}], "}"}]}], "]"}], ",", " ", 
       RowBox[{"NumberForm", "[", 
        RowBox[{
         RowBox[{"best3", "[", 
          RowBox[{"[", 
           RowBox[{"1", ",", " ", "2"}], "]"}], "]"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"3", ",", " ", "2"}], "}"}]}], "]"}]}], "}"}]}], "\n", "  ",
     "}"}], ",", "\n", "  ", 
   RowBox[{"TableHeadings", " ", "->", " ", 
    RowBox[{"{", 
     RowBox[{"None", ",", " ", "None"}], "}"}]}]}], "\n", "]"}]}], "Code",
 CellChangeTimes->{3.952934056018484*^9},
 CellLabel->
  "In[298]:=",ExpressionUUID->"c88fd43f-8faa-6d4b-8c91-5134faf3b039"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"Round\"\>", "\<\"M\[EAcute]thode\"\>", "\<\"Pr\[EAcute]cision G\
\[EAcute]n 8-9\"\>", "\<\"Pr\[EAcute]cision Entra\[IHat]nement\"\>"},
    {"\<\"Round 1 (Tous)\"\>", "\<\"LogisticRegression\"\>", 
     TagBox[
      InterpretationBox[
       StyleBox["\<\"0.14\"\>",
        ShowStringCharacters->False],
       0.13937282229965156`,
       AutoDelete->True],
      NumberForm[#, {3, 2}]& ], 
     TagBox[
      InterpretationBox[
       StyleBox["\<\"0.25\"\>",
        ShowStringCharacters->False],
       0.24676724137931033`,
       AutoDelete->True],
      NumberForm[#, {3, 2}]& ]},
    {"\<\"Round 2 (Mono-type)\"\>", "\<\"LogisticRegression\"\>", 
     TagBox[
      InterpretationBox[
       StyleBox["\<\"0.22\"\>",
        ShowStringCharacters->False],
       0.22321428571428573`,
       AutoDelete->True],
      NumberForm[#, {3, 2}]& ], 
     TagBox[
      InterpretationBox[
       StyleBox["\<\"0.35\"\>",
        ShowStringCharacters->False],
       0.347926267281106,
       AutoDelete->True],
      NumberForm[#, {3, 2}]& ]},
    {"\<\"Round 3 (Double-type)\"\>", "\<\"DecisionTree\"\>", 
     TagBox[
      InterpretationBox[
       StyleBox["\<\"0.03\"\>",
        ShowStringCharacters->False],
       0.03428571428571429,
       AutoDelete->True],
      NumberForm[#, {3, 2}]& ], 
     TagBox[
      InterpretationBox[
       StyleBox["\<\"0.14\"\>",
        ShowStringCharacters->False],
       0.1437246963562753,
       AutoDelete->True],
      NumberForm[#, {3, 2}]& ]}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$, TableHeadings -> {None, None}]]]], "Output",
 CellChangeTimes->{3.952951969373378*^9},
 CellLabel->
  "Out[306]//TableForm=",ExpressionUUID->"c4ccb257-28c8-409c-b5b1-\
3990cf205f95"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Step", " ", "1"}], ":", " ", 
    RowBox[{
    "Load", " ", "the", " ", "data", " ", "and", " ", "clean", " ", "it"}]}], 
   " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"allData", " ", "=", " ", 
     RowBox[{"Normal", " ", "@", " ", 
      RowBox[{"Import", "[", 
       RowBox[{
        RowBox[{"FileNameJoin", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"NotebookDirectory", "[", "]"}], ",", 
           " ", "\"\<pokemon\>\"", ",", " ", "\"\<Pokemon_1_9.csv\>\""}], 
          "}"}], "]"}], ",", " ", "\"\<Dataset\>\""}], "]"}]}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"allDataClean", " ", "=", " ", 
     RowBox[{"Select", "[", "\n", "  ", 
      RowBox[{"allData", ",", "\n", "  ", 
       RowBox[{"Function", "[", 
        RowBox[{"row", ",", "\n", "    ", 
         RowBox[{"And", "[", "\n", "      ", 
          RowBox[{
           RowBox[{"AllTrue", "[", 
            RowBox[{
             RowBox[{"{", 
              
              RowBox[{"\"\<Total\>\"", ",", " ", "\"\<HP\>\"", ",", 
               " ", "\"\<Attack\>\"", ",", " ", "\"\<Defense\>\"", ",", 
               " ", "\"\<Sp. Atk\>\"", ",", " ", "\"\<Sp. Def\>\"", ",", 
               " ", "\"\<Speed\>\"", ",", " ", "\"\<Type1\>\""}], "}"}], ",", 
             " ", 
             RowBox[{
              RowBox[{"KeyExistsQ", "[", 
               RowBox[{"row", ",", " ", "#"}], "]"}], " ", "&"}]}], "]"}], ",",
            "\n", "      ", 
           RowBox[{
            RowBox[{
             RowBox[{"row", "[", "\"\<Type1\>\"", "]"}], " ", "=!=", 
             " ", "\"\<\>\""}], " ", "&&", " ", 
            RowBox[{"!", " ", 
             RowBox[{"MissingQ", "[", 
              RowBox[{"row", "[", "\"\<Type1\>\"", "]"}], "]"}]}]}]}], "\n", 
          "    ", "]"}]}], "\n", "  ", "]"}]}], "\n", "]"}]}], ";"}], "\n", 
   "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"Step", " ", "2"}], ":", " ", 
     RowBox[{"Split", " ", "data", " ", "by", " ", "generation"}]}], " ", 
    "*)"}], "\n", 
   RowBox[{
    RowBox[{"gen1to2Clean", " ", "=", " ", 
     RowBox[{"Select", "[", 
      RowBox[{"allDataClean", ",", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "[", "\"\<Generation\>\"", "]"}], " ", "==", " ", "1"}],
         " ", "&"}]}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"gen2to3Clean", " ", "=", " ", 
     RowBox[{"Select", "[", 
      RowBox[{"allDataClean", ",", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "[", "\"\<Generation\>\"", "]"}], " ", "==", " ", "2"}],
         " ", "&"}]}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"gen3to4Clean", " ", "=", " ", 
     RowBox[{"Select", "[", 
      RowBox[{"allDataClean", ",", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "[", "\"\<Generation\>\"", "]"}], " ", "==", " ", "3"}],
         " ", "&"}]}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"gen4to5Clean", " ", "=", " ", 
     RowBox[{"Select", "[", 
      RowBox[{"allDataClean", ",", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "[", "\"\<Generation\>\"", "]"}], " ", "==", " ", "4"}],
         " ", "&"}]}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"gen5to6Clean", " ", "=", " ", 
     RowBox[{"Select", "[", 
      RowBox[{"allDataClean", ",", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "[", "\"\<Generation\>\"", "]"}], " ", "==", " ", "5"}],
         " ", "&"}]}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"gen6to7Clean", " ", "=", " ", 
     RowBox[{"Select", "[", 
      RowBox[{"allDataClean", ",", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "[", "\"\<Generation\>\"", "]"}], " ", "==", " ", "6"}],
         " ", "&"}]}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"gen7to8Clean", " ", "=", " ", 
     RowBox[{"Select", "[", 
      RowBox[{"allDataClean", ",", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "[", "\"\<Generation\>\"", "]"}], " ", "==", " ", "7"}],
         " ", "&"}]}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"gen8to9Clean", " ", "=", " ", 
     RowBox[{"Select", "[", 
      RowBox[{"allDataClean", ",", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "[", "\"\<Generation\>\"", "]"}], " ", "==", " ", "8"}],
         " ", "&"}]}], "]"}]}], ";"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"Step", " ", "3"}], ":", " ", 
     RowBox[{
     "Prepare", " ", "the", " ", "training", " ", "and", " ", "test", " ", 
      "datasets"}]}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"inputStats", " ", "=", " ", 
     RowBox[{"{", 
      RowBox[{"\"\<Total\>\"", ",", " ", "\"\<HP\>\"", ",", 
       " ", "\"\<Attack\>\"", ",", " ", "\"\<Defense\>\"", ",", 
       " ", "\"\<Sp. Atk\>\"", ",", " ", "\"\<Sp. Def\>\"", ",", 
       " ", "\"\<Speed\>\""}], "}"}]}], ";"}], "\n", "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"makeTrainingSet", "[", "data_", "]"}], " ", ":=", " ", 
     RowBox[{"Map", "[", "\n", "  ", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"row", ",", "\n", "    ", 
         RowBox[{
          RowBox[{"Association", "[", 
           RowBox[{"KeyTake", "[", 
            RowBox[{"row", ",", " ", "inputStats"}], "]"}], "]"}], " ", "->", 
          " ", 
          RowBox[{"ToLowerCase", "[", 
           RowBox[{"row", "[", "\"\<Type1\>\"", "]"}], "]"}]}]}], "\n", "  ", 
        "]"}], ",", "\n", "  ", "data"}], "\n", "]"}]}], ";"}], "\n", "\n", 
   RowBox[{
    RowBox[{"trainSet1to2", " ", "=", " ", 
     RowBox[{"makeTrainingSet", "[", "gen1to2Clean", "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"trainSet2to3", " ", "=", " ", 
     RowBox[{"makeTrainingSet", "[", "gen2to3Clean", "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"trainSet3to4", " ", "=", " ", 
     RowBox[{"makeTrainingSet", "[", "gen3to4Clean", "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"trainSet4to5", " ", "=", " ", 
     RowBox[{"makeTrainingSet", "[", "gen4to5Clean", "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"trainSet5to6", " ", "=", " ", 
     RowBox[{"makeTrainingSet", "[", "gen5to6Clean", "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"trainSet6to7", " ", "=", " ", 
     RowBox[{"makeTrainingSet", "[", "gen6to7Clean", "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"trainSet7to8", " ", "=", " ", 
     RowBox[{"makeTrainingSet", "[", "gen7to8Clean", "]"}]}], ";"}], "\n", "\n", 
   RowBox[{
    RowBox[{"testSet8to9", " ", "=", " ", 
     RowBox[{"makeTrainingSet", "[", "gen8to9Clean", "]"}]}], ";"}], "\n", 
   "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"Step", " ", "4"}], ":", " ", 
     RowBox[{
     "Define", " ", "the", " ", "models", " ", "to", " ", "be", " ", 
      "tested"}]}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"methods", " ", "=", " ", 
     RowBox[{"{", 
      RowBox[{"\"\<RandomForest\>\"", ",", " ", "\"\<LogisticRegression\>\"", 
       ",", " ", "\"\<NearestNeighbors\>\""}], "}"}]}], ";"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"Step", " ", "5"}], ":", " ", 
      RowBox[{
      "Train", " ", "models", " ", "for", " ", "each", " ", "generation", " ",
        "and", " ", "model"}]}], ",", " ", 
     RowBox[{"then", " ", "compute", " ", "accuracy"}]}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"accuracyByGeneration", "[", 
      RowBox[{"trainSet_", ",", " ", "testSet_"}], "]"}], " ", ":=", " ", 
     "\n", "  ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"models", ",", " ", "accuracies"}], "}"}], ",", "\n", "   ", 
       RowBox[{
        RowBox[{"models", " ", "=", " ", 
         RowBox[{"AssociationMap", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Classify", "[", 
             RowBox[{"trainSet", ",", " ", 
              RowBox[{"Method", " ", "->", " ", "#"}]}], "]"}], " ", "&"}], ",",
            " ", "methods"}], "]"}]}], ";", "\n", "   ", 
        RowBox[{"accuracies", " ", "=", " ", 
         RowBox[{"AssociationMap", "[", "\n", "     ", 
          RowBox[{
           RowBox[{
            RowBox[{"ClassifierMeasurements", "[", 
             RowBox[{
              RowBox[{"models", "[", "#", "]"}], ",", " ", "testSet", ",", 
              " ", "\"\<Accuracy\>\""}], "]"}], " ", "&"}], ",", "\n", 
           "     ", "methods"}], "\n", "     ", "]"}]}], ";", "\n", "   ", 
        "accuracies"}]}], "\n", "   ", "]"}]}], ";"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"Step", " ", "6"}], ":", " ", 
     RowBox[{
     "Apply", " ", "the", " ", "function", " ", "for", " ", "each", " ", 
      "generation", " ", "pair"}]}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"accuraciesGen1to2", " ", "=", " ", 
     RowBox[{"accuracyByGeneration", "[", 
      RowBox[{"trainSet1to2", ",", " ", "testSet8to9"}], "]"}]}], ";"}], " ", 
   "\n", 
   RowBox[{
    RowBox[{"accuraciesGen2to3", " ", "=", " ", 
     RowBox[{"accuracyByGeneration", "[", 
      RowBox[{"trainSet2to3", ",", " ", "testSet8to9"}], "]"}]}], ";"}], " ", 
   "\n", 
   RowBox[{
    RowBox[{"accuraciesGen3to4", " ", "=", " ", 
     RowBox[{"accuracyByGeneration", "[", 
      RowBox[{"trainSet3to4", ",", " ", "testSet8to9"}], "]"}]}], ";"}], " ", 
   "\n", 
   RowBox[{
    RowBox[{"accuraciesGen4to5", " ", "=", " ", 
     RowBox[{"accuracyByGeneration", "[", 
      RowBox[{"trainSet4to5", ",", " ", "testSet8to9"}], "]"}]}], ";"}], " ", 
   "\n", 
   RowBox[{
    RowBox[{"accuraciesGen5to6", " ", "=", " ", 
     RowBox[{"accuracyByGeneration", "[", 
      RowBox[{"trainSet5to6", ",", " ", "testSet8to9"}], "]"}]}], ";"}], " ", 
   "\n", 
   RowBox[{
    RowBox[{"accuraciesGen6to7", " ", "=", " ", 
     RowBox[{"accuracyByGeneration", "[", 
      RowBox[{"trainSet6to7", ",", " ", "testSet8to9"}], "]"}]}], ";"}], " ", 
   "\n", 
   RowBox[{
    RowBox[{"accuraciesGen7to8", " ", "=", " ", 
     RowBox[{"accuracyByGeneration", "[", 
      RowBox[{"trainSet7to8", ",", " ", "testSet8to9"}], "]"}]}], ";"}], " ", 
   "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"Step", " ", "7"}], ":", " ", 
     RowBox[{
     "Prepare", " ", "the", " ", "data", " ", "for", " ", "plotting"}]}], " ",
     "*)"}], "\n", 
   RowBox[{
    RowBox[{"accuracyData", " ", "=", " ", 
     RowBox[{"{", "\n", "  ", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<Gen 1-2\>\"", ",", " ", "\"\<Gen 2-3\>\"", ",", 
         " ", "\"\<Gen 3-4\>\"", ",", " ", "\"\<Gen 4-5\>\"", ",", 
         " ", "\"\<Gen 5-6\>\"", ",", " ", "\"\<Gen 6-7\>\"", ",", 
         " ", "\"\<Gen 7-8\>\"", ",", " ", "\"\<Gen 8-9\>\""}], "}"}], ",", 
       "\n", "  ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"accuraciesGen1to2", "[", "\"\<RandomForest\>\"", "]"}], ",",
          " ", 
         RowBox[{"accuraciesGen2to3", "[", "\"\<RandomForest\>\"", "]"}], ",",
          " ", 
         RowBox[{"accuraciesGen3to4", "[", "\"\<RandomForest\>\"", "]"}], ",",
          " ", 
         RowBox[{"accuraciesGen4to5", "[", "\"\<RandomForest\>\"", "]"}], ",",
          " ", 
         RowBox[{"accuraciesGen5to6", "[", "\"\<RandomForest\>\"", "]"}], ",",
          " ", 
         RowBox[{"accuraciesGen6to7", "[", "\"\<RandomForest\>\"", "]"}], ",",
          " ", 
         RowBox[{"accuraciesGen7to8", "[", "\"\<RandomForest\>\"", "]"}], ",",
          " ", 
         RowBox[{"accuraciesGen8to9", "[", "\"\<RandomForest\>\"", "]"}]}], 
        "}"}], ",", "\n", "  ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
         "accuraciesGen1to2", "[", "\"\<LogisticRegression\>\"", "]"}], ",", 
         " ", 
         RowBox[{
         "accuraciesGen2to3", "[", "\"\<LogisticRegression\>\"", "]"}], ",", 
         " ", 
         RowBox[{
         "accuraciesGen3to4", "[", "\"\<LogisticRegression\>\"", "]"}], ",", 
         " ", 
         RowBox[{
         "accuraciesGen4to5", "[", "\"\<LogisticRegression\>\"", "]"}], ",", 
         " ", 
         RowBox[{
         "accuraciesGen5to6", "[", "\"\<LogisticRegression\>\"", "]"}], ",", 
         " ", 
         RowBox[{
         "accuraciesGen6to7", "[", "\"\<LogisticRegression\>\"", "]"}], ",", 
         " ", 
         RowBox[{
         "accuraciesGen7to8", "[", "\"\<LogisticRegression\>\"", "]"}], ",", 
         " ", 
         RowBox[{
         "accuraciesGen8to9", "[", "\"\<LogisticRegression\>\"", "]"}]}], 
        "}"}], ",", "\n", "  ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"accuraciesGen1to2", "[", "\"\<NearestNeighbors\>\"", "]"}], 
         ",", " ", 
         RowBox[{"accuraciesGen2to3", "[", "\"\<NearestNeighbors\>\"", "]"}], 
         ",", " ", 
         RowBox[{"accuraciesGen3to4", "[", "\"\<NearestNeighbors\>\"", "]"}], 
         ",", " ", 
         RowBox[{"accuraciesGen4to5", "[", "\"\<NearestNeighbors\>\"", "]"}], 
         ",", " ", 
         RowBox[{"accuraciesGen5to6", "[", "\"\<NearestNeighbors\>\"", "]"}], 
         ",", " ", 
         RowBox[{"accuraciesGen6to7", "[", "\"\<NearestNeighbors\>\"", "]"}], 
         ",", " ", 
         RowBox[{"accuraciesGen7to8", "[", "\"\<NearestNeighbors\>\"", "]"}], 
         ",", " ", 
         RowBox[{
         "accuraciesGen8to9", "[", "\"\<NearestNeighbors\>\"", "]"}]}], 
        "}"}]}], "\n", "}"}]}], ";"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"Step", " ", "8"}], ":", " ", 
     RowBox[{
      RowBox[{
      "Plot", " ", "the", " ", "results", " ", "using", " ", "a", " ", 
       "stacked", " ", "line", " ", "chart", " ", "with", " ", "auto"}], "-", 
      RowBox[{"fitting", " ", "Y"}], "-", "axis"}]}], " ", "*)"}], "\n", 
   RowBox[{"ListLinePlot", "[", "\n", "  ", 
    RowBox[{
     RowBox[{"accuracyData", "[", 
      RowBox[{"[", 
       RowBox[{"2", " ", ";;"}], "]"}], "]"}], ",", "\n", "  ", 
     RowBox[{"PlotStyle", " ", "->", " ", 
      RowBox[{"{", 
       RowBox[{
       "Thick", ",", " ", "Red", ",", " ", "Blue", ",", " ", "Green"}], 
       "}"}]}], ",", "\n", "  ", 
     RowBox[{"PlotRange", " ", "->", " ", 
      RowBox[{"{", 
       RowBox[{"Automatic", ",", " ", 
        RowBox[{"{", 
         RowBox[{"0", ",", " ", "0.4"}], "}"}]}], "}"}]}], ",", "  ", "\n", 
     "  ", 
     RowBox[{"PlotLabels", " ", "->", " ", 
      RowBox[{"{", 
       RowBox[{"\"\<RandomForest\>\"", ",", " ", "\"\<LogisticRegression\>\"",
         ",", " ", "\"\<NearestNeighbors\>\""}], "}"}]}], ",", "\n", "  ", 
     RowBox[{"Filling", " ", "->", " ", "Axis"}], ",", "\n", "  ", 
     RowBox[{"Frame", " ", "->", " ", "True"}], ",", "\n", "  ", 
     RowBox[{"FrameLabel", " ", "->", " ", 
      RowBox[{"{", 
       RowBox[{"\"\<Generations\>\"", ",", " ", "\"\<Accuracy\>\""}], "}"}]}],
      ",", "\n", "  ", 
     RowBox[{"GridLines", " ", "->", " ", "Automatic"}]}], "\n", "]"}], "\n", 
   "\n"}]}]], "Code",
 CellChangeTimes->{
  3.9529488808985844`*^9, 3.9529489233576393`*^9, 3.9529489541039143`*^9, 
   3.9529490125967064`*^9, {3.9529491354525185`*^9, 3.9529491390536785`*^9}, 
   3.9529492413497524`*^9, 3.9529493486050873`*^9, {3.9529494576301365`*^9, 
   3.95294948148691*^9}, 3.9529495549988003`*^9, 3.9529496140147114`*^9, 
   3.9529497383000584`*^9, 3.9529498469022408`*^9, {3.952949891028326*^9, 
   3.952949907770893*^9}, {3.95294995430151*^9, 3.952949954436636*^9}, {
   3.9529519826582947`*^9, 3.952951983537107*^9}},
 CellLabel->
  "In[338]:=",ExpressionUUID->"3abe3c43-8a89-f34d-9505-8399d30a9faf"],

Cell[BoxData[
 GraphicsBox[{{}, GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGAwAGIQDQEf7C1Z9Zc/eLrFHirgcOrI1He8GpuhfA4HVHkB
NL4ImnoJqPwSKF/G4TvblE7tu6vtYfZdaz/260LEfrh90S1/TK2zNsLtS3fX
dfo3ay/cPoj+3XD7JNoSgWgH3D4IfwXcPoh5B+H2rXQ9Eb958Ta4faju50Az
TwDNvSJo7sO0D5X/AWYPA0welU+5/Gh8USe+AK4ztdE=
    "], {{{}, 
      {RGBColor[0.24, 0.6, 0.8], Opacity[0.2], EdgeForm[None], 
       GraphicsGroupBox[PolygonBox[{{1, 26, 27, 7, 6, 5, 4, 3, 2}}]]}, {}, 
      {RGBColor[1, 0, 0], Opacity[0.2], EdgeForm[None], 
       GraphicsGroupBox[
        PolygonBox[{{8, 24, 25, 14, 13, 12, 11, 10, 9}}]]}, {}, 
      {RGBColor[0, 0, 1], Opacity[0.2], EdgeForm[None], 
       GraphicsGroupBox[
        PolygonBox[{{15, 22, 23, 21, 20, 19, 18, 17, 
         16}}]]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}, {{}, {}, 
      TagBox[
       {RGBColor[0.24, 0.6, 0.8], PointSize[
         NCache[
          Rational[7, 360], 0.019444444444444445`]], Thickness[Large], 
        LineBox[{1, 2, 3, 4, 5, 6, 7}]},
       Annotation[#, "Charting`Private`Tag#1"]& ], 
      TagBox[
       {RGBColor[1, 0, 0], PointSize[
         NCache[
          Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[2], 
        LineBox[{8, 9, 10, 11, 12, 13, 14}]},
       Annotation[#, "Charting`Private`Tag#2"]& ], 
      TagBox[
       {RGBColor[0, 0, 1], PointSize[
         NCache[
          Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[2], 
        LineBox[{15, 16, 17, 18, 19, 20, 21}]},
       Annotation[#, "Charting`Private`Tag#3"]& ]}}], {{{{}, {
       GraphicsGroupBox[{
         {GrayLevel[1], AbsoluteThickness[4], Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
          "Round"], 
          BSplineCurveBox[{
           Offset[{3, 0}, {7., 0.05442176870748299}], 
            Offset[{2.4068579985691128`, 1.7908195260058688`}, {
             7.285833333333333, 0.05442176870748299}], 
            Offset[{0, 0}, {7.51967280697518, 0.07050853561751386}], 
            Offset[{5., 1.1102230246251565`*^-15}, {7.51967280697518, 
             0.07050853561751386}], 
            Offset[{10., 2.220446049250313*^-15}, {7.51967280697518, 
             0.07050853561751386}], 
            Offset[{10., 2.220446049250313*^-15}, {7.51967280697518, 
             0.07050853561751386}]}]}, 
         {RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
           Offset[{3, 0}, {7., 0.05442176870748299}], 
            Offset[{2.4068579985691128`, 1.7908195260058688`}, {
             7.285833333333333, 0.05442176870748299}], 
            Offset[{0, 0}, {7.51967280697518, 0.07050853561751386}], 
            Offset[{5., 1.1102230246251565`*^-15}, {7.51967280697518, 
             0.07050853561751386}], 
            Offset[{10., 2.220446049250313*^-15}, {7.51967280697518, 
             0.07050853561751386}], 
            Offset[{10., 2.220446049250313*^-15}, {7.51967280697518, 
             0.07050853561751386}]}]}, 
         {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
           Offset[{82., 6.000000000000018}, {7.51967280697518, 
             0.07050853561751386}], 
            Offset[{82., -5.999999999999982}, {7.51967280697518, 
             0.07050853561751386}], 
            Offset[{10., -5.999999999999998}, {7.51967280697518, 
             0.07050853561751386}], 
            Offset[{10., 6.000000000000002}, {7.51967280697518, 
             0.07050853561751386}]}]}, 
         {RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
          StyleBox[
           RotationBox["\<\"RandomForest\"\>",
            BoxRotation->0.],
           StripOnInput->False,
           LineOpacity->1,
           FrontFaceOpacity->1,
           BackFaceOpacity->1,
           Opacity->1,
           FontOpacity->1], 
          Offset[{46., 1.021405182655144*^-14}, \
{7.51967280697518, 0.07050853561751386}], NCache[
          ImageScaled[{Rational[1, 2], Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}], GraphicsGroupBox[{
         {GrayLevel[1], AbsoluteThickness[4], Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
          "Round"], 
          BSplineCurveBox[{
           Offset[{3, 0}, {7., 0.1360544217687075}], 
            Offset[{2.999777381429231, 0.03654670799931837}, {
             7.285833333333333, 0.1360544217687075}], 
            Offset[{0, 0}, {7.51967280697518, 0.1363178283692479}], 
            Offset[{5., 1.1102230246251565`*^-15}, {7.51967280697518, 
             0.1363178283692479}], 
            Offset[{10., 2.220446049250313*^-15}, {7.51967280697518, 
             0.1363178283692479}], 
            Offset[{10., 2.220446049250313*^-15}, {7.51967280697518, 
             0.1363178283692479}]}]}, 
         {RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
           Offset[{3, 0}, {7., 0.1360544217687075}], 
            Offset[{2.999777381429231, 0.03654670799931837}, {
             7.285833333333333, 0.1360544217687075}], 
            Offset[{0, 0}, {7.51967280697518, 0.1363178283692479}], 
            Offset[{5., 1.1102230246251565`*^-15}, {7.51967280697518, 
             0.1363178283692479}], 
            Offset[{10., 2.220446049250313*^-15}, {7.51967280697518, 
             0.1363178283692479}], 
            Offset[{10., 2.220446049250313*^-15}, {7.51967280697518, 
             0.1363178283692479}]}]}, 
         {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
           Offset[{100., 7.000000000000022}, {7.51967280697518, 
             0.1363178283692479}], 
            Offset[{100., -6.999999999999978}, {7.51967280697518, 
             0.1363178283692479}], 
            Offset[{10., -6.999999999999997}, {7.51967280697518, 
             0.1363178283692479}], 
            Offset[{10., 7.000000000000003}, {7.51967280697518, 
             0.1363178283692479}]}]}, 
         {RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
          StyleBox[
           RotationBox["\<\"LogisticRegression\"\>",
            BoxRotation->0.],
           StripOnInput->False,
           LineOpacity->1,
           FrontFaceOpacity->1,
           BackFaceOpacity->1,
           Opacity->1,
           FontOpacity->1], 
          Offset[{55., 1.2212453270876722*^-14}, \
{7.51967280697518, 0.1363178283692479}], NCache[
          ImageScaled[{Rational[1, 2], Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}], GraphicsGroupBox[{
         {GrayLevel[1], AbsoluteThickness[4], Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
          "Round"], 
          BSplineCurveBox[{
           Offset[{3, 0}, {7., 0.047619047619047616`}], 
            Offset[{2.427247680810738, -1.7630849939804079`}, {
             7.285833333333333, 0.047619047619047616`}], 
            Offset[{0, 0}, {7.51967280697518, 0.03191445878106123}], 
            Offset[{5., 1.1102230246251565`*^-15}, {7.51967280697518, 
             0.03191445878106123}], 
            Offset[{10., 2.220446049250313*^-15}, {7.51967280697518, 
             0.03191445878106123}], 
            Offset[{10., 2.220446049250313*^-15}, {7.51967280697518, 
             0.03191445878106123}]}]}, 
         {RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
           Offset[{3, 0}, {7., 0.047619047619047616`}], 
            Offset[{2.427247680810738, -1.7630849939804079`}, {
             7.285833333333333, 0.047619047619047616`}], 
            Offset[{0, 0}, {7.51967280697518, 0.03191445878106123}], 
            Offset[{5., 1.1102230246251565`*^-15}, {7.51967280697518, 
             0.03191445878106123}], 
            Offset[{10., 2.220446049250313*^-15}, {7.51967280697518, 
             0.03191445878106123}], 
            Offset[{10., 2.220446049250313*^-15}, {7.51967280697518, 
             0.03191445878106123}]}]}, 
         {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
           Offset[{96., 7.000000000000021}, {7.51967280697518, 
             0.03191445878106123}], 
            Offset[{96., -6.999999999999979}, {7.51967280697518, 
             0.03191445878106123}], 
            Offset[{10., -6.999999999999998}, {7.51967280697518, 
             0.03191445878106123}], 
            Offset[{10., 7.000000000000002}, {7.51967280697518, 
             0.03191445878106123}]}]}, 
         {RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
          StyleBox[
           RotationBox["\<\"NearestNeighbors\"\>",
            BoxRotation->0.],
           StripOnInput->False,
           LineOpacity->1,
           FrontFaceOpacity->1,
           BackFaceOpacity->1,
           Opacity->1,
           FontOpacity->1], 
          Offset[{53., 1.176836406102666*^-14}, \
{7.51967280697518, 0.03191445878106123}], NCache[
          ImageScaled[{Rational[1, 2], Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}]}}, {}}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0., 0},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{
     FormBox[
      TagBox["\"Accuracy\"", HoldForm], TraditionalForm], None}, {
     FormBox[
      TagBox["\"Generations\"", HoldForm], TraditionalForm], None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{Automatic, Automatic},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->{{All, 123.22603007300926`}, {All, All}},
  ImageSize->{681.7773437499893, Automatic},
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "DefaultPlotStyle" -> {
      Directive[
       RGBColor[0.24, 0.6, 0.8], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.95, 0.627, 0.1425], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.455, 0.7, 0.21], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.922526, 0.385626, 0.209179], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.578, 0.51, 0.85], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.772079, 0.431554, 0.102387], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.4, 0.64, 1.], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[1., 0.75, 0.], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.8, 0.4, 0.76], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.637, 0.65, 0.], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.915, 0.3325, 0.2125], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
       AbsoluteThickness[2]]}, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05], "OptimizePlotMarkers" -> True, 
    "IncludeHighlighting" -> "CurrentSet", "HighlightStyle" -> Automatic, 
    "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 7.}, {0., 0.4}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {0, 
     Scaled[0.08090169943749476]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.952951976608469*^9, 3.9529519943612013`*^9}},
 CellLabel->
  "Out[368]=",ExpressionUUID->"f386ee48-60de-4d55-aa1e-9ad25b06a32f"]
}, Open  ]],

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{3.952942928519079*^9, 
  3.952951973859009*^9},ExpressionUUID->"c58222c0-022c-664c-8883-\
7d22fcc0232f"],

Cell["\<\
Les r\[EAcute]sultats obtenus mettent en \[EAcute]vidence des \
diff\[EAcute]rences notables selon les cas de figure. Sur \
l\[CloseCurlyQuote]ensemble des Pok\[EAcute]mon (Round 1), le mod\[EGrave]le \
RandomForest parvient \[AGrave] atteindre une pr\[EAcute]cision de 16\:202f% \
sur les g\[EAcute]n\[EAcute]rations 8 et 9, ce qui reste faible \
malgr\[EAcute] une pr\[EAcute]cision d\[CloseCurlyQuote]entra\[IHat]nement \
bien plus \[EAcute]lev\[EAcute]e (58\:202f%). Cela indique un fort \
sur-apprentissage : le mod\[EGrave]le m\[EAcute]morise plut\[OHat]t qu\
\[CloseCurlyQuote]il ne g\[EAcute]n\[EAcute]ralise.

Dans le cas des Pok\[EAcute]mon \[AGrave] type unique (Round 2), les \
performances s\[CloseCurlyQuote]am\[EAcute]liorent \
l\[EAcute]g\[EGrave]rement, avec la r\[EAcute]gression logistique atteignant \
22\:202f% de pr\[EAcute]cision sur les g\[EAcute]n\[EAcute]rations \
r\[EAcute]centes. Le fait de retirer la complexit\[EAcute] li\[EAcute]e au \
Type2 semble donc faciliter la t\[AHat]che, m\[EHat]me si les \
r\[EAcute]sultats restent modestes.

Enfin, pour les Pok\[EAcute]mon \[AGrave] double type (Round 3), la pr\
\[EAcute]diction du Type1 devient extr\[EHat]mement difficile. La meilleure m\
\[EAcute]thode, ici DecisionTree, n\[CloseCurlyQuote]atteint que 3\:202f% de \
pr\[EAcute]cision sur les g\[EAcute]n\[EAcute]rations 8 et 9, ce qui est \
proche du hasard. Cela confirme que les Pok\[EAcute]mon \[AGrave] deux types \
pr\[EAcute]sentent des profils statistiques plus ambigus et que les types ne \
sont pas directement d\[EAcute]ductibles de leurs seules \
caract\[EAcute]ristiques num\[EAcute]riques.\
\>", "Text",
 CellChangeTimes->{{3.952942925997719*^9, 
  3.952942935666853*^9}},ExpressionUUID->"251dc72b-3f33-0546-b1f1-\
33a1b5ecf8a4"],

Cell["", "Subsection",ExpressionUUID->"be2153a2-3af8-fc47-9283-7399f362c2b7"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Tests interactif des mod\[EGrave]les ", "Chapter",
 CellChangeTimes->{{3.9529340769678307`*^9, 3.952934079886757*^9}, {
  3.952948782980095*^9, 
  3.952948795546854*^9}},ExpressionUUID->"dbceb49b-29dd-fc4d-ae32-\
d23fd4547898"],

Cell[CellGroupData[{

Cell["\<\
Outil de pr\[EAcute]diction des types des Pok\[EAcute]mon selon leur \
statistiques\
\>", "Subsection",
 CellChangeTimes->{{3.9529340964883366`*^9, 3.952934132207617*^9}, 
   3.9529341949446583`*^9},ExpressionUUID->"d2697d1e-f5b9-ed43-b846-\
fc68af0754cc"],

Cell["\<\
Pour conclure cette partie sur le machine learning, j\[CloseCurlyQuote]ai con\
\[CCedilla]u un outil interactif de pr\[EAcute]diction du type des Pok\
\[EAcute]mon. L\[CloseCurlyQuote]utilisateur peut entrer le nom d\
\[CloseCurlyQuote]un Pok\[EAcute]mon (en anglais), et le programme va \
extraire ses statistiques de combat pour pr\[EAcute]dire son Type1 \[AGrave] \
l\[CloseCurlyQuote]aide des mod\[EGrave]les entra\[IHat]n\[EAcute]s pr\
\[EAcute]c\[EAcute]demment.

L\[CloseCurlyQuote]outil interroge successivement les trois mod\[EGrave]les \
RandomForest issus des trois sc\[EAcute]narios \
d\[CloseCurlyQuote]apprentissage (tous les Pok\[EAcute]mon, mono-types, \
double-types), et affiche pour chacun :

1 - la pr\[EAcute]diction principale.

2 - les trois types les plus probables avec leurs scores de probabilit\
\[EAcute].

Ce module permet de visualiser de mani\[EGrave]re concr\[EGrave]te les \
capacit\[EAcute]s et les limites des mod\[EGrave]les entra\[IHat]n\[EAcute]s, \
en testant des cas r\[EAcute]els. \
\>", "Text",
 CellChangeTimes->{{3.952942995949127*^9, 
  3.952943024851166*^9}},ExpressionUUID->"4b47193b-0049-924a-9bf4-\
ffbb805c1f26"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Module", "[", "\n", "  ", 
   RowBox[{
    RowBox[{"{", "\n", "    ", 
     RowBox[{
      RowBox[{"inputStats", " ", "=", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<Total\>\"", ",", " ", "\"\<HP\>\"", ",", 
         " ", "\"\<Attack\>\"", ",", " ", "\"\<Defense\>\"", ",", 
         " ", "\"\<Sp. Atk\>\"", ",", " ", "\"\<Sp. Def\>\"", ",", 
         " ", "\"\<Speed\>\""}], "}"}]}], ",", "\n", "    ", "data", ",", " ",
       "nameList", ",", " ", "nameInput", ",", " ", "found", ",", " ", 
      "inputData", ",", " ", "tryPredict", ",", " ", 
      RowBox[{"results", " ", "=", " ", 
       RowBox[{"{", "}"}]}]}], "\n", "  ", "}"}], ",", "\n", "\n", "  ", 
    RowBox[{"(*", " ", 
     RowBox[{
     "\|01f4e5", " ", "Chargement", " ", "et", " ", "nettoyage", " ", "du", " ",
       "dataset"}], " ", "*)"}], "\n", "  ", 
    RowBox[{
     RowBox[{"data", " ", "=", " ", 
      RowBox[{"Import", "[", 
       RowBox[{
        RowBox[{"FileNameJoin", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"NotebookDirectory", "[", "]"}], ",", 
           " ", "\"\<pokemon\>\"", ",", " ", "\"\<Pokemon_1_9.csv\>\""}], 
          "}"}], "]"}], ",", " ", "\"\<Dataset\>\""}], "]"}]}], ";", "\n", 
     "  ", 
     RowBox[{"data", " ", "=", " ", 
      RowBox[{"Select", "[", "\n", "    ", 
       RowBox[{
        RowBox[{"Normal", "[", "data", "]"}], ",", "\n", "    ", 
        RowBox[{"Function", "[", 
         RowBox[{"row", ",", "\n", "      ", 
          RowBox[{
           RowBox[{"AllTrue", "[", 
            RowBox[{
             RowBox[{"Join", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"\"\<Name\>\"", ",", " ", "\"\<Type1\>\""}], "}"}], ",",
                " ", "inputStats"}], "]"}], ",", " ", 
             RowBox[{
              RowBox[{"KeyExistsQ", "[", 
               RowBox[{"row", ",", " ", "#"}], "]"}], " ", "&"}]}], "]"}], 
           " ", "&&", "\n", "      ", 
           RowBox[{
            RowBox[{"row", "[", "\"\<Type1\>\"", "]"}], " ", "=!=", 
            " ", "\"\<\>\""}], " ", "&&", " ", 
           RowBox[{"!", " ", 
            RowBox[{"MissingQ", "[", 
             RowBox[{"row", "[", "\"\<Type1\>\"", "]"}], "]"}]}]}]}], "\n", 
         "    ", "]"}]}], "\n", "  ", "]"}]}], ";", "\n", "\n", "  ", 
     RowBox[{"(*", " ", 
      RowBox[{"\|01f4db", " ", "Liste", " ", "des", " ", "noms"}], " ", 
      "*)"}], "\n", "  ", 
     RowBox[{"nameList", " ", "=", " ", 
      RowBox[{"DeleteDuplicates", "[", 
       RowBox[{"Sort", "[", 
        RowBox[{"ToLowerCase", " ", "/@", " ", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", " ", "\"\<Name\>\""}], "]"}], "]"}]}], "]"}], 
       "]"}]}], ";", "\n", "\n", "  ", 
     RowBox[{"(*", " ", 
      RowBox[{"\:270f\:fe0f", " ", "Entr\[EAcute]e", " ", "du", " ", "nom"}], 
      " ", "*)"}], "\n", "  ", 
     RowBox[{"nameInput", " ", "=", " ", 
      RowBox[{"ToLowerCase", "@", 
       RowBox[{
       "InputString", 
        "[", "\"\<Entre le nom du Pok\[EAcute]mon (en anglais) :\>\"", 
        "]"}]}]}], ";", "\n", "  ", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"nameInput", " ", "===", " ", "\"\<\>\""}], ",", " ", 
       RowBox[{
       "Return", "[", "\"\<\:274c Aucune entr\[EAcute]e fournie.\>\"", 
        "]"}]}], "]"}], ";", "\n", "  ", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"!", 
        RowBox[{"MemberQ", "[", 
         RowBox[{"nameList", ",", " ", "nameInput"}], "]"}]}], ",", " ", 
       RowBox[{
       "Return", 
        "[", "\"\<\:274c Ce Pok\[EAcute]mon n'existe pas dans la base de donn\
\[EAcute]es.\>\"", "]"}]}], "]"}], ";", "\n", "\n", "  ", 
     RowBox[{"(*", " ", 
      RowBox[{
      "\|01f50d", " ", "Recherche", " ", "du", " ", "Pok\[EAcute]mon"}], " ", 
      "*)"}], "\n", "  ", 
     RowBox[{"found", " ", "=", " ", 
      RowBox[{"Select", "[", 
       RowBox[{"data", ",", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"ToLowerCase", "[", 
           RowBox[{"#", "[", "\"\<Name\>\"", "]"}], "]"}], " ", "==", " ", 
          "nameInput"}], " ", "&"}]}], "]"}]}], ";", "\n", "  ", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "found", "]"}], " ", "==", " ", "0"}], ",", 
       " ", 
       RowBox[{
       "Return", 
        "[", "\"\<\:274c Aucune donn\[EAcute]e trouv\[EAcute]e pour ce Pok\
\[EAcute]mon.\>\"", "]"}]}], "]"}], ";", "\n", "\n", "  ", 
     RowBox[{"inputData", " ", "=", " ", 
      RowBox[{"AssociationThread", "[", 
       RowBox[{"inputStats", ",", " ", 
        RowBox[{"Lookup", "[", 
         RowBox[{
          RowBox[{"First", "[", "found", "]"}], ",", " ", "inputStats"}], 
         "]"}]}], "]"}]}], ";", "\n", "  ", 
     RowBox[{"Print", "[", 
      RowBox[{"\"\<\|01f9ea Stats utilis\[EAcute]es : \>\"", ",", " ", 
       "inputData"}], "]"}], ";", "\n", "\n", "  ", 
     RowBox[{"(*", " ", 
      RowBox[{
      "\|01f501", " ", "Fonction", " ", "pr\[EAcute]diction", " ", 
       "s\[EAcute]curis\[EAcute]e"}], " ", "*)"}], "\n", "  ", 
     RowBox[{
      RowBox[{"tryPredict", "[", 
       RowBox[{"model_", ",", " ", "label_"}], "]"}], " ", ":=", " ", 
      RowBox[{"Quiet", "@", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"pred", ",", " ", "prob"}], "}"}], ",", "\n", "    ", 
         RowBox[{
          RowBox[{"pred", " ", "=", " ", 
           RowBox[{"model", "[", "inputData", "]"}]}], ";", "\n", "    ", 
          RowBox[{"prob", " ", "=", " ", 
           RowBox[{"model", "[", 
            RowBox[{"\"\<Probabilities\>\"", ",", " ", "inputData"}], "]"}]}],
           ";", "\n", "    ", 
          RowBox[{"{", "\n", "      ", 
           RowBox[{"label", ",", "\n", "      ", 
            RowBox[{"Style", "[", 
             RowBox[{"pred", ",", " ", "Bold"}], "]"}], ",", "\n", "      ", 
            RowBox[{"TakeLargest", "[", 
             RowBox[{"prob", ",", " ", "3"}], "]"}]}], "\n", "    ", 
           "}"}]}]}], "\n", "  ", "]"}]}]}], ";", "\n", "\n", "  ", 
     RowBox[{"(*", " ", 
      RowBox[{"\|01f52e", " ", "Test", " ", "de", " ", "Round", " ", "1"}], 
      " ", "*)"}], "\n", "  ", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"ValueQ", "[", "modelsRound1", "]"}], ",", "\n", "    ", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"results", ",", " ", 
         RowBox[{"tryPredict", "[", 
          RowBox[{
           RowBox[{"modelsRound1", "[", "\"\<RandomForest\>\"", "]"}], ",", 
           " ", "\"\<Round 1\>\""}], "]"}]}], "]"}], ",", "\n", "    ", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"results", ",", " ", 
         RowBox[{"{", 
          
          RowBox[{"\"\<Round 1\>\"", ",", 
           " ", "\"\<\:274c Mod\[EGrave]le non d\[EAcute]fini\>\"", ",", 
           " ", "\"\<\>\""}], "}"}]}], "]"}]}], "\n", "  ", "]"}], ";", "\n", 
     "\n", "  ", 
     RowBox[{"(*", " ", 
      RowBox[{"\|01f52e", " ", "Test", " ", "de", " ", "Round", " ", "2"}], 
      " ", "*)"}], "\n", "  ", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"ValueQ", "[", "modelsRound2", "]"}], ",", "\n", "    ", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"results", ",", " ", 
         RowBox[{"tryPredict", "[", 
          RowBox[{
           RowBox[{"modelsRound2", "[", "\"\<RandomForest\>\"", "]"}], ",", 
           " ", "\"\<Round 2\>\""}], "]"}]}], "]"}], ",", "\n", "    ", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"results", ",", " ", 
         RowBox[{"{", 
          
          RowBox[{"\"\<Round 2\>\"", ",", 
           " ", "\"\<\:274c Mod\[EGrave]le non d\[EAcute]fini\>\"", ",", 
           " ", "\"\<\>\""}], "}"}]}], "]"}]}], "\n", "  ", "]"}], ";", "\n", 
     "\n", "  ", 
     RowBox[{"(*", " ", 
      RowBox[{"\|01f52e", " ", "Test", " ", "de", " ", "Round", " ", "3"}], 
      " ", "*)"}], "\n", "  ", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"ValueQ", "[", "modelsRound3", "]"}], ",", "\n", "    ", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"results", ",", " ", 
         RowBox[{"tryPredict", "[", 
          RowBox[{
           RowBox[{"modelsRound3", "[", "\"\<RandomForest\>\"", "]"}], ",", 
           " ", "\"\<Round 3\>\""}], "]"}]}], "]"}], ",", "\n", "    ", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"results", ",", " ", 
         RowBox[{"{", 
          
          RowBox[{"\"\<Round 3\>\"", ",", 
           " ", "\"\<\:274c Mod\[EGrave]le non d\[EAcute]fini\>\"", ",", 
           " ", "\"\<\>\""}], "}"}]}], "]"}]}], "\n", "  ", "]"}], ";", "\n", 
     "\n", "  ", 
     RowBox[{"(*", " ", 
      RowBox[{"\|01f4ca", " ", "Affichage", " ", "en", " ", "tableau"}], " ", 
      "*)"}], "\n", "  ", 
     RowBox[{"Grid", "[", "\n", "    ", 
      RowBox[{
       RowBox[{"Prepend", "[", 
        RowBox[{"results", ",", " ", 
         RowBox[{"{", 
          
          RowBox[{"\"\<\|01f9e0 Mod\[EGrave]le\>\"", ",", 
           " ", "\"\<\|01f3af Pr\[EAcute]diction\>\""}], "}"}]}], "]"}], ",", 
       "\n", "    ", 
       RowBox[{"Frame", " ", "->", " ", "All"}], ",", "\n", "    ", 
       RowBox[{"Background", " ", "->", " ", 
        RowBox[{"{", 
         RowBox[{"None", ",", " ", 
          RowBox[{"{", 
           RowBox[{"LightGray", ",", " ", "None", ",", " ", "None"}], "}"}]}],
          "}"}]}], ",", "\n", "    ", 
       RowBox[{"ItemStyle", " ", "->", " ", 
        RowBox[{"Directive", "[", 
         RowBox[{
          RowBox[{"FontFamily", " ", "->", " ", "\"\<Helvetica\>\""}], ",", 
          " ", "14"}], "]"}]}]}], "\n", "  ", "]"}]}]}], "\n", "]"}], 
  "\n"}]], "Code",
 CellChangeTimes->{
  3.952934091300625*^9, {3.9529350405536995`*^9, 3.952935042032301*^9}, {
   3.952952040632984*^9, 3.9529520417284107`*^9}},
 CellLabel->
  "In[372]:=",ExpressionUUID->"a526a004-fdbb-1945-a61a-873d3abe398b"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"\|01f9ea Stats utilis\[EAcute]es : \"\>", "\[InvisibleSpace]", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Total\"\>", "\[Rule]", "680"}], ",", 
     RowBox[{"\<\"HP\"\>", "\[Rule]", "126"}], ",", 
     RowBox[{"\<\"Attack\"\>", "\[Rule]", "131"}], ",", 
     RowBox[{"\<\"Defense\"\>", "\[Rule]", "95"}], ",", 
     RowBox[{"\<\"Sp. Atk\"\>", "\[Rule]", "131"}], ",", 
     RowBox[{"\<\"Sp. Def\"\>", "\[Rule]", "98"}], ",", 
     RowBox[{"\<\"Speed\"\>", "\[Rule]", "99"}]}], "\[RightAssociation]"}]}],
  SequenceForm[
  "\|01f9ea Stats utilis\[EAcute]es : ", <|
   "Total" -> 680, "HP" -> 126, "Attack" -> 131, "Defense" -> 95, "Sp. Atk" -> 
    131, "Sp. Def" -> 98, "Speed" -> 99|>],
  Editable->False]], "Print",
 CellChangeTimes->{{3.952952046848728*^9, 3.952952062198924*^9}},
 CellLabel->
  "Lors de l\[CloseCurlyQuote]\[EAcute]valuation de \
In[372]:=",ExpressionUUID->"92b1a8a0-8800-4d8d-aa95-3cc0182190df"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"\|01f9e0 Mod\[EGrave]le\"\>", "\<\"\|01f3af Pr\[EAcute]diction\"\>",
      ""},
    {"\<\"Round 1\"\>", 
     StyleBox["\<\"dragon\"\>",
      StripOnInput->False,
      FontWeight->Bold], 
     RowBox[{"TakeLargest", "[", 
      RowBox[{
       RowBox[{
        InterpretationBox[
         RowBox[{
          TagBox["ClassifierFunction",
           "SummaryHead"], "[", 
          
          DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
           "Ready"}, 
           TemplateBox[{
             PaneSelectorBox[{False -> GridBox[{{
                   PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                   GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                    Axes -> {False, False}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                    FrameTicks -> {{None, None}, {None, None}}, 
                    GridLines -> {None, None}, 
                    LabelStyle -> {FontFamily -> "Arial"}, 
                    Method -> {"ScalingFunctions" -> None}, 
                    PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                    Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                    ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                    FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                    GrayLevel[0.94]], 
                   GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "7", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{"\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Numerical", "Numerical", "Numerical"}, 10], 
                    "Tooltip"]& ], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    TooltipBox["18", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{"\"bug\"", ",", "\"dark\"", ",", "\"dragon\"", 
                    ",", "\"electric\"", ",", "\"fairy\"", ",", 
                    "\"fighting\"", ",", "\"fire\"", ",", "\"flying\"", ",", 
                    "\"ghost\"", ",", "\"grass\"", ",", "\"ground\"", ",", 
                    "\"ice\"", ",", "\"normal\"", ",", "\"poison\"", ",", 
                    "\"psychic\"", ",", "\"rock\"", ",", "\"steel\"", ",", 
                    "\"water\""}], "}"}], Short[#, 1]& ]], Annotation[#, 
                    
                    Short[{"bug", "dark", "dragon", "electric", "fairy", 
                    "fighting", "fire", "flying", "ghost", "grass", "ground", 
                    "ice", "normal", "poison", "psychic", "rock", "steel", 
                    "water"}, 1], "Tooltip"]& ], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 BaselinePosition -> {1, 1}], True -> GridBox[{{
                   PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                   GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                    Axes -> {False, False}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                    FrameTicks -> {{None, None}, {None, None}}, 
                    GridLines -> {None, None}, 
                    LabelStyle -> {FontFamily -> "Arial"}, 
                    Method -> {"ScalingFunctions" -> None}, 
                    PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                    Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                    ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                    FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                    GrayLevel[0.94]], 
                   GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "7", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{"\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Numerical", "Numerical", "Numerical"}, 10], 
                    "Tooltip"]& ], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    TooltipBox["18", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{"\"bug\"", ",", "\"dark\"", ",", "\"dragon\"", 
                    ",", "\"electric\"", ",", "\"fairy\"", ",", 
                    "\"fighting\"", ",", "\"fire\"", ",", "\"flying\"", ",", 
                    "\"ghost\"", ",", "\"grass\"", ",", "\"ground\"", ",", 
                    "\"ice\"", ",", "\"normal\"", ",", "\"poison\"", ",", 
                    "\"psychic\"", ",", "\"rock\"", ",", "\"steel\"", ",", 
                    "\"water\""}], "}"}], Short[#, 1]& ]], Annotation[#, 
                    
                    Short[{"bug", "dark", "dragon", "electric", "fairy", 
                    "fighting", "fire", "flying", "ghost", "grass", "ground", 
                    "ice", "normal", "poison", "psychic", "rock", "steel", 
                    "water"}, 1], "Tooltip"]& ], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"RandomForest\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["928", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 BaselinePosition -> {1, 1}]}, 
              Dynamic[Typeset`open$$], ImageSize -> Automatic]},
            "SummaryPanel"],
           DynamicModuleValues:>{}], "]"}],
         ClassifierFunction[<|
          "ExampleNumber" -> 928, "ClassNumber" -> 18, 
           "Input" -> <|
            "Preprocessor" -> 
             MachineLearning`MLProcessor[
              "ToMLDataset", <|
               "Input" -> <|
                 "Total" -> <|"Type" -> "Numerical"|>, 
                  "HP" -> <|"Type" -> "Numerical"|>, 
                  "Attack" -> <|"Type" -> "Numerical"|>, 
                  "Defense" -> <|"Type" -> "Numerical"|>, 
                  "Sp. Atk" -> <|"Type" -> "Numerical"|>, 
                  "Sp. Def" -> <|"Type" -> "Numerical"|>, 
                  "Speed" -> <|"Type" -> "Numerical"|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                "Preprocessor" -> 
                MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                    MachineLearning`MLProcessor[
                    "FromNamedFeatures", <|
                    "FeatureNames" -> {
                    "Total", "HP", "Attack", "Defense", "Sp. Atk", "Sp. Def", 
                    "Speed"}|>], 
                    MachineLearning`MLProcessor[
                    "Transpose", <|"FeatureNumber" -> 7|>], 
                    MachineLearning`MLProcessor[
                    "WrapMLDataset", <|
                    "FeatureTypes" -> {
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical"}, 
                    "FeatureKeys" -> {
                    "f1", "f2", "f3", "f4", "f5", "f6", "f7"}, 
                    "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                    Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
                "Perfect", "StructurePreserving" -> False, "Missing" -> 
                "Allowed"|>], "Processor" -> 
             MachineLearning`MLProcessor[
              "Sequence", <|
               "Input" -> <|
                 "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "(f1f2f3f4f5f6f7)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 7|>|>, 
                "Processors" -> {
                  MachineLearning`MLProcessor[
                  "SynthesizeMissingValues", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Distribution" -> 
                    LearnedDistribution[<|
                    "ExampleNumber" -> 928, "Preprocessor" -> 
                    MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>, 
                    "f4" -> <|"Type" -> "Numerical"|>, 
                    "f5" -> <|"Type" -> "Numerical"|>, 
                    "f6" -> <|"Type" -> "Numerical"|>, 
                    "f7" -> <|"Type" -> "Numerical"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7|>|>, 
                    "Version" -> {14.2, 0}, "ID" -> 3128401418847633772|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7|>|>, 
                    "Mean" -> {437.4278017241379, 69.47198275862068, 
                    79.94612068965517, 74.41702586206897, 73.02478448275862, 
                    72.12607758620689, 68.44181034482759}, 
                    "StandardDeviation" -> {120.2491628524679, 
                    26.067495108680518`, 32.52070471178248, 
                    31.143432275732295`, 33.04327801439062, 
                    27.699477325347306`, 29.39777836137827}, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7|>|>, 
                    "Version" -> {14.2, 0}, "ID" -> 3798507262341624293|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                    "DirectTraining", "BatchProcessing" -> Automatic, 
                    "Model" -> <|"RotationMatrix" -> CompressedData["
1:eJwBmQFm/iFib1JlAgAAAAcAAAAHAAAAykrdvxyi4D8bSB12aKWQP5qw9gWB
oIM/qCHXmgyior+YVIEzIgOAv2WmjC3WZaE/urTyKntI6z8TzsrbuGvVP6jZ
awfDRrW/jWPzH9XV2T8FtVMXZXboPzaQFapfzM6/yJCGr0okyj/n/AKX5KTH
v1HjO4ueStg/4ig08q3kgT/R0YAKE67jP87V/kbKEta/NcY3qBXGyT9i3oRx
6Xfgv75LEAEujM2//fzEVoRL1D+jQPwgBLfjv90o8o3Skpi/jVgi7rky2r/r
R01AibGqv7T89Rjvh+E/neRFPdlMzL8fOWKrIwjZPzL6TZBpBNM/b8j0z/IB
1b/jWsRcqUPEP6oA6jAVbuc/Zcsqw+Dnxz96iDWjsQDOv9wFYyDXO9g/UASA
U/2gz781lfjVB9/ivypOPE4eFL4/rcm6FkQz1L9puj9hZmnhvzB5GYy0DMm/
MByJkhu90T+DP+bAK8vlP9E6rNAzRqq/PpvZbRsV078JBuM/omngv4yptU/O
qs8/P393mtm1yr+dXNC2
                    "], 
                    "Precisions" -> {0.27070912378894785`, 0.8837223724837712,
                     1.277178262757484, 1.4083814116237576`, 
                    2.389693781109174, 3.8310690205868783`, 
                    30110.615836484896`}, "NoisePrecision" -> None, 
                    "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7|>|>, 
                    "Mean" -> {-0.00003689250824938277, \
-0.00026219814029677956`, 0.00015569688660866597`, -0.00011938624185375379`, 
                    0.0003060116298472744, 0.0002667685017623078, 
                    0.00012327880192094262`}, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7|>|>, 
                    "Version" -> {14.2, 0}, "ID" -> 2265011110982277988|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 7|>, 
                    "Key" -> "(f1f2f3f4f5f6f7)", "Invertibility" -> "Perfect",
                     "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"|>], "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 7, "Options" -> <||>|>|>|>, 
                    "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"(f1f2f3f4f5f6f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7|>|>, 
                    "Mean" -> {-0.00003689250824937727, \
-0.0002621981402967377, 0.00015569688660873872`, -0.00011938624185359994`, 
                    0.0003060116298474082, 0.00026676850176216254`, 
                    0.00012327880192079498`}, 
                    "StandardDeviation" -> {0.9998552221800054, 
                    0.9996366809704081, 0.9994762618035812, 
                    0.9999404015527837, 1.0003041568405564`, 
                    0.9999003631495595, 0.9999419163061966}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 7, 
                    "Output" -> <|"(f1f2f3f4f5f6f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.2, 0}, "ID" -> 
                    886936155450518819|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7|>|>, 
                    "Mean" -> {-0.00003689250824937727, \
-0.0002621981402967377, 0.00015569688660873872`, -0.00011938624185359994`, 
                    0.0003060116298474082, 0.00026676850176216254`, 
                    0.00012327880192079498`}, 
                    "StandardDeviation" -> {0.9998552221800054, 
                    0.9996366809704081, 0.9994762618035812, 
                    0.9999404015527837, 1.0003041568405564`, 
                    0.9999003631495595, 0.9999419163061966}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 7, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.2, 0}, "ID" -> 
                    886936155450518819|>], "InputDimension" -> 0, 
                    "OutputDimension" -> 7, 
                    "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {500}, 
                    "ID" -> 2553777021639999034|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {60}, 
                    "ID" -> 6304430420038751487|>, 
                    "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {70}, 
                    "ID" -> 3877397196001888074|>, 
                    "f4" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {105}, 
                    "ID" -> 2458221325717701503|>, 
                    "f5" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {70}, 
                    "ID" -> 606805096434207944|>, 
                    "f6" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {120}, 
                    "ID" -> 3172256975745177440|>, 
                    "f7" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {75}, 
                    "ID" -> 7080549901613292267|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.028198, "MaxTrainingMemory" -> 398216,
                     "DataMemory" -> 62912, "FunctionMemory" -> 59512, 
                    "LanguageVersion" -> {14.2, 0}, "Date" -> 
                    DateObject[{
                    2025, 4, 6, 20, 10, 15.306605`7.937453860073384}, 
                    "Instant", "Gregorian", 2.], "ProcessorCount" -> 8, 
                    "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX",
                     "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                    "LogPDFDistribution" -> 
                    MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-4.4703101746201455`, \
-4.4703101746201455`, -4.45809142390613, -4.442382582781812, \
-4.410503516221069, -4.362205342643529, -4.219870288433782, \
-4.093231286668217, -3.9492847961375466`, -3.9055968231098603`, \
-3.8154688098510037`}, "LeftBoundary" -> -4.45809142390613, "LeftScale" -> 
                    0.006109375357007618, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                    Around[29.48886153106117, 0.5603056104225561], 
                    "EntropySampleSize" -> 10|>], 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "EvaluationStrategy" -> "ModeFinding", 
                    "Version" -> {14.2, 0}, "ID" -> 3520938463763109121|>], 
                  MachineLearning`MLProcessor[
                  "ToVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7|>|>, 
                    "Version" -> {14.2, 0}, "ID" -> 8401888890595954248|>], 
                  MachineLearning`MLProcessor[
                  "Standardize", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7|>|>, 
                    "Mean" -> {437.4278017241379, 69.47198275862068, 
                    79.94612068965517, 74.41702586206897, 73.02478448275862, 
                    72.12607758620689, 68.44181034482759}, 
                    "StandardDeviation" -> {120.2491628524679, 
                    26.067495108680518`, 32.52070471178248, 
                    31.143432275732295`, 33.04327801439062, 
                    27.699477325347306`, 29.39777836137827}, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7|>|>, 
                    "Version" -> {14.2, 0}, "ID" -> 3416117032667718646|>]}, 
                "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
                "Missing" -> "Imputed"|>]|>, 
           "Output" -> <|
            "Preprocessor" -> 
             MachineLearning`MLProcessor[
              "ToMLDataset", <|
               "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Preprocessor" -> 
                MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor[
                    "WrapMLDataset", <|
                    "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                    "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                    Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
                "Perfect", "StructurePreserving" -> False, "Missing" -> 
                "Allowed"|>], "Processor" -> 
             MachineLearning`MLProcessor[
              "Sequence", <|
               "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Processors" -> {
                  MachineLearning`MLProcessor[
                  "ToVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.2, 0}, "ID" -> 5339478692838426969|>], 
                  MachineLearning`MLProcessor[
                  "IntegerEncodeNominalVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                    "Index" -> {<|
                    "bug" -> 1, "dark" -> 2, "dragon" -> 3, "electric" -> 4, 
                    "fairy" -> 5, "fighting" -> 6, "fire" -> 7, "flying" -> 8,
                     "ghost" -> 9, "grass" -> 10, "ground" -> 11, "ice" -> 12,
                     "normal" -> 13, "poison" -> 14, "psychic" -> 15, "rock" -> 
                    16, "steel" -> 17, "water" -> 18|>}, "MissingCode" -> 0, 
                    "Version" -> {14.2, 0}, "ID" -> 7156505921378775840, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
                  MachineLearning`MLProcessor[
                  "FromVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|
                    "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {18}|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Version" -> {14.2, 0}, "ID" -> 5853635666055226477|>], 
                  MachineLearning`MLProcessor[
                  "FirstValues", <|
                   "Info" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 18|>, 
                    "Key" -> "f1", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"|>]}, "Invertibility" -> "Perfect", 
                "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
             "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
             "Marginal" -> <|
              "bug" -> 0.08562367864693446, "dark" -> 0.039112050739957716`, 
               "dragon" -> 0.04016913319238901, "electric" -> 
               0.054968287526427066`, "fairy" -> 0.020084566596194505`, 
               "fighting" -> 0.03382663847780127, "fire" -> 
               0.06448202959830868, "flying" -> 0.005285412262156448, "ghost" -> 
               0.04016913319238901, "grass" -> 0.08879492600422834, "ground" -> 
               0.039112050739957716`, "ice" -> 0.03171247357293869, "normal" -> 
               0.11839323467230445`, "poison" -> 0.039112050739957716`, 
               "psychic" -> 0.0718816067653277, "rock" -> 0.06025369978858351,
                "steel" -> 0.03382663847780127, "water" -> 
               0.1331923890063425|>|>, "LabelSplitter" -> 
           MachineLearning`MLProcessor[
            "FeatureLabelSplit", <|
             "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
              "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
           "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic,
            "Prior" -> Automatic, "Utility" -> 
           SparseArray[
            Automatic, {18, 19}, 0., {
             1, {{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 
               17, 18}, {{2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {
               12}, {13}, {14}, {15}, {16}, {17}, {18}, {19}}}, {1., 1., 1., 
              1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.}}], 
           "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
           Automatic, "BatchProcessing" -> Automatic, "Model" -> <|"Trees" -> {
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJw9UEsOAjEIpYUWPYZHcOPepdvxBGMy6kqT0cR4Wq8iPJhJ088r8N6D3eU5
XCsRvTZ2DOPnOM/j97w1cHq8p9s07w/3YuhnW6hRoWqbbam9qv0wcKNuW+yt
tthefjsSRBm1iqyCioLlWR6tYHfG4BFEBb/L2aFdwdKB46cn5tVZQ4SzVuHT
mRU6oeDYMxSxhmi4qlkfmrrmB1dBd5IqnFOoqHa+Bt9R5Z11OKzotK/qkjFJ
3fCgqF3mWNBDdNdyfoKMhVtzBuFn8dTTU7iIyTP9AbbGDc8=
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwVlHs41IkexqcaT4QeWSHbMnhYbaqpQ6Tsd7qcPZNqzaGjmbYyp6KR1KQw
pc6hy6Ytcq2p2KbbmnL28Kg0MvpOSpEwjMsgt5mYH0N+xtyy2OP88f77Pu/z
vp/ndd9/LCxqDoVC6Z0VfajBjW3QA7HX/cr2qj50Juv3p90zgDlEHNRCqIDI
9rD+0ccASknV303bSsAueVM4GaEDcWFSnsd9BH7AIa9iZgcQWrBPnslAwf3z
G62WTKGy1Nnwj/Wzfi8/XWgKINE5NW0o/YEZfVzsrpS06pHZdrD53oMRtKvf
ahv/UIs1ow0pBpYBheujdYWBJqx5X8s/Z/EFSaONy6XEZuSeNm4KdutHS+/0
LnkvgewLt2tzZ/RI923bR/S2Yr7GccTLgyLryzb73dHoUULc/UkaRiL5sJHv
m0+gaGis3y97AunXOYGjNyYwk/rLG4fQQSxpTs39uMOEdv5V6jOVWuRfDxdM
/HMMSzTUn7ypBCp3dw7fSNZjGjO3rHsliWnuPoJth4aRGMpp6vDVoayYKi93
0aHAm/2qslWHXJPAqs5CibQoaeF3t0aRXnY2e4fvBLK2MApOXxFB39+m9y4X
a5B1pzx/4ZwBYCyauZXrSSJv74k9lwwqFB+1fbJ7jwrJeZwth+6Mg+xejNvh
D1q0VGzqUZ0qB1JBSXhqJJDOtWn+z8pJZD6uVVzQ65FG3dVf4K1AQUhk1LRa
jTVs73r7t2NIW9rR+0f8IAba65bFf9YDyyx5nfr//smbo1nHqpB/7M9Uv0Yl
1mx3Kcl8OoGWTF6vS0grUgwvH/dUypBbvEtrGvoCrDB/P/8BEugnOqiNsiFk
/Vgsn0q6Aazq3PcvQnpQeCeP6pouR3Pkk8Q1LiPAKJYVx70dAKXxtHTn8mbg
q7a5Ur6a5Sq8xsHdT468o2UBu7Z1IzOS+k1YrA4lHyj5hadUaP66sWXLES0Q
C/K39v8xiClOCVtXCEnI5NQNRh//iGTw7zHVnHGk/8xuUNf1o7hozKLsBwOK
FBvndl1uQzFZ7uq48DMKU08mvrs3joxIH/pfM01IP56WdKSRRPFjqrvOpQEp
VDeLJ9ZaFGWIyr69pkLas4fjEQd6Ma3YI+f7ATMov1+dp3LoQeeDGuW6kkFM
W7Ak6u6xPhBaOVwtcBpCuWbVoktaKbCvzed1p5LIVm0gMscHQRhj7VC7SA28
uNoT3jc/Af1rv2DRwS6U1C/Ur+6QI8FddzN/sgsCPdeOLk/sAruo2L2/uiCa
e2wqN1bO7spZfLvi83OU3HJj+KmVkGn9p8DK4jUQKf/dLDXWgU/X6MCpyWo0
v8jJIY0ESJoXyqyDGlG+5GD0x1gtBOrvKl9Wt0LNgZaQTzO1KPE6V7F0TTMw
WPZbIndPAllO818epAbGfM32lS35wG3nXo6bXwN9U1n+jj9UoWBYUnVhYgS5
Rc7y37IakbXT0PTBfhAZLMm7onP1KCp9pU2Wa0DcInlPOzOMJDDOPSt4gynx
EYozQc1AK5eqm9lK5LdWZ9cuewmBq7nfHPPvRzYn9cwXIEGW4RS05C9dSBP6
TlasGAfmqp/nThd1Qsm7K/WepBokv25OlmgVyK4cL1p2YQQCe4ejHiRlIXO/
ybFjaxXQbU++nprlijhJeWX+/Q0KbUqlY+mdYDfJobxXNCAvgfPo0dQHFI2G
s79LrwFG9Upt/XAVyvG4VSIxCOI+0/3FGzTAut5XnTCnDSy14rFOaQeW3A29
SFuhRO5A4v78eX1oPvSmsaxgCrjWT8Ozr/cDJWdpbHjTE5Q82j5vgibBTO5v
guh/jQCxyie/8ogO2O7xDZeiTcDt3C4PPV+FNU7d35atne0jgSlq17Rj2qbg
a8zFJEgsyxTVFRoQ+W/cMxo2PrvXu/fN09OQop1/O2tiHJSl8gPkhiEQUE7E
Zz/TABEzY62fcxWInd6ry3aogJ+hrAiY0YBgJkB6pKEdzf8OPM77ogN+nLau
1XMEnP086Prd/cjq9PzKkWUEbkSD5VJRPzCfV5y3uFgPfbLVEc9faID3yGEf
9TkJwodjJ3R6M2zgB4canSgMdmp7bKBtE6QAI91UbADJ/fSpVbM5eJ/dl3IM
akjxygtq4RhBvvCi0Es2y1N7iv3Z4HFIU2RkBe8hQHy895VuSAnO/nPXdpd+
AuYCm6u8zXqQVa4RHi6ex3Bg3VonvG3NqEkuemEZN/urroefZeROQUqMreuZ
9WPAtA0X5scWIg3ibRjSX4BvlWwjm25FHsG5HOCqBn6l4gAlXYvys8Z5Dr1t
IIpRnGeaLRiMZIKW5fgJBTrft6ct9KBcfHQyKc8M9CC3p4NrByAzvb5p075J
oJfMXx86o4b/AWPb1kE=
                  "], "Children" -> CompressedData["
1:eJwdiWVUFgYAAO85t+k6XBfYrRjYgY0t2A1KWKAfKGJ3d3d3d3d3d7FO3XTd
J/rj7r17FxydGBGbAUjKlK6IqJSwQCAqNTJzeoQnJMfExQRCQuOf/LR0Mjzl
GTLyLKc5w3M8T23qkInMhFOTF3iRskz1JV5Gi/EKr/K/U3yN18lNHt7gTd7i
bf4zC/862X+c5DtMNIgJvst7vM8HfMx4/3acf/khHzHWPx3jH37C7442mKz8
ZjZ+NSe/mJ2fzcEjR5mLkT50hD853Lzk40fzU4CCPHCY9y3EDw61MCF87xC/
swjfWpRvHGxxBhlKCUoy0FKU5msH+JX9LUM/v7Sv5ShPBSpShT5+YW/DqMTn
9vIzK/OpqValGtXpaQ1STLOH9+xuLZK9a5J3DFiXeuxjP/VpwFKWEUEkt11M
QxrRk1Qa04R2tOeWTWlLFM1oTgtactNu3rAVrWnDdbt6zUSvmuAVuxhNZy/b
yRhiSSKZOOK5ZEc70MFOdOaiHblgvF1I4LxxnjORALF2JcZutPes7TxjtKft
Tg9SOGWUJ23rCdvYi97MZwF96MssZtOP/hy3tQNo5WhaOpBBDGYIxxzBUIYx
nBYetblHbOZhm3rIkRx0FAds4hjGMo7G7nc8+2zkXicwkUlMZgozaOgepzKd
SHc7jV1GuNMGzqS+O6znHOYyj7put47brO1Wa7mQmi4i3C3WcLPV3eQSNlrN
DVZ1OStYSRU3sJFVrGYNa1lPZddRyfWGuc6KrrWCm9jMDsq7ha2ssZzb2M5q
y7rKMq60tCvcyS5KuZuSLncPeynhMkM9QHEPcoilFvMwRT1CEZcY4lGOcZzC
nuAkiy3kIgu60FMssIBnOcd8b3Oe/N7gJhfI5zwvconLXCGv18jjVXI711xe
J6dzzOEtsjvbbM4yq3e4y0zvMcM0phvsNIN8DJoEyHs=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{18, 6, 15, 5, 13, 10, 10, 10, 1,
                    10, 8, 3, 3, 10, 10, 7, 16, 4, 16, 12, 13, 2, 11, 18, 9, 
                   1, 18, 10, 1, 3, 18, 2, 16, 16, 6, 11, 18, 18, 5, 15, 9, 7,
                    12, 2, 7, 18, 2, 1, 10, 13, 7, 9, 15, 4, 13, 2, 9, 16, 9, 
                   5, 10, 16, 2, 10, 3, 15, 17, 2, 3, 18, 14, 13, 13, 12, 5, 
                   1, 10, 3, 15, 12, 13, 4, 4, 12, 16, 7, 10, 10, 12, 4, 13, 
                   6, 3, 15, 2, 7, 7, 7, 11, 16, 14, 16, 3, 15, 1, 9, 6, 14, 
                   15, 1, 4, 7, 6, 18, 13, 1, 1, 12, 15, 1, 12, 3, 6, 17, 10, 
                   1, 11, 13, 1, 10, 13, 18, 11, 4, 6, 1, 1, 1, 10, 13, 11, 
                   15, 15, 10, 4, 18, 10, 16, 7, 9, 7, 16, 2, 7, 1, 5, 2, 10, 
                   1, 1, 9, 1, 1, 18, 1, 10, 18, 16, 10, 12, 10, 16, 7, 5, 1, 
                   7, 7, 14, 18, 18, 18, 6, 11, 13, 9, 14, 16, 7, 18, 4, 5, 8,
                    7, 7, 18, 10, 13, 18, 7, 18, 15, 4, 11, 6, 18, 15, 16, 10,
                    13, 7, 3, 11, 12, 9, 18, 11, 16, 18, 17, 16, 16, 16, 11, 
                   10}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJw1kUFOQzEMROPEduAYPQIb9izZticoUmlXRfpUqjgrl6nz7MpKYjvzZyb+
u6+f/Xdvrf2+xLY/3j+27fh3eI3i83o7nU/b2/tFovqP5U1iWcRgaVRK7q3H
OSPrsTt9jWx1nUxBDvbESd0KfY/uylJhxF2H3+pcmRICZpZOh1HBT6p0p3y1
OJealJfJt0rHUEtPBtviTq8Txqf+5M1CLcViFbMUR+kpWgLCazZPB1YvzDck
Jh0rfQMzyqNTrxi4dzLjrqMn+LH6C8LUBpicRU7hAVScDaQ=
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1: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
AYjzlhVzqVVAZ7l+/JoxDv8Hz4i3Kg==
                  "], "Children" -> CompressedData["
1:eJwdk1VUFgYARu8xZq3czM1tOrvFwA5sbMFuUMIC/UERW+zu7u7u7u6udanr
7u2O+XC/c+75nm++yPiw6DRAQsbUCYtICgkEIpLDM6VKaFxiVExUICg49v//
cSppnpOWdKTnAhd5gQwc4SgZyURPepGZLJSiNPoirzDLf32Jf3yZv53pq8ww
K6/xOtl4kzz8ZXb+dLp/mIOcTDMXU83NFN9gsr87ybd4m5JM9B3yUpwS/OYE
8/Eu+RnvrxbiFwvwswX5yXEWpghFGeuPFuMHx/i9o/3OFL91lN840jIE0YkR
lmW45anA15bjK4cZTEVqU4dKVOZLh1qFqtSkFs8cYjWqU4PBPjXZJw4yhCS/
cKCfO8C6JFqP+nxmgg1oSBjhhBLwU/vbiH42pglNacYnxvuxzWlJnB/Zgg/t
6wf2sRWted/etqGXHehpW9rxnu15bKyPjPGhHXlgtPftTBe6cs8ouxFBJN2J
oYc96O5dI40iwjtGc9tuxtLVW3axN33YxGZu2pc44rlhZ/vRn+tOJEAnB5FM
Aolcs6MD6OBA2ptEO6/a1sEM4YrDuGwbh9LaS7ZyOCO46EjGMJZRpDCacC8Y
5nlbes5xTKCF42nuWZt5xqZOYjJTmMppmziN6ZxyBTNo7FKWMZNGzmI2c5jL
fEI9aUNPOI/jNnABCznmIo5a38XU84hLOGxdD7mcg9bxgLVdySpWE+J+N7KG
taxjPfvcwF5rucea7raGu6zuFray0+3ssJrb3cY2q7qDnWy1irvYzR72ssXD
bHYfmzzEfg6w0YNssLLrreQ6K7rWYI9xnNOcYY0VXO0JTlLeVZ5ipeVcYVnP
EuQ5ynie0i63lJe4zE1uscwrLPUGVynpEq9xnRIutriLLOZt7vAotaa73GOh
RV3gfeb7kAcUcZ6FnWsh51jQ2RbwP6xpwH8=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 13, 18, 15, 6, 4, 1, 10, 14, 
                   9, 2, 13, 18, 12, 1, 1, 3, 11, 9, 13, 13, 18, 4, 12, 16, 
                   12, 1, 2, 11, 13, 14, 6, 16, 6, 9, 16, 10, 18, 5, 12, 16, 
                   17, 18, 18, 16, 10, 15, 12, 7, 4, 10, 9, 2, 1, 1, 9, 10, 
                   15, 12, 18, 10, 18, 16, 7, 18, 9, 11, 14, 12, 13, 11, 17, 
                   2, 10, 10, 9, 18, 4, 4, 10, 12, 15, 9, 1, 7, 4, 2, 4, 18, 
                   4, 1, 17, 1, 15, 17, 10, 15, 5, 2, 15, 5, 18, 3, 1, 18, 17,
                    5, 15, 7, 16, 1, 13, 2, 5, 9, 10, 13, 13, 5, 3, 7, 18, 14,
                    10, 18, 2, 10, 7, 16, 11, 13, 9, 1, 6, 16, 11, 14, 3, 6, 
                   6, 1, 1, 16, 4, 13, 14, 1, 13, 13, 2, 6, 14, 1, 13, 12, 1, 
                   11, 11, 1, 16, 2, 9, 15, 18, 7, 4, 3, 18, 18, 10, 1, 13, 
                   16, 11, 5, 15, 14, 10, 16, 7, 12, 7, 16, 18, 4, 14, 6, 18, 
                   10, 10, 2, 7, 12, 9, 13, 15, 4, 12, 13, 1, 8, 4, 3, 10, 3, 
                   2, 10, 17, 9, 3, 3, 15, 18, 16, 15, 12, 16, 13, 18, 15}], 
                 "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJxNUEEOAjEIpLQUfYZP8OLdo9f1BWuy6kmT1cT4UP+zMLCJIbSFzkyH7i7P
4cpE9NrYMoyf4zyP3/PWitPjPd2meX+4F6t+lo2UhNhWpUrFzhV7tx6jXyy7
RTWs7w3J1q92EoTfuYpzGXeBEFSBcG5oFYtAcWoz8Gv09CBYA9Ps7LX7bHh7
dSNwLkiBViAEu6ZOg1IHSsEKj6ETvFDzWvEDkr2SGh2c6MbcCicF7hruBbNE
PzAF0/Tk+AScf1iBa4lU+NG/9yrY8atKC3qpDWE=
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1: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
                  "], "Children" -> CompressedData["
1:eJwdiWV0FgQAAO+BlIiKSSiKgEGPGB2jR7PRvcGC2uDbYIzu7u7u7u7unthi
K5igNBzDH3fv3bvckfFh0WmAhIypCotICgkEIpLDM6VGaFxiVExUICg49vlP
SSXN/6RFXyADGXlqOtIz2SdOMhMv0pwWZOYl8vEhWXiZbGTnFV7lsW/xyIlm
ZYKv8TpvMN6HvskDx3nfsd7zbe46xhzk5D/z8g6j/YA8/Ou75OI97jjK9xlp
bkZ42+H+4zD/dqh/OcQ//YiP+YQ/HGx+ClCdGhRkkMUoTiEKU4SB/u4AixLE
Lft7036WoCTlKE8wpShLX3+zj6Upw68m+4u9/dkkf7IC1ehlRSrxo5X5wRC+
t6dVqMp3JnrDBL814DfWJJTafG0tvrKHdahLI8KoR32+tCEN6O4Xxvu5cX5m
N8NpzHWb8KldTbGLTensNZtx1U62pBWHOUJr2rCZLbSlHTOYSXsiGEysV4wk
img6EONlO3LJaC8awwW7EksnOhNlFzp63g6eM9JuxBFPd3rSix5EGKC9Z23n
GRM4bSKnbGsSbexLP3qTzElb24dWnrCl/WnhcZs7gGYecyBHHcQRmzqEoQxj
OJNp4mFHcMhRHHQkB2zsaMIdw1jGMZ79TmICYe5zIntt5B4butsG7nIKO53K
NOq7w+lst56zmM1yVrDNOSxgIXOZx1brusX5bLaOm6ztIhazhFCXUsuN1nQZ
NdxgdVeyivVWc52rWes61rCWNVZ1tVVczwY2EuIqK7uJSq60oius4Fa2sZ3y
7mUfy93BMney1F3sppxL3MNiy7rI/Sy0jAco7QIPMt9DzLOURwn2GMeZa0lP
cJI5pnCKEp7mDLMt7lnOcY1inucCswxypheZ4SWmW9TLFPEKhb1KIadZ0KkW
cIr5fQaYA7SF
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{6, 4, 13, 14, 1, 10, 6, 13, 12, 
                   10, 2, 1, 7, 18, 10, 10, 1, 2, 1, 9, 12, 18, 18, 2, 6, 5, 
                   14, 1, 13, 4, 18, 7, 13, 1, 17, 14, 18, 13, 17, 1, 9, 10, 
                   16, 16, 13, 10, 7, 18, 10, 9, 12, 10, 15, 7, 3, 15, 3, 13, 
                   5, 4, 12, 1, 12, 18, 15, 18, 4, 7, 14, 3, 13, 10, 14, 10, 
                   1, 9, 4, 1, 15, 4, 18, 4, 10, 2, 18, 7, 7, 4, 1, 16, 6, 10,
                    3, 9, 16, 7, 2, 7, 6, 12, 16, 15, 1, 6, 15, 2, 13, 15, 9, 
                   11, 15, 13, 1, 18, 15, 1, 13, 1, 11, 4, 10, 10, 1, 18, 18, 
                   16, 13, 18, 17, 13, 3, 10, 17, 1, 13, 11, 11, 11, 2, 1, 13,
                    6, 2, 10, 9, 16, 17, 13, 1, 11, 5, 5, 2, 7, 15, 5, 18, 1, 
                   7, 16, 18, 9, 17, 6, 2, 12, 7, 1, 7, 10, 17, 18, 9, 10, 12,
                    18, 7, 10, 18, 15, 1, 1, 10, 18, 4, 4, 7, 15, 13, 13, 4, 
                   16, 2, 7, 1, 17, 9, 13, 10, 4, 15, 18, 17, 16, 13, 3, 15, 
                   3, 3, 16, 9, 7, 3, 17}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJw1UEkOAjEMa5OmhWfwBC7cOXKFFwwSywmkAQnxWP5C4ng0auV4nNjp5vw8
XqWU8lr5dZw++3mevqe1F4fH+3K7zNvdvXr182Ollu6n+Te8Mq+sCJAAB6uO
1RXBhC6wQjGc6Y7jFmc7egx/lbMrZghQaIMPX8Wc0A0wxmkCXQeb2RQOFSkG
fAY4hSr7kxGoBhhhTgXTmLnDvwLl3sapRvWSo6Fv2WFxUm49MD//CbWdm+at
eI/GrnzRxu2M+YXuiszpLKgrtQKnyF8xpdHhD38QDaU=
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1: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
                  "], "Children" -> CompressedData["
1:eJwdiWVUFgYAAO+56XTOdehc2R0Y2IGNLdgNSligHyhid3d3d3d3d7eiLnSl
m677xvbj7r17ly0yPiw6DZCQPlVhEUkhgUBEcniG1AiNS4yKiQoEBcf+91NS
SfM/L/AiaWlDWzQdGXiZf3yJv03PX040I6+QlQ/400y8yVu8ymv84QR/93V+
8w1+dbxv8w6/OM53GevPjvEn3+NHM5OF0b7PKH9wpB/yESUJ5mM+4bkjzMZw
n1mE7OTge4eZk1zkJg/fOdSn5qUgQ3xiPr41PwUY7DcO8msL8ZWF+dKBFiWI
xxbjkSX4wuJ87gA/s7+lKE0IVShDWT61n+UoT2X6+tAKVKQSD+zjfZNNsbf3
TPKuVWlEGNWoTg1qcsde1qKnt61DKLW5ZaI3TbAu9ahPwIb08IYNuG53rxnv
VeMMpzFN6GZzWtCUrjaji1fs7GU72ZJWXLI1F431gjG2oz1rWUcEkUxmCh2I
NopoztuRc0YZQyxnHUgnOtqZLpyxg13pxgAiPW0c/YnwlPF0pwcBEuhDexNp
50l70ZO2nrCNSbS2N608bjLHbOlR+3LEfhy2hYds7kGbecBBDGYIQxnGKEYz
nBGMpKn7beI+G7vXcPc4hnGMZ7dj2WWYE2jkTicxkYbusIHbre9UpjGL2Wxz
OjOp5wzqutU6brG2mw11DnPZ5Dw2Wsv51HQBC1lEDVdT3cUsYYPVXMoy1lvV
5axgnStZ6yrWWMXVhriGyq6ykuvZwGa2sNKKbqSCK9zEcsu7lXIe4zjb2M4O
drLMsu6ijEs9zG72sJfSLnE/i93HIku50AMs8CCHCHa+JZ3nEeZ6lDmWcLbF
PcFJTlHMy1zhNGc4yzkuEeQszzPTol6giDO8yHQLO81CXqWgN7nFNQp4nfze
IJ9Tzett8phCbu9wl3vkcoo5nWwOJ5ndfwEFJsR9
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{13, 4, 18, 1, 6, 13, 11, 13, 11,
                    7, 18, 1, 8, 2, 18, 18, 15, 18, 13, 18, 1, 2, 3, 3, 16, 1,
                    16, 11, 17, 17, 5, 4, 1, 5, 13, 15, 11, 1, 6, 17, 18, 13, 
                   6, 2, 7, 13, 16, 11, 1, 11, 9, 10, 7, 12, 9, 18, 18, 15, 7,
                    4, 18, 15, 13, 1, 9, 2, 15, 7, 3, 9, 16, 14, 6, 18, 9, 9, 
                   4, 15, 1, 18, 15, 10, 13, 2, 1, 6, 7, 7, 5, 16, 12, 7, 13, 
                   10, 18, 1, 14, 11, 5, 17, 18, 18, 13, 4, 7, 3, 15, 15, 7, 
                   2, 15, 15, 6, 12, 13, 10, 1, 13, 12, 7, 1, 1, 1, 14, 14, 6,
                    13, 10, 11, 18, 3, 18, 16, 18, 9, 10, 1, 13, 1, 10, 7, 9, 
                   10, 4, 1, 6, 18, 16, 13, 12, 2, 6, 13, 9, 4, 9, 7, 6, 10, 
                   18, 10, 16, 7, 7, 18, 10, 14, 2, 17, 2, 7, 1, 7, 10, 4, 14,
                    4, 7, 9, 9, 4, 1, 18, 1, 4, 13, 11, 17, 18, 16, 8, 4, 4, 
                   15, 12, 15, 5, 1, 13, 16, 2, 13, 16, 13, 16, 4, 13, 12, 10,
                    18, 1, 11, 3, 9, 7, 3, 3, 3, 1, 18, 16, 15}], "RootIndex" -> 
                 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJw9UEsOAjEILaUfPYZHcOPepdvxBGMy6kqT0cR4VG8j78FMSCm8wuPR3eU5
XHNK6bUxN4yf4zyP3/PWktPjPd2meX+4i2U/OyXlVM3XJOa7WbNIkhLHAYIK
mBiCTFmFW4l5b6VvdjLxSlbUomLhaawoUV3sHVOFsffBmkU+E92FelwNOsFR
AlHGnVNz6FHOdo2dLJXWg0NCx6LAeSp1+uRKXGPTHpu3tcq30rDM10ylEpzo
gCrXoiuuzHxSo47Ou6yz/ff9t4TzNfix0x8A1g17
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1: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
uWi+jaACnnqbsbu9Av4P19G+mg==
                  "], "Children" -> CompressedData["
1:eJwdiWV0FgQAAO+hIhiAoISCCCpdI0bH6NFsdG+woDb4Nhiju7u7u7u7u2ug
lIGdYOs5/XH33r3LExkfFp0GSEiXqrCIpJBAICI5PH1qhMYlRsVEBYKCY//7
Kamk+Z8XeJGXSM8r6Cz/MS0vM9O/TcdfzvBVXqMr3XidDDSmCRnJRFay8afT
fYPMZOFN3mKafzjV353ib042OzmoSyhv8w7VmGROclGM4rxLbvIz0feYYF7e
Jw/j/dVx/uJYP+BDnjvGfIz2maMsQEEKMdKijPBnC1OE4f7kMH90qD9YggpU
5HuD+M6SlKI0ZQjmW8tRliF+42C/dpDlGehXDvBL+1uJynxhslXo51Or8rlJ
hlCdz+zrp9agJrX4xD7Wpg5PTPSxCdYj4CMbUp8GPLS3D+xlI+L92DibEsZH
RhJOM9rRnua0oC09bUkr7tvD1rThnt1NsZt37eodY71tB27ZiZt25IYxXjeC
a0bbmS5cNcooorliDLF08bKdvWSk3enBejbQkziWsox4erGAhfQmwHwiTCCR
UYymD30ZQSeT6McAOppMfy7awQu297ztHMggztnWwbRxCEM5a2vPOIzhtPK0
LT3lSE7awjGM5YSTOW5zx9HMY47nqBM44kQmEe5hw5xCU6cyjek08ZDzmMFM
ZtHYOTRyNg09aAMPOJf91nef9dxrqIuo6xLquMfF7La2u6zlcmq6gpXstIY7
rO4qQlxNNddQ1bVUcR2V3W4lN1LRbd5hE5vZwla2WsFtbOca19nBTg5xmF2U
d4u72Ww597CXfexnk2U9QLAbLeNBSrvBUh7hKOst6TGOs85LnOAkpznDWk+x
xiBXW8JVnmWl51hhcZd7ngsU8yJFXWYRL3OFpRZ2iVdZbCEXeYNb3GahN1lg
QedbwHnmd653mWMKs83nvxIQvIE=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{4, 6, 13, 18, 18, 1, 10, 4, 4, 
                   16, 6, 3, 7, 18, 15, 18, 11, 14, 2, 1, 13, 1, 5, 14, 1, 13,
                    16, 16, 18, 7, 2, 18, 11, 5, 12, 11, 1, 11, 2, 2, 18, 18, 
                   4, 13, 1, 9, 13, 9, 15, 2, 1, 2, 12, 7, 4, 7, 1, 18, 14, 1,
                    4, 18, 10, 7, 9, 10, 14, 3, 9, 1, 7, 13, 18, 18, 10, 8, 
                   12, 15, 11, 9, 11, 5, 15, 5, 15, 10, 12, 18, 4, 7, 1, 15, 
                   12, 5, 16, 13, 13, 16, 13, 14, 7, 2, 15, 16, 17, 3, 10, 15,
                    13, 15, 12, 1, 1, 13, 16, 13, 7, 1, 13, 6, 9, 12, 11, 10, 
                   7, 6, 10, 18, 14, 2, 9, 1, 6, 18, 10, 18, 16, 1, 17, 3, 17,
                    15, 13, 13, 11, 11, 6, 15, 4, 1, 13, 7, 13, 10, 11, 10, 
                   13, 1, 4, 10, 7, 13, 15, 7, 16, 18, 18, 1, 7, 16, 2, 12, 7,
                    10, 17, 2, 7, 18, 15, 12, 9, 14, 1, 2, 18, 10, 15, 9, 4, 
                   6, 3, 13, 7, 16, 18, 2, 18, 11, 14, 2, 4, 17, 4, 9, 3, 3, 
                   10, 8, 1, 4, 3, 12, 13, 15, 10, 15, 7, 3}], "RootIndex" -> 
                 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJxFUEsOQjEILC2legyP4Ma9S7d6gmfiZ6XJ08R4VU8jDGMMgQ6U4bc63vfn
Wkp5LNzsp9d2nqf3YenO7vY8XU7zenMV9z6uo/QipbqIo17MI9VfBQpp7oft
ruLxEHFsLpFZ4TWgwMEx1lLWCdSY34HCDmQrrDCu6Neh0SG95OZ/+APswVkM
kQ5cyW6c3rDfb9JBNVQS9s8L/OdVsBv5CrbwDgNXaGBV7mGoJJwgZxbwI0fB
MGQ17tp44cod88rKeQ1Z+ZO3NXbMnl89qg2o
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1: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
4BUq/23CISCxcaun/cl6zB+Jc9LP0mT8AxaftR0=
                  "], "Children" -> CompressedData["
1:eJwdiWVUFgYAAO+50s3NWOrC2R0Y2IGNLdgNSligHyhid3d3d3d3dyeuO3Q9
3WacuB9379277JHxYdFpgIS0qQqLSAoJBCKSw9OlRmhcYlRMVCAoOPb5T0kl
zf+8wIu8RGva8DKv8AEfkpZ0vM8kdaJPfZXXSM/rvMG7TDADGXmTt8hEZp44
3seO85FjfZsxvsNo/3OU/zrS9xhhFrLyj8N96DAfONSPyEZjwviY7BSlGDnI
yd8OMReDzU8BcpOHv8xLPgb5pwP9wwEWpBC/W5jf7O+v9vMXi3DfvgaR7D37
WJwSlKQUP5tkMKUpQ1l+src/2stylKcOif5gghWoSCUCVqan39vDKoTwnfF+
a1W+sRpfW50axFmTWnxlbb60u18Yyud28zPrUo/6NKAhjejqp3bxEzt711jD
ibElrWhCU5oRbQuiTLE5d+zkbTt6y0hvGmFb2nGEo7SnA2MZRwSRdKErHelg
LO29YSeuG8U1o4mhnVdta2faeMXWdqM7lx3NJePoTRLx9OCiPblgKwMkkEhL
e9HC8zb3nM08ax+GMZxk+tKPpvaniWcMdwBhDmQQg2nsaYcyhEaesqEnbeAJ
RzCK+h53JMes51HresQxHLaOhxzPRCZx0AkcMNTJ1HYKU9lvLacxnTWsZQYz
WcRiZlHTOcxln7PZaw33OI/5LGC31d1lNRdS1Z2GuISl7HA5263iNpex1cpu
cQWbXckqKrnJ1Wy0ohtcx3rXs84KrnUDG9nEZsq7xgNsYSvb2M4e9rKDnay2
nKvcxW7KutIyrrC0+9jPcoNdZimXWtKDlHCJh1jsYRZZ3IUGeYzjLLCYJzjJ
KU4z36Ke4SzzvMk5iniNwp7nAhe5xBUKOdeCzvEysy3gVfI7y3zO9DozvMF0
8zrNW9zmDlPN4xRTmGxunwGbL76A
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 18, 16, 10, 6, 12, 6, 14, 1, 
                   13, 18, 15, 15, 12, 15, 10, 10, 9, 6, 16, 9, 18, 17, 1, 9, 
                   10, 4, 7, 18, 11, 4, 5, 18, 16, 2, 18, 9, 14, 18, 2, 6, 11,
                    4, 10, 7, 1, 18, 11, 11, 2, 4, 13, 6, 4, 13, 2, 13, 6, 3, 
                   10, 1, 7, 2, 16, 18, 15, 18, 12, 15, 16, 18, 7, 10, 2, 10, 
                   17, 15, 7, 18, 5, 14, 18, 1, 18, 1, 4, 13, 18, 15, 1, 1, 1,
                    4, 9, 2, 18, 4, 1, 6, 16, 11, 15, 8, 2, 12, 17, 3, 9, 7, 
                   1, 16, 3, 13, 10, 6, 15, 17, 1, 6, 2, 11, 1, 3, 13, 13, 15,
                    10, 14, 7, 10, 9, 12, 18, 10, 18, 14, 17, 16, 3, 4, 5, 1, 
                   1, 13, 18, 10, 10, 9, 10, 1, 9, 16, 14, 12, 11, 13, 16, 11,
                    13, 14, 1, 7, 1, 18, 1, 7, 4, 6, 2, 18, 1, 3, 2, 9, 18, 
                   13, 18, 13, 13, 15, 16, 1, 7, 2, 15, 9, 12, 3, 14, 12, 7, 
                   1, 5, 17, 18, 1, 6, 4, 7, 10, 18, 7, 7, 2, 1, 18, 18, 15, 
                   15, 18, 17, 3, 4, 9, 15, 10, 10, 7, 18}], "RootIndex" -> 1,
                  "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJw9UMkNwkAM3PX6gDIogQ9/nnxDBSAFeIEUkBAF0wf22EIr3xl7MpvzY7pQ
a+25cjed3vtlOX2Oay8O99d8nZft7ta9+rpJ6/60mWfShkf1aI08j77CD6/Z
s+jFNKPAExAEbPiYs2cC68CZG7k33IitjJ1RM/bnheFmNUmMAB/fC2oGRj1L
Jok13BhgK+hwfatgw5gN7BJMuHCKW/R/VmgDcwY7Qi85W3kpDRhoRcVQYoCf
1e6BHamYlcqplf2Z5v8mp1565xYFKqdaUcCk41GpFTr9AGM/Dc0=
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1: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
eVaqlwVTBvg/F7HxXg==
                  "], "Children" -> CompressedData["
1:eJwdiVVUEAYAAO85t+k6XNnYrRjYgY0t2A1KWKCAInZ3d3d3d3d3d7Hu7pPt
4+69excQERcalQZISJeq0PCk4Pj48OSw9KkREpsYGR0ZHxgU899PSSXN/7xE
Wl6mF715hVd5gzdJx1A1Pf86xH98jdcZ7N8O8i3ephsDfYcBFqIw7/Ie75OB
HOTkAz4kM1n4iP7+ZT8/5hP+NCN/2NffzcRvJvurWfnF7PxsNn6yjwEk+aO9
/cFc5CYP39vLvOQjPwX4zkS/NcFvjPdrC/KVPS1CD4sRyJcW5QvjLE4Jwomg
JKWoTg2CiLUCFfnc0pShu2Xp5meW41PLk2JXn1uJZ1alMlUIpotP7ewTY3xs
NR4ZbU1q0Ya21CaEhjTioVHWIdK61OOBnaxPRxsQ4X3DbUwoLelgGE1oSnvv
2c67tvWOzbhtc27Zgpu28YatuG5rrtnaq7bjiu25bCsv2YGLtvSCLexIJyKJ
ojNdOG9zzxnNWWM4YzNP29SuNPGUYXYnlpPG0YOenDDU48ZzzASO2thEGnnE
hibRh6tcI5m+jGAk/ejPYRs4gPoOYSgDqecgBnPIuh60jgcMcb/D2Odw9lrb
UYxmHvPZ4ximMo2xjGM8E9htLXc5kZ3WdBKT2WENtzuFbVZ3OtWcySy2OoMt
VnWzwc5mDpus4kbnssHKrreSC1jIIhazzoqudQnb2M5SlrGcFaxlHWtcyWor
uMpVrGYNKy3vCsu5nrJuZBMbKONyS7vMzSw1yCVuYSulXGxJd7CT/RxgFyVc
ZHF3E+hC97DAvcx3H/Ms5kEOcZgjzLWocyziUQp7jOPMtpAnKOgpTjPLk8y0
gGc4yxXyO8NznCef083rNC8w1YtM8RKXyeNkczvJXF7nBo/I6URvco/7TPAW
t8nheO9wlwDHmd2xPuAh2RxjVkebxcdkdpRPGOlTnvGcEaYw3EwOM6MvANvN
1HU=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{18, 1, 5, 4, 3, 13, 12, 11, 1, 
                   15, 10, 11, 10, 14, 9, 17, 10, 17, 1, 18, 16, 13, 10, 4, 6,
                    18, 1, 3, 6, 9, 14, 2, 1, 1, 15, 18, 1, 14, 7, 18, 13, 13,
                    18, 7, 16, 17, 2, 16, 10, 3, 9, 18, 6, 14, 9, 5, 13, 11, 
                   13, 9, 13, 4, 1, 16, 15, 18, 1, 5, 7, 15, 2, 13, 10, 7, 7, 
                   2, 7, 4, 1, 14, 9, 7, 18, 4, 4, 3, 14, 12, 7, 18, 6, 1, 10,
                    11, 18, 14, 7, 10, 10, 18, 18, 1, 18, 16, 5, 15, 7, 16, 4,
                    18, 18, 1, 12, 15, 11, 3, 3, 6, 9, 15, 18, 18, 15, 15, 15,
                    10, 1, 1, 15, 7, 16, 6, 11, 17, 17, 10, 6, 10, 3, 1, 10, 
                   15, 1, 1, 13, 18, 13, 11, 13, 14, 18, 10, 2, 7, 5, 18, 18, 
                   18, 2, 18, 10, 1, 7, 14, 3, 16, 1, 13, 2, 14, 6, 11, 11, 
                   10, 1, 11, 13, 15, 15, 16, 4, 12, 12, 5, 4, 2, 15, 10, 3, 
                   1, 13, 2, 1, 2, 4, 7, 13, 12, 16, 11, 1, 16, 12, 7, 9, 17, 
                   10, 10, 14, 10, 10, 16, 9, 7, 10, 3, 4, 15, 4, 13, 9, 9, 
                   11, 17, 7, 2, 3, 3, 7, 18}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJw9UUEOwkAIZFnY1Wf4BC/ePXqtL6hJ1ZMm1cT4Wd8iDLRphgUWhlm6uzyH
KxPRa2NmGD/HeR6/560Fp8d7uk3z/nAvFv0MQo2Kwa2aVarmdfOE2NARu6eG
ishrGF2e8RrvUFhJxmI3CnB63byOjoYOTr9hhp81a2OWa1FUxYSGGZqqOvjY
sqFEwSLgDLW6xpq6O6oleeIUfJpzGTzLDMltLEoCLefGfYfmihcwXh33BYi4
5O4YCjwr66e5dcb+gmNRUPKVoa2As+Z/8cwfnLANmg==
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1: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
/wdVWMNg
                  "], "Children" -> CompressedData["
1:eJwdiWVUFgYAAO+50qW6brFbMbADG1uwG5SwQD9QxO7u7u7u7u7uYKnrNlZ6
sv24e+/eBUUlhMekAxLTpyk8Mjk0EIhMiciQFmHxSdGx0YHgkLj/fmoa6f7n
OZ7nBY5wlBd5iZ3sIj0ZeIVXeZkJ6nifOs7XeJ3GNOENMhJCCTKRmZzk4k3e
4lOy8MSx/uvbvMO7vMcY32e0/zjKD/iQjxjp347wY4b7l5/wp8MMIis5GGo2
hpidwT52kI8c6EMH+MD+5iYPecnHHxYnP/383b4WoI+/WZBfLURhgvnFIvxs
UX6yt8Xo5Y+m+IM9/d5kS1KK7+xhacrwrWWpTg3KUZ4KdPcbk6xIKPetRGUS
vWfAr63CV1alGt380q6GUZO61KMWtfnCBD+3Dp8Zb6pdvGtn69OAO3YynAga
0ojbdvSWHbxpnDdsShTtaEZzWtCS67blmq24aqxXbE0bYrxstJeM5KLtbU87
L7iKaGKIJY7zdqMDHTlnV84aZSc604V4zhjpadt6ygRO2sYTtjZAIkl0ZyWt
7EEy/RlAT1rah76k0MJeNPe4vTlmM4/a1H408YiNHUgjDzuXQQxmCEMZx3iG
MZxDNnQEER403AOOZBSj2W8Dx1DfsdRzn3WdwESmMJW9TmKPdZxMbXdby2lM
ZzY1nUGYu6zhTGax0+rusJpzqOp2qziP+WyzsgtYyCIqudWlbHExm13CJkPd
6DI2uJz1rmCdFV1rBVezhrWsYwvlXc8GNlPONW5kE2VdbRlXWdqVlnIr21hh
SbdTwuXuYJkh7mYPe9nHUou7xGIudj+LPMgBirrQIi7wEIcJdr6FPcZxznOB
eZ5grmeY40lOUcjZnmaWBZ3pWc5RwBnm9yL5vMwVLpHX6ebxKteY5h2uc4Nb
5HaquZziTSab09vkcJLZvUs2U8nqRIN8Bn+Sxnw=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{18, 18, 10, 11, 4, 6, 1, 14, 13,
                    2, 6, 18, 18, 1, 5, 15, 10, 18, 9, 10, 14, 13, 16, 18, 2, 
                   13, 11, 6, 13, 13, 6, 2, 6, 17, 1, 6, 13, 18, 11, 10, 15, 
                   4, 5, 9, 10, 7, 15, 15, 1, 9, 4, 16, 7, 4, 18, 1, 12, 1, 
                   10, 10, 2, 7, 2, 7, 3, 13, 13, 15, 18, 4, 1, 5, 3, 10, 10, 
                   9, 9, 13, 7, 11, 7, 3, 4, 13, 14, 2, 18, 3, 18, 4, 6, 1, 5,
                    15, 18, 10, 3, 15, 7, 17, 16, 16, 14, 17, 18, 10, 2, 17, 
                   18, 1, 18, 1, 15, 13, 1, 18, 3, 13, 1, 1, 13, 2, 16, 6, 10,
                    13, 3, 11, 1, 11, 7, 10, 1, 16, 3, 9, 1, 11, 7, 16, 6, 6, 
                   13, 1, 5, 16, 18, 6, 13, 2, 16, 10, 9, 18, 10, 10, 2, 14, 
                   7, 2, 18, 18, 12, 9, 5, 16, 4, 13, 4, 10, 7, 2, 14, 7, 14, 
                   7, 10, 18, 7, 13, 18, 13, 12, 7, 10, 14, 10, 18, 2, 6, 6, 
                   9, 15, 15, 10, 6, 1, 7, 13, 16, 4, 4, 18, 15, 11, 18, 18, 
                   7, 9, 11, 18, 16, 16, 15, 16, 15, 17, 10, 16, 11, 17, 7, 
                   3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJxFUEsOQjEILNBSPYZHcOPepVs9wTPxs9LkaWK8q4cRBqohbacDTKesjvf9
mUspj4Vt++m1nefpfVjaZXd7ni6neb25kt0+tlqphUovbKcANQsy3C3EWM90
Yxxxnr2ohbOMmyPvEzChMjobKhhaNXUbsBqrxgjyjiuqFblmi9CnyLp+h6r3
cCq7+9BgOFJww4lk1egND8NjvBIKhFDUtPQ7vPxxOIs5ETobpkTYBS+HB0Gu
5pQoeyVnojlxyp/wr5rhqePF4aWmbtTFf79R8A2V
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1: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
                  "], "Children" -> CompressedData["
1:eJwdiWV0FgQAAO8hKliogIkC0s2I0TF6NBvdGyyoDb4Nxuju7u7u7u7uZraA
gh1gH4Mfd+/du+yR8WHRaYCEdKkKi0gKCQQiksPTp0ZoXGJUTFQgKDj22U9J
Jc1zXiAtL9KRKF7iZbQD6UhPIQrzCq/yER/zGrN8nTf435lmYIZvk5H/fJO3
mO6/TjMTU/3HKWbmHd5lsu8zyfeY6N9O8AM+5C+z8KfjfeI4s5KNnOTisWP9
w+x8whh/Nwe/Odrc5OFXC5KXUf7iSH82Hz+ZnwKM8EeH+4PDLEJRKhNCEMX4
3koUZ6ilKcMjS1CSIT40mFIM9jsH+a0DLUs5Hlie+w7wnhWoSH+/sZ9f29cq
VCWCSKpRnVa05itrUIe6fGlNahFKbfr4hcl+bm/rUZ8wwmlAkp/ZiIb08lN7
mmKid21MExK8Y8CmNOO2zWlJD2/Zgpt294bxXrcN14yzLe24anuu2M3LdvWS
XbxoZy/YyWhiOMNZYulEfwbQmViT6E0XutKNGBOINo4o4+lod3pw3gDn7OBZ
Iz1jIj2J8LS9OGV7k+nDSdt5wrb2pY39aO1xWzmQQRzlGINp6VCGMYQWHrO5
wxnBaMZw1JGMoplHbOphm3jIxo5lHOOZwD72M5FJrGI1k5nCEpYylXBnMZtp
hHnQ6cygkQecyX4bus85zKWBe63vPOazgHrusa4LWcRi6rjb2u4y1GXUcjk1
3WkNV1DdlVRzh1Vdw1p2sot1rGcr29hAFTexmY2EuN3KbqGS26zoViu4xe1s
trw7KOcmy7qbMu6ltBvdwwZLud5gD3CQdR7hECVd62HWWMLVFneVxTzOCVYa
5EmKusJTLLeIpynsMgt5jvMsNYULXGSJl1lsQS9RwEXm9wpXuUY+F3qHBV7n
Bnmd703meYvb5HGuub1LLueY09nm8Ck3CcJ+
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{14, 13, 18, 1, 1, 5, 3, 18, 3, 
                   16, 1, 16, 1, 15, 6, 1, 11, 16, 1, 9, 4, 6, 1, 13, 12, 7, 
                   14, 2, 7, 14, 2, 2, 13, 18, 3, 11, 11, 13, 4, 3, 14, 1, 18,
                    11, 11, 13, 13, 9, 2, 17, 15, 9, 7, 9, 4, 10, 13, 12, 15, 
                   4, 18, 13, 18, 1, 10, 3, 13, 18, 7, 4, 12, 12, 18, 13, 1, 
                   2, 15, 9, 13, 1, 7, 10, 7, 16, 13, 9, 7, 2, 4, 3, 5, 15, 
                   15, 9, 11, 10, 15, 3, 1, 3, 15, 5, 16, 15, 1, 6, 10, 15, 
                   13, 5, 14, 1, 10, 5, 6, 14, 12, 16, 17, 10, 16, 11, 10, 18,
                    4, 1, 14, 10, 12, 10, 10, 18, 18, 18, 6, 13, 1, 6, 2, 6, 
                   9, 1, 2, 13, 10, 7, 12, 13, 1, 1, 16, 1, 16, 9, 18, 5, 10, 
                   4, 18, 1, 12, 16, 7, 15, 7, 10, 2, 7, 10, 13, 18, 2, 13, 1,
                    17, 2, 1, 18, 10, 18, 17, 7, 10, 14, 10, 18, 18, 14, 7, 9,
                    4, 10, 7, 4, 14, 12, 4, 18, 18, 10, 13, 7, 12, 6, 12, 4, 
                   12, 7, 18, 5, 15, 15, 2, 3, 17, 10, 9, 3, 3, 18, 3}], 
                 "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJxNUcENwjAMjGM7gTEYgQ9/nnzLBEUq8AKpICEmZZ3a56RCUZOcz76zm93l
OVxzSum1sW0YP8d5Hr/nrYHT4z3dpnl/uJOhn30lSdJEdpZU7RQ72SLZULVd
W0SMc1yQ7WxnIptQHUstlnHzel2zsy0BFrh5XvhX6BM8Q5Xg4zXcGFdg9EDQ
cJ6bg1cFG3m6aqmpxSw+IWESRwxGod/VFJyg7wI9gqbANSPe60uLCfrNmCX8
+G/yir/CuMcsFQq9E27/PHK4vQG1bhm74HUy8ALGzw2B
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1: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

                  "], "Children" -> CompressedData["
1:eJwdk1V0FgQARu9BURAVAQMsRLoZMTpGj2aje4MFtcG/wRjN6O7u7u7u7jbB
AgkFE+zL8OF+59zzPd8ckfFh0WmAhHSpExaRFBIIRCSHp0+V0LjEqJioQFBw
7PP/Zipp/ucFXiQtb/IWL/Eymol0pOc/M/AKU/3XKf7jZP/2VV7jdf4yI386
yT98g6dONDMTfGIWfne8b/MOHYggK+OsSz2yMdZ3eY/3+YBQxvibH5Kdj/jV
0ebgYwpThF/Myc8WIhe5+clRPjYPeclHfkZagII8coQ/OtwfHOZDh1qUFEsy
xGIM9oFB3Lc49yzB9w6yFMHcdaClKUNZylGdAZanvxXo5x37WpFKVCbZ7wzh
W6vwjX382qp8ZTVum2QNalKL3t6yl19amy9MtA4Jfm7A+jSgFa1pSCM+sxmf
2phPDOOmPQ2nCU3p4Q3jvW6c12xOC1py1e5esZuXbcMlu9qWLrajPRft7AVj
jaQjE5lEJ6LoTIznjeacMZw12jPGctoou9CVU3bjpAPoThwnjKcHnTxuR3sS
IIFE+hDpMSPsRQd7096jJnHEdh42mb7045Bt7U8bD9ragQxiMEMYxWhSGMoB
RzKMVo6gpcNp4X6bu89m7rWpY2jiWMLdY5jjGM9uGzuBRu6yoTudzFSmscMp
bLeB25zOAQ4yg5nMor5zmMts6rnVus5jPnvYywIWspZ1LGIxy1nBEpayjDpu
MdTN1naTtdxoTVeyitXUcIPVXe8a1lnN9WxgrbvZyCZ2UdXNhLiTKm5hK2us
7Da2s4NKrraiq6zgSsu7wnIut6zLLOM+SrvU/Swx2EMc5hznOcJRjnGcxZZy
kSU9QQlPcoqFFvc0QS7wLPM9wzyLOdeiXqCIcyzsRS4x20Je5gqzvMpMC3qN
69xIrWqGBZxufqeZz2d1CbiD
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{18, 1, 10, 18, 9, 1, 2, 6, 13, 
                   11, 1, 18, 13, 5, 1, 18, 10, 5, 3, 6, 17, 13, 16, 2, 2, 1, 
                   6, 13, 13, 1, 18, 10, 14, 6, 9, 2, 18, 13, 16, 5, 3, 10, 
                   12, 16, 11, 16, 11, 18, 1, 16, 9, 12, 4, 15, 1, 10, 12, 7, 
                   18, 7, 17, 2, 7, 3, 9, 9, 4, 13, 14, 2, 7, 2, 4, 2, 18, 10,
                    5, 12, 15, 15, 13, 11, 15, 18, 3, 10, 13, 10, 18, 12, 16, 
                   13, 18, 7, 12, 13, 16, 11, 10, 3, 3, 17, 6, 15, 15, 2, 8, 
                   4, 18, 1, 1, 1, 13, 10, 12, 2, 18, 1, 13, 11, 13, 14, 7, 
                   18, 10, 10, 9, 16, 10, 9, 13, 10, 4, 1, 18, 13, 13, 17, 10,
                    2, 1, 15, 6, 17, 11, 11, 1, 9, 1, 13, 6, 13, 15, 7, 15, 7,
                    12, 5, 16, 9, 1, 10, 16, 2, 7, 13, 4, 10, 18, 1, 16, 18, 
                   4, 6, 14, 4, 6, 16, 9, 18, 3, 10, 10, 14, 16, 12, 7, 12, 
                   10, 4, 1, 14, 7, 15, 1, 10, 13, 10, 11, 7, 18, 13, 18, 12, 
                   15, 17, 15, 9, 3, 16, 15, 13, 3, 5, 13, 6}], "RootIndex" -> 
                 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJxNUEkOAjEMy9YGnsETuHDnyBVeMEgsJ5AGJMR/eQipEyFUtdPYbuzM6njf
n4WIHos49tNrO8/T+7CMYnd7ni6neb25clSf2ExKRp0alsTNyAP1wCW2glfo
OJaEyuP0QIfKgRuQjg4t6vEV6FqxGqxAL+XJcONf7441XDNPx4vMMxBHTw3G
Ck1t5k2Oa46GKlmtvAI8J82smSZ7O3oKuhsS9aoc91b+I0vDC0MWLicFamAb
5hNMajgzj/1epYOXNv+O11+QmqaXs+MulU///LlmGX2+MRsNww==
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1: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
cpDryA==
                  "], "Children" -> CompressedData["
1:eJwdiWN0FgoAQO/pqZ6tuOxaWMbyclv2VkPa6ttqLdu2bdu2bWPPtt9t7/24
95x7blBUQnhMOiAxfZrCI5NDA4HIlIgMaREWnxQdGx0IDon776emke5/nuN5
XkAv8yIvkZNcpCcD7/AuL/MK//oarzLefxzn3471dcb4Bm/yFqP9y7f501H+
4Ujf431+Nwsf8CG/OcJf/YjMDPdjhpmRof5iJn52iD852B/Nyg9mI4jsfO8g
vzMH3zrQ3OShBwHyko8oOpCfAjQinIIMsAhFKUR/v7EwX9vPYIpRgpJ8ZV+/
tDhf2McQSvG5KZamDOXo7Wcm+6ll+cRelqenFahIJSrTgCRTTTSUgFWoSjV6
WJNaPLU6NejuExN8bLxh1OaRdahHN+vS1Yd28YH1uW9n79mQu3Yygsa0pR1N
aMod23DbOJvRnBbEessYW9KK1kR7047esIPXjfKakbYnkqu294rt7Eg0cXTi
sjFcMpaLtvWCbexMF86bwDm70o3WnrWVZ4zntC09ZXdO2sJEkhjPBHrSixM2
N5neDGAgKTTzuE3tQ1+O2cR+NLY/ER413EEMZgyNPOIQDtvQoTRwGMM5ZH1H
MJKDjuKAo9lvPfdZ17HUca/j2GNtdzuR6cxgEpPZZZhTmMpOp7HDWm63pjOZ
xRzmss3ZbLWGW6zuPOaznwMsYCFrWMsiqrmYJWy2qptcykZXsozlrKCKGwx1
vZVdRSVXU9F1VnAd69nODtZa3g1sZBObWWM5t7CV1ZZ1lWXcRmlXWsqdhLjC
3Sx3F8ss6R72stQS7qO4SyzmQYJd7CEWWdTDHOEox1hoEY9T2HOc5wQnWWAh
T1HQ+Z7mDAU8S37nmc+5XuASeZ3jRWabx1nm9gpXucZ17pLLG+R0pne4SQ5v
kd0Z3ma6QU4zm1O9x30e8JCsTvERk83iJB/zhKdMNLOpZHKCGX0GvxrSdg==

                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{15, 18, 18, 10, 4, 6, 7, 13, 1, 
                   18, 1, 10, 18, 15, 9, 10, 4, 15, 10, 12, 1, 4, 2, 13, 3, 
                   17, 6, 1, 12, 1, 10, 10, 13, 9, 5, 6, 17, 1, 7, 11, 11, 13,
                    6, 9, 2, 2, 16, 10, 18, 17, 17, 18, 7, 14, 16, 9, 1, 9, 
                   18, 14, 7, 4, 9, 1, 10, 4, 4, 3, 2, 3, 5, 13, 12, 15, 16, 
                   1, 13, 13, 2, 4, 13, 16, 7, 7, 14, 7, 14, 1, 9, 4, 12, 18, 
                   18, 18, 14, 18, 13, 10, 1, 7, 15, 1, 4, 8, 9, 11, 3, 6, 1, 
                   3, 3, 15, 16, 18, 1, 13, 1, 1, 8, 13, 13, 16, 1, 10, 5, 11,
                    4, 5, 15, 12, 16, 6, 13, 2, 6, 11, 7, 1, 3, 6, 10, 2, 5, 
                   7, 1, 18, 13, 11, 14, 18, 1, 6, 18, 13, 4, 13, 2, 9, 11, 
                   13, 6, 11, 1, 1, 1, 16, 2, 7, 10, 17, 9, 15, 10, 18, 16, 2,
                    4, 18, 7, 18, 18, 9, 12, 10, 12, 2, 18, 14, 10, 5, 18, 10,
                    15, 10, 7, 6, 18, 13, 10, 10, 4, 14, 10, 10, 10, 18, 14, 
                   13, 4, 13, 1, 4, 10, 11, 7, 12, 4, 6, 9, 17, 5, 17, 3, 13, 
                   10, 15, 7, 3, 15}], "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJw9UEsOQjEILLSAHsMjuHHv0u3zBM/kqStNqonxnh5IOqAh9AfMTGdzuk9n
LqU8Vr5M82vf+/w+rv1yuD2Xy9K3uyv57eNJHoKsHlRaMQ/1nT0U9ebJvo56
VMZZ0SkezUOBEntDVyAIXmq+jn7zm3mvAYPw0oCjmAhUBUZNtsFPf5Sa65hh
TCkQQ4ugptlHqcrAokDi5CR0B7eBWcAScwIFoY/gicGdlp4pghJN4I2kR6H5
52RNRTX/YDhz/oOSh9O1iumWLoReLl+Djw2D
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1: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
KeoGSqfrWyQUoEs77u27uw/+D31YmwY=
                  "], "Children" -> CompressedData["
1:eJwdiWV0FgQAAO+BCtiBhYigoCI5YnSMHs1G9wYLaoNvgzG6u7u7u7u7cwoo
qDQoGGBQek5+3L1377JFxodFpwES0qcqLCIpJBCISA7PkBqhcYlRMVGBoODY
/39KKmmek5YXeJH9HOAl0pGZj9H0vM4bZOBl/vUVXmW0/zjKZ77GU0f6Jm/x
xPd4m3d47Ls8coQZGe7fDvMvh/o+Q/yAD/nTTPzhYD9ikA8daBY+IYJIspKN
2tThUz6jOCXITg6+4EseOMDP6e/v9jMnX1GQQuSir3noY256+5u9/NW85KOn
+QniFwtw3x7es7uFCeZnu/mTRbhrskXpajGSvGMXS9LZUpTmtonesgzlqcBN
y3LDEK5bjmsmeNWAFanEj1YmlKr8YBW+t5NXrMZla/Kd1fnWGlyyoxetxQXj
DSOcxsRZl3p8Ywe/tj4ptve8DThnQxrRzrO2tQlNOWMzmtPG08baghhbEu0p
o2xFaxJIJIpoOhBHDLG0p7VtaMtJW3nCSNsR4XFbeswWxtORozb3iM3sRFMP
G+CQTexMFw7a2AMmsZVtdCWZbnRnOI3sQU/2O4xeNLQv/dhnb/bahz02sD/1
3e1QdjmAgQxip/UcTF13OITthrvNMLdaxxGMZBSjWcVqxjCWucxji+OYwEQ2
O55N1nYSk5nGdDY6hQ3Wcio1XW8NZzCTdc5mFtVdazXXWNU5hLraKs5nActZ
wSoru9KFLGIxK1zCcpexzKUstZJLrOhiV7LICi60vGtYywI3Mt9yrmM98wxx
A2WdaxnnuInZbmYLpZ1lKWe6nRmWdAc72UUJ91Hc3exhusXcS1GnWcSpBjvF
wh7kEIc5wnkKeZRjTLagxyngJIM8QX5PcoqJnmaC+RzvGcZ5lnPkdax5TCG3
Y8zlf9G2soY=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{18, 15, 1, 18, 6, 11, 18, 7, 1, 
                   13, 13, 13, 13, 11, 14, 11, 15, 10, 13, 7, 16, 18, 14, 3, 
                   9, 3, 1, 5, 18, 10, 13, 2, 13, 11, 9, 5, 6, 13, 13, 18, 6, 
                   11, 16, 16, 17, 16, 1, 11, 10, 2, 7, 12, 15, 4, 5, 7, 15, 
                   4, 5, 10, 7, 9, 15, 4, 1, 10, 7, 1, 2, 14, 4, 13, 2, 13, 
                   12, 18, 18, 10, 18, 14, 16, 17, 10, 5, 1, 14, 12, 18, 10, 
                   10, 1, 7, 9, 6, 13, 8, 16, 4, 4, 17, 7, 1, 18, 17, 18, 18, 
                   15, 15, 15, 7, 2, 3, 1, 1, 6, 4, 9, 10, 15, 1, 4, 2, 18, 
                   12, 10, 12, 12, 7, 16, 3, 7, 1, 1, 18, 17, 9, 18, 13, 1, 6,
                    18, 1, 2, 1, 14, 17, 16, 12, 3, 7, 9, 1, 1, 14, 2, 16, 9, 
                   18, 4, 5, 9, 12, 1, 7, 15, 3, 13, 18, 4, 17, 18, 2, 9, 2, 
                   7, 14, 4, 10, 10, 18, 15, 10, 1, 7, 10, 11, 7, 13, 3, 10, 
                   11, 12, 15, 3, 12, 4, 17, 10, 2, 18, 16, 15, 15, 3, 3, 18, 
                   3, 9, 10, 15, 3, 16, 17}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJxFTzkOwkAMtL3eNTyDJ9DQU9KGFwQpQAVSQEI8kx/FGZtEq7HG58zuLs/u
KkT02njo+s9xHPvveevJ6fEebsO4P9zZs59DyagRO6qz4pEdxaOROKuIirpm
Vvw1QBJrT7ETnD2aV8Sh2NDcYkyECmNLoD17Cd6gL9kNjxXztjhsuFpRq+jG
3vqblpOhOzsQOCzwYsgsebiYe4ZLig1GVdJfQbcsjoNL3mHUQpUTDZfjF4pc
4YjTZeiHXsT/ZcOvC00ctw1c
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwNlH8804kfx1fxbU6Yy7fc9c1Np0x1D6tOrZT3LpV9+0pK3Y0TUjRXl0Xc
+kHr8XXim4Qu7VTyI4fVg9X5aqVv71EJOYbKjNlH7AcbZoytxNcfr8fz39fz
9cfLNTJ2f9Q8EonUNpfAvWNF4oNDwH7lKxVda0d6gMOS5culqF3/+nfBzknM
kn+bZ8nRQ9qE7tP5m+PI5B1mT/HNSElZO7Lt4xDKGl71fG4/hougtl79I0nC
vF7S1BRgQqK0RBB9chIJ649ybrgFafTqf66/Y0HJcLqrV74BiZ67AYX2HZgm
Pj6kMIqR7neS/fd4AqkdpYvpzlLk7aV9kbCQgMBD3w3kzjMgpcIc+oBvRGlM
ic290LegdfLZvLNCj2mTXtaxnRpkMmo8PiyZRIpkY/GLVAMynt5o3v7zn0iL
cGBevqxC8rhvUPL5M1D23yNBp1mjyFnz0mi0e4/OqbZ2j1IHke8ZVcxq0WBW
xUxLTn8XBrZdi7ugmvOl137rbz2IWWGyNxlOvSiZTPQfyB7BtC/unHLO6ERO
blsRpUiHskgXxm2nQeT4bBQ0xXchrTXCzV2vRZo96eC7CAT+FCvleWwfUor9
zw7EtwF7RriD8lyGzpYC6tLlRuSdcrNO31WH2pMrO3sCslH0/PHYuu0qoAX7
OyUVvoWCElPVlpMqMDQeUNisHkPJtXOfr+LVIv/r+i3fjPihyE7rI7w6BtKF
ZIubnQ7F9a2XwmubkLqc4bk9pxqzpjr2PQk1gtjVmb3aX4mc1eVGh5K/wGnX
zqyEq1ZMSfCDspgrcuB0W9Nji8RY4Fm8rjFShyyTd1XpRTXyd2fbJ/RZ0CBn
bhYu6EVO6/7bV2JeAlm3KiXyFyMKZLnHXmTOcdeBwdbPjFi2Qh/gXTfnn/RD
uP6YCQu+tKuwPV2FBTsFodL2SRSf3ZrY9ec4Mr6OetdwZBRpdebQlC4tGuiK
Fv90HXINgqVbIurmdpeLHn0aQuaYZJbba0D+K2N7Ya8MqUvb+Q5DvSCNzq5f
rG1A86C8UnlICNLDU0XvyCNI3tO6oOaoETlVy3i86nFIG5jSQB0BbF1wD4uW
CcyMP8ZNb6Xg3Cs7cmNWCgWEwXX2FzWKfstsH0ofBVJstI/d6wGQFMV89VOz
DiWDQy6OsW9QO+CYtDK+AYnkPFrI/CGQJK8wCIv6gFhQ5qW+34iBsU+rEAkk
aXS7S7J7MO1AuNMmowIYcZ2hNxeOzLHM/Z65Aw0OX36TIBhEw9FNnMI1cpDe
CN72VjEG7LgnjxYp5Cj6PnTeZ12jSPnPg4DkZB2yry7kKC4aUGz0p3ps1aB2
xlX12+N+5E7/e1mQtBIIm8v960eVwHjYZfo19yNwVocoz7hqkJ656XWvcgCl
XRNXLBu1yPj+K2WXqheI8pjgC1QVso9r63fpe4AqP0dfvPkDpJU85L2OVSDP
JSU2vq0CtZI3h7ilJiB8U2ouvRsD+g7x2pDSWhAEf1rmM/MSKfTpMyaWFkRM
G5JXSDSI7t/Mm1SrgFJZTjYaNFA2/PtE38MOpC3icUOeKZCm/3GkXPYQs96s
8Q5TSVHw3ioyrWpuv+qJkk2JciS4nl5rV3UDyTt7s9+zPuCujBp19BgAfpKe
w5dYgOXoLlyiawJDh0v5ugvzmWRLjbuwYhwYtjPTNcfNUFbQzpLkKIAeyW+S
Ca2YhnO7d4cQcRCxged7UVYBMg+a6/D4BEZYN8ftOXgRnIu7s7x87qDh1IkT
pXeGgfPTnnM494ci9sYQxo5+MAcF3J3f+R4ZG/j6W7eMQEyn+qcF6YC6NHOP
v24UxML8nPrMfqCahuV5xCjQOxf9HPhXP5ohJ37FvkZkd5ta5UmlKG7Up2b6
qpHRZ3081KJC5sT+0kvtGpC9svaLfjaO3Mf/+OBzWAiis8X23KfdSBNPEi1u
CqBtCFscXj+KzlluT4+2TADpFnPvsfBZyHJUDhPXlUh0ujO8hhcwWctWtrU/
MYF5Oq+k1WquH3mWucaGAJb6O7/890qgCoZl/7o7BZLqWbXW0whUq/yJaxVi
FF86kxDVMwGB24ysj9enkFy51TeR9AIZh877VaIJZL63ki1hzUC2zij0+Nss
lN3LL7QtVoPkZeWJqtF+aPjVJTTD3QjO99N7WDfGIeL0ZNg27w6gJNxtq83U
gJi/76ojTQmkutwX0tvNKLFrUSdG1ANpqqA+iawBs23Q/3oT5zP/DzRemz4=

                  "], "Children" -> CompressedData["
1:eJwdiWV0FgQAAO8hIKEoIqAoKgKC9IjRMXo0G90bLKgNvg3G6O7u7u7u7oZZ
gNJldwt6DH/cvXfv8kTGh0WnARIypCosIikkEIhIDs+YGqFxiVExUYGg4Njn
PyWVNP/zAmlJxwY2kp4XCaE6GcjIq2QlE5PVl/nPzPzrSzx1kll4hSdO9B8n
+Brjzcbr/O04s5ODUpQmJ2/wl8V5k7Hm5h1y8RZ/OsY/fJvfHe27jPI98vCb
I32fvPxqUfKRn18szM9+wE8WogAF+dEP+cERfu9wv3OYRRjqtw7xG4vxtYMt
wSC/MogvLcljB1qGYB45wLL0tzLJlqM8D+1nBZKsSF8fWIn79vGeVahKNe6a
6B0TrEFNFrGYWtRmIQHrUJfbdiOUerSkFfVpwC1b0JDeNqYJN23EF/byc5ty
w3jDiDOcZly3p9dszmf28FO725o2tKcDn9iWj+3mR7Yjxa52JNarxtKJCCLp
TDQxdCHGK0YbRZSX7eIlO3vRSC/YlfNG2J0enLMnccRz1k72ojfJ9CdAAv3o
aCIdPGMSfejLadt7ynaetK0nbOMABjKK0Qyitcdt5WCGMJRhHHM4R23pEVs4
guYediSHbOYYxnLQcMcxngPOYwITmcVsJjGZ6cxgv1PY5zSmEuZem7rHJu62
sbucyU4bucOGzmEu223gNus7n3pudQFbDHWzdV1CHTe5jI0uZYO1Xc4KVrKK
9a5lNbVc5xrWWtM11nC161jlelZa3U1sZgc72cJWthPiCqu5jaout4rLrOwu
dnOEo+xhL4c4zFIruY+K7qeCSzzAQcq72HIusqwLDfYYx1ngSU5QxvmWdp6l
PMVpznCWS1xmrueY4wVme55ZlnSmF5lhkFe4ynRLOM3iTjWFKRbzGTGnrIk=

                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{13, 10, 1, 15, 5, 1, 16, 15, 13,
                    15, 11, 5, 16, 10, 10, 12, 9, 14, 1, 9, 13, 1, 13, 18, 18,
                    16, 13, 4, 7, 10, 12, 12, 10, 15, 4, 13, 4, 6, 11, 18, 18,
                    10, 7, 13, 4, 15, 11, 1, 18, 13, 6, 1, 1, 2, 7, 18, 7, 14,
                    13, 1, 15, 16, 7, 12, 4, 10, 15, 13, 16, 12, 4, 9, 18, 2, 
                   7, 4, 5, 12, 3, 8, 4, 1, 15, 1, 15, 10, 16, 18, 7, 3, 15, 
                   10, 16, 10, 18, 15, 1, 16, 1, 1, 11, 2, 9, 4, 17, 12, 15, 
                   16, 17, 17, 4, 15, 3, 6, 1, 8, 4, 9, 16, 12, 3, 6, 1, 14, 
                   5, 17, 18, 5, 18, 5, 14, 2, 10, 5, 13, 15, 4, 1, 18, 10, 
                   14, 15, 2, 1, 6, 4, 10, 1, 12, 2, 1, 6, 13, 13, 18, 10, 14,
                    13, 13, 10, 2, 18, 2, 1, 9, 18, 9, 15, 1, 18, 4, 10, 2, 
                   13, 14, 4, 7, 13, 18, 11, 7, 6, 4, 15, 6, 18, 13, 12, 5, 5,
                    11, 16, 10, 18, 11, 17, 9, 14, 16, 11, 14, 17, 7, 9, 18, 
                   18, 10, 11, 15, 16}], "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJxFUEsOQjEILG0BPYZHcOPepVs9wTPxs9LkaWK8qcdxmGJMAy0DDENXx/v+
XEspjwXcfnpt53l6H5YIdrfn6XKa15urIPrApHjpOA0vhfVSgShuwTHgHX5Y
4JV5YaUja8ACDYbIGfmEqCMSYJqcYdERrJ7MMWN0d76FajR1SXY0IkLEqfH/
GrXOiZbanaglq1Kbkrly9uhw8mpyt2Q0ThR650adx7jrQI3bCHOaP1e5iXN6
pcKfFmddY01nv5BB8m5Z/d/XUuf4GU8NcX8B7d0Nog==
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1: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
AuJtQtv//rsAfwHa7J1u
                  "], "Children" -> CompressedData["
1:eJwdiWV0FgQAAO+hKIgiYIAKSneNGB2jR7PRvcGC2uDbYIzu7u7u7u7ujtlJ
K9it5+TH3Xv3LldkfFh0GiAhXarCIpJCAoGI5PD0qREalxgVExUICo79/6ek
kuY5L/AiabnIJV7iZaYyjXSkRxf4CvN9m6xk4FVeY55ZmGtG5vg6mfjX2f5j
Zv52lm/wJn8507eY4Z9ONxvvMIVpvst7tKEt2clBQxrxPh9QlmBykos/nOrv
5qYoxchDXvKRn4JM8TcL8KuT/cVJ/mwhCjPRIkzwJ8f7o+MsTglKEsQPlqEU
Y/3eMT6zNE8d7XeOshzlqUJVKjDSbx1hRYZbico8cZiPHWo1hliHulQnhEfW
4KG1eGBN7jvYe9bmGwdZj4F+7QBDqU8Dkv3K/n5pkl/Yz8Y0oSl9bUYYn5to
OAl+ZkuaE7AFffzU3rYi3k9szcfG2Y72JNKXDnQkil5+ZCe60tPORBBJDz+0
u13oZoqx3jXGaGKIpRt3jLY7PbhtAj2J8pZx9KKrN+1iPJH2pg83jPC6Aa7Z
2at2sh9JjGEsV+zPKEaTzAAuO5DBDGEQHb1kB4cyjIuO5ILDOe8Iztnes7bz
jG09bRtP2dqTjmMSrRxPS084gYm08LjNnUy4xwzzqM2czgzW09SZzOKITZzN
HFazhrnMYyWNnc8ClrOChTRyCQ1dRAMPu5hD1ncpoS6jnget6wHruN/a7nMV
e63lHmu6lnXstoa7DHEDG9nEZnZ6gi1Udyvb2GE1t7ODwxxhJ7vYblV3U8U9
7GWbld3qPvZTyS1WdLMH2ORBDlHBjZb3KOXc4HHWe4x1BrvWsq7xJKs9xWnO
sMoynqW05yjlSs9zgSBXWNLllvAyV7jKNZZ5i+sU9ybFXOoNlljUxRbxNndY
ZGHvUsgUCrrQAv4HAoa6gg==
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{12, 1, 4, 18, 1, 18, 4, 10, 11, 
                   13, 13, 15, 2, 17, 14, 12, 6, 18, 10, 11, 5, 5, 13, 2, 13, 
                   1, 2, 13, 2, 4, 18, 10, 4, 18, 18, 10, 10, 16, 14, 17, 16, 
                   11, 7, 1, 18, 7, 5, 18, 4, 6, 4, 18, 18, 9, 7, 10, 18, 3, 
                   13, 11, 5, 18, 10, 18, 9, 16, 13, 4, 4, 1, 9, 10, 4, 13, 
                   15, 9, 4, 2, 1, 13, 11, 18, 4, 14, 6, 3, 13, 11, 1, 2, 18, 
                   11, 13, 7, 15, 15, 7, 17, 3, 15, 18, 16, 1, 18, 13, 1, 15, 
                   2, 13, 1, 15, 17, 16, 7, 4, 1, 3, 12, 7, 3, 13, 10, 2, 18, 
                   18, 15, 6, 7, 10, 14, 13, 2, 10, 13, 14, 15, 7, 15, 1, 7, 
                   5, 3, 10, 2, 16, 18, 1, 16, 1, 11, 9, 12, 18, 9, 18, 2, 3, 
                   9, 17, 2, 12, 6, 11, 12, 13, 10, 12, 10, 17, 15, 3, 10, 18,
                    7, 16, 1, 12, 5, 7, 1, 9, 1, 15, 4, 13, 9, 15, 9, 1, 7, 
                   18, 18, 7, 10, 6, 13, 12, 7, 7, 1, 13, 11, 7, 13, 4, 13, 8,
                    4, 3, 2, 5, 11, 15, 17, 3, 3, 18}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJw9UEsOQjEIBPpBj+ER3Lh36fZ5gmfiZ6XJ08R4Wq8iDNSQttAO0xk2p8d0
ESJ6rmyb5vd+WebPcW3F4f46X8/Ldndjq762GlViEgumbrnYzlQsmkWxyhEV
GQPluZDiptgp6FJUjJ4KlLM12wW5AO9MCqz3NbAEY8V/3i/5xlCkUFRRB78C
LXjz//0m9IUKrzl9hKeSLAX6HdnhUFOvwu1wGWob1uAP3y0Z4p/gKEAOL6Gw
Aqvpt2RHA8eYYc8p1GQS9An09+TXPzImzoiWU3XkD6kcDbI=
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwNUn08Ewgfp+hTWtlDac5zWqrLyyWqp5ae67dcZbn2tFw889p6vSWuQ2Vd
xXriaadLu6RWlN2pnoUy91A+XvrNWwndM4aNiSGzDXszrEM9/vj++31fdeR0
yHFbGxubvjkYu6nbCub3IvNJDDe4XgsMztuRVq0ZPFcmWr9PbwJhrsetzDtG
XMjeuMo/ZxY5UjWp+rdB5BXVXCMHTaBflDtvX0gxkAoudjqMTyHburlAkvkR
xT891s1kzyKNQFUVlmiQGdG5JOyKGT3zgyd7dw+jzYuAVftyB5Ftso8kqAaR
JZ0njN3fj9w3bXZLJQNgPF61N2aXBYkOD3kla0xY3mmSz1dOYrnPrYYRvgml
J3umdySqUPN5QvfXO4ZRU9BOKPDtR3b6/NOHD5jQuG17frq9GVmtjNNm31Ek
tUx9dfWhFdmZPmdCggxIMZ+J2vx2DHnNxXYuXUrwC0p5t6dsEimP3bBMo0Di
9rgQt41WFBZJj1gO9CPl6H1qQ6gFFrqlxJJlcmz0PrFh3d5x5K9Nek6nq1EY
d972jaAXGUaxZyVJjwIXwf8SLpqQW08aaLk052PljPNsvxo5MXV7L7Nl6Plz
TV2Q4wAK9oU5X99pQGEQrffLgWEUZThsXbBGj8ZhQ6ibTT1wAl4XfjrahYqr
lfl2IVWgSHF/EfZah5RKt4OpR7qR2/jC/RhDjQx1+MdIWgXQvg28PjusR812
VwfpVh0UeS2vz/rRnlq+7fXQjqK5frd/R93UMYVEjoeV7jMFZO1I/nGKCUmL
d5yQUNqBI5It0TI1qCDVWK7ETwBlGdGf0CsFsks90zl/DInBhJWpF8woPJvn
7PSfMiCm5/hnb5jrfXHS0KJCKSqsC566L7uP7Ia8Y+ufmIGxUMFIefUeeTlh
ZLfVQ8gOnFnzSd0Poic9QV/IdXO6K9ebkj4g6ZLWujTiLgozdPKz+gnQiO89
pS6c22kmb7m+sxxZD8a9/9ltQgF92lIdaQKFl4dB6jiBtGnGmj3hpag6qFaU
KIxImarkL3QdRpapW3ezahytLecIviQziqt7HuTGmZBIy9qb4DYDfKUkvP+2
BoVjWwfSOyzYWBea2OZRA/xuhSjffgL/TmaMx66aR/VMzvpUyhhDVRdPWT7a
gEzz9L5zyVrwK/Lf8uWil0ix/Kp42dABpDThQF5SF1rZz1ryp6qQdzGPHn+4
GUm27m73XLUoWEt6EenUicJJrc9xbxN6GrwWn7mhR+Gy/QnsDBMQqT+viS4d
Bmt22Za3/6gDUeFupa2PAZmul826X95h+b8ejlsT65B2t3Y2PFqBGvcuutxF
C8LRQ2edrwyhuGymWHdLC5QPGu5EoA5Fu3vi7J17kIwBj0o81CAIiSTF/3UE
+edo+hXqEWSlrbbkf5SiIGT1pjfz+4Fze1335t86kDSSe+zxr0YUm6MTr6sM
aCx/rwrxbgXBx5KdTK+5HMseBq9/NsczfSgvUz6IZMbmaAa3B4WEUzcarw4h
rfa9vDBDhcK6uEC7my+QVTvqWHptFDi7yp7esFUBK3Bp2ncUBP7VR+suV40B
KeqPCsadSWjULPFmPpGCxH25oUltAv6KxKUMbAbNkPFCNs8MFHbmUHVvDVKp
S0hVsyNgM/ncqcRTDQpy28SJ5c0o3VoZr/CrQ2tMpLI58hXS7CqLBkSFwElO
uXcjqxWkaRnq3lMtyPAjPD+ceBnEdP/U8CYZiMwrGyvH5n4bkOpaZTsAxKj4
ZV8FyZHadiLiQoEKuTNOZYTraqDKQ6NGJu8jRxYWtyqlDlV9Bwnf/jIApKS2
jXccdUD6RnCyar0WmJN1d3tVMmR0J+8bIMiA9DQmWsBrApuC9hHvqBzka5NC
ILANJL9Lv8i2RyQmx37zcLYPWILPKhY3D4JAFMaQ98vBxtUwFhTZDeyEUabf
oyEUNudcKQ6WgPSk+S+daRKkuo91xLTqwSY0NOPBv+uQPyU7UBFlBm7oW/IJ
qwGYP/2XnVnSDtKRRR2bInTwg7Up4sOFdiC6O3p1bLChWv/824+9kjGkfPas
4OKCerCq5+05Nj0G5NVJAWalHnn6iLz99D/hB/KOMIXvexAr76YlOb9CqbUr
6LyyFgTf++ac7/sdeMSNYXdPd6IfN+eaw/U/0FN4dEuiYRDEghq/3D0FwN0V
1p/gYwRaKL390+p+YLn0fb6othMkt52UyZNmoMavfxndVA7Gx53vUhPbQLxp
xZvbsRZgrX0QzAmeAcWBmOf0ajNIWr1CPLL1YNxmyVbusoCK4xC5y3cWRM+0
WVsqxkFyKOtmOXcUNKWd5y7lzqNKR/drZF9PgVXmufOJ0ySIGx8E7CzVAeuU
rNjIm4D/A8j40QM=
                  "], "Children" -> CompressedData["
1:eJwdiWVUFgYAAO85t+k6XBfYrRjYgY0t2A1KWKAfKGJ3d3d3d3d3d7FO3XTd
J/rj7r17FxydGBGbAUjKlK6IqJSwQCAqNTJzeoQnJMfExQRCQuOf/LR0Mjzl
GTLyLA2I4DmeR8PJRGYqUJEXeJGXeYX/fYn/HOO/jvZVXuMfR/k6bxBMVt4k
Cx8y0rcY4d++y9u8w18O90+H+R5DfZ8h/uEH/O5gP+JjfvMTfjWIXxzkzw40
GwPMQU6y099H9vOhfc1FH3OTh5/MSyEKk4/8FKAgP9rbB/byvqmGUIRylKco
xfjBMnxvcULp6XemWIKSfGsPS9Hd0iT7jUl+bVm+MuCXdvMLu/q5YVQh0c+s
RGUS/NQuVqUaaVbnnp29aw3u2MmadLQWtalDB+tRn7rEe9s4bxnrTWOMpCGn
OE0j2tuYJtywnU1pRhTRXLc5LWnFNVtw1Wiv2JrLtuGSUbalrRdtYzvac5gj
XDCGOFp73ljO2cp4OtCRTmxlG53pwlmHkUBLE+nKGVt42uaeshsBkkimO4Np
5kl7cMJBpNCTVHrRl6Yet4m9aewx+3DURvajoUfsz2EHMJBIDxnhQRt4wCHs
dyj7rO9wRjCSeo5iNHut6x7HMIGJjGUc46njbmu7y1pOoqZTmMpOJ7PDcKcx
nY3UcAYzWcFKZjGbJSxlDnPZbnW3Wc15zGcBC9lqVbe4iM0uZpNV3Ghll7Gc
DVZyvWGus6KrWM1aN7CGCq6xvGsp5zrKutr1rLKMKy3tJkq5mZKucAvLLeF2
drCL3Swz1J0Ud6nFXOIe9rKPxRZ1kftZaBEPEOICD3KIws63kPM8ylxPcozj
nKCgcyzgbPM7y3zO9AznOM8MzzLdvF4gj1e5xjQvMtVLXCa3V8jlFHN6nRze
5BaTvcEkszvR20zwLnfI5nizeo9gx5nGWIN8DIfoyHs=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{16, 10, 1, 18, 6, 1, 1, 14, 10, 
                   1, 9, 4, 2, 18, 2, 18, 1, 17, 4, 1, 2, 13, 3, 6, 11, 12, 2,
                    13, 17, 15, 13, 14, 13, 6, 6, 10, 17, 11, 11, 9, 15, 4, 5,
                    15, 15, 7, 12, 15, 10, 15, 14, 13, 10, 18, 5, 18, 10, 4, 
                   7, 15, 4, 18, 16, 1, 5, 16, 1, 4, 15, 7, 7, 18, 13, 7, 15, 
                   4, 12, 13, 13, 18, 3, 6, 7, 10, 15, 12, 1, 13, 4, 13, 7, 
                   10, 14, 12, 17, 11, 13, 10, 7, 6, 15, 2, 1, 16, 15, 15, 4, 
                   3, 12, 18, 15, 15, 3, 2, 17, 1, 15, 10, 1, 11, 13, 1, 17, 
                   1, 10, 7, 3, 11, 3, 13, 16, 6, 18, 7, 14, 1, 5, 11, 4, 1, 
                   11, 9, 1, 1, 16, 7, 1, 11, 13, 16, 18, 14, 16, 17, 18, 2, 
                   7, 9, 7, 1, 2, 9, 10, 1, 18, 15, 17, 4, 16, 9, 7, 9, 10, 
                   10, 10, 3, 1, 10, 9, 18, 4, 13, 18, 13, 6, 7, 7, 10, 14, 9,
                    4, 17, 10, 11, 14, 18, 18, 4, 10, 16, 14, 2, 17, 18, 13, 
                   13, 5, 13, 18, 16, 12, 1, 16, 15, 15, 7, 6, 17, 16, 15, 11,
                    10, 15, 3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJxNUEEOAjEILNCCPsMnePHu0ev6gjVZ9aTJamL8q4+RDrgxDaWUYYDZnO7D
mUspj5Vfw/jaz/P4Pq49ONye02Wat7srefRxa6W6iVsr5t487jcVLpoZ9hO+
3z1DeAWux/0tqFc/4j8V/wJvYCfPMIyAMfRSoDgjyqqW7IFuS//gopxZEMny
Uv/n7EjJrclZUWPoTbmH/lnU/XgMaM6dYlYDpsErtKnAxqS8bCLQy3L+mnpy
8gk0oiVH4ApFKrKculawtNQrdlN06X2/O94NhA==
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1: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
                  "], "Children" -> CompressedData["
1:eJwdiWV0FgQAAO8hKliogIkC0s2I0TF6NBvdGyyoDb4Nxuju7u7u7u7uZraA
gh1gH4Mfd+/du+yR8WHRaYCEdKkKi0gKCQQiksPTp0ZoXGJUTFQgKDj22U9J
Jc1zXiAtL9KM5rzEy9RmlulITxY+4hVe5S3eRmf6Gq/zBjP83+lmYJpvMtX/
nGJGMvEu75GZyb7DJP91ov84wff5gL8d71+O808/5Ilj/ZisFKM42chODnLy
2DH+4Sf87mh/Mxe5ycOvjvIX85KP/PzsSH9yhAUY7o8WpBCF+cEifG9RHjnM
IIb60CF+52BLMMiSBFOK0pSjPN860AeW4b5luecAv7G/FajI11biK2tSmX6G
0Ncq9LEq1ahOsl/a2xok+YW9rEVPPzeUz0y0DnX51HrUpwEpJtiQRtw1nDuG
cduAt+xhY7rbhHibEudNu9mClixlGa1ozSS62oYutqUdN+xseyLoSS8i6UAC
nexIFF3oSjQxXDfWWDpxzRivGm1norxiR7sRR3d6cNl4LtnBi0YaIMILtve8
7TxnImdtaxK9GcBAkunDGdt42tb2pZX9aGl/WnjK5g6imcMZwWCGcNKmDqWJ
w2jsCcM9bpgjGcVoGjmGhh6zgWOp71HHMZ4JHLGeh53IIes6mSlMZRqLWMxB
pzOL2cxgJges435rO4dQ5zGfudRynzVdQA33upA9Vne31dxlVZdQxZ2GuJwV
nOEsK1nFXvaxmsquYS07rOQ6KrqeDWy3ghvZxDa2s5nybqWc29zCVsu6xTLu
YCe72M1mS7vJUu4h2I2WdIMl3M8BDnGYgxR3vcVcZ5BHOMpaT7HGY6z2JMcp
6ipPsNIirrCwpynkcgt6jgIuM4XzXGCpF7lMfpd4icXm8wpXucZ1FnmTheZ1
gTeYbx5vkdvb3GGeuZzrXeaY09nm8CncusJ+
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{13, 14, 1, 5, 10, 18, 8, 18, 18,
                    6, 1, 3, 14, 18, 12, 6, 11, 9, 1, 13, 16, 18, 2, 13, 11, 
                   11, 6, 4, 4, 14, 1, 13, 10, 16, 16, 16, 16, 11, 11, 18, 16,
                    9, 10, 14, 10, 15, 4, 1, 14, 1, 7, 1, 4, 7, 10, 18, 3, 13,
                    18, 10, 2, 9, 14, 11, 13, 10, 14, 18, 9, 14, 10, 13, 6, 4,
                    9, 14, 12, 4, 5, 1, 4, 1, 16, 2, 18, 10, 18, 18, 7, 10, 8,
                    9, 10, 7, 4, 2, 11, 3, 15, 6, 10, 18, 4, 1, 18, 13, 13, 
                   13, 1, 10, 5, 5, 15, 9, 1, 1, 15, 13, 16, 7, 18, 14, 11, 1,
                    6, 10, 14, 1, 7, 6, 7, 11, 13, 4, 3, 13, 13, 14, 13, 18, 
                   14, 12, 13, 17, 1, 10, 9, 13, 2, 7, 18, 10, 7, 18, 16, 18, 
                   4, 7, 1, 10, 7, 2, 16, 16, 1, 10, 18, 10, 4, 16, 18, 13, 9,
                    10, 1, 15, 3, 18, 7, 1, 16, 13, 10, 18, 18, 18, 14, 17, 
                   11, 13, 12, 4, 15, 16, 7, 15, 7, 16, 18, 1, 18, 18, 4, 13, 
                   1, 14, 6, 7, 10, 7, 15, 4, 9, 11, 15, 3, 17, 3, 7, 17, 
                   15}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJxFUUEOwkAIXJZd0Gf4BC/ePXqtL6hJ1ZMm1cT4Xj8iDFhDWKDAMNDN6T6c
aynlsbJnGF/7eR7fx7UFh9tzukzzdncliz6mWlrpplRqEfhiPtvbIW4rPDbx
TMTNpGZUkVOzajHB66hhWAK+I/h3RY9md0tkMXGkBhaCOp/WkG0ZUSJ24P0Q
GH2+ASVL7xZTRk5TJREb5v1r/ZXckdARPBmocZWoYMyoyw4xgfMavkPcoaGn
g3fMFWDpwl3APvYNVhUTJK+lyx41/wwtd1HkJbfyzi8Fbw2b
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwNk2s81IkexkcqTkpqU6xtjcvWpFqKaj5d9jemiDI4op1uu3JpyV3UpE6N
rGilBltNUVSTy24nVhezrfUbqVi3po4ZQ8lcwgxl/jNmxgh15sXz7nnxfJ7n
+zhFJIVEm5FIJIVJzJSO3Oa1aiwTfhdY9OMAcF4W+1ja9yBxLTpqjqgWKumi
sM3JYrQ83pmV0ShDal5A/s/xerSLrAhouqRB41LnXn2GAmn/y86tPzWIfhWZ
nd9MGVAS6xvx+JoRSYagZYe5WiStXx8+Z8c41ijr2yKeqDH37uw4F/o4lkHY
oO8ZLYbLHGNmysTAvCORSQ//FyWX3PeeF5hy/cs1+/pmHZY5hdyQJnaA8lub
hu5BETKtbmq3p40hOfHFxaHZBiQ57BBl0QlkUtzmWnX0ImU4mn/C+y3a7FQZ
f1vXBVLrHduatw5A8Fna0eyNeqSVbMhbrowEtm3f44NhEgjW3djk9KUWk59u
u/XETIkefm+VGC9DQfabC65/EFhZcr3WTK5D4TfN8c9WNyFrebLBYVqDgmeJ
ZxKsEAnhua8LjvUDRS081HjAgFTF4UufU9ogymq1+aUV5jQ2P3eXoW4CaYVv
gqpOqiHcuHuVe50ak2tvp05yJpDKyNG/XvYepdte2sPccYw5/YbQLpgGyd3v
o+xeTGENN6bdxl+L0vcXf50zqEdSaVZF38JRDP5h09R4qw7Z9vahHP0wkG0f
zywc15l6YVjQd05isHaCWe7bj8JDp3gDrTJUdg+n+59XoNHv058tvRpkVYfs
uZo4hIRUFVgycxSZ4oftNkYVSjJv2K5sLUVhV4dXh4sGhc55v6YtKYKY+sv3
PzaOIjUsiDftOYKWlurRyhw1JPN2GXiVH1C6SLt0bq8S+UtyOy8UqNDPme8k
or5Go8fdoBOqEfR7nGbIntAg34frbnFdheRjZ9w120fQI3Wx80cXOUoz2XRr
k68lv9vWhUogZaz27cCtbgwPrH91pUCOrLijy85VGNDo3ZZUUzuMgv5RRW+c
EtmpjjMoV3vQ5gi/vGa/CjkMLTedO4JlHQ/m37MlMMZt3txPdwaRiDXEXrs8
iMLsdN76CAkoS3keXgvkKMzlRXx+pQOy0yfHG9V9QAktObRkUaMpT7Rx2Z73
YHycP+2YI0NmQ1X1l/lDYONJbJj4eRQE7Yo5Dl8TILFr1GUl6IHDdF32Q0EP
1nhatw/kvMXw46t9KviDmHt/7U+EuQxtMq6IWVMKJPmyd2+ODgKp0+YA/rEx
CDaEy8NiB4F9X6Cy/bccWmh5B4r9P0D4g4Lag2oZEOOFvnUfX5h+RVnQmU4A
tzBtctNOLVhKf7uV9pWJIzTbqymSo+S85nZKzTByGZO6v/dpINkjYfOjkTqU
5L0UfXVKiTTmvH1WYtPvqvKOfjioReFZz+8a27uRVcUp+RStA0HS1NRRnQGM
PFk4W9AJ/MGlQR8vvIMWwSrvmNkKUFqXDy06KAV2HeFe2vMBc13pT++l3wSJ
88qnW7kDyC6d0XlmWouVvQ0bA/e/Rr/+Go8rOS+R+Ckno2hNH9o9nJyWmzWh
9M/9ryZvapD4dlGc0LoVad6iEaJehVTPL4rOx8ogWbWKVGfbiUL3B08qb4nR
TrKj/WhxCwj7x+oKF4uAsuWfY6PzZJh8a2h0X2QDcJodLzFqmpHDLpaC7XP0
U9PXpmaY+MuYEcAYeYpkrz8+C7fqgNayZeM2hRiFKuPxJGUdBFel0Rnl78Aj
7+Fyr93xyOWenpHOVYBAu3p4zyMBMoesIr/wfYI1CWscQ0PEUNb7VvZ77Tuw
PBC73bXBCBKyj3lVvBap/ySGPLTtQ2oR10IyTQCrlw2yDRKMscs7Ya4pAMFY
/t4jPDnEdJ1y2+U8DGx5JGls9XNU+vy13LpZDOTghQzW7F6grtkQIRjRAYXm
5lDi1we5gfPoKwdaIJflzq+zr0b+xtNVjj+a9o+KEw2RPgCVvvIOoXwO3MYF
qfUuTRjskOp7JO4N+JXPCuvwaUbacfMAzYFxYJ7b4hDv3gbK7qxXZevkSHwU
r7izVoA2honFoRclyLxoEdOXSSCJMqyq3ioElq9D6NL5ZWA8S9Zy4vqwkjGj
1y1RD+HqEPLAQgmw9k2s6EzYi4KeR5Jf0MTHgUbZC6YOqJtWVe/XPwOmxf3j
n3dqQNn04NRAsxFovte8xraMALF93wPvhcPAWndWRL/ZADG7/76RItJDi/fv
/qWh3cCfy7jPKesCDuNyZJS4C1vkpYvv6cXIsj03MylYC5XFPfmZxjYs+w/5
lV2pDMIl39tkzTIC++GL9sNrNEAp5q1Lmq+Bk/quEoeVJJp0YgcMG8dBWuqW
fluhgPqEhF9cl8yiEdO8I01RYyDR+WSf9FOD8pP91ZSSViTM/pr2Z3Lg/4G4
8LE=
                  "], "Children" -> CompressedData["
1:eJwdiWVUFgYAAO85t+k6XFvYrRjYgY0t2A1KWKAfKGJ3d3d3d3d3dyvr7t5O
th937927oKiE8Jh0QGKGNIVHJocGApEpERnTIiw+KTo2OhAcEvffT00j3f88
R3qepxCFeYEXyU4QGcjI+3zAS7zMm7zFK0zydSaqr/IaE/zX8b7BOP9xrG+T
iXd5j78d4zuM9i9H+acj/cMR/u5wP+QjfnOYmclCVob6q0PMxmB/cZA5GGhO
cvGzA8xNHn6yID/a37zkIz/9LEBffzDF7+3jdyZbhKIkkkQxgokljm/t7TcW
pwQlKUUIdenl15amLOX4yjJ8aZLlqUAVEv3CgJ9bkc+sRGV6+qk9/MRQqlKN
6iRYk1rUIN6P7W5tuplqGE/tah26+MTO1qM+DWhIS1rx2EY8shmNCSeCOB8a
axNibEq0D+xkczp63xbcM8rWtOGukd6xLbdtzy3bcdMOdiCSG7Y3io50op0x
tDWaNl63tddsZWe60IOeXLWlXenGFbuTQAsvG88lm3vRZl4wwHmbes4m9qI3
T4kwmT5sYzsp9OWs4fajP2dczQAGMpRhnHYQpxzMSRt7wiEct5HDGcFKVjGS
URyzoaMZwwIWctSxHLGB4xjPYScwkUkcsr6TmcI0pnPQek6lrges4wzCnMs8
9juTWcxmDrXdZy33WtM91nA+1d1tNXe5iGVUdaeLWcJSdhjqdqu4nBVss7Jb
reQWK7rZCq5hLZtcxyY2s57ybnQDG9zIesu5zrKudQtbKeMaS7uDEPdzgJ3s
Yjel3EtJV7uHVZZwpftYYXEPcogTnGS5wR7mCMss5lGOsdTjLLGoiy3iKU7z
mMIuspBnOMs5CnqBiyz0PAss4CUuc4e7XOEq883vNfI5z5tcJ69zvcEc83iL
28w2t7PM5T1yep8HzDSHD3nEDIOcbnanmc0nZHWqWZxiKpPN7DNL/NB3
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{15, 1, 1, 13, 15, 10, 15, 16, 
                   17, 11, 9, 16, 7, 15, 16, 17, 7, 18, 1, 4, 10, 13, 1, 11, 
                   2, 14, 13, 13, 9, 6, 2, 15, 1, 4, 8, 4, 18, 3, 2, 9, 18, 
                   10, 16, 13, 14, 13, 11, 5, 18, 6, 2, 16, 9, 18, 3, 7, 18, 
                   15, 9, 15, 4, 10, 1, 12, 18, 9, 2, 10, 10, 14, 16, 4, 14, 
                   10, 18, 5, 7, 10, 3, 10, 7, 7, 15, 3, 14, 5, 18, 2, 4, 3, 
                   4, 13, 12, 13, 18, 1, 2, 11, 14, 7, 4, 6, 18, 1, 7, 15, 7, 
                   3, 5, 18, 15, 9, 5, 14, 7, 10, 5, 1, 6, 14, 5, 1, 5, 12, 9,
                    14, 18, 11, 1, 16, 17, 14, 1, 1, 2, 17, 9, 12, 17, 13, 4, 
                   16, 11, 6, 13, 13, 1, 13, 14, 17, 2, 7, 1, 10, 15, 2, 1, 
                   10, 13, 10, 11, 18, 1, 2, 2, 13, 16, 18, 13, 11, 1, 11, 15,
                    12, 5, 1, 12, 16, 18, 12, 3, 7, 16, 13, 18, 18, 2, 13, 3, 
                   9, 10, 18, 10, 18, 7, 1, 17, 15, 12, 10, 18, 5, 10, 15, 9, 
                   4, 13, 15, 9, 2, 16, 7, 16, 1, 4, 12, 11, 7, 13, 4, 2, 10, 
                   6, 3, 9, 10, 13, 3}], "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJxNUEsOAjEILdAWPYZHcOPepdvxBGPiZ6XJaGK8q4cRHoyaBhp48HiwOtyG
E5dS7gtzw/jcTtP42i8t2F0fx/NxWm8uZNHbrJVqT0o3z4XMd/NixoY1izwb
ObVfLKeIBB3+M+rInoKJwdrQx6hRIF5fgTDmuRG4Yiqj22trzvZOr1bwMBQQ
UAUmUFrR26GLoIcS66hXIK5KckPOyg6mWUdFLtTFPh0aAu9f/RVc/HchzX0p
L8NgrrnZrC1uECrjqpIXk+QRzP3pnLU2XKChOzR8ACyiDWk=
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwV0mtc0ocex3FoWeq6uNIC3YpcpZ6VUeokrX5YamQr6WJq6Q5qJl720mpN
umhYs3TlstZFmy20Oodyecm2OWv98EYWVhwtBZXEVPyHBH9ABFvWPA++T74P
36/Pgvj0rYlUCoXSMzF+tx0zvawWKQ3vL419MwhVZgfyXmI3ko6Xjnb8QaDw
87rBDZk65E4R+rB/NSHt5odrgxekqB7QB2yY/AGFLoeoVKEaabeOdDiarai+
4H05+BcLMg6cqv8x3YYsnnZFqWIEyfry3SUdTZgx+/06g3EEhb7vv/GfPYwc
zHL2+8qIYsnANj/vpxjVdGKJh2QEBSYd5XzaG6Al33u0Z7cehc8T/Br/a8Y8
Xkbtcl4ZRr2Vbx14RGJRw9zCYPth5BaWOoSLxpCW/EKw3mcUWffJW/ZGEqt8
Bzckz9SibWpTulKsR3nNl+YlEz+hbD78+CM9quc0MxMrDOiZtfjB8IgJeZNe
DSfVmFD8Nv3OVUMn5n0mb++Pl6P90YK21pRhFFdXet/sNSJtmd9F7ZgWCz0D
jweVmNEWsDu4bakSJHVeljUVfSjgMH84uNGE3MD9bbISFWaY9+lKPFRI/rYF
6U9sKFT1FC94NoZ5VyzKYhcTCuuo3FD6MNq7nk06e06M6jGHkB//p0MKP0X0
brwFSCUnX0o0AuXuGv7mBj2K51Mz4xrGMOpUEl1aaURB3Zu405PNKP+Z6rEg
twuZx+iy2C16jDqyeXXcjAnfc9fXXZ51HhTUP3frGjVI+e7OnNb+XiDWem1Y
VPoamS7z2hXTmjCvmOb2/cY0EJVF/ulglwN8x5REbo4GuRpvmXldL9qYkck7
knqwdlktLZVoRKZe8fQQ14DMKre9JaFDwJcElWQfeY22ooaYc7Qe9Cz0uXB4
Xx/yTkuNv9FJzHuX3eleIEfGqvWuB2JqkLK02+l6gxWY7Tn0oGwNFmrdEgnW
CAhELik8kw6IpuIVfr83o9qruk6zwALqix4OsSFGoO0y6Faz64E5S6/0MQ8g
x8HNZ9Xll8A7drDMm6Gd6FcTflffMNFtxsJpe/vRk7Py5r/Ts6HKKoj8uuU1
CKIG0wtkBPBdnZ0DUxuRE92YOkeuBkn8NTvT9FFgfHHff8PSlyCK35RC7LIC
a9PwS1ZqM4p3zVM9oRgwQ2O9XeT8GDLWOO2wW6wCG7dks++qPsg7QtkWMduC
9tM/td/5+19IYe7/e0XaADC97nvp6uXAn+GrKjthAlpE0eH8mCGgvbJvV9La
gDjn/vFmTwsIxiaVBxQ8QnKzfuEvqyxAqZx8PIA94Vgd0ax+o0Am1yOasaUC
RVbr9KHcDhCtbnH2nWNAm3zP4na+CsWqPy7MSqtBfmY2RUIn0DYe1DqJ0Y95
c3ODzj97g4znUsHioBvIXHtyvr62G7m/3v34TKQBxKUffWvXMQRRZ6byVTkk
ivedOR9XrEHbpwuu/OtBJUT5ZxbqJtwLAxP2O88yIitp2/GzvV3AuKvtFXQ2
QQb1k2uPK0aBFtp3RyZuh1qnuFd171TguWgse8R3wn+Hzul92CiQ5c+JMscX
KBjKjMj1rUayLGBHbrQaWarvcn9aMopcurHkQ6sCbQVScUilBNhuL0d+6OiA
luZnKTbPGiRndlRdb1dg1VVW2sPQLqi9HN4w42k9qt/BbdFYPfK4m6KnJLai
wj/Y2BosA07Yw3xmRD/QErpd3NseA5vyV5ZBUgSErHQybNcCp/XJjT1+WhBR
+TlbD46DhB7zKrFcCWT1f/rm+mmRo5i3N7HwHuYppPXU64+hRf9Vt2YvAYR/
vF9zlhrE8u9Le12bIcpjZbzvawOKcpccDO0kwGmjX/TefZeBG1kerVK3Q1Fw
St9J31PotPZb203PNixquX31p64aZJlDSie5SJEr1B8406ACTm9K/d+3FMBv
VB5TrtACK9w9XR82BJKWo8TFGBOwAxx3/BymmvBf3mtOiENxyrTt6+e1A3mF
Z3W7PYS8Vu9MeZMaeE+GL4XIlCDc2hTOOaQDRuCJndK+TqhtvV5+SzLRqWNW
k3plHwpv0JZbB0kkGw+tS+lVgGDc8OzYg1FgCbpep27XQG12Wv7DJSPgxJ2d
U5PRCezQRSFfeLUAkSATx94jQF2azCxYRYIkMG2mrOAD8BSRTsftbBBV41Nq
db+B4rszt+wqsYBEGNuX+fQFCCtOHLBMJYHjLtn//+5oWddkZqkFWjQ7n9Cr
p7BFjLP2vaQVxIu+zo8k3gLzs7AvXWLHQSjz2OYdK0VWx3AF9xMLsE9PYyzr
IUCQ/3niQPgQbD95c5frWiqbvDL/kHKGFooaF+bXn7DCP+WmthI=
                  "], "Children" -> CompressedData["
1:eJwdiWV0FgQAAO8hKliogIkC0s2I0TF6NBvdGyyoDb4Nxuju7u7u7u7uZraA
gh1gH4Mfd+/du+yR8WHRaYCEdKkKi0gKCQQiksPTp0ZoXGJUTFQgKDj22U9J
Jc1zXiAtL9KDAC/xMhFEko70FKAgr/Aqb5MRnehrvM4bZOB/3+Q/J/iv4/3H
t/jbcWYiM3+Zg3d4lz/9hPd4nyeO9QM+JAsf8dgx/uFoP2aUvzvSrGTjN7Pz
qyP8xeH+7DB/Mie5GGpu8pCXIf5ofvIx2B8c5PcOtBCFqU0dilCUqlQjiGI8
sjwPHWBxSlCSYL6zHKUozbf2twz9fGBfy9LH+yZ7z95WoCLfmGQlKvO1vQyh
p19ZhS9NtDo1+MIEa1KLUAJ+bg8/s7ufGm+KcdalHvVpQEMacddu3rGrYYTT
mC7etrO37GQTYr1pU5oRY3OibUFLbtiKtrTjuq1pQ5TX7OhV23PFDl420kt2
oCNRXDTCaGLoRhyxdOKC7e1MO7vQ1vO28ZxdOWtr42nlGVvanRaetrkJJDKe
CfSkF6MZQxK9SaYPp2zmSZt6wr4MZBD9aGJ/GjuAcI8b5mCGMIpGDqWhxxzB
UYdxxOEctoEjqe8h63nQuo6ljges7ThC3W8tJzKJ05xhnzWdzBT2OpU9LmK3
05jODGYyi10uZKezmcd85lDDuVR3h9VcQFW3W8VthrjVyi5mCUup5F4quozl
rGAlW9zGKlazhrVstoKbLO9G17GVcq5nAxvZxAa3sN7NrLOsay3jGku72lJu
Zwc7CXYPJV3lLla6mxWWcLnF3cd+DnCQQxxmmcVcapBLPMJii3qUYxyniIs8
yUJPsMDCzvcU8yzkWc5xmSuc5wJzvcQcLzLbgs6ygDPN71WucZ18zjCv083j
DXI7zZvc4jZTzeUU73CXnE42hUnm8Cn4KcJ+
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 10, 8, 14, 13, 2, 1, 15, 18, 
                   13, 9, 7, 7, 12, 18, 18, 9, 17, 10, 10, 16, 1, 16, 6, 11, 
                   2, 13, 2, 3, 1, 17, 13, 10, 14, 16, 6, 13, 6, 18, 13, 6, 1,
                    10, 16, 13, 1, 14, 17, 16, 16, 3, 16, 1, 2, 17, 7, 18, 14,
                    15, 7, 13, 1, 15, 18, 4, 4, 4, 16, 1, 7, 12, 18, 13, 3, 
                   14, 6, 7, 18, 1, 5, 15, 3, 10, 18, 18, 10, 18, 5, 12, 18, 
                   11, 10, 15, 1, 18, 7, 4, 4, 7, 15, 13, 10, 9, 17, 3, 4, 18,
                    16, 7, 11, 18, 3, 15, 13, 13, 9, 1, 1, 4, 18, 1, 12, 13, 
                   5, 16, 5, 14, 1, 10, 13, 13, 3, 4, 7, 18, 7, 9, 2, 3, 6, 
                   17, 1, 13, 10, 1, 7, 14, 18, 16, 13, 11, 13, 14, 13, 6, 16,
                    11, 13, 11, 16, 18, 9, 11, 2, 11, 11, 1, 1, 15, 7, 7, 4, 
                   15, 2, 14, 14, 1, 1, 2, 6, 7, 15, 12, 3, 18, 9, 7, 12, 10, 
                   7, 7, 16, 18, 5, 16, 9, 4, 17, 4, 10, 12, 11, 10, 18, 13, 
                   18, 15, 10, 18, 4, 4, 2, 15, 3, 9, 6, 18, 15, 15, 5, 17}], 
                 "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJw9UEkOwjAMjB3HgWfwBC7cOXItLygSywmkgoT4K49hOnaR5bRjJzP2bE6P
4aKllOcKxzC+99M0fo5rgMP9db6ep+3uJkBfpBUvjVHx34ogtPQ8K6IjHD1B
1xAzDqTsOusO1Ig8qxXYyRKsnQrGG8q+IQXpPOdORyfuVL6y5LBkNbJ1Kgdz
TKmcKL6VapIvWirPvYU7tgu+RoXYU8gvySjMZcKa2kqnwjGjL5Ve9NQ1qih3
6uldS+f872C4rfRimd9zqqjG7pY4Jg3/Kuf5AW/WDag=
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1: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
                  "], "Children" -> CompressedData["
1:eJwdk1V0FgQARu9BRRAFA8RCQLoZMTpGj2aje4MFtcG/wRjd3d3d3d3d3aBi
gxJ2gV4nD/c7557v+WaPjA+LTgUkpEmZsIikkEAgIjk8bYqExiVGxUQFgoJj
///vpZDqBS/xMq+wkU1oatLxOq+ShrSM9F9f4x9H+NzhvkF6GtKIDAyzAAV5
k7d4m3d45lAzkom/zc+7ZCYHOXmP98lGdj7gQ7IyxL/8iD/9mD/Mwu8O9jcH
+asD/cVP+NkB/mR/fzQXeehnbvr61D4+MS/5SPaxvX1kkoUoTEmCKUJRfrAY
3xvEQ3v5wJ4WpwTfmei3JliK0tQhYBnK8o2hfG05vrIyX1qeCvTwCyty30p8
bndDqMJnVuVTa1KN6twz3rvW4I5x3rYWt+xmbbp60y7esC7Xrcc163PVBlyx
s2GE04WuNKYJTWnGZTt5yVibE2MsnWhBSy7aigtG25o2nLctMUR5zna0J4JI
OnrWKM7YgY508LSRnjKak0Z4wvZ2pp3Hbesx29iNOOYyj3ham0Aru9PSo/bg
iAEO28JEetKLJCbT3EM2szfJ9KEvgxlCP5o6gIEctD8HbOJ+GzuIcPcZ5l6H
Mozh7LGRux3BKBq6y5HstIGjqe8Y6rnDsYxjPNut6wTquM2JTKK2Ww11ClOZ
xnS2WMvNzmA2NZ3JLDZZw41Wdw7V3GBV57OANaxlIYtYzgrWW8XFhLjOJax1
Kcuo7BorudqVrHIVK63oaiq4wvKuo5zrKetyy7jMDSy1tEvczElOsYWtbGM7
iz3BInewi90sdCcLLOUegt1PSee7l3nuY64lPMBBDnGYOR5jtkeYZXFnepQZ
FvM4QU63qNMs4mkKe4ObTPUMZznHFM9zgYtMtpCXuMwkrzHRgk7wClcp4Hjz
e518jjOvY83jLW4zxtze4W5Ka7kcbU5HmcP/AMFxwn4=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 16, 10, 1, 13, 16, 6, 1, 15, 
                   8, 1, 1, 1, 9, 10, 2, 4, 18, 18, 3, 12, 13, 10, 10, 16, 13,
                    6, 13, 6, 15, 18, 5, 18, 5, 1, 10, 13, 14, 3, 6, 16, 7, 
                   18, 10, 4, 13, 4, 15, 9, 17, 12, 10, 5, 13, 18, 10, 10, 5, 
                   13, 15, 15, 4, 9, 4, 16, 10, 10, 14, 18, 13, 14, 9, 2, 13, 
                   18, 18, 5, 6, 13, 4, 3, 10, 5, 9, 5, 1, 6, 7, 2, 1, 3, 6, 
                   15, 1, 13, 16, 17, 16, 3, 1, 11, 1, 18, 16, 16, 15, 1, 14, 
                   7, 18, 2, 18, 10, 18, 18, 12, 4, 9, 17, 7, 10, 13, 15, 6, 
                   11, 14, 4, 3, 12, 18, 10, 14, 2, 11, 1, 7, 6, 1, 13, 1, 9, 
                   1, 15, 5, 13, 18, 18, 6, 13, 1, 7, 5, 3, 7, 10, 10, 4, 18, 
                   10, 7, 2, 13, 5, 9, 10, 7, 7, 13, 1, 7, 2, 3, 18, 13, 1, 
                   11, 11, 15, 13, 13, 18, 15, 1, 16, 4, 1, 13, 7, 7, 10, 16, 
                   13, 4, 8, 8, 15, 13, 5, 3, 15, 17, 16, 17, 2, 15, 17, 11, 
                   16, 1, 3, 18, 9, 10, 7, 18, 17, 16, 3, 15, 11, 3}], 
                 "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJw9kDEOwjAMRVM7seEYHIGFnZG1nKBIBSaQChLipFwH+9upoiaN7f++nd3l
OV6plPLa2DZOn+OyTN/z1i6nx3u+zcv+cB/s9rOvlVq0DLa0EHZGjGxvRSzS
MjogQ6hiyzCqxFa1uCLKSXGmU5zrCk5SRUyhbVBSerfMOi8IjD9evXpn4SB2
KmheQ6hxrXfSvVpO1VBBUIRK0C+tc1b0wuASzgpW+AWvvwCDpuAz9JEP75hA
MJGCrzmdwlPgK+hL8j0EVZzvSqkT5Birv/sfvCcNgg==
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1: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

                  "], "Children" -> CompressedData["
1:eJwdiWV0FgQAAO8hKCUGpSgKFh0jRsfo0Wx0b7CgNvg2GKO7u7u7u7u7YXaD
hBK2gp6TH3fv3bu8kfFh0WmAhPSpCotICgkEIpLDM6RGaFxiVExUICg49v+f
kkqa57xAWtLRkQhe5CXCCCc9M8xIJjQD/zrdzLxMKHXJwivUojav8hoVqMjr
ZCUv75GN7LzDNP8xB898k6fm5A2m+rdT/MtcvMXb/Glu/nCyvzvJ33yXPEz0
Vyf4Ph9QlnJ8yEcUpRj5GG9+CvCL4/zZsT6xIIUYY2FG+9giPHKUxQmiJKV4
aAl+cqQ/OsIHDrc0w7xvMPcsw12H+oNDLM9g7zjISlSmBgOtwgBv29+qhPC9
/axGdb4z2W/t6zfW5GuTrEMfv7K3X5roF9ajCQnWpwGf25DPDNiIXjamp58a
7yfG2ZQeNqM5H9vdFnSzHe1pSStSbE0bunrLLt60LTeM9boxdiDaa0YZSSfG
M4HORBFLF64azRU7e9kYLtnJrnRjFKPpTg+GEGkcEV40ngt29Lw96UWABBI5
Zx9608GztveM7UyiL8n047SDOGVb+9PGAbR2IK08aUsH08ITNve4QxlGM485
nKOO4IgjOWxTDxnuGMZy0DAPOI79NnEikzjBSSYzhcUsYSqN3WcjpzGdGcxk
r4uYxWz2uIA5NHS385lLA3c5j53Wd4f13O5CtlnXrYa6lGUc5BDLWcFe9rGS
Oq5iNVus7RrWspVtbLaWm1zHejawkZpupoabqO5Gq7nBLaw3xO1UdQc7WWcV
d1HZtVZyjbvZQ0VXW8FVlnc/B1hpOVdY1uWW8TBHOEqwyzzOMUq71FIusaSL
PcUtSniaM5zlHIu8wXmCvExxL3CRSxRzoUVdYBGvcJX5XmOehb1OIeda0Dne
ZLYFnGUKM83vfwyeuIM=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{13, 1, 6, 6, 1, 13, 1, 10, 13, 
                   13, 10, 11, 2, 18, 7, 7, 1, 5, 12, 14, 7, 4, 15, 18, 11, 
                   13, 14, 16, 17, 1, 14, 10, 1, 1, 14, 6, 13, 13, 9, 16, 18, 
                   7, 2, 11, 1, 16, 15, 18, 15, 9, 18, 15, 10, 18, 9, 10, 10, 
                   7, 10, 11, 3, 16, 17, 5, 17, 6, 9, 17, 9, 4, 10, 4, 1, 4, 
                   12, 7, 9, 16, 15, 7, 18, 4, 10, 12, 14, 1, 4, 14, 18, 4, 2,
                    13, 18, 16, 13, 12, 15, 11, 4, 3, 2, 3, 15, 1, 7, 16, 3, 
                   18, 4, 13, 3, 12, 3, 6, 18, 11, 13, 4, 1, 10, 6, 1, 10, 1, 
                   3, 14, 5, 18, 13, 1, 18, 1, 2, 12, 9, 17, 6, 13, 18, 18, 
                   18, 6, 11, 13, 16, 5, 16, 17, 17, 16, 3, 11, 1, 1, 16, 10, 
                   7, 12, 7, 9, 4, 18, 16, 1, 7, 10, 4, 9, 18, 13, 14, 1, 3, 
                   7, 12, 9, 5, 18, 12, 15, 1, 4, 5, 3, 16, 2, 13, 18, 13, 2, 
                   5, 11, 14, 10, 1, 18, 7, 7, 1, 4, 12, 15, 18, 7, 12, 15, 3,
                    9, 17, 10, 13, 7, 3, 15, 13, 3}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJxNUEkOAjEMa5MmgWfwBC7cOXIdXjBILCeQBiTEQ/kPiRsGNGrU2K6dzOpw
G05USrkvvAzjcztN42u/9GZ3fRzPx2m9uVTv3n5asSJepZDXWtR7Q8de48aO
RTWwFbyBpcQCjb5CH1ryT92PHCM4EHQEhYIPl0hsYPprxqlADfmd77418+RP
HbdIZOygmEMwz28CzTSFTpAgs3NDz3DT3KlrCHiDpoETqCUnr+nGUAryDUrO
mVsmG7RfTOZ/qDmx5taUrg0qnnNj5w+02w2Y
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwVVHs41IkalihZlgqJPWuq49LObolO1Ilvyv1WlnaRyJGNI605UZSemj3l
GDaMRc3qNplVE3ZcnmzTZX2sMLGcaQ3GfQZjxmXGb8Zt2OTM+eN73r++53m/
93vfd0dscsg363R0dLq1w7mUZNdnOAXyZwMv67L+QOaaex3ViYWsjFcFNjCJ
tJEvzJNZupSEmKP1ERQlirJKLG4Q40DyyJnpt1lExpsq9xT6LLqmRp8rixrC
6qRewXLsNFKKy9raji2g4GCHkG2twhgHg64D6wk0Nay2EqgJFNn4uPvtViPx
LL5u38tldLjz7fHiui5kRPqX3/yHBhkGZElejZYP3TrE+pNZZB1n3oodWEPm
vu/ZT8+vIEfm7x2UpUDXB7tvWHqokfGi/T5plwLFKVsp3+4YQ1rm0vr8uElM
ryYyMgkp0qRUi8biAeTkcv5q9qkE5W6U9dkm4+h4ZH70otMcNni+yuuRzqEo
48swYY8YLQ8/70o5rMZw6h3iTooaLdmGR3hxWnxZqFfnrUL55bv1yvFpZAlM
5g49UqAOqSEZkiaQ0tOb7CWTIFH0kFr7XIn8rr2miVVzGOOmZ6Za7kbe3n8b
8cpYqKnq8zQrmoX0z6aObd8hBZ02DqmwUQWM89xzvGcaIDYncfZeJdA3ieN+
zLIdfROPejg9nERirsLKmjGJlH8qdOOFPWjaXXKnLXcSRd47I2XLSqg2lruX
56uAsgJNtbIeDKa+L7Sz6UXeL55uymtCJA3q61+K7EEH1fT1Yv9uoJ5pflHK
7AXHmkObucV5QLqO1FQ2At1hztPpjAh5BQ/2i1ObkXa5kZ9WqEK6cpR14uoC
cl4wO83WpkDjM1Fx1HIcTVUvAjYM9iI1sH0662oLUE9+h7bN1eAbq/enXsxv
GF6v6nf6XYrVt7iTvfFNKG8QRlGfLABh+Mjub0/mgOKz1WWeNY/pEZVPVlwH
Uf7J5abFsXFI2MQd3HZqCugmkSfivxpGHVYHZdFP+4fYUMFY2QOMAdaFNVYR
uH6tDORazQBH5iz8KnQCDYqCon/070S6y4W39dktyCr/fOXkLjkIzPvc9JJ7
sOHCrYqDt+qQlF9aMlui9VGcZ8vrTUr0NXvK6c+YwODfDmY4t6qQZMs/23dy
Ch3PqjTjr1XISY9fjQ5Qo7wis7RjWw+G25ozJVvfIs36xEfOXAIpI76dYWky
iNlXG8DubMLw0cNyhmoCeLd/fVPqXw+aJZrvdUYtioLMbYd9tb4b4U95j0mQ
7lv0y9AeAtPdTOZJ/AVMf8OLO/JZLhApS3m3jZ+A5nvZ8CPoAxrZc/gHYQOy
8mupBRbTSPu8vLDlsQZd2xasOv/VDZxWnwO1N9VAjHm0eH05DeHfNG3JSNDm
wt8mN/C0HAz07TliZSsIijvyLxxXgLigpt9UqzOjzKyR6OaiQLOsqDw5hJSo
RHZFqAJYm1VcYmYWqZUF3hv2LAK/NX5kgDULmkyZ0057KVDHy/36U2eB320x
qelWg44Xqx6DhCDK3njtHkcG/DyKtZuBEPl2q/b3tPxiary4VPtWMJ3Iy7to
KgVeziHv/2ZLIbg/LXDUqAuoWfIwffgVmT93sDfUi1B+5frDAGcBMrct3sz+
WIIMtSLqp9EmYAYttuVy3wN93d8HOTvEQDRd8UgcEQG9dR1+bD4H1C3cNHcV
AQy/G9OKjaNAmx29ri0u4Elf/+WHGSk4rpFfFz2fh3TbL/RHJG+AeVkwR67/
ACKH0NU/dFuA94Gqlx/bq+1Bfzv7BwPAyio4rznUhxRx90rEfe1doxLd0x/e
AfPS/jyyv5bH9osuTv/XP+wapVqo9auArbtT1oTVMUgerBNguL7RXZf9PUA/
kFSpF6bG9N2HB338/gRBR+hd2sYxcDTPsa0xXULBlGH72W0iZDgr3pH/M4mO
l4ytTqEYaNtH7qUkdkECOXrp/iAPRO33s0q9VCBo1CfHGwwjPW3TsabNCiDU
rQEJ5XJ0nI9VmlSp0PdMmEfk1BjyWskvU5JmkL9l1+PEeBG6RlC8Xs1IwEF0
zXPpuTFFJ8e9IFZIgCY4KjOmYgHEJut8m4slEPw09WjQ43HQ9O7JqRHIgBZd
Yn1q6DRYlt4QRNxtRhJ/a4hLoAYE0xZxG3wWQSzHFrZ2z2G2c/vq4gxQ337Y
Y+SihqRmXeZ30XqU9JDWj6x+HgLSiSpjx/YpYGZcSdsVokWdCLYRQwYNX49+
evvcO6T/XvmeFbcEcudK/hbVKvwP/nCtvg==
                  "], "Children" -> CompressedData["
1:eJwdk1V0FgQARu8BFVCxG0VRMOgRo2P0aDa6N1hQG/wbjNGM7u7u7u7uLqUR
LFDCoI3L8OF+59zzPd8skfFh0WmAhPSpExaRFBIIRCSHZ0iV0LjEqJioQFBw
7PP/XCpp/ictL/Aiy1jOS6SjJrVITwY+5TNe5hVe5w1eZZI60f/MyGtM8F/H
+yZv8Q7v8o9v87fjfOpY32OMH/AhT3yfx472kR/x0I95YCbuO8pPyMxfjvRP
R5iFz6nOcL8gK3+Yl2wM80u+4neHes+v+Ybs3HWIORhsTnJxx0HeNje/mYdf
HegtBxhEPvLT35uGUoB+FiSYX+zrzxbiJwtThKIUozilKM2P9rEEKZaktz/Y
yxB6esMelqG7ZSlHebp53YpUoKvf28VrVuKqyVamClWpxhU7e9kkL9nJGnT0
oomGEc4Fl1KbOsxgJnVJsAENOW89vrM+3xqwEY0Zyzia0JSudKMZHWxDW5oT
QSQtiCGWlrQ3injPGWc07TxrW8/YitO28ZStOWlr29HKLsQaR4zxRNueDpww
wHE7k0Aix4yyIy09aieSaOERI00mwsM295DN7E4P+tCXg/Ykhab2oom9aewB
G7nfhvajP/ts4F4HMJj6DqSeexzEbus6hDoOZRi7rO1Oh7PDEWx3JKMIdzRh
jqGW26zpeCaw1alssYabncgkqjuZak6hqpus4jQqO51QN1rJDVZ0FrOZw1yW
UMF5zGe9C1hneddazjUuZBGLWW1ZV1nGlYa4wtKuYCXb2cFyV7GO9aymlMtc
w1pKutQSbmAjW9nGJjazxOIutpiL3MJCi7rAIs63sDvZxTyPsZs97KWQcw12
jgXdx34OUMDZHmKWB5lpfg+TzyMEeZS8zjCPxznBSXI73dOcIpfTzOlUzzDF
s6lN5XCy2X0GChO0hQ==
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{5, 1, 1, 6, 14, 13, 13, 5, 4, 3,
                    10, 13, 18, 1, 6, 10, 9, 16, 17, 9, 16, 1, 18, 6, 5, 10, 
                   13, 10, 18, 10, 5, 10, 16, 18, 12, 18, 10, 1, 7, 13, 4, 2, 
                   10, 13, 6, 11, 2, 13, 2, 3, 18, 1, 14, 15, 1, 6, 14, 11, 4,
                    15, 16, 13, 18, 15, 9, 7, 10, 1, 9, 9, 7, 5, 13, 15, 10, 
                   16, 4, 16, 4, 16, 9, 16, 18, 17, 11, 1, 16, 2, 1, 16, 4, 7,
                    9, 12, 10, 18, 18, 17, 15, 11, 16, 3, 8, 3, 15, 1, 10, 13,
                    15, 5, 5, 7, 10, 13, 5, 1, 3, 12, 12, 13, 5, 10, 12, 11, 
                   1, 10, 9, 13, 2, 13, 3, 18, 10, 1, 9, 14, 11, 6, 10, 16, 
                   11, 9, 13, 14, 4, 18, 13, 18, 1, 3, 10, 4, 16, 18, 7, 1, 7,
                    7, 9, 1, 10, 18, 13, 9, 13, 10, 3, 2, 12, 13, 2, 14, 18, 
                   14, 18, 18, 2, 13, 2, 7, 1, 18, 5, 15, 1, 6, 7, 3, 1, 2, 
                   13, 15, 12, 11, 3, 1, 1, 1, 15, 17, 12, 17, 18, 10, 16, 18,
                    4, 16, 4, 3, 15, 9, 9, 17}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJxNUTkOwkAMXHsPwzN4Ag09JW14QZACVCAFJMRT+Q322FnQag/P2DOOsznd
hzOnlB4rPYbxtZ/n8X1ca3C4PafLNG93V9Loo7sm0d1S1lsS6TsDy7oKUGON
JyAWG89RUXRVsFbD4Ape0pWKsgyVimxB5B4cLIPz05UIy329l4w8c23xNkX6
8ydUu6aEYgu2ASW4ed7Sl3GMXOlqFdrWs/tX+GVgv65a/4IW3dTwK7gLcgjx
D/FKgSL3mQlQ72KZaYtZcvwXQ74Cjg1t
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1: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
g2ddTfL0qP8HKOK2pQ==
                  "], "Children" -> CompressedData["
1:eJwdk1V0FgQARu8BERBRMEDFApSuEaNj9Gg2ujdYUBv8G4zRjO7u7u7u7m4w
QCUEA+wCvU4f7nfOPd/zzRkZHxadBkjIkDphEUkhgUBEcnjGVAmNS4yKiQoE
Bcf+999OJc3/pOUF0tGRTrxIekpQEp1oBjLyEpkozgRfJjNvko1/fIVXycLf
jve5WXmN13nmON9grH85xj8dbXbeojBF+MO3ycG7vMMof3ek7/E++cjPB3zI
x+QhJ7n4zRH+6nB/MTc/+xE/OcwfHWpeUvzBIRZgsE8txBML8r2D/M6BfmtR
vjGIYgzwsf19ZD+/tq+lCOahkZSmDB1ItizlqE8DHlieivTxvhW4Z5KVqMxX
VqEa1Qmht1Xp5ZcmWoOafGFd7lqLOiRYm1DuGPBze/qZPfzUenxivA1pRAta
0pgwbtuccOJsSndv2YSbdvOGzbhuV6/ZxVZ09qqxtqYNV2zLZWO8ZDsu2p4L
RnveCM4Z5Vk7GUU0K1hJDLGMYCSd6UISfehKN3rRmzN2pwc9OW0c8XT0lJGe
NMIACZwwkeN28JjtPWo7j9jWZPoylGEcth8DGMgh+3PQNh5wEENo7X4Hs89W
7jWFPbZ0t8PZZQt32txRjGYyUxhDMyfR1LGMYzwT2GETtxvuRMLcZmO32sip
TGM2c5hOQ2cwky02cBb13Ww9N1nXucxjKcvY6HwWsZgNLmAhdVxvqEuo7Tpr
udaarnE5q63hKqu7itWc4SxrWMsOdrKOaq5nAyut6gpD3EgVN1HZzVRyC1tZ
7ja2U9FlVnCp5d1FOfexn93sYYl7WWxZF1nGAxxkoaU9RLCnKOUCD3OEkh7l
GMcp4XxPMM/izvUkcwzyNMWcbVHPcZ5LXGaWRbxAYWd6kRkW8goFvco1plvA
aV5nqvm9wU2mmM9bqYVNNq+TzOO/tau8gQ==
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{16, 5, 1, 18, 10, 6, 1, 1, 17, 
                   14, 11, 7, 1, 3, 3, 18, 17, 18, 16, 14, 1, 17, 18, 1, 13, 
                   7, 18, 11, 18, 3, 4, 16, 6, 1, 13, 18, 1, 6, 13, 13, 13, 1,
                    2, 18, 1, 18, 13, 15, 13, 14, 11, 11, 1, 15, 4, 5, 10, 7, 
                   16, 18, 9, 16, 12, 14, 13, 6, 12, 3, 11, 12, 16, 16, 10, 4,
                    5, 10, 7, 13, 9, 12, 18, 4, 18, 18, 10, 6, 10, 17, 9, 12, 
                   10, 4, 15, 9, 10, 18, 3, 10, 4, 2, 7, 1, 7, 15, 12, 16, 7, 
                   16, 17, 3, 3, 3, 1, 3, 15, 10, 10, 1, 13, 15, 9, 6, 12, 16,
                    10, 13, 6, 12, 16, 7, 12, 5, 16, 10, 2, 7, 13, 2, 2, 1, 4,
                    16, 10, 9, 6, 11, 13, 13, 4, 13, 18, 18, 10, 16, 9, 17, 1,
                    18, 10, 7, 18, 16, 7, 15, 11, 1, 14, 15, 12, 3, 13, 9, 13,
                    1, 7, 2, 18, 2, 4, 7, 5, 7, 18, 15, 10, 13, 18, 13, 14, 1,
                    15, 15, 2, 16, 9, 9, 4, 9, 2, 5, 5, 8, 10, 15, 13, 3, 4, 
                   10, 18, 6, 8, 15, 15, 10, 11, 3, 15, 18}], "RootIndex" -> 
                 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJw9UEEOAjEIpNCCPsMnePHu0ev6gjVZ9aTJamL8rw+RDuymaSlTZga6uzyH
KxPRa+PHMH6O8zx+z1tPTo/3dJvm/eFePPv5LtRIyKj6Zr+x3xgI+yrAzWPP
DG/sjELqNeJn8SXgqb8Gpqjvyl2pIXal4grqWc2qui5DFxX6kYdDSYcGtsC5
oMrw3nFFR50TXjGHwI2TocgkO2nwWO4CRYG+AmNESz7DqeJPGngxQY8KloG9
qEUnnJMJME7tCi0Dt6E3W9UlkZp/XjFzg3LLCRXzhaOit/hdoz8D/w2a
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1: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
/66o0bg=
                  "], "Children" -> CompressedData["
1:eJwdiWN0FgoAQO/pqZ6tuOxaWMbyclv2VkPa6ttqLdu2bdu2bWPPtt9t7/24
95x7blBUQnhMOiAxfZrCI5NDA4HIlIgMaREWnxQdGx0IDon776emke5/nuN5
XuAkp3iRlyhGcdKTAS3Ky7xCZrLwKq/xLu/xr6/zj+/wt2/wJhP8y7f407f5
w/H+7jjf5wN+MxO/OtYP+YiPGWNGRvuLo/zZkf7kCLOSjR8dbhDDzE4OfnCo
ORni9w42F4PMTR6+My9FGOi35iM/BSjIAL+xv19biK8szJf28wv7GkwfPzfF
EpRkF7sJoRSb2ExpyjCBiZSlHAPpbXkqUJs6VCTZSlTmM3v5qaFUozqfWIWq
9DTVJGuQ6FMD1qSHT6xFGN19bIJ1qUccnahPAx4Zb0Ma8dAYwonggU1pTDfv
24R7dvWuXWxGc1rQ2Ta0pSWdbEWcrYn1jjG2I9oOdLQ9HYwkittGectIb9qR
aNp7w3ZeN5ZrtrUzXejPALrSxqt244qtvWw8CXTnkj24aCsDJJJESy/Yh570
IpkWnre5vWnmOVM4a1P70sR+NPaMEZ423FM2chCDOekQhjOCoTT0hMM4bgOP
Wd+RjGI0YzhqPY84lsOO45B1Peh4DljHSdR2JrOYzBT2O5V9TmOvYU5nBnus
5W5rOps5LGAhu5zLTuexwxrOp7rbreYiFrPNqi5hKVtdwRaXsdkqLifUTVZ2
JZVcxWrWsJYNVHQdFdxoeddTzg2Wdb0bWWcZ11raLWxlG6XcwU7WuJ3VhrjK
kq60hCvcw3JPsJd97Ke4BzjIMou51GAPcZgjHGWJRV1sEY9xnEUWdqGFXGBB
T3OGu9zjLOe4zg3Oc4GLXGK+BZxnfi+Tzyvkda55nONVrpHb2eZylje5xW1m
mtMZ5vAO2Z1ukNO8z1Qf8oBsTjGrj3jME7L4lMxONpOTTGWiGX0G1cLSdg==

                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{11, 13, 9, 1, 15, 5, 18, 1, 6, 
                   1, 17, 12, 14, 13, 12, 1, 1, 10, 1, 14, 6, 16, 11, 13, 3, 
                   13, 9, 7, 14, 5, 12, 14, 4, 15, 14, 4, 2, 7, 18, 15, 2, 1, 
                   9, 18, 15, 5, 9, 18, 2, 7, 10, 16, 3, 14, 18, 15, 9, 14, 
                   18, 13, 4, 6, 18, 10, 10, 17, 6, 12, 1, 13, 7, 5, 9, 14, 
                   13, 7, 16, 14, 15, 13, 10, 18, 18, 13, 15, 15, 16, 4, 2, 
                   16, 10, 16, 11, 18, 16, 11, 10, 4, 12, 15, 3, 3, 15, 4, 4, 
                   7, 18, 16, 10, 1, 11, 16, 11, 15, 18, 15, 16, 16, 11, 5, 
                   11, 12, 6, 4, 13, 17, 6, 3, 2, 11, 6, 14, 13, 7, 6, 5, 18, 
                   10, 9, 10, 15, 13, 10, 15, 18, 7, 4, 18, 7, 3, 7, 12, 13, 
                   1, 10, 3, 4, 15, 5, 12, 7, 1, 2, 13, 6, 13, 18, 14, 9, 12, 
                   7, 10, 10, 3, 7, 3, 16, 1, 7, 18, 10, 13, 18, 18, 12, 10, 
                   13, 18, 8, 18, 11, 16, 9, 7, 5, 18, 14, 18, 18, 4, 1, 18, 
                   4, 7, 2, 13, 18, 17, 1, 17, 1, 17, 10, 16, 16, 9, 10, 3, 
                   15, 15, 2, 4, 18, 13, 18, 5, 18, 7, 3}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJxNUEkOAkEI7IVFn+ETvHj36HV8wZiMetJkNDE+1P8MFGRiOkDTFEXRu8tz
uLZSymtjbhg/x3kev+etJafHe7pN8/5wr5b9zLiQWbcjFtl8L7U081TUIlsm
dhRIAoaAYasKTPON0dFQpUQr2AQ3r3ql4i2wHmXlJXQLcJJqBB0KlZwdCk2C
DoXvydaACZykvthLVgXeXTGvQYvkrOB2bQSODjVRISiJXT0TsCj4K5B1VUSI
PV+Ct6bqnnvEbM6N6W8i4480t1b8jatcAJzjDXw=
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1: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
                  "], "Children" -> CompressedData["
1:eJwdiWV0FgQAAO+BlIiKSSiKgEGPGB2jR7PRvcGC2uDbYIzu7u7u7u7unthi
K5igNBzDH3fv3bvckfFh0WmAhIypCotICgkEIpLDM6VGaFxiVExUICg49vlP
SSXN/6TlBdJRmzqkJwMVqEhGMvEWb6MzfJHMvEQWnvoyT5zuY6f5yFd4lalm
5TVe5w0eOsU3mewDJ3nfiWYjO+WYYA5yUprxvsO7fMhH5OI98jHO98lNHvJy
z7F+wBjvOtr/HOW/jvSOI/yYT7jtcPNTgCCKUZBhFqIw/zjUvx1iEQb7l0X5
00H+4UCLU4KSBPO7AyxFf2/Zz5v29TfL8Ktl+cU+lifZn+1tJSrzk0n+aC9D
qEJVelqLRKuRYHVqUJOAP9jD7+3ud4Zyw3jrUo+5zKM+cTagId/azUZ0NZzG
fGMYX9vFJjRlJp1tRnMmMZkWtGQko2hFawIk8JWdbENb2tGeSGL90hi/MILP
jbYDHYkimq50I4ZYPjPK63aiM1341I6m2MFrRhpHPFeN8Irt7U47L9uDS7Y1
kZ70oS8XbeMFe5FEa3vTyvMmc86W9qOFZ21ufwZwxoEMYjCnbeYph3DS4Qyl
qSccxnGbOILGHjPco4Y5mjGMpZHjmcARx3HYhh5yIgdt4AHrO4V67nca+5zK
Xus6nTrOoLZ7DHUWtZxNTXc7h13WcD4LuMBFFrKIQxxmMUvYTnV3upQtVHMZ
VV3OClayig1sZDVVXEOIO6zsdteyjkpucz1bregWN7GZCm62vJss51bKuo0y
brS0G9zBTnaxm1LuJdj17mGdJV3rPta4nwMcZLUlXGVxj3CUlZ5ihcc4zgmW
W8xlnmSpQS6xqKc5w2LPco7zLLKICy3sAgs530vM8zJzLegVCjjHq8z2GrNM
Yab5fQYKeLSF
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 18, 1, 8, 13, 18, 15, 1, 6, 
                   1, 1, 1, 4, 6, 16, 10, 1, 18, 3, 11, 14, 13, 6, 13, 1, 16, 
                   11, 1, 17, 17, 11, 16, 10, 4, 9, 2, 10, 13, 16, 3, 18, 5, 
                   10, 18, 17, 6, 13, 18, 2, 10, 4, 9, 10, 7, 18, 1, 10, 6, 
                   13, 13, 3, 5, 2, 15, 16, 7, 7, 9, 17, 17, 2, 15, 9, 9, 1, 
                   14, 9, 4, 14, 1, 2, 10, 4, 15, 4, 4, 15, 8, 10, 16, 16, 5, 
                   10, 18, 7, 18, 3, 11, 12, 14, 5, 3, 9, 18, 18, 18, 15, 2, 
                   4, 15, 9, 18, 10, 1, 10, 1, 2, 13, 11, 6, 11, 3, 10, 11, 
                   10, 14, 18, 2, 2, 9, 16, 6, 6, 13, 16, 13, 1, 16, 2, 13, 
                   16, 7, 14, 15, 12, 13, 15, 10, 7, 15, 7, 13, 18, 5, 10, 18,
                    7, 18, 18, 14, 13, 1, 2, 10, 18, 2, 18, 4, 13, 11, 3, 14, 
                   13, 13, 10, 4, 13, 4, 11, 1, 3, 18, 9, 16, 18, 10, 15, 12, 
                   15, 4, 1, 1, 16, 9, 4, 10, 6, 7, 11, 8, 18, 17, 7, 4, 2, 
                   12, 7, 4, 2, 15, 15, 15, 3, 18}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJw9UEsOwkAIHT7D6DE8ghv3Lt3WE9Sk6kqTamK8qOeRedCGUAZ470HZXZ7D
lUspr41/hvFznOfxe956cnq8p9s07w938uznXktzr0XdCJEKw8jNELmIo9gz
zRf5y1BpiWAo9K65Sq/3vHlFUkfBZ/QrZkWk5PQ9BDVJXgUrPPrmJjmNsIVg
ekOX0KfMArkoh47kHqGjuYGuW9eVz/mHgq0NCE20pX5cJlSDw9Bt60Usr0Rg
K1iB1RUj6Fhy4xqLkuaNe13KH68TDYk=
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1: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
                  "], "Children" -> CompressedData["
1:eJwdiWV0FgQAAO8hImGSBioo3SNGx+jRbHRvsKA2+DYYo7u7u7u7u7uZrRiA
gh1gwTH4cffevcsdGR8WnQZISJ+qsIikkEAgIjk8Q2qExiVGxUQFgoJjn/2U
VNI85wXS8iJhhJOOl8jNB6QnAzrNjGTifXLxMq/wJm/xKq/xxKk+9nWyko03
mGJmJpuFSf7vRLMzwf8cbw7G+a9jfZsxvst7/OM7/G1OHjnah47yL0f6pyP8
w+F+SB6aMMzfzUtBCvGb+fjV/PxiAX52qIUpwk825EeHWJRiFKcED6xDECWp
wmBLMchylKc0ZbjvQH8wmO8tyz0HeNcK3LEyFelvJZL9zn5+a5JVqcY39jWE
6tSgjzWpxdcmetsEv7I2XxrwC+sSSm/rUZ/P7WUD4v3MOBvR009tzCf28GOb
8pHdbUZzbtDNFrRkIINoRWva0JYUu3rLWNvRnr4k0YGOxNKVTkRw02huGON1
I+lMtNfsQhRRXrWLMXT2ipF2ozu96M1le3DJCC/akzjiuWAnz9vRAB08ZwJn
bW8ifThjO0/b1n4kc8o2nrQ/J2ztcQdwzFYOZgjrWM9RhzKcERxxGIdt6UhG
MYaxHHI0B23hAZu733GMZwL7bOZEJjGdGUxmCtMId69h7nEqu23qLps4k1nM
YS47bewOZ7PdRs5jPstZwQIWspglbLOhi2jgVuu7xXouJdRl1HWzdVxJbVdR
y03WdDU1XEN1N7qWDYa4gY3sYz+b2Mx697KFam5lG+us6naquJNdrHUHa6zs
aiu5m4qucg8rreAKy7vcAxyinAcp6zKDPcwRjnKMi1ziOCe4QBmXepLzlPYU
p1niGRZ7jrOUcpElXWiQCyzhfIt7mWLO8zpzvcIcr3KNos62iLMs7E1uMdMU
ZljI6Rb0KemotoQ=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{5, 11, 10, 1, 6, 1, 5, 3, 4, 1, 
                   6, 16, 17, 12, 1, 13, 18, 13, 7, 11, 1, 2, 7, 11, 10, 6, 6,
                    1, 13, 13, 13, 1, 18, 18, 6, 4, 10, 13, 13, 16, 16, 18, 9,
                    9, 4, 5, 7, 18, 15, 9, 7, 7, 7, 18, 18, 6, 2, 3, 4, 9, 1, 
                   15, 18, 15, 12, 18, 3, 4, 13, 14, 10, 14, 2, 9, 1, 4, 17, 
                   1, 12, 15, 12, 18, 10, 15, 18, 9, 15, 2, 14, 14, 18, 7, 10,
                    15, 7, 1, 2, 10, 4, 13, 5, 3, 15, 7, 17, 3, 11, 4, 15, 18,
                    1, 13, 9, 1, 17, 15, 6, 3, 13, 13, 9, 16, 10, 18, 11, 16, 
                   1, 17, 10, 1, 1, 16, 7, 2, 13, 14, 10, 11, 16, 13, 15, 13, 
                   13, 2, 1, 1, 11, 16, 17, 16, 4, 15, 10, 5, 12, 18, 1, 4, 4,
                    4, 2, 3, 10, 7, 17, 9, 17, 9, 18, 12, 1, 13, 11, 3, 6, 15,
                    10, 14, 13, 12, 18, 18, 6, 12, 4, 10, 13, 13, 15, 12, 3, 
                   2, 10, 6, 4, 1, 15, 18, 13, 9, 16, 12, 2, 18, 15, 7, 12, 4,
                    3, 18, 17, 10, 17, 15, 15}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJxNUDkOAjEMjB07gWfwBBp6StrlBYu0QAXSgoR4LH9hMs4iFCWxx8eMvTnd
h7OmlB4rPMP42s/z+D6u4Rxuz+kyzdvdVeB9cB0nJ02WKn5Jha8BcSAVtgAp
9JplsArshhgQR2bGqfAK462+8jdmRVx4pVc4Y4q84LHOolShPUOoTskoxJ19
nWorcaWiJS9TWfBGRemqW/fC+FK31Dj5gv1fXVzp+jKjwi3UrkmpJf86CmuE
eGxDOZF1bUo91qd07iV2F69SvZLDOIGxq3LjMbUQb7N8AWbeDYw=
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1: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
1GA=
                  "], "Children" -> CompressedData["
1:eJwdiWVUFgYAAO+56XTOdehc2R0Y2IGNLdgNSligHyhid3d3d3d3d7eiLnSl
m677xvbj7r17ly0yPiw6DZCQPlVhEUkhgUBEcniG1AiNS4yKiQoEBcf+91NS
SfM/L/AiadnGdtLxEjnISXoy8A7v8jLjfJ03yMgrZGKsrzFGfZV/HO3fjvJN
3uIvR/o2I/zT4f7hMN8jMx/xMb+bhffJym8O9QOG+KuD/ZBB/uJAf3aAn5CN
n+zvj2bnB/uZi9ysZBV5yEsNapKP/BSkEM/tawH6+MxkC1OE761IUYIoTRm+
s7fFKE4JkixJL5/a0ycG862l+MZEv7Ys5UjwKwOWp4dfWoHHdrcS8VYmhEfG
WYWqVKObX9jVz63OZ3axFqF0JIpPrU0d6vLQzj6wHg1oyH3rk2In79mIcGIN
I8a7RtuYJtyxKS1oSTOac9sob9nRVnSwPZHetDVtaMsNI2xHe6/bzmtGEEkH
rtrWK7YxmhiWsoxYOpFEbzrThcsG6Eo34unOJVt70Tgu2Mrz9uCcLT1rCxNI
pCfNPWMvTtvMUzY1mT6MYjR96cdJR3DC/hx3GAMYyDGbOIjBHLWxRxzCYYdy
yHCHE+ZBGzmShh6wgWOo70IWMZZxjKee+53NBCayz7pOYjJ7ncIe6ziVaUyn
trMIdbcz2OVMdlrLHdZ0DnOZRw23O59tVncB1dxqVbe4mM1WcZNL2GiIG6zs
epezgkqus6KrWcN6KriW8q6jnGst6xrLuIGNbGIzqy3tKku50i2scCvLDXYH
OznMEZZZ0l3sZqkl3MNe9lHcAxxkiftZbDEXeYiFBrnAoh7lGHe5x3yPc4KT
zLOIpzjNTW5xhrNcp7DnKORcrzDH81zgIrO9xCwvM9OCzrCAV8nvNfI53bxO
8wZTzeNtcjvFO0w2l5PM6URTmGAOx5vdfwFMuMR9
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{10, 1, 1, 11, 16, 13, 13, 15, 
                   13, 13, 12, 4, 2, 17, 7, 5, 9, 15, 8, 15, 5, 18, 1, 18, 10,
                    1, 12, 18, 3, 18, 4, 7, 1, 14, 10, 4, 3, 7, 1, 1, 12, 7, 
                   16, 18, 2, 13, 6, 13, 2, 10, 6, 1, 16, 11, 13, 13, 14, 14, 
                   13, 10, 2, 6, 16, 2, 14, 16, 16, 13, 1, 1, 13, 17, 10, 7, 
                   13, 5, 5, 9, 4, 13, 9, 18, 15, 7, 9, 17, 18, 18, 1, 16, 3, 
                   15, 15, 15, 4, 4, 1, 12, 10, 1, 15, 18, 7, 15, 3, 3, 2, 4, 
                   4, 11, 17, 11, 4, 15, 15, 15, 10, 16, 15, 1, 16, 3, 6, 13, 
                   11, 14, 11, 13, 2, 6, 1, 13, 10, 10, 16, 13, 10, 15, 6, 5, 
                   18, 4, 15, 1, 12, 2, 5, 1, 18, 10, 15, 1, 2, 4, 13, 13, 7, 
                   2, 1, 7, 16, 4, 10, 18, 13, 10, 6, 13, 14, 18, 3, 1, 18, 
                   11, 1, 3, 16, 15, 10, 18, 18, 7, 18, 10, 10, 16, 10, 12, 
                   18, 16, 13, 2, 10, 18, 16, 2, 15, 7, 17, 17, 11, 11, 4, 9, 
                   1, 4, 5, 15, 13, 3, 9, 7, 10, 18, 4, 7, 8, 17, 16, 3, 3, 
                   18}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJw9UEFuAjEMjJ3Yps/oE7j0zpErvGCRKJyKtK1U8V4+gjMeUBQ7Ho8djz9P
t8O3ttZ+N2kOy/9uXZf78SOD/c/f+XJet19XyeiRV5o1bSNPpPfW88xYM+7M
9cQd78mQRCTPZARykbnKzszEBKizo795gWrL62Bq2g5vYA90EVRNniAK9DJ0
UXQyZA148YIz1fRzog7fqcjxo79nLLWBuV8c4SZKq4Ot/MfwqkqDHdBSVUpc
aQcUGDUPdCrcML9wW45YOadz1wF9pUm5ieCGlAzH307WEym5Dcw=
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1: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
BzXu0+8=
                  "], "Children" -> CompressedData["
1:eJwdk1VQFggABne8Uq/DSwu7FQM7sLEFu0EJC/QHRezu7u7u7u7u7ri+0+uO
lbuH/WZ2vucNikoIj0kDJKZNnfDI5NBAIDIlIl2qhMUnRcdGB4JD4v77n6SS
5n9e4EVe4hITfJlX0G6kJR3hRJCeV8lEZv51vK/xOm/wJh8yzrcY63uM8R/f
5h1G+y6j/NuRZmCE7/MBfzncPx3mR3zMH37C72bkN4f6q0PMQlZCKEkQ2fjF
wWYnBz9bkJ/MyY/m5wdz8b25yUNe8jHI7xzoMwdYgP4+tZ/fWojC9LUIfQym
t99YlGKkWJxefm0JvjLZUpSmAT0tQ1nCqEU5yvOlNahARarTw0qE8oVV+dwk
K1OFz0z0UwNWo7tP7OZjE3xkTR4a7wO7Wpsu1qGz963LPetRn07etaN3bMht
47xlI+LoSGOacNNYm9KMGzYnkiha0JLrtqIdMV6zNW2Iti0dvGp7rxhleyKN
oZ0daOtlo7lkGy8aywVb24nOnLeVXehKPC09ZwvP2twzJnDaZnYnQCJJ7GAn
PehJMr04ZVNP2sQUejON6fShL4MYTD/6c8LGHncAxxzIURt5xAiHMJQRhHvY
hh5yGMNp4EHre8CRjGI0YxjLZOo5jrqOZwL7reM+azuRSey1lnsMc7dTmEpN
d1nDGcxkM1uYxWyWsow5zGWn1Z3HfJZQzR0uYDFVXUgVF1HZ7Ya6zUputaJb
rOByVrCSVWx2I6sp7xrWsslybrSsG1zHesq43g2ss7Rr3cQaS7mVkq52O9sI
cZUlXGlxd7GbAxxkD8Xcx372UtQVBrvcIi6zsEst5CEOs8SCLvYIRznGcU6w
yPOcpIALze8pTnOGsyzwHPPN5zzzOtc8zvECs73ILHN7mStc5Ro3yOVMczrD
60w3hze5xTSze5s73CWbUw3yHlm9zwOm+JBHZHGymX2cWuIkMznRjD4HxjPQ
dw==
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{13, 1, 1, 15, 10, 14, 6, 14, 18,
                    11, 18, 18, 15, 14, 1, 4, 13, 10, 13, 1, 2, 18, 18, 11, 6,
                    2, 4, 10, 13, 6, 13, 13, 2, 11, 10, 6, 18, 11, 1, 16, 18, 
                   15, 12, 9, 17, 9, 1, 3, 1, 2, 16, 16, 13, 6, 15, 4, 9, 10, 
                   15, 18, 10, 10, 9, 7, 16, 10, 17, 18, 2, 18, 13, 18, 18, 
                   16, 12, 13, 1, 18, 18, 10, 10, 16, 16, 6, 7, 18, 15, 13, 4,
                    4, 1, 4, 13, 7, 18, 16, 18, 10, 4, 15, 11, 4, 7, 9, 18, 1,
                    7, 3, 2, 7, 17, 18, 9, 11, 15, 3, 11, 13, 1, 6, 1, 13, 10,
                    1, 6, 1, 11, 13, 13, 12, 10, 13, 7, 1, 7, 14, 1, 7, 2, 13,
                    1, 11, 1, 13, 18, 13, 18, 13, 1, 9, 6, 13, 1, 2, 16, 11, 
                   1, 11, 14, 17, 14, 9, 10, 13, 12, 11, 9, 11, 7, 5, 18, 7, 
                   2, 7, 4, 2, 3, 12, 1, 3, 5, 7, 9, 14, 14, 12, 12, 10, 6, 1,
                    7, 12, 18, 1, 2, 1, 10, 10, 4, 10, 18, 5, 15, 12, 15, 5, 
                   4, 15, 1, 2, 18, 16, 4, 4, 7, 10, 10, 17, 15, 15, 15, 3, 
                   15, 2, 7, 17, 3, 3}], "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJw9UEsOAjEILaUFPYZHcOPepdvxBGMy6kqT0cR4VU8jPJgJoeX7eLC7PIdr
LaW8NvYM4+c4z+P3vDXn9HhPt2neH+5k3s+0FTWphYqYTYVNO7yOXIV0iMBi
i3rGfYUtiBIsMqnA8F4Blnf4WxM38oLfkaLfqxjR4MToVcx0DlHnrIJPTTyG
zWDAlnXt4NHBLjYQeB2WZn3LakJHywoGviJHYNOSdcv9W05tQAlGcTsGemyh
a/3CVHOj5TqUV6P1UjFDsR/ndYK9JGOP/QESwA1t
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwNlH88Ewgfx0eic6lVYo4riseSatfFgwffcelcqYY4Edal6FFGlyh1R3dp
JS+TXk+7onZ33BHHxOPZob7kR8uP2ghD0xjbDNkvC4nHH5+/P3+836+33XeM
oJMGBAJhYHn+VjGhlkljIOrbO603VABF4rLv2OFRnBVExKb1jgCZGyGsz58B
twG+BfGEGkUho41H2+XIm1g4XlY4j3yFm8bx9ixyKM3sohVLyNd1rG4+KcXV
0NgqiyA08C5Ink9FziIZn3a7yOeRlv3KIrplHim6yKjMORUS62K2VrnMoCI0
zmg1Q4lE7sFNwlN6FMh/rNyo0iG9dWtJ7Bo9EpWlv7jM6JDDqfFgXNUgfbDh
E8cSHtL7j5bV+yqQYmYTzPz8PZLz3h+SinQYt9FHEmCixWLdlC7z1DjS0hOO
bJhVIvnyncbXi1r0p1zhbMyZRv+mAxZzXV1gW7v/M4/DH5H+mFXbWqgGZl+P
WV6fFFUkrjxtYg5ZVvcXHH/XIdHgpvmZ9mG0Nabsrr5/H7kTJ0xKO1tAkhwZ
Of6tBol6FYGW1w+C+q9vjjZoMGxsUiRc34VMn20Z0Rf7gfe3m7UkR4Wc4YOM
hJwppMgfiSYtppDueTJsk3Qe0+vXzVpUa5FbbDj/h06GqmtElyUzFdKjPHfX
lsow7ssrfYZEDbIO3qsIs5xGMn0tNStrDBNXrYhvoUpRJPvMIYkxhcXhiTEm
pWp0Cwl2tbkwiaxISedls0mkWc/tiKmTI/2Ttn/okqeR1hbrOnWCj3SrfzIf
9miRH2nDepUpwtRXCS0K+z4kty7G09KnMNU5ffPbmXeYvpebNiDsRVXd5Nv8
QDWqJsqtiryUSN+itE0zbgKmsHmLw7lhDDuw4ZR+ixYJ98o8X9Nfoyo5q/PD
xVdoez5phzVfgrzsjW3Hzw5jes0Xc3FWciS9jN/ulC1G0YXvG+3qeBh2jdEk
7m5FNuFz7uMuJa7apfz4a3Q1qKRjZSUFg5j4sCNqrH0EBO8csqNeNmDxl/uE
79cokfAf5x//9u7D4vmK+G0p5chcf65ir3ENUvzdnzo8EgLZ9EmOqKgBuXk0
c8dzUvAvWqKcmqwDEsPHcEWQHMjf/OI3v3UCeRF+3klVrWiLHkWVW2TLPKmU
haUWdCMNeV3yGgey14uUd2bDSC4PMi253IWzJywcoHsaqbSkIskDJXIKLIna
4C4QOK217rjahLbTXwW8hAngmFTf/rO/G9gcy0xG1QRyK5dYzAopULpsBPW1
LZAe453Hi29DwfngxZ17xoHj3n7zBWcUEn8KiHva/AZEPf/bLRHoMe6w59Hz
zv1IDvS8PBQ4DUxi9c819mq0zT57h1Gz/G/6QP3gVz1w76ntySeVmKq4fsyQ
VIUCB+M8Sc8ACmb7v744+AwUwRmFZhwx+iucTq+c6wC2YfDSnaHbGGZwxd0m
rw39tSlvTVM5ONtZldBkdQMS//vDQiHxDdCgJPnuZDMyZf8CG5NuUFwIP5o5
LEDK4xiXbZe0qFqcC+3KXQTzfX6s5BwjqiirqP75yFvQSZoGeGojKm2s7qcz
KzVA0fjl73JvA/+Iu2E2bYPA9pvY36hthXTeAOeGRx8yw/dcqiR0QLFh7pD0
WAs2SO1WuVWIkV1rJ3vR+BxFkhAnNU0Gog3U7vDCEUgdunXD4ucC5IWwPbqF
+SgQFyUGeMuQlf9C/6RcDqRPPcePVImRFBValjE8gZLOuzs+JnQC6VaId4e9
DEm5+Tes1y371Mr44MvuB0Wsfda3bY3Lvboe1M1a7qEXJ5uu7EZ2oFeZ++1h
mA3mm9vtESAnKKXMjD0NiY9u1tC2S4DK/d6OPvoc+D6l3zw80geSpLS7UeI5
oBSQ+jibJeDGEwdobQeAnLmucqdaDZIzP1hfm1oCRV7Lv/Nd1cC/yrGdCNVB
sW9PiGdiL/KzLIZPrOcj0brX9eJZFSZy0hlPDwmB8ifVx1A3CMX5BY8NRpb7
lG0xuNNXA2HMWH9zbz2GKfZoNrlqkP1ksaV/6zjwU3qdjU+3o8rg0P7c1/VI
WdRRdrrpgWZ81mAk7QNQAoU2V94QqA0+B6x/G+wBWouvKGhEDJTfP7UIGVJg
3ApTR1ayHBSiBCPL7lEkFW7OEOSqIcwqQ6PMFSNn5eW1vauXOTjJTn9hqQUV
MbpXuSRGAuZl9LCqgW/f6XiGLwXW0BrjCLISSE7q3c/S6pEV7Rx+vFwDbuRn
L2RCNZDKt3u6DGgg1VK+tH9GD7Pjf0nfXG/CW9+tXsl/QKDahvxls2phCsh0
S7VpqzGVJNt1z9JoBv4PEkS7Qg==
                  "], "Children" -> CompressedData["
1:eJwdiWVUFgYAAO+50s3NWOrC2R0Y2IGNLdgNSligHyhid3d3d3d3dyeuO3Q9
3WacuB9379277JHxYdFpgIS0qQqLSAoJBCKSw9OlRmhcYlRMVCAoOPb5T0kl
zf+8wIu8xDa28zKvMI7xpCUdifTiVV4jBzlJz+tkIjP6Bk/NwBNH+NiMPHK4
b/IW2Rjm2wz1Hd7lP4f4r4N9jyxkZZD/ONCHvs8DP+BDBvi3H/GX/f2Y7Pxp
P/+wr7+bi3zkJzd5yEuyv9nHX02yAAXpSYBCFCaCSIpQlFIEU4ze/mIvgyjO
fRO9Zwl+tiQ/mWBpyhBOE360LFUIoRwBy1OBH6zI9/b0OyvxrZX5xh5+bbxV
qcZXVqce9alBnDWpRW26+6WhfGE3P7cOdenqZ3bxUxsQRmc/sSGNiPWujUkx
xjtG25RmtKAlt42yOZ28ZUdb0ZqbtqUNkd4wwut28JrtaE8HrtreK7azI524
bFsvGUU0MVy0jbF0pjtxdKG1F2xlV7px3paes4VnjeeMzT1tD07ZzASaetIm
njDc4/amD8kkEeYxG9uXfoxmDEftzyAGM4BGHnEgh23oIRs4hKEMYzgHHcUB
67vfEexzJHut5x7rutux7LKOOw11hxPYRG0nMonJTGG7tZzKNLZZ0+nUcAPV
ncFMZjGbucxjq9Xc4hw2W9X5hLiYJWxyARtdyAYXsd4qrnMpa13HGpexnMqu
oJIrWcVq1rDaiq6ygitdywrLu9z1LLOcS93IEsu6mS0sdiuLLONCS7uDYI9y
jJ3sYoGl3M0e9rKP+R5hPwc4TEnneZC5HmKOJZxtcWcZ5EyLeZwT3OYOJznF
DG8x3dNc4jJnOMs0izrVc5yniBco7BQvMtlCTrKgE73CBK9yjQJeJ7/jvcE4
bzLWfI4xr6NNYZR5HGlunwE/976A
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{13, 10, 18, 4, 6, 2, 16, 18, 8, 
                   13, 4, 13, 17, 7, 12, 9, 5, 11, 13, 18, 10, 10, 7, 3, 1, 
                   11, 10, 7, 10, 14, 14, 10, 4, 13, 11, 9, 16, 6, 2, 12, 15, 
                   16, 1, 7, 12, 2, 10, 18, 6, 10, 1, 5, 10, 13, 7, 12, 10, 
                   15, 1, 9, 13, 11, 18, 13, 2, 12, 12, 7, 6, 13, 14, 13, 11, 
                   18, 11, 1, 10, 4, 2, 6, 1, 4, 4, 9, 12, 15, 2, 15, 10, 16, 
                   4, 14, 4, 4, 8, 2, 15, 3, 16, 1, 1, 17, 16, 15, 9, 16, 17, 
                   11, 4, 18, 1, 10, 11, 10, 17, 18, 15, 2, 17, 9, 3, 15, 1, 
                   1, 10, 4, 1, 12, 6, 13, 13, 2, 9, 1, 1, 15, 17, 11, 3, 4, 
                   6, 1, 18, 18, 10, 10, 18, 5, 1, 18, 2, 10, 3, 18, 9, 7, 9, 
                   7, 17, 15, 14, 4, 16, 18, 18, 17, 18, 9, 18, 10, 6, 5, 3, 
                   9, 13, 11, 13, 18, 16, 13, 12, 18, 3, 15, 15, 13, 5, 3, 13,
                    1, 3, 4, 7, 16, 9, 7, 18, 1, 4, 5, 7, 11, 16, 18, 12, 14, 
                   7, 4, 16, 14, 16, 3, 10, 18, 17, 3, 11, 15, 3}], 
                 "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJxNkE1uAjEMheM4jssxOAKb7ll2S09AJX5WIE2REEfuLfB8zoyqyDO28/ze
c7Y/98O5llJ+P+JzOD7303R8fW+i+Lo9TpfTtPu8SlR/Ea1Y8VKLRqZF4vSo
526NTCJr3Dp1A5X9/Dp1jeP8jWzB9rjV6HU4FO7kdfDChIFNxblnzAh9Bdk4
szcD2dGtRBv8jqazQyXSjbBhzqae4qzCbkwtkzY0ha372m/jTfr6UsY+yWrs
06l17KGEwSP/vDtu0oviPxkr7IqioLa8pY45HzgZ2/dVpQ2X6fcN2PcN5A==

                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1: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
7A==
                  "], "Children" -> CompressedData["
1:eJwdiWN4EAgAQN/Xqc7MWnYtLGN5uS17qyGt2haWbdu2bdu2jbN999rdj/e+
730vIKJLaFQyID55kkLDewbHxYUnhqVIipDYhMjoyLjAoJj//qskkv3PG7zJ
W+xjP2/zDtnJgSbnXd4jBaP815G+zwekYYQf8hGf8wUfM9x/HOYnfMrfDvUz
hviXg03JIFMx0D8d4B+m5nf7m5Z0pCcDv5mNjPTzV7OSib5mJoBf7GMWevuz
if5kL3+0pznJRTGCyE0e8lOAH+xhXrr7vfn4zgQLUohvLUoghfnGeL82zq8s
wpd285VdLU4JXjqDkpSiN30oTRlqUosXdrEs5ShPBSpRmWBifW5nK9LJZ3a0
ClV5ager0d7qxPjEaB8bwiNr8NAoa1OHetTngXW5b6T3bOddQwmjAXds620b
0pgmNCLCW4bblDY2ozk3bW0LWtKOSFrRyra09IatuW4brhlOBC28anOv2Mwo
mnrZblwymhia2J4OdKSxF+1CJzpzwVjO28hzNvSsXTljA+OI57QJnLInJ+3O
CXtw3DB7EWoi9T1mPfvSj4lMoj8DGE1dBzKI4YxgMHUcQm2PWssjDmUYNT1s
DQ85koOO4oAh7re6YxjLOMazz2rutap7nMBuqziZyk5hKrus5DQqutPp7DDY
7VZwJrPYZnm3Ops5zGUe81nOCrZYzgUsZBGLWUJZN1vGTZZ2o0vZ4DLWW8qV
rGKdO1hrSVezhrWsYxslXON6NrOFDRR3I0GudhOrLOZKi7rCrSy3iMvczlIL
u8Sd7GI3ewh0sXtZZCEXWtADHOQa1znEYU5wkiMcZYEFnG9+j5HPeR5nrnmd
4ynOcJbT5HG2uT3HeS5zhVnm8gI5vUgOZ3qJGWZ3utm8SlanmcUb3GSqr7jF
bV7wkikGeIe73COz93nAZDP5kIxO8imPeMxEnzDBDI43vc9I53PSOs40jjW1
Y0zlaFP6Gr2/3HE=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{4, 18, 1, 1, 2, 17, 11, 1, 12, 
                   11, 6, 11, 6, 1, 8, 4, 15, 13, 5, 5, 15, 10, 15, 9, 9, 2, 
                   4, 12, 18, 18, 5, 10, 4, 9, 6, 7, 13, 14, 13, 10, 1, 1, 7, 
                   7, 6, 7, 1, 18, 13, 13, 3, 17, 10, 10, 7, 4, 18, 9, 10, 14,
                    7, 13, 6, 18, 11, 14, 18, 18, 7, 2, 11, 13, 14, 18, 11, 4,
                    1, 1, 15, 18, 15, 9, 6, 2, 4, 13, 7, 15, 2, 3, 16, 12, 16,
                    13, 18, 6, 16, 16, 17, 18, 18, 16, 1, 16, 17, 1, 2, 11, 4,
                    9, 17, 10, 7, 18, 3, 13, 7, 3, 18, 1, 4, 13, 2, 6, 18, 13,
                    10, 11, 13, 1, 2, 18, 16, 13, 3, 13, 6, 2, 4, 7, 1, 15, 9,
                    5, 10, 3, 7, 1, 12, 1, 10, 1, 7, 18, 7, 16, 10, 4, 10, 1, 
                   10, 1, 13, 4, 16, 17, 18, 15, 14, 13, 6, 3, 3, 7, 5, 10, 4,
                    16, 12, 18, 9, 13, 12, 5, 7, 4, 10, 5, 13, 3, 18, 3, 2, 4,
                    7, 5, 1, 14, 18, 11, 10, 1, 13, 1, 2, 4, 15, 2, 3, 9, 16, 
                   17, 7, 2, 4, 7, 10, 4, 10, 17, 16, 11, 2, 11, 18, 15, 1, 
                   10, 11, 15, 9, 10, 1, 17}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJxNUEsOQjEIhBZaPYZHcOPepVs9wTPxs9LkaWI8rjeRTqfGNC0wMFNgdbzv
z0lEHot49tNrO8/T+7CMYHd7ni6neb25akSfuC4mKlWSFMlxNJBmPTwDnuMt
ESfE7TqqDTkLrx/7qyrBbliLHHi3BQqN2f7M4Dt5HojGSeAbuL1SkRnsptpr
Kn2HxlAuiBW5DFVnTxU855QDTcgoOsnso1DdOGviRF3R4FeiYzsVmhVW2YdR
1bkLRS6z5/zbsGH7xs4q+ZmTj007tceuFfYLKokN7g==
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1: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
                  "], "Children" -> CompressedData["
1:eJwdk1VUFgYARu/RbcZKt7meit2KgR3Y2ILdoIQF+oMidnd3d3d3d3e36+6u
K/pwv3Pu+Z5vUFRCeEwaIDF96oRHJocGApEpERlSJSw+KTo2OhAcEvfsf5JK
muek5QVepAUteYl0aHPSk4F85Od/J5iRl3mFV3mDN/nP1/jX8b5OJjIzzn8c
69+O8S/fIgtv86ej/cN3eI/3+d13+c1RfsBIf3WEH/IRv5iVn81LNoabnSBy
kJNc5OYnh/mjQ/3BIX5vHr5zsN86yAIUJITSFGKg3zjAwhTha4tSnBIUo79f
GcyX9rMkff3CFD+3FJ/ZxzKUpTzJfmpvy9HLT0yyAhWpRKIRNKEyAasQysf2
tCrVqE4Pa1GbGtTkiQk+Nt4wuluP+tShLo/s5kO72oAuNiachnS2EXE+MNb7
xnjPaO/alGZ08o4dvW2Ut4y0Fa256Vna0JbBDKEd7RlABzsQSUc6ccP2XjeK
a7YzmrbGEMtV2xhHZ/rS2i50JYEeXLGVl+1Gd1p6yXgu2sKeBOhDCok0N4le
XLCZ523qOXtz1mTO2MTTRnjKcPvR2P408qQNHcggTtjA49Z3KMPYyS6GM4JV
rGYko5jMFEYzhmNOZCzjOGo9xzOBI9b1sHU8ZJiTqO1BazmVaSxkEdOZwSxq
esAa7ncm+6zubOaw12rOpap7nMd8Qt3tAnZZxcUsYacrWMoydric7VZ2m5Xc
akW3uJLNVnANa9nODja5jo1sYqPr2eAG1lvedW5mrdtY4xa2Us7VlnWVZVxp
aVcY4m5KudySLnMPe9nHfg5wklMs9SCHOMwSS7jYIyyyuEcJdqHHOE4xT1DU
BRbxNIU9QyHnW9B5FnCu5zjPBS6S3ytc5RKXmWM+Z5vXa1xnlnm8wU0ektuZ
3mKGD7hNLu9wl+nmdJr3mOp9ppjDyQb5iOxO8nFqg9mcaFafAr/BzHk=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{16, 1, 13, 18, 15, 10, 15, 10, 
                   10, 13, 18, 11, 3, 3, 16, 12, 6, 16, 10, 5, 18, 4, 1, 2, 
                   11, 18, 10, 13, 6, 2, 16, 1, 2, 14, 6, 2, 11, 11, 18, 1, 
                   17, 15, 9, 4, 16, 7, 10, 10, 18, 18, 14, 16, 10, 9, 9, 13, 
                   12, 10, 13, 5, 7, 18, 2, 4, 14, 4, 15, 18, 18, 2, 6, 2, 13,
                    10, 9, 18, 15, 4, 6, 5, 4, 13, 15, 10, 2, 1, 15, 7, 8, 3, 
                   4, 12, 18, 12, 5, 15, 18, 11, 18, 18, 7, 1, 4, 16, 13, 13, 
                   17, 3, 3, 7, 15, 11, 2, 6, 13, 5, 1, 13, 6, 9, 16, 16, 6, 
                   7, 11, 17, 1, 18, 1, 14, 1, 18, 13, 7, 1, 10, 2, 2, 11, 4, 
                   7, 1, 13, 4, 11, 11, 18, 13, 1, 9, 14, 10, 13, 16, 13, 10, 
                   2, 2, 16, 3, 7, 5, 15, 5, 18, 18, 2, 10, 15, 18, 1, 10, 13,
                    6, 1, 10, 4, 1, 7, 17, 7, 18, 12, 5, 4, 9, 7, 1, 18, 14, 
                   18, 14, 15, 15, 15, 7, 4, 18, 7, 15, 9, 7, 9, 5, 10, 12, 
                   14, 7, 10, 10, 4, 17, 13, 7, 15, 16, 18, 9, 10, 18, 3, 3, 
                   10, 9, 17, 16}], "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJxVUDkOAjEMTJzD8AyeQENPSbu8YJE4KpAWJMRXeQ3jsXclFMXxOZ7J5vQY
LpJSeq5ghvG9n6bxc1wjONxf5+t52u5uGdEXt6WMo0lSgS+pwiqsvZUZ6+jw
C6z1dFyrWU5RExxFxWc6/I5si17lscjnMxHrkhFun2PPzChKboW7hJFPNsbG
VcirBGcht8wtNfxMbo0shEp67HPVPpl5XVWPfGG3zwuzzlFYr0SbFZfY7lwL
kfwHhYiZ+ysRfV7iX1yPLMo1ME2X/v1GC4aafjzaDb8=
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1: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
4Xe6RwuEllttgrJu/B+NnLNs
                  "], "Children" -> CompressedData["
1:eJwdiWVUFgYAAO+50s3NWOrC2R0Y2IGNLdgNSligHyhid3d3d3d3dyeuO3Q9
3WacuB9379277JHxYdFpgIS0qQqLSAoJBCKSw9OlRmhcYlRMVCAoOPb5T0kl
zf+8wIu8RCQdeZkJvkZ6XiEtmo5XGe9Tx/nEsb7OGzShKRnISHZykIkxZmW0
mXmTt3ibx47yHUb6HiN85Lv853D/NQv/OMyHvs8HfMgDP+JvPyYbQ/3LIf7p
YHOSi6pUIzd5KEBB/jAv+Rjk7w40PwP8zf7+aiGCKU1hivCLRQmiOMXo5337
WoJk79nHkiT5s6X4yd6WoSwh9LIc5alCoj9agUpUpiIJ/mDA7+3pd/bwW+P9
xji/trvVqUFNavGVjalNKF/azS/s6ufW4TPr8qn1qE8DGtLFT2zEXTubYqxh
xHjHcG4bbTOac8sOtCDKm7ahJa24YSev25prdvSqbWlHpO2J8IodvGwEl2xv
J6I4w1miiaE/A4ilM8n0pQtduWg7u9HWC3bnvG2MI54e9CSBRAK09pytPGtL
z9jCXjT3tL05ZRIn7cMJm3ncph6zH0dt4kAGsZFNDGYI45nAEYcynBEcdhiH
DHckozjoOA4Y5n5Hs88xjKWxe23kHhu624msYjWTmMwuGziF+k6lnjudxnRm
sMOZrKCus6jjbELd7hzmMo/5LGAhi9hmbbdayy0uZrM1XUINl7KMTVZ3OdXc
aFVXEuIGq7iGtayjsuut5Dorutb1bKCCayzvZrawk12stpxbKes2trPKHay0
jCss7XJ3s4e9LDPYfeznGMdZ6gGWeJDFlvIQhznCURZZ0oWWcIHFPUGQ8z3N
SYo5z1PMtahzLOI5znOZK8z2Ahcp7CwLeYmCzrSAV8nvDFOY7jWuk89p3uAm
t5jqbaaY18neYZJ5nGhunwFyVr6A
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 15, 1, 6, 13, 1, 5, 5, 1, 10,
                    18, 11, 16, 6, 11, 12, 11, 2, 3, 3, 2, 1, 16, 10, 11, 13, 
                   11, 1, 1, 13, 16, 15, 2, 7, 7, 13, 1, 2, 4, 6, 16, 18, 15, 
                   18, 6, 13, 13, 9, 2, 5, 15, 4, 5, 10, 9, 10, 1, 1, 15, 9, 
                   15, 12, 7, 7, 10, 2, 18, 2, 9, 9, 7, 2, 13, 5, 3, 10, 18, 
                   15, 1, 18, 18, 10, 16, 14, 18, 10, 18, 4, 7, 18, 1, 18, 4, 
                   2, 10, 14, 4, 1, 18, 6, 1, 4, 13, 3, 18, 2, 17, 1, 3, 16, 
                   5, 13, 15, 17, 18, 18, 6, 10, 10, 1, 1, 17, 9, 11, 10, 16, 
                   17, 17, 13, 1, 4, 13, 12, 11, 1, 2, 13, 18, 6, 11, 18, 2, 
                   6, 6, 3, 2, 7, 17, 18, 14, 10, 1, 1, 13, 7, 14, 1, 13, 13, 
                   14, 1, 16, 9, 18, 2, 13, 7, 16, 4, 4, 15, 12, 10, 1, 3, 13,
                    7, 16, 14, 17, 10, 13, 4, 7, 14, 17, 18, 9, 16, 10, 9, 3, 
                   3, 12, 3, 18, 17, 13, 13, 3, 14, 11, 1, 9, 6, 7, 13, 12, 4,
                    18, 15, 10, 15, 9, 18, 15, 3, 7, 11}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJxFUEsKQjEMbD5t9RgewY17l271BE946krhKYj39SAm0wEJDc00M5l0c34c
L1pKea4iHaf3flmmz2kdxeH+mq/zst3dJKpvHClWvGjkitxQj7uXHpFZAu+B
Zd3itUYeHEFHsiSiArHAkm3QUxzFi0MlQ4AKZlVOyR6ntgJt1BDcO1UEdYXL
7FC8DS3hTEOPQi2RBk9KteQa2UOng2lw0Oh+sCvdOjT+exv2zL9zdCo4zv0q
5ig8Of12qDimKRSEvypwJ+g09DZmp18nItx27DR+KRk/O1UNxA==
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1: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
BemF2Mg=
                  "], "Children" -> CompressedData["
1:eJwdiWN0FgoAQO/pqZ6tuOxaWMbyclv2VkPa6ttqLdu2bdu2bWPPtt9t7/24
95x7blBUQnhMOiAxfZrCI5NDA4HIlIgMaREWnxQdGx0IDon776emke5/nuN5
XuAd3uVFXkKnm54MvM00//VlXmOqrzDFV5nsP07ydd7gTd7ibyf6lxP80/H+
4Tjf4322sJUP+JAJjPUjPmYMY8xIJn63L5nJQhi1yUo2cpOHILKTk9H+5ih/
NQe/ONJcjPBnh5uXfFRjmPkZakEK8ZMF+NEhFqYIP1ie7x1sUYL5zmIUpwTf
OshvHGhJQvjaUpSmDF85wC/t7xeWpRz9/Ny+fmYFKtLHSqRYmVA+tbefWIWq
JJtqL59anSfWoCY9rUWSj020DgFb0oq61OOR9WlAQx7aw0aE05wWPDCCxnT3
vgk2oSn3jLcZ3bxrV+/Yxdt2tjVt6E0n2xLnLbty03a0J5IbxhpFBzoSTSxx
xBDjdaO9Zkev2onOdPCKUV62C5eMtBvxJNCdi7b3gj1Ipp0BEjlvW8+ZRE/a
eNZenLG1p23lKVPoQ0tP2sJ+9GcAAzlhcwfRzME09bhNHMJQhjGcYzb2qCM4
4igOO5JDRjiacA/ayLE09IDj2O949tnAiUxiMvWdx3ymMJVpTGevc9ljPWcw
k1nUdQ51nE1tdxvmLmu505ouYCHLWM4Oa7iIxWy3ukuo5lKqus0qbjXUFaxk
FZVdx3pWs4YtVnItFd1sBTdQ3k1uZKPl3OAmNlPW9ZZxG9t5xGN2sJMznGWd
pd3Fbvawl7WWch/7Ocgh1niA1Ya4ypIepoSnKe4RjnKMYp4k2OMU9QRFXGlh
T1HIFRZ0uQU8x3lukd8LXGSZ+VzqJZaY18Ve5gpXuUYeb3CTRV5nobldYC7n
m9Pb3OEuOZxndu8R5H2yOdcHPCSrc8zibJ8wy1SektmZZnKGGX0GUSTSdg==

                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{13, 18, 1, 18, 6, 10, 13, 18, 
                   13, 16, 3, 11, 9, 15, 15, 16, 10, 18, 14, 9, 1, 16, 7, 18, 
                   7, 10, 10, 10, 13, 12, 6, 13, 11, 10, 6, 10, 18, 11, 13, 
                   10, 1, 13, 16, 18, 2, 7, 15, 13, 16, 15, 18, 1, 13, 18, 13,
                    4, 1, 18, 15, 6, 18, 15, 10, 11, 13, 18, 5, 3, 9, 4, 9, 4,
                    12, 9, 13, 3, 2, 10, 6, 3, 2, 4, 12, 16, 13, 11, 17, 18, 
                   1, 2, 9, 16, 2, 7, 10, 1, 18, 7, 18, 4, 15, 11, 16, 3, 9, 
                   15, 1, 15, 5, 14, 1, 15, 13, 1, 4, 18, 1, 13, 1, 2, 12, 9, 
                   11, 4, 15, 10, 9, 18, 10, 10, 10, 16, 18, 17, 3, 7, 18, 10,
                    9, 5, 1, 10, 2, 6, 6, 18, 14, 4, 13, 16, 7, 1, 9, 15, 13, 
                   14, 7, 3, 6, 14, 14, 14, 3, 18, 9, 6, 10, 2, 6, 9, 13, 7, 
                   14, 18, 12, 5, 18, 18, 13, 15, 15, 1, 4, 15, 1, 11, 14, 13,
                    16, 1, 18, 10, 7, 6, 4, 8, 7, 5, 2, 18, 10, 12, 16, 1, 16,
                    1, 11, 16, 7, 1, 1, 16, 2, 17, 18, 4, 17, 9, 9, 16, 9, 15,
                    15, 10, 12, 11, 3, 3, 17}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJxNUEsOwkAIhaHD6DE8ghv3Lt3WE9TEz0qTamI8rxcRHrQ2k6F9A+89YHN6
9JdCRM+VhX5478dx+BzXBg731/l6Hre7Gxv62u2IqVIjpWK34qhhMVwses7f
xL6MKMbxW+zVaxjIWQqk4Lsa23sHFUW1JlPwxzgVXHdrmdX0Unh7BwzUoCbp
F6rhUFMlHGKO8BJ04l4RFfySmVBk9NbAEWwipu1yPsn+Ju+Cmuispm74Tbih
M8UUbbGr/7y60KszT+ZNlKxq6KBhK1Fbcnuhren/AyKNDbM=
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1: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

                  "], "Children" -> CompressedData["
1:eJwdk1VQFggABne8Uq/DSwu7FQM7sLEFu0EJC/QHRezu7u7u7u7u7ri+0+uO
lbuH/WZ2vucNikoIj0kDJKZNnfDI5NBAIDIlIl2qhMUnRcdGB4JD4v77n6SS
5n9e4EVeYgc7eZkxpudVXmG0aRllOkaqI3yN1/nXTbzBm+QhL2/xNh/zCe/w
Lh8y3PcY5j9+QAaG+j5D/NvB/uUg//Qj/nCgGclEZrLwuwP8zf5mpZ/ZyE4Q
ff3VPv5iDn42Jz/Z2x/NRW5S/MFe5iM/i1lCAQoygIEUojDfm2wRgvnOhhSl
GGUoyzOLU4IQntrTkpTiW3tYmiS/MdGvDViO7panAl/ZzS9NsCKVCCXeL6zC
51bmM7talWpUpwZ1qcen1uSJYTy2i7XobG06+cg6PLSjD4yzPrE2IMb7RhtO
BI1oTB/60oSmRBJFMzrYhvY2pwX3jLIlrbhrpHdszW3becu2tKOtN21je1ob
QywdiOaGrbxuS6/Zwjg60onO9KAnXWjuVePpSjOv2NTLJnDJbly0OxcMcN5E
zpnEWZuYTGN708hepHDGCE8b7ikbetJ+nLA/x23gMet71EHMZg6DGcJQhjGG
sRxxOIet5wjqOpI6HnIUBx3NAWs7jvHMYCYTmMh0ajmJMKcwlcnUdL813Oc0
9lrdPVZzt1Xd5Sx2WsUdVnYu89huqNus5HwquoCFbLWCW1zEZsu7yaVsdBXL
KOdyVrDBsq53Jess42rWsJbSrqOUay3pejawxhA3UsLVFnczW9jKNrZTzFUW
daXBrrCIu9jNWc6x3D3sZR/LLOx+DnCSUyz1IEcp5CEKusTDHKGAi83vMfK5
yOMs9AQLzOt8TzPPPM71DHPM7XkupHaTy9leZJb3meklZniZK1zlGjm9zg2m
m8NpZvcmt7jNHaaazbsEOcV7TDark8ziRB/wkMxO8BHjfcw4MznWjD4HlRvQ
dw==
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 15, 12, 17, 16, 15, 13, 13, 
                   6, 13, 18, 11, 7, 2, 4, 5, 1, 9, 13, 6, 7, 3, 10, 9, 10, 1,
                    16, 16, 10, 5, 13, 14, 15, 13, 18, 7, 15, 18, 2, 1, 7, 2, 
                   12, 3, 7, 9, 6, 10, 13, 17, 14, 18, 1, 4, 15, 11, 3, 14, 1,
                    14, 13, 2, 9, 13, 18, 10, 13, 7, 7, 13, 15, 12, 5, 10, 13,
                    11, 14, 10, 18, 12, 2, 11, 3, 2, 6, 18, 5, 14, 15, 16, 17,
                    3, 11, 18, 1, 10, 2, 1, 12, 16, 16, 15, 15, 7, 16, 18, 16,
                    3, 18, 1, 4, 7, 3, 17, 9, 3, 18, 18, 5, 6, 1, 11, 2, 1, 
                   12, 1, 11, 6, 14, 18, 11, 13, 12, 6, 2, 13, 1, 4, 12, 1, 
                   10, 14, 15, 5, 5, 18, 10, 18, 17, 18, 1, 7, 10, 18, 10, 4, 
                   18, 2, 7, 1, 9, 13, 18, 14, 1, 15, 2, 4, 7, 3, 7, 4, 4, 7, 
                   2, 6, 16, 16, 1, 18, 1, 1, 16, 18, 6, 14, 8, 4, 10, 12, 13,
                    7, 3, 13, 18, 13, 13, 6, 9, 6, 7, 11, 16, 3, 10, 13, 18, 
                   16, 16, 1, 11, 9, 16, 16, 16, 1, 17, 11, 4, 18, 18, 10, 17,
                    16, 17, 15, 16, 15}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJxNUMENwjAMdJw4gTEYgQ9/nnzLBEUq8AKpICHGZKPaZzdCVRP7cj6fvbs8
hysT0WujxzB+jvM8fs9bTU6P93Sb5v3hnjT76Z9IqFEh1ps187wir4EyZf0s
LnhNYKxIw8mh0oAXPQ3PuDMYFplSCUT+dAq6JY0r3jwSsK3GXTE65lBqwXZP
5oo1r1CrQJzlyqZZw9M6E6OCoeecDLb0SdyH7aWE14pq6ftJmKygmoPT0Iej
U+rTp9iezyJwLNGndYUWm5HY0QInFw1v
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1: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

                  "], "Children" -> CompressedData["
1:eJwdiWV0FgQAAO8hIKEoIqAoKgKC9IjRMXo0G90bLKgNvg3G6O7u7u7u7oZZ
gNJldwt6DH/cvXfv8kTGh0WnARIypCosIikkEIhIDs+YGqFxiVExUYGg4Njn
PyWVNP/zAmlJxz72k54X6UwXMpCRKlQlE5nJwivoLP/zJf71ZZ4601fJSnkq
8BrZeId3eZ3svMkMnzjdf8zB3+bkDab5l1P901y8xdv8YW5+d4q/Odn3yMOv
TvJ98vKLBfnZfOTnA35yoj86wR8swPeO90MKUZgiFKM431mUbx3nN461BEF8
7Ri/siTBjLYUoyxNGb50pI8d4SPLUo7hPnSYFRlqJSrzwCHed7D3HGQ1QmhL
O6pTgyY0pSa1uGtjalOHRgz0jgO8bV1uGUo96tOA/jYk2Zv28wuT/Ny+3rCP
YSTajOaEk+B1A7agJW3o7TV7+ZmtaE28nxrnJ/b0Y3vYng50pLsf2YkUuxlB
JFft6hVjjSKaBSwkhlgmMJGudGMUo+lODy47nJ7EMYjBxNOLZPrTmwAJxHjJ
aC8aZSJdvGAf+pLEeTvbj0jPGeFZOzmAjp5xIKft4BDaO5R2nrKtJx3GCds4
gpEct7XHbOVRW3rEMYylhYcdxyHHc9DmTmIy82jmFKZywHCnMZ3ZhLnfps5g
Jvts4iwau9dG7nEOu53LLhu60/nssIGLWMxq1rCE+q6inksJdRnLWUFdt7uS
bdZxq7XdYi03u5YtbGUdNV1PDTdQ3U1uZKOb2OBm1hviNrazk12ss5o7qOpa
q7jGyu6mknuo6F4quNryrvIAhzjMSg+ywnIeoazLDXaZRznGcZZaxhOcZIml
PcVpFnuGc5znLKVcZEkvcJGFpnCJyywwyPleYZ5XmWsJ51jc2RbzGanIrIk=

                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{18, 6, 2, 13, 10, 1, 6, 13, 3, 
                   13, 16, 2, 12, 13, 5, 8, 1, 5, 4, 3, 7, 1, 11, 18, 10, 12, 
                   9, 14, 13, 13, 2, 9, 9, 1, 9, 16, 16, 11, 11, 10, 16, 3, 
                   16, 1, 18, 12, 12, 13, 18, 9, 7, 18, 12, 7, 2, 13, 13, 18, 
                   15, 2, 11, 1, 10, 13, 4, 4, 4, 18, 15, 15, 1, 4, 10, 14, 
                   15, 1, 7, 14, 9, 10, 11, 11, 18, 5, 14, 18, 1, 18, 16, 7, 
                   18, 17, 16, 3, 17, 13, 15, 15, 8, 18, 10, 3, 3, 15, 13, 15,
                    1, 1, 11, 1, 18, 14, 13, 13, 10, 10, 15, 1, 6, 17, 4, 13, 
                   7, 14, 5, 18, 14, 7, 1, 4, 10, 16, 2, 16, 1, 12, 2, 6, 1, 
                   10, 13, 3, 14, 18, 3, 16, 16, 13, 6, 11, 1, 2, 14, 10, 10, 
                   1, 3, 7, 2, 7, 9, 7, 13, 17, 5, 16, 1, 3, 2, 4, 10, 4, 9, 
                   16, 9, 16, 9, 18, 9, 15, 5, 7, 16, 13, 7, 10, 13, 4, 15, 7,
                    18, 18, 7, 10, 13, 17, 13, 4, 1, 17, 9, 18, 15, 1, 4, 12, 
                   2, 17, 3, 5}], "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJxNUEEOwjAMa9I2gWfwBC7cOXIdLxjSgBNIAwnxUr5D4mQIVW1Xx7GdbU73
4cyllMfKjmF87ed5fB/X9jjcntNlmre7K9nrY5sKl16arWpfYovtW22TnR21
jsW/ekVPB4Ozv6KHUW3AyLYanwzxl9+OOVOhHYizvSpAF1eGduiK3YLTdQV+
hC5B8g7PBr+OdJrOkcZ9KpIzlMIrslQoBiOSMnCBMyOPJjtwRRZBX+SvyB8T
hqP8Kbf8SwRtyfkr+jqUl1kbNDi1NFNTzu7sL7SRDV0=
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1: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
1w==
                  "], "Children" -> CompressedData["
1:eJwdiWV0FgQAAO8hKCUGpSgKFh0jRsfo0Wx0b7CgNvg2GKO7u7u7u7u7YXaD
hBK2gp6TH3fv3bu8kfFh0WmAhPSpCotICgkEIpLDM6RGaFxiVExUICg49v+f
kkqa57xAWtKxmz28yEuMZwLpycAwhpORTBSkEJmZ4utk5WWy8AqvopP910m+
xkT/cYLZyM675CEHOXnmOzx1vG/wJn+bi798iz8d59vk5g/H+rtj/M3R/mpe
PuBDfvE93meUPzvSJ47wI4abj2HmZ6iPLcAjh/jQwRamCEUpRilK85ODLE4Q
P1qCBw70viW55wCDKUNXulGW/pajPHftZwUq0oGOVKIy1ahOFZL9wRDuWJXb
9vV7k6xBH+tRn5rU4jt7+621qUOiodTlGxP82oANaEgTwvjKRnxpY76wl5/b
08+M91PDaUqczWhOC3rYnu62pJutaM0ntqEdXf3YtqTYxVvGetMYbxjtdSOI
pBPXjLIznb1qFFeM5rIxXDKWLnTyopF2pwcXTCaOeAIkcN4Ie9LRXnTwnO1N
pDdnbecZ29qHNibR2tP25ZSt7Ed/BtDSIbRwIM0dxGBO2swTNvW4QzlmuCMY
yVFHccQwD9vE0YzhkGM5aGPH0cgDNnS/E5nEZPbZwL1OYSvbmMo09jidGcxk
t/WdxWw2Us85zGUJS9llXecxnwUsZKehLmIxO6zjdmu7zVouYzlrWMsKarrV
Gm5xJZtdxSZXs9HqrmM9G6zmekPcQFXXWcW1bmIzlV3jFlZbye3sYJU7WWlF
V1jBXZR3ueVc5l72sZ+llnWJZTzAQQ5xmBOcZLFHWORxFnqUBR5jvsHOs7Sn
OM11bjDXUp7hLOc4zxxLeoGLzLaEl7jMNYKcZXGvUMyrFHWmRZxhYW9SyOne
YpoFTaGAU83vf1zNuIM=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{18, 6, 1, 13, 18, 1, 2, 10, 12, 
                   18, 15, 18, 9, 10, 10, 4, 15, 13, 2, 9, 2, 13, 4, 13, 2, 1,
                    3, 13, 16, 9, 10, 1, 3, 1, 9, 7, 2, 16, 18, 13, 4, 1, 3, 
                   1, 16, 11, 14, 16, 3, 10, 1, 4, 10, 4, 1, 1, 18, 9, 2, 4, 
                   9, 7, 17, 16, 9, 7, 1, 17, 13, 9, 7, 13, 5, 15, 16, 7, 12, 
                   18, 10, 13, 16, 18, 5, 5, 5, 7, 1, 13, 13, 7, 6, 16, 13, 
                   16, 16, 15, 12, 18, 17, 18, 16, 7, 15, 17, 2, 4, 4, 10, 13,
                    7, 3, 18, 1, 1, 18, 1, 13, 1, 5, 4, 5, 10, 1, 16, 18, 4, 
                   5, 1, 3, 11, 7, 4, 6, 12, 1, 11, 2, 7, 12, 18, 18, 10, 13, 
                   7, 13, 11, 10, 3, 6, 2, 13, 14, 10, 9, 13, 10, 1, 3, 10, 9,
                    15, 14, 4, 18, 9, 9, 18, 15, 4, 4, 6, 16, 7, 1, 2, 16, 4, 
                   11, 1, 7, 18, 6, 13, 14, 10, 11, 2, 9, 18, 17, 18, 13, 10, 
                   11, 4, 5, 11, 1, 11, 15, 16, 18, 15, 3, 3, 9, 10, 15, 6, 8,
                    3, 13, 3, 17, 11, 3}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJxNUUkOwjAMtJPYhmfwBC7cOXItLyhSgRNIBQnxXj6CMzEpitx4vIwn7uZ0
H86JiB4r/wzjaz/P4/u4dnC4PafLNG93V3b0cRNKxG7FD/sRUreMaHafPa7w
akTJkC1uAmuoxtmt+gmo3oKIoU9jhqLGAhtYGfM0OltdAc7I5c6rfkvUGriq
4gKdCTUMhRIcCyNHl6CvVjA4CtQVdDHYGXNTbMBwUkyV/oYFM2pLvFr6TA4t
FtuTP2XW38vQ0xS1jf7+Q4I+jl0W+BlZC50Sm1H6AhXtDbY=
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1: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
Fs29
                  "], "Children" -> CompressedData["
1:eJwdiWVUFgYAAO85t+k6XFvYrRjYgY0t2A1KWKAfKGJ3d3d3d3d3dyvr7t5O
th937927oKiE8Jh0QGKGNIVHJocGApEpERnTIiw+KTo2OhAcEvffT00j3f88
R3qepyOdeIHxNqEpL5KBjLxEXeqhL/Mu7/EKr/Kvr/EG4/zH1/nbsb7JW/zl
2/zpGP8wE7/7Dr852l8d5ft8wId8RC1qk5ks5CQXvzjSrIwwG9n52eEGMcwc
DPUnh5ibPIRSlbzkozgl+NH8FKYIBSjIDw62EIP83oEWpRjfOcBg+vut/fzG
vn5tScqS4leWIoQ+fmlpvrAMn5tsOXpbngp8ZkU+tRKf2MvKJPmxVUg10WpU
56kBn1iDmvT0sT18ZIIPjTeM7j6wDvft5j27Wp8G3LUhd+xiIxoTTgS37ewt
47xprM1oTiRRtKAlN4yxFa25brTXbENb2nHVTl6xo+2JsgORXraDl2zvRdsZ
TQwXvEIsbZ3KNOLoTBe6ct4pdKM7oxnDOdsYTwI96MkgBnPWAGdsbSJJnLYX
KfSlN61Mpg+nbOlJW9iP5g6kmf1p6gkHcNwmHjPCIYQ7lGEctbFHHM4IGnnY
hh5yJAcdxQEbuN+xTKa+4xjPPiew14nssZ6TqOtu67jLMHda2+nMYA5z2WEt
tzuTWcxmmzXdag23WN15zGez1VzAQhaxmJOcYglV3cBGlrKM5YS6ybVsdAUb
XMkqqriayq6hkuut6DoquJ7yrrOcm9jMDnay1i1spaxrLOM2trPa0q4yxJWW
che7WeEe9rKP5ZZ0mfs5zgkOcJCllvAQxV3iYY4Q7GKPcoxiLrKoCy3iAgs7
30KepqBnOMs8z3GJAp7nAnPN7xwvMtt8Xiavs8zjVa5xnRvMNJWb5PY2d7hF
LmeY07vc4yE5nG6Q93nANLM71Ww+IqtTfMxknzDJp0w0ixPM7DNey9B3
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{18, 13, 1, 1, 15, 1, 10, 8, 13, 
                   18, 3, 13, 2, 10, 3, 5, 7, 18, 18, 9, 2, 6, 10, 14, 13, 9, 
                   14, 14, 18, 1, 6, 16, 11, 6, 13, 1, 16, 3, 17, 11, 15, 2, 
                   6, 13, 6, 9, 13, 13, 11, 12, 13, 18, 9, 15, 18, 9, 10, 18, 
                   4, 12, 1, 7, 9, 7, 3, 13, 1, 13, 13, 12, 18, 18, 1, 13, 2, 
                   3, 18, 17, 7, 16, 17, 6, 2, 12, 10, 18, 7, 10, 5, 15, 13, 
                   15, 7, 14, 10, 18, 7, 4, 12, 10, 11, 16, 6, 4, 3, 18, 16, 
                   2, 3, 16, 1, 15, 15, 15, 3, 10, 13, 12, 5, 11, 11, 12, 2, 
                   1, 1, 17, 4, 7, 15, 1, 10, 7, 4, 18, 10, 13, 10, 2, 14, 13,
                    13, 4, 18, 17, 13, 10, 9, 13, 16, 16, 1, 1, 10, 11, 18, 1,
                    2, 13, 6, 5, 1, 16, 2, 15, 3, 5, 5, 7, 12, 7, 7, 2, 17, 
                   15, 7, 9, 10, 2, 5, 7, 10, 4, 7, 15, 9, 4, 18, 7, 18, 16, 
                   14, 9, 18, 12, 18, 15, 1, 1, 10, 12, 18, 18, 9, 12, 10, 18,
                    5, 4, 15, 13, 7, 9, 10, 13, 6, 8, 12, 15, 17, 7, 4, 11, 
                   15, 5, 6, 9, 3, 3}], "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJxFUEkOAjEMa9MkhWfwBC7cOXKFF4A0wAmkAQnxTj6E63RmVLl1ltZxN5fn
8SoppdcK2/H82Y/j+XtaIzg83sNtGLe7e0b0AyxpyqngFDAHd+YqsxW8sFqx
BFAsYdRqxr7K2y1TcEa2sYaMKM9LWQ9eoRSRUdGpGDeUvcpIOEGhdmGf8Wwd
1udcXsic3VhbnHlXjKmMukLHwk7ruXATeSeWXKFDnWesxKQ6+Y13HTy0vd8W
+i1AvK2E9V8IPv2d9/9UemnsDzzVDVw=
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1: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
9MJP/K3WzsP/ATjjkZA=
                  "], "Children" -> CompressedData["
1:eJwdiWV0FgQAAO8hKihgoKCEioIgPWJ0jB7NRvcGC2qDb4Mxuru7u7u7u2so
CgrSBthNnNMfd+/du1yR8WHRaYCEdKkKi0gKCQQiksPTp0ZoXGJUTFQgKDj2
v5+SSpr/eYG0vMgmNvMSLzOeCaQjPR/yEa/wKjl5D51qBjKSidfITg6e+zpv
8CbPnGJm3uKp2XjiZN8mC1mZ5D++yztM9G8n+Jfj/dNx/uFYf3eMv/k+v5qL
DxjtL47yZ0eamzyE05iPyUsNapKPTyhBSfJTgJ8sTkEK8aPFKEwRghjhDxbl
scN95DC/d6jfOcRvHWwwgyxNGb6xFA8daFnKUZ4KPHCA9+1vRSpxzypUpp8h
9PWufbxjsretytdWozq9vWWSN61FI8IIpTZfWYeG9LIuPa1HovVpwJcmeMOA
1+3hF3b3c+NtQlOGMZxrxtmM5nxmC9rRnpa04lNbc9W2tKGbKXb1il2MIJLL
DqYDHQnQ2Sii6Uo3LhnDRTsZSycu2JkuxHreGM8Z7VnjiCfKM3b0tN05ZQ9O
2sEEEulJL06YxHEjPWaEvUmmD+3tzwCO2pd+tPOIbT1sGwfS2kG08pAtPegQ
htLCAzZ3vyMYQzNHMorRNHWfTdxrY/c4lt2OY5fh7jTMiUxiMlPYYSOnMo1V
rGa701nGcmYwk1nMZikNncNcltDAecxnEfVdQD0XUtdt1nGrtV1MqFus5WZr
uskabrS6K6jmBley3qquYS3rrOI6QlzrBtZT2TVWcrUbWWVFt1DBS1xmpVvZ
xnZ2sJMznGWF5d3FbvawlwMcZLn7WGY5l7qfJZb1EGU8TWkXe5gjHOUYpVxk
sMc5wUJPssBTzLek8yzhXIs7x3PM9iKzPM8FijnTIGdY1CsUcbqFTaGQ0yzo
v+8ssIc=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{18, 10, 5, 14, 13, 9, 10, 1, 18,
                    4, 14, 15, 16, 10, 5, 11, 6, 13, 16, 12, 1, 14, 13, 13, 
                   10, 2, 1, 18, 7, 15, 10, 14, 18, 18, 10, 1, 4, 11, 7, 7, 4,
                    10, 16, 12, 13, 10, 6, 2, 13, 3, 18, 18, 18, 13, 13, 10, 
                   9, 16, 18, 6, 13, 10, 3, 11, 9, 18, 13, 10, 3, 15, 13, 16, 
                   1, 16, 17, 18, 2, 11, 2, 16, 7, 18, 10, 13, 13, 18, 2, 15, 
                   15, 4, 7, 10, 1, 10, 13, 12, 10, 15, 7, 4, 5, 7, 8, 4, 2, 
                   4, 18, 3, 18, 15, 1, 2, 10, 13, 4, 10, 10, 9, 5, 18, 15, 3,
                    6, 2, 11, 6, 11, 15, 7, 9, 12, 4, 7, 7, 2, 7, 13, 1, 1, 
                   13, 7, 1, 1, 13, 9, 14, 1, 11, 18, 18, 10, 15, 2, 3, 12, 
                   13, 18, 9, 13, 17, 14, 14, 15, 13, 14, 5, 3, 5, 6, 12, 7, 
                   7, 13, 16, 12, 1, 16, 11, 14, 3, 1, 7, 9, 17, 1, 16, 9, 3, 
                   12, 17, 18, 2, 11, 1, 15, 9, 10, 18, 15, 10, 7, 1, 15, 9, 
                   18, 15, 4, 4, 11, 3, 5, 15}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJw9UEsOAjEILZ8WPYZHcOPepdvxBGMy6kqT0cR4Vi8z9MEY0hZ49PFgd3kO
Vy6lvDZ+DePnOM/j97z14PR4T7dp3h/u5NHPTyvsp7pxkaJ+dyNkqBhQ8Vcy
Zx6bG8Ea/gpicV/9ZfgG66wdF/gV3KtPGSv6KJgrMMUbmIExFFQoVOChRqHB
UFFhoa6lVkKd/Ss0787G2U9zwoZ6Axa5tVfNnTDwvgkFn2St5PSRE3Qj8DNY
W+414vjdUgOlCk4tMZGCh7OO81906XwLUqYNpQ==
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1: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
                  "], "Children" -> CompressedData["
1:eJwdk1VUFgYARu8xZq3czM1tOrvFwA5sbMFuUMIC/UERW+zu7u7u7u6udanr
7u2O+XC/c+75nm++yPiw6DRAQsbUCYtICgkEIpLDM6VKaFxiVExUICg49v//
cSppnpOWdKRnJrN4gQwkM5iMzLAABclEZrLwIq/xOi/xMq/wKjrdf53mP2bl
b6f6l1PMRnby8S45yMlbvE0uJvsGk/zT3PzhRH/3TfIwwd8c76++wy/m5WfH
+ZNj/dEx5me0P5hiIQpTjOJ8bxG+c5RFGem3jrAEJfnGBEpRmspUoQxBfO1w
v3KYZSnHl5bnmZV4agWCGWpFhvjEwX5hslWpRgi1+dzq1KQWn1mDTx3kJyb5
sQOtQ10a0JCPHGA9Ev3Q+nxggqE04n3jaUwT3jNgU5rRjQia04IudKUl/X1s
P8MIpxWtaUs7HhnvQ9vwwDjb09f7duKeHbhrR+7Yx9t25pa9vWkvb9jTSGLt
TozXjbYHUUQTZS96GEMs1+zJVbt7xUh704fLRnjJvsTRzYt2tR/9CdDFC3b2
vJ1MpKPnHMBAkhhEB8/a3jO2cwhDGcd4hjGc07Z1BCM5ZRtH0dqTjuaEKRy3
lWMI95hjOWqYR5zAJCYzkZYetoVTmMohZzCN5h60mQeczn6bus8mzmYOK1jJ
XOaxlGXsdT4LWcQeF7Dbxi5mCbts5E5D3WFDt9vA5dR3m/VcxWoOcog1rGUX
dd3qOjazhfVsYCN13GJtN7uJTYa40Vpupabb2M4OarjBnay3uuus5m6quoe9
7KOKB6jsfiq51oquMdjDHOESlznKMc5xntUeZ5UVPEF5T1LOU5zmDGVdaZAr
PMtyy7jMCyz1Ikss7WJLuciSXuEq17jOfR5wg5sstIS3uM0C73GH4t6lmPMt
6jyLONfCzvEhj1Irm20hZ1nQmRbwP2W/wH8=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 13, 15, 11, 14, 1, 1, 18, 11,
                    5, 2, 10, 18, 13, 11, 5, 8, 10, 1, 6, 18, 2, 9, 4, 3, 9, 
                   9, 17, 10, 10, 7, 13, 18, 5, 17, 14, 1, 14, 6, 18, 14, 10, 
                   4, 13, 13, 10, 9, 2, 18, 7, 2, 12, 9, 2, 4, 10, 3, 17, 11, 
                   7, 11, 16, 6, 13, 9, 12, 6, 7, 12, 1, 4, 5, 2, 8, 3, 18, 
                   13, 4, 10, 4, 10, 7, 9, 1, 15, 18, 1, 9, 2, 16, 13, 3, 4, 
                   9, 7, 13, 4, 18, 18, 15, 16, 7, 17, 15, 7, 5, 3, 16, 9, 15,
                    3, 6, 11, 6, 13, 13, 12, 1, 1, 2, 3, 11, 1, 1, 5, 13, 12, 
                   9, 15, 11, 5, 1, 18, 7, 4, 10, 1, 4, 10, 1, 18, 10, 16, 14,
                    7, 15, 7, 9, 10, 13, 7, 2, 7, 13, 13, 18, 1, 3, 18, 14, 1,
                    16, 10, 18, 1, 15, 6, 2, 1, 9, 13, 18, 16, 13, 13, 12, 17,
                    18, 10, 13, 11, 9, 14, 7, 17, 17, 7, 1, 11, 3, 7, 15, 13, 
                   1, 16, 16, 16, 3, 15, 13, 7, 18, 4, 2, 16, 10, 9, 12, 15, 
                   12, 18, 11, 6, 3, 17, 15, 15, 3, 18, 18}], "RootIndex" -> 
                 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJxNUMENwjAMTBzHhjEYgQ9/nnzLBEUq8AKpICEWZR6csxtVVR2fc3exvbs8
hyullF4bC8P4Oc7z+D1vDZwe7+k2zfvDPRv62V8Tp2yx2Cd2NiyWq1WL5ZzI
MjasYGawvUZQCLRsmVqlRde3M8PNldI5gjvtbk1PwBWOCkyrV5t/gS+BI6Hl
7qcrfmM0P+9FYgYKZg7N4kR4v8QcFC8q9Bm9uJNiNwWqjM0wvH1O9yuxPYJu
ua/oTXD6bgROjnwWidkXL5+E0XcFl9MfzsENrA==
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1: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
                  "], "Children" -> CompressedData["
1:eJwdk1V0FgQARu8BlRQBFURFJZVmxOgYPZqN7g0W1Ab/BmN0d3d3d3d3N1ig
ggVK2AoK1+nD/c6553u+uSLjw6JTAQlpUyYsIikkEIhIDk+XIqFxiVExUYGg
4Nj//lsppPqf1LzEyzSlGa+QhprUIi3p0Nd4YXoykJHnzvVV5viPs/3bTDxz
lpnJQlZepyohvMGbBFOGbGSnEDN9ixw8dYZv8w65mO5fvssHTDMn7/GnU32f
Kf7hZH93krnJQ17y8REF+M2J5meCv/ohvzjenx3nTxbkiWMtTBEeW5TSjLEY
xQlitKUYZQlK8siRPnSEPzrcHxxmWYb6wEqUozz3rcD3DrEig/3OQVZmoN9a
hW8cYDX6W50afG0/75nsXftamzp8ZThfGkojGlOXetQnyQb08Qt7e8eG3DbR
JiT4uWF8ZsBP7eUn9rQ5LTjFaVrSikg60Zo2fGy8bWnHLTtw0zhv2J7r9vCa
HblqBFfs7mU7E0U0l+xmDLHsYz9d6MpeutqNLnanBxeN9YIxxhFPT6JNIJHz
9uKcAc4aZW/6MJwRnDGJZPrRl86etpOnjLQ/AzhphCccyCAGc9yODmEox+zg
UYdxxPaOZBQzmcVhR3PIdo5hLOMYz1SmMYG2HrSNE5nEZFp7wFZOoaX7beE+
mzudZs6gqXsNdzZzmMs89hjmbps4nwWsYCW7bOxCFrHTRi6moUto4FLqu8Nl
LKee263rKkLd5lZWs4a11HEDtd3qOtZTyy3WdCM13ER1N1PNzW5hkyFuo6rb
2cFOqriHym50F7up5AYrut4KrrO8ay3nGg9wkEMcpqyrPcYRjrLKMq402OOc
4CSlXWEpl1vSM5xlmSU8x/mUToK8QHGvU8yLFPUSl1nqFZZ4jasUcbGFXWQh
F3qDBd5kvgWdZwH/Bb4BtoQ=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{13, 13, 15, 13, 6, 2, 14, 6, 13,
                    8, 3, 4, 16, 6, 1, 4, 7, 15, 3, 5, 11, 18, 10, 1, 16, 11, 
                   18, 13, 4, 16, 11, 11, 16, 16, 1, 15, 17, 11, 2, 18, 7, 14,
                    9, 12, 9, 4, 5, 5, 2, 10, 7, 13, 14, 18, 10, 18, 13, 18, 
                   13, 3, 2, 9, 1, 13, 7, 6, 1, 9, 9, 17, 3, 12, 1, 9, 10, 2, 
                   16, 1, 1, 18, 18, 12, 10, 7, 14, 4, 4, 17, 12, 15, 15, 5, 
                   18, 17, 18, 16, 3, 1, 2, 2, 6, 15, 1, 1, 18, 11, 1, 18, 6, 
                   1, 1, 13, 4, 3, 13, 10, 11, 18, 10, 10, 10, 1, 7, 11, 13, 
                   13, 2, 17, 9, 2, 9, 13, 11, 16, 6, 6, 16, 17, 17, 7, 12, 
                   13, 16, 1, 15, 15, 7, 4, 1, 1, 4, 7, 9, 3, 18, 18, 13, 10, 
                   18, 6, 18, 13, 9, 15, 18, 7, 9, 13, 10, 2, 13, 2, 7, 16, 
                   10, 15, 1, 18, 10, 13, 10, 16, 13, 15, 10, 10, 1, 12, 7, 
                   18, 18, 3, 4, 18, 15, 13, 4, 4, 2, 17, 5, 16, 13, 3, 2, 15,
                    18, 3, 3, 9, 11, 3, 15, 7, 3}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJxVUEEOAjEILJQWfYZP8OLdo9f1BWuy6kmTamJ8qd8RpmRds4FtB4bOsDnd
hzOnlB4rS8P42rc2vo9ruxxuz+kyte3uSnb7WFCSVCwrwk898uLPlnNk7/dc
7U7gCJBqn6OCIPQpqt5TgXiXTxTjFkP7PI5P8VYBg60zA3UNFW8Ias7RqGWw
FDMp2P3EoVsDdwUKbT9uV1jgM0MRhYMCvRJbYahRdEi8yeBSOGd4UuA6b1HD
Y4GLvt/855xQ65w875NjpiwYDF2avok9DUc=
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1: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

                  "], "Children" -> CompressedData["
1:eJwdiWV0FgQAAO8hKCUGpSgKFh0jRsfo0Wx0b7CgNvg2GKO7u7u7u7u7YXaD
hBK2gp6TH3fv3bu8kfFh0WmAhPSpCotICgkEIpLDM6RGaFxiVExUICg49v+f
kkqa57xAWtKRgYy8yDhfIj061n8d4z+ONhOZ2c4OXiYLb5KLV3iV7OTgNV7n
mVl56ij/dqR/mY0/HeEf5uR33+A3h/urw3yLt3mfD8jNO/ziUH/2XZ6YlzwM
8bGDfeR7PHSQH/IRP7mZfOTnRwdagIKsYS2FKMwDV1OEokxmCsUoTlvaEUQJ
KlCR+5akFAO8Z39LE0wZylKeft61HD+Y7B37etskv7cSLWjJd1bmW6tQlRC+
sY/VqE4NavK19ahFbb6yt3VI9EsTDCXgF9blc3tZnwZ8Zk8b0ohPjbcxTQgj
zqb08BPD+djuNqObKTbnll29aRdb0ZobxnrdNlwzxvZ0IIportqRCCK5YrSX
jfKSnbhoZy7Y2Rhi6U4PztuFc3byrF3pRqRnjPC0ccTTk1N29KS9OOEoAiRw
3EQGMJDe9CGJDh6zL0dt7xGTOWw/+tPOQ7Z1EG08aGsHM4ShtPKAIxnGcEbQ
0v22cJ/N3WszR9PUMYxlj+PY7Xh2Ge4EwpxIE3c6iR02druNnMo0pjODbS5k
JrPY6nxmM4d5NHQuDdxifTdbz03WdQGhbrSOi6jtBhezhKWsdxkrqOVyarrO
Gq5kFWut7hqrudoQV7mODWxkpetZYVU3UcXlVnaZldxCRZe6lSVuY7EVXORO
drOHXZR3oeXcyz4WWNb57meeZTzAQQ5xmLmmcIRgj3OCOR7lGKWdbSlPcoqz
nGOWpzlDSWdawhkGeZ4LXKe40y3mRS4xzctcoahTLeJVrjHFwk62kDco6CRv
MtFbTLCA483vf/h+uIM=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{10, 1, 1, 2, 8, 1, 11, 13, 13, 
                   4, 1, 15, 7, 12, 3, 9, 6, 11, 16, 7, 13, 10, 11, 14, 1, 3, 
                   12, 2, 13, 14, 15, 6, 15, 1, 1, 18, 10, 9, 1, 7, 13, 1, 4, 
                   1, 15, 1, 13, 9, 6, 13, 11, 16, 1, 2, 9, 18, 10, 13, 16, 6,
                    14, 7, 13, 18, 2, 13, 18, 18, 9, 18, 7, 5, 13, 9, 16, 14, 
                   14, 15, 11, 17, 18, 3, 1, 10, 3, 18, 13, 10, 16, 2, 3, 15, 
                   10, 13, 12, 15, 17, 4, 15, 3, 15, 4, 13, 4, 9, 4, 10, 7, 
                   18, 2, 3, 3, 15, 18, 8, 4, 2, 5, 4, 18, 6, 13, 18, 13, 16, 
                   10, 1, 14, 17, 6, 1, 7, 12, 10, 1, 9, 7, 18, 10, 12, 18, 
                   15, 7, 13, 18, 4, 2, 5, 13, 18, 4, 18, 18, 18, 13, 6, 9, 
                   10, 3, 16, 18, 18, 14, 2, 11, 10, 14, 18, 18, 12, 14, 7, 
                   10, 4, 18, 6, 16, 18, 7, 18, 1, 9, 11, 16, 17, 16, 16, 2, 
                   10, 13, 3, 15, 12, 9, 18, 16, 17, 4, 17, 11, 15, 5, 13, 12,
                    1, 10, 7, 18, 4, 18, 5, 15, 15, 7, 3, 15}], "RootIndex" -> 
                 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJw9UEEOAjEIbKEt+gyf4MW7R6/6gjVZ9aTJamL8rG8Rhokhu6UwMwzdnB/H
i5RSniv/Haf3flmmz2ntl8P9NV/nZbu7Vb99/etFyyjNo3vkOYrhrP+6oKpe
iZ6AE3nHLfjiUT2EuOhUKHbkBpQCpR4dnIEpAsUOXoRBP/4GJwIVBT88JSJr
Am+JqkAM1JXKikrOGWRHlryGTnANiA53Bu8DudBHB0e5lXBPw/6NjoUbNfrJ
nQz4xnepUGicZ/Ru6OVWg4o5xaitdFb5hrHHD4a8DZE=
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1: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
7JqE/wM8sts4
                  "], "Children" -> CompressedData["
1:eJwdiWVUFgYAAO+50qW6brFbMbADG1uwG5SwQD9QxO7u7u7u7u7uYKnrNlZ6
sv24e+/eBUUlhMekAxLTpyk8Mjk0EIhMiciQFmHxSdGx0YHgkLj/fmoa6f7n
OZ7nBVrQkhd5iSwEkZ4M6Dhf5hU+YayvMsYP+YjXeJ03yMh7jDYTmXmbd3jq
mzzxLf51lP840r8d4V++y58O932G+dgPeORQHzrEjxnsAwf5h5/yuwPNSjbq
UJfs5CA/BchJLvKSj9/MTR4G+Kv9/cV+/mxff7KPBSlEcUIoTDA/WpQf7O33
FuE7e/mtxfjGFEvQ05KU4r7JlqaH5alAGcpyz+6WI8mvTbQiAUOpxFd2szJd
rU4NqpDgl1blC6vxufF+ZhdTDeOuNalFZ+9Ym9t2sh71uWVzbtqACBoSTkdv
2MFGxNmYJlw31ms25arNuGKMl432ku1tRWsucJE2tOUIR4mkne1oz0WjuGCU
0cQwgpHEEkdf+nHeDpyzEx2J9Kxt7UwX4kmgD23sSje609ozBkgkidO28pQt
PWkLT9iDZHqSQnOP28xj9uKovTliUw/bxP4MYDiNPeRAhtDIQTR0MBEeNNyh
NPCAw9hvffdZz73WdRSjGcNYpjCVcYxnAhPZYx13W9td1nKnk9jhZLZb02mE
uYa1TGcGM5nFUpYxmzlss4ZzmcdCFjGf6m51AVus5marusnFbLSKS6jsBiu5
nFDXW9EVVHCdK1lFeVdTzrWWdY1lXEdp17OBjWxitftZ5Wb2sJctbGUb29lN
KVe6g12UdIU7WW4JlxniUou7xH0stpiLLOoBirjQgxziMAsMdr6FPcZx5nme
uZ7gJKeYYyFPc4ZzFHS2BZzlWWaa3xnmc7p5vUQeL3OFaeb2KteYai6nmNPr
3GCyOZzkTW6R3Yne5g7ZvEtWJ5jKeIN8BnLLxnw=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 5, 14, 1, 1, 10, 1, 10, 2, 7,
                    1, 1, 5, 5, 2, 13, 18, 11, 6, 11, 13, 4, 1, 2, 6, 13, 1, 
                   13, 13, 1, 2, 2, 13, 5, 14, 11, 13, 11, 17, 16, 1, 16, 1, 
                   2, 9, 13, 15, 12, 4, 7, 2, 12, 15, 13, 15, 10, 10, 7, 13, 
                   12, 1, 4, 1, 12, 4, 9, 10, 10, 7, 4, 7, 4, 2, 9, 17, 18, 
                   18, 9, 14, 10, 7, 17, 13, 13, 14, 10, 18, 13, 1, 18, 7, 16,
                    15, 18, 13, 6, 4, 17, 11, 9, 6, 5, 15, 16, 1, 9, 17, 15, 
                   15, 17, 13, 15, 10, 16, 10, 1, 4, 10, 13, 15, 12, 10, 18, 
                   14, 10, 9, 18, 2, 6, 3, 6, 7, 16, 7, 11, 4, 6, 1, 10, 17, 
                   14, 10, 11, 6, 10, 18, 6, 16, 11, 18, 17, 11, 1, 1, 16, 10,
                    7, 15, 9, 4, 18, 12, 18, 5, 1, 18, 3, 13, 7, 15, 12, 4, 9,
                    9, 9, 4, 1, 7, 16, 3, 16, 2, 10, 2, 6, 1, 10, 18, 18, 2, 
                   14, 9, 16, 1, 12, 13, 3, 17, 6, 11, 7, 7, 4, 1, 12, 10, 13,
                    1, 3, 15, 2, 7, 15, 11, 13, 4, 3, 5, 18, 18, 9, 15, 18}], 
                 "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJw9UEkOwjAMjOMl8AyewIU7R67lBUUqcAKpICH+ymNwxm4V2cl4GTuzuzyH
ay2lvDbuhvFznOfxe946OD3e022a94c7Ofq5aamFSivsnoo4Er/Zb/Wowptb
972WPd9RdRxGiRve7Kd5jfnb0M3gVLAIIpFRMHU+zjpCRNHNMAVjxAXTA1n2
NExXRG3dRoAr9l3+Q8gKIoZdCH2MbFRWaNAwNfaUdZ6AoeEftuYqKsNLctT8
fShq2J1wQoeoVDAsFZoKhJKSSkr2Bmvoa8nzB1J6DWY=
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwNlH8804kfx6dDK/1YfmTscqtv11H3vRYqKY/3J66aonCVna+yrmiqy0jf
XB23SrV+3nQpdLEufUMuG4pyvu99c6tFOjKMhm2YbX5tM4x0ff3x+u/1x+v5
eLxer8XfJUTE2pBIJOW0RIsfzrzk3I+cz5wCcpaqQHd9icN2z1GQzR8TKJ72
YUrVnszjvxiBYxkRFkVakLV30r7e/yMyhqIcpDkW5M/aVHDoUzP6/dvjZZx0
DNkLY1RPHlpRFzDr57djU0jJWFVkS4wgq2Jh8a3WaX/NTYmX5D1akw5W3l1h
QlXqQam8ehgpd5z8rx6zIMck2OOebUBJXnRSHXMK/TS0NK2zGekrbRa1h4yg
LHKVuYNkRC7p3Mgq8gBy/2uvyCxXI1FTuMd+czMyD5yWhMmakXGSvrtSpwZK
dfBNu0wj8u/c2xlz2oyMln3cGLkZucy0v19NjCFl/ZEImrcVJbPtvMxToyh0
n/vIIbkcBYtGDg2u5ICsp9o1454RFWVv3AaELzFs5C/9KKkfJV67vlBuNqOo
bbI/KfMtCvT3Qr+hy4GXkNRXe8UMum8fBoaSTEBx8ZUoeHpUHWQP2Lw2oMxw
f6caNChgUrbVhRjAd7Bz2bmTJEJIwMnY892g+JeY7p8qRW6RPLHAdxQqI8Tf
Uf/XBz31tcvDK0kE65D6UZfCgsb5LaL8JgUKQnMfXPdVAX/V1J11jy3gp/0+
f9HP95Bsl7yp9M9WIG2ItVlbVYGU0sukfeHvgE17n/tjnglJ+V+eOHpBAwUu
IU6G2FE0thKSSE4/8n6n5ZKvWlGRnlJ+nqlFpoG3+kxoLXKrLkX6nzIjWchK
Gp9tQpn/ZKfLnybk2j9Z+MpBBdQlSbtVLzqQs028xiPOgtx1YcmR2YNodU3K
idPqUBD5ek8dYxitq4f1ecVWZHaJGLcuNCKHbKgIIQ0hY008zcOnBwtovfHv
o/tQsCNyQ+5kN+pac56vThpD1qaZUV9J9cj72qf9h84+bKjLKE28YUTB46xh
lVmNKSldfi/YJuQ8khZVTPWhkFgd9UJkQKNnQyrZzYgNbRng81EOqvF4X2+1
GsjHPZY6iJ8CO7bNoyTnNZKHXfeJtwwi23vQMdutF8LuZ+bJVDLkuVRKQ6/p
QBjvTN2tbAHWFzXXlbJWYGY9fJ4e24dE54xjLYI3wNrdkRhnO93TPza/qlpQ
D3Qaocjvr0djsSnWfXMv0Ofvt4mLakXRrmVb541pkfHr3p5/zNGisOmdxTFc
ioolzYu8bzajRC/XH35bAqKoWjrtnBhkzwKfzF72BlnLl8vv90pQkFvTll5V
B1ZXKnE2Tja9O23h/vFs4BrnVe1KrQP2r9v+3hJehjp7W7FjdCfSDw9tzDE1
opC3K74ktx34wXErGuOneQxntiQWVqPK7uiMmsXTOdIyd37yvQZ58sCaaj8t
hqUnDswYfAeySd+8NqoShHEhj3r/2QRC7/1n7q7XA+/xgwvjRUowKmKghV+L
JO07VfSC6b8IfJmZFtQEYTPlAeNp3UCvjiKNXiyDylhDuzJkDDzFLRM+ZV3A
Px28Z8GFSRCtaWg5QWkDjvt2tVvgW5TwZWEuv78E+rqlt+4mKJFwqnBbNNYJ
1oY045HkHvD70utp6fFBIE8V0hwGukHybbJ7K60N2Y08dw9vJRZMaobnuhVA
5Ycd8T989go5YWt7qdf+AuuJlqSzs24jVbZtqyR9AERBhZdTb3QisXb9UB73
NdD3njIkNjeC7tlFWrB4GBinNmH3VRNU3pmIuHBWjV8HZU8UW+0IVur+/4zl
PIWsDm1XgpsUSQuPZ8jndgPb9gR/SdltELGdYuibeoFdbPOB7asBemcgw+FN
LzDyqpVmrggqE1x6Lpa1Ao9cfHjflS7kuLXQYvqlyNxQd/IbbR9kienddWYL
UEoKyWZjH/CvKqcmAhQg6nTpiD2gA89L6q4rgaXomV+wtfZQMzRsNNkEmIaA
ay/IrZ4/BZ5ZR6hRNRrwjDlK3bHCBMwuZ9qxBxbgMMq/Cl+tB7++kc0uEU1I
cDW3KSuNwNKcSZYLdWANfn15g9QEDTLHgImBdiAkxSmdriOgi8lvz1s/ATp9
9BbCfxyEN3+bWfKuHlJKfBscbysgqz54Tu3jj8Bzt3zepDIBd6J8o9pRBQWC
mgnXlDYo+LFh8LlkFIxNHoWrfppBUIZqbnB/0UCKM9drTa4E+OdLChPsdEDf
GrDjWdko8MNfnbPkWIBhp96+sMieSPGJDkp70ga8OZX6n1oHIOuPE5+OUlvh
iPZiRvkhG0JkO++5dXAYDswNOrv1+ScE/wM3iFjWDUzb9Gu3qjrg/zRRtFo=

                  "], "Children" -> CompressedData["
1:eJwdk1V0FgQARu9BRRAFA8RCQLoZMTpGj2aje4MFtcG/wRjd3d3d3d3d3aBi
gxJ2gV4nD/c7557v+WaPjA+LTgUkpEmZsIikkEAgIjk8bYqExiVGxUQFgoJj
///vpZDqBS/xMq9QlCBS8ypFmGga0qIf8Brp+Ne3+McJvs4bPDc9zxxvBt7k
b8f5l2N9m3fISCb+dIx/ONp3yczvjvI9Rvqb7/OrI/yQj8jCx+SnAFnJRnY+
4ReH+7PDzEFOfjIXPzrUpw4xN3l44mDzko/HDvKRAy1IIX5wgIXp7/f286F9
fWAfi1GcE5ykBCVZzwaCKcUUki1Nb79zImUoSznKE0kHKlCR9iRZicq0pZch
VKElrahKNepSj+r09Ftr8I2J1qQWX5tgKLWpQ8Cv7OGXdrc+DQinMQ2J9wvD
aESc9+3m53a1CV1sQWc/synN6OSnNueesd41xju25rbR3rINN43yhu24bkev
GcFVO9iRKCYQaTQxdKErsXTiip25bISXbO9F29mNOC7Y1njaOIShdKcH521t
gATOmUgvkuhJK8/a0t4k04/+nLEPp+3LKVt40uaecACDGMxxB3LMZh61qUds
4mGHccjhHLSxIxjJKMIdyzhGE+YBx7DfRo6nofts4F7ru8d6TmIyu63rLuu4
06lMYzo7nMFCFjGTWcymttsNdQ5z2eY85lPLrdZ0iwvYbA03Wd2NLmaDS1hK
NZexnBVUdb1VXEmIq1jNOtewlsqutZJrXMdqK7qRCm5lG5vYzCrLu9ItrLCc
29nBQQ6xk10st6zL3M0e9rLUMu6jtPs5wBJLudhgF1nShZbwMEdYYHGPUsxj
BDnf48yzqKc4zVyLeIazKZ0U9hznucBF5ljI2Rb0EgW8zBVmmd+r5HOm15hh
Xq9zg5vcYrp5nGZub3OHqd5lirmcbE4nmcP/ALM5wn4=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{18, 16, 18, 5, 1, 18, 10, 18, 
                   16, 6, 15, 2, 13, 3, 11, 4, 11, 6, 16, 13, 11, 18, 9, 13, 
                   7, 4, 15, 4, 1, 9, 15, 18, 10, 9, 7, 5, 10, 12, 2, 15, 5, 
                   3, 13, 1, 7, 4, 17, 5, 9, 15, 10, 10, 18, 14, 13, 2, 10, 
                   18, 15, 7, 13, 15, 16, 18, 17, 10, 7, 14, 16, 10, 9, 17, 
                   16, 6, 9, 13, 5, 10, 18, 1, 18, 11, 1, 10, 1, 3, 16, 15, 2,
                    9, 14, 12, 4, 7, 4, 12, 10, 7, 18, 4, 9, 7, 16, 3, 15, 18,
                    9, 1, 3, 3, 17, 6, 7, 10, 13, 1, 1, 14, 17, 11, 1, 3, 1, 
                   13, 2, 13, 10, 16, 1, 2, 17, 6, 2, 13, 14, 18, 4, 2, 10, 1,
                    18, 4, 7, 18, 1, 12, 10, 3, 1, 13, 18, 18, 18, 4, 7, 9, 1,
                    18, 10, 11, 1, 18, 16, 16, 3, 18, 13, 18, 10, 10, 18, 18, 
                   10, 14, 3, 5, 2, 16, 10, 17, 18, 14, 11, 13, 11, 6, 13, 18,
                    16, 11, 17, 9, 10, 1, 4, 4, 18, 18, 10, 13, 15, 1, 5, 6, 
                   7, 15, 7, 4, 15, 13, 15, 17, 7, 3, 11, 7, 13, 10, 11, 17, 
                   2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJxNUEsOAjEIhbaAHsMjuHHv0u14gjHxs9JkNDFe2HNIH4yappTP4/XB6nAb
ToWI7gs3w/jcTtP42i892F0fx/NxWm8u7NHbr1CjQkzmnvnb4CuymtVum2d7
hqn6a26jw1BXYAWd7JnmdUaXeFSAZUQdV+FZxgyMwu+8nb/iBJdmrOCJjKI7
tAi01VQZ2jS7DJYxT+hRaCypquTfMU2wWnYw9hIKFXUB228rBQos91b/uOaZ
G/CxuWBuYBOc9lXaswyEJk/NOWI6yUlDX3BU/DtvvGM+nBsN8g==
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1: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
x+SempvQHtEJAWsnrlF7jWb+HykP+m4=
                  "], "Children" -> CompressedData["
1:eJwdiVVUEAYAAO+50nVvttitGNiBjS3YDUpYoIAidnd3d3d3d3d3su7Ok+3j
7r17FxARFxqVBkhIm6rQ8KTg+Pjw5LB0qRESmxgZHRkfGBTz309JJc3/vMTL
vEI8CbzKa4QSRlrSoY14nTcIIDv/+ibv8C7/+BZv08+/7et7vM9fZuUD+vgR
H/OnH/KHyf5ubz/hU34zPb+agV9MMiOZ+NnM/GQvfzQLP9jT783Gdyaag5yU
ojS5yE1e8vGtefjGBL823vwU4CtLUJBCfGkxClOELyzK5/bwM7sbSJwpxlqc
bj63q88syVODeGIXy1CWGtSkHJ2tSCUeW55HVuChnaxMMA+sRhVivG9V7hnt
XaO8Y3VuG+ktO1qLEG5am3rU54Z1qEsHrxvhNcO9agMa0t4rtvOybW1MG5vQ
lEu2thnNiaM7LWhJLK1sRUtb04aLtvCCbTlvc9vRnnAiOGc3ztqBM3bktM2M
JIpTNjWaGDrRxJM2tjNdOGFXjhvmMUM9aiOP2NDDNvCQPThofRPpyQUu0osk
hjOCA9azN8nstw/7HEpf6rrXfvSnjnscwEBqO4gQB1PL3Q5hlzXd6TB2WMOR
jGI0Y9hudbdZzbGMYz4LGM8EtjqbLU5kClPZ7CQ2OZmNVnWD05hBFdc7nXUG
u9aZzKKya6zkHCq62rmsch4rreBCFnGSUyxmCStcwVKWsdzyLrOcS13OEsu6
klWsZg2L3cZayrieDayjtIss5UY2sdCtbCbIBZZ0vluYZwnnWtzt7GCOO9nL
Pma7i1nuZg/FnGmg+ynqYY5wgIPMsIjTPcQ0C3uUY0z1BFMs5HEKOtkCTjK/
p8nnGc4y0bxOMI/jPcc4zzPW3F7iMs94zhVyeYvbXOUa18npTXI4xhuMNruj
DPAOd3nII0Z6jxFmc7j3GeYDhprVxzxhiFkcbGYH+ZSBZjKFjA4wg/1N7ws4
XdZ0
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{13, 13, 1, 4, 1, 2, 13, 6, 2, 
                   16, 15, 11, 3, 13, 13, 6, 18, 5, 12, 5, 10, 1, 7, 4, 13, 
                   10, 18, 15, 10, 18, 10, 13, 14, 3, 2, 1, 9, 18, 10, 18, 10,
                    5, 13, 10, 14, 1, 2, 1, 1, 12, 16, 16, 14, 6, 1, 18, 3, 7,
                    11, 17, 17, 18, 11, 6, 13, 18, 12, 16, 12, 4, 18, 15, 7, 
                   5, 10, 2, 17, 1, 1, 16, 12, 16, 15, 4, 18, 13, 1, 3, 10, 
                   13, 10, 4, 7, 9, 7, 18, 10, 5, 15, 4, 13, 1, 7, 18, 6, 14, 
                   2, 7, 7, 11, 18, 4, 16, 15, 8, 9, 4, 13, 14, 10, 18, 13, 
                   13, 12, 15, 16, 7, 3, 10, 11, 15, 6, 18, 3, 6, 10, 11, 11, 
                   18, 4, 5, 16, 7, 1, 4, 18, 7, 4, 1, 11, 13, 18, 10, 13, 10,
                    2, 13, 13, 13, 16, 6, 11, 1, 16, 10, 16, 9, 9, 17, 10, 9, 
                   14, 10, 1, 14, 1, 1, 2, 9, 1, 12, 15, 4, 7, 15, 16, 7, 1, 
                   18, 7, 3, 12, 13, 16, 10, 9, 10, 18, 16, 4, 5, 12, 9, 14, 
                   1, 3, 4, 15, 10, 4, 17, 15, 12, 10, 6, 4, 16, 2, 13, 6, 7, 
                   16, 10, 3, 18, 11, 18, 15, 3, 3, 15}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJxFUUEOAjEIpC0UfYZP8OLdo9f1BWuy6kmTamJ8rj+RDlhDYBcKM1O6Od2n
cyaix8rCNL/2rc3v49qSw+25XJa23V2TZR9zJqFkzlSpmFXKsGLOiGK1ZF81
81O23HsrTh2jZ4p/rzBmCmZ7P6OjopOBUgeGQoMGuoDJUTurDEUK50BxJA51
DI485gQ4gukCPRJYXVPClEBzBnsCgoSyHhUKnbugyysC++tJcWffVoErEFPc
i0e9BrvzuiKOPf12qnFvfxHnkWDJ0eeoHfcL6uQNtQ==
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1: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
WpiQYtgJrIJ1TVFti1AewzcprV3F+hdK3r22
                  "], "Children" -> CompressedData["
1:eJwdk1VUFgYARu/RbcZKt7meit2KgR3Y2ILdoIQF+oMidnd3d3d3d3e36+6u
K/pwv3Pu+Z5vUFRCeEwaIDF96oRHJocGApEpERlSJSw+KTo2OhAcEvfsf5JK
muek5QVeZDBDeIl01KAmmp53eJcMZOR/XyYz432FV/nPcb7G6/xrJv5xrH87
xjd4k798i7cZ7Z9m4Q9H+bsj/c33KE8F3ucDPuQjilCUX81KNrLziyP82eEG
kYOc5OInC5ObYf5oIfIw1Lzk4weH+L35+c4CFGSw3zrIbxzo1w6wGMF8ZX+L
08+SlKIEff3SFEMozRf28XPL8Jll+dRkP7EcH9vbilTiiVWpTC8fW4VHJvnQ
UB6YaDUC3rc69+xpLWrTng6E0cNGNOaudahLgvWozx3jvW0DbtmQm3Y3nAhu
2M0mNKUNbWlGc1rT1eu24JotuWoXW9HZK8Z52Vgv2Y6LxnjBaM8bSRQdOWcn
z9qJ7sQTTQyxxHHGjnamC92I8rRdOWWkJ+3gCdubQDv70o8e9CRAWxNJ4rht
PGZre9GboyZzxBT60MrDtvSQLexPcwcwkIM284BNHUQT9xvhUIZxlnMMZwQ7
2MlIRrHPLYxmDItYzFjGMYnJjCfcvTZ2Ao2cSEP32MApTGW39Z3GdOYyj13W
cwYz2eks5lDXHc5mu3XcZpjzqe0CarnVmi6khlus7hKWsp4NLKOam13Lclaw
klVssqobDXU1VVxDZTdYyfWuY50VXetG1ljB1W5ilZtZaXm3Us4VbmO521lm
WXexm6WeZg9lPE5p97KP/RxgiSEepJSLLekhDrPIIyy0hEcp7jGCXWAx53uC
eZ7kFEWdaxHneIbZFnaWhTzPBS5yiStcZaaXmWFBp1vAa1znLve4QX6neYub
5HOqeb1NHu+Q2ynm8j45fcgjHpDDyQY5yexO9HFqg9mcYFafAliTzHk=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{18, 12, 11, 1, 13, 13, 16, 6, 
                   18, 13, 5, 1, 7, 15, 10, 1, 18, 18, 18, 3, 4, 3, 6, 3, 18, 
                   5, 13, 10, 5, 10, 11, 1, 2, 14, 6, 4, 18, 15, 4, 2, 7, 10, 
                   2, 10, 12, 1, 3, 2, 18, 2, 9, 13, 15, 14, 14, 4, 10, 7, 13,
                    13, 9, 16, 7, 5, 10, 4, 1, 15, 13, 12, 17, 17, 16, 13, 14,
                    18, 18, 16, 17, 11, 11, 1, 1, 2, 6, 1, 17, 12, 14, 16, 1, 
                   5, 14, 7, 14, 4, 9, 18, 10, 1, 12, 4, 18, 18, 13, 16, 17, 
                   7, 15, 15, 3, 15, 5, 3, 15, 6, 1, 13, 15, 2, 3, 11, 4, 18, 
                   1, 4, 4, 18, 10, 18, 5, 13, 13, 15, 7, 10, 10, 10, 11, 16, 
                   1, 2, 13, 9, 9, 18, 15, 13, 15, 7, 13, 1, 4, 15, 12, 14, 7,
                    18, 9, 7, 2, 7, 3, 4, 18, 15, 15, 18, 10, 3, 13, 8, 4, 17,
                    16, 9, 9, 1, 5, 15, 6, 1, 17, 6, 10, 3, 13, 16, 18, 10, 9,
                    3, 14, 10, 12, 1, 16, 16, 10, 15, 7, 12, 17, 18, 10, 15, 
                   9, 7, 8, 13, 13, 11, 18, 1, 9, 18, 10, 17, 7, 9, 15, 2, 3, 
                   7, 17, 3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJxNUEsOAjEILdCCHsMjuHHv0u14gjEZdaXJaGI8qPeRPshomn7gvT4ebE73
4cyllMfKj2F87ed5fB/XHhxuz+kyzdvdlTz6+G6+uFTf4luLFfKo+d1zDFw8
Mr+rLwNbkG/IKn52JoHDS4YdF2TZT/JI8asC6XxBvuspOBXv0OB0EgyDKiE2
oB0P3XhZOpXsp6EbTXVNFUpnik7CUa8YVRiRAKP0qcssCJr/dUNb0ElDFV0c
MzqNXMzk585ysuE6vNbkNZya0zbMoONfZRcNVA==
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1: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
                  "], "Children" -> CompressedData["
1:eJwdk1V0FgQARu8BFVCxG0VRMOgRo2P0aDa6N1hQG/wbjNGM7u7u7u7uLqUR
LFDCoI3L8OF+59zzPd8skfFh0WmAhPSpExaRFBIIRCSHZ0iV0LjEqJioQFBw
7PP/XCpp/ictL/AiM5nFS6SjD31JTwY6kcTLvEI+8vMqU3ydN8jIZF9jkjrR
N3mLT8jM20zwP8f7DuN8l/d4nw/417F+yBj/cbQfkYm//ZinjvKJI/2UEWbh
cx77GY8c7hcMMy9DzUo2HvolXzHEBw72a74hOzm47yBzMtC/zMWfDjA3efjD
/v5uP4Po6z37WICClKcCwRSiKMUoTBHumuIde3vbXv5mT3+1OCUoSSl6WJoQ
btndm5bhF8vys938yXL8aFcrUon6dDGUZH+ws5WpQlWqUYe6VKcGNwzjujX5
3lpcM8mrdjKcjl6xNpdN9JIJXrQeFwzYgIY0ooORtKAxTWhKe5sR73njbE47
vzOCb21rS6JoTwfOGc1Z2xhDLK1obWtaecZYT9uGtsR4ynacNI54oj1hlAFa
etwEjtnCRCI9akeOGGFnkjlsCl1o7iGb2ZVudKepPejJQZt4wF7stzf7bOxe
G7nHhvajgZOob38GMJB6jmI0gxjMEIay27ruso7DGM5Oa7vDEWx3JNsMd6th
bnEMYxnHeGo5kZpOoIabre4mqzmZKWx0Khus6jSms94qzqCy6wx1NpVcw1rm
MJd5zGcJS1lrRRdQwYWUdxHlXONiVlvWZZRxFSEuZwUrKe0qS7nSkq5wNcst
4TrWc4LiLrOYG9jIJjaznwNsoag72MlSt7KN7SyxiIst7C52s49C7mEviwx2
oQVdYAHnm9955vMgh5jrYeZ4lNkeYZZBHiOvx8njTHN7klOcJpczzOl0zzDN
s6lN5XCq2X0GWHy0hQ==
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 13, 13, 18, 1, 4, 5, 1, 9, 4,
                    18, 18, 15, 11, 10, 10, 15, 6, 1, 3, 12, 7, 10, 11, 1, 6, 
                   12, 10, 6, 13, 11, 13, 13, 13, 3, 11, 2, 18, 13, 16, 7, 6, 
                   3, 3, 5, 18, 4, 3, 13, 11, 1, 13, 18, 11, 1, 16, 16, 1, 17,
                    9, 1, 1, 5, 15, 12, 10, 7, 1, 18, 17, 7, 7, 13, 10, 13, 
                   15, 1, 1, 4, 4, 4, 15, 10, 16, 12, 15, 4, 10, 18, 10, 10, 
                   15, 2, 4, 7, 15, 11, 16, 16, 3, 18, 10, 18, 1, 14, 13, 4, 
                   2, 7, 1, 2, 3, 15, 12, 18, 5, 18, 15, 16, 1, 10, 7, 10, 4, 
                   9, 5, 13, 9, 10, 18, 14, 6, 6, 13, 13, 10, 2, 14, 4, 11, 
                   18, 16, 2, 18, 1, 10, 7, 4, 13, 14, 2, 2, 14, 13, 14, 10, 
                   14, 16, 2, 9, 17, 18, 15, 17, 16, 10, 9, 17, 7, 13, 18, 10,
                    18, 4, 7, 11, 10, 18, 10, 13, 18, 3, 9, 16, 9, 15, 6, 4, 
                   14, 4, 2, 15, 4, 9, 15, 5, 7, 1, 15, 7, 15, 13, 9, 2, 18, 
                   17, 10, 7, 3, 10, 15, 17, 18, 3}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJxFUEsKQjEMzKdJ9RgewY17l271BE/ws1J4CuJNPY7pJCKloZl2PunqeN+f
hYgeiyj76bWd5+l9WEazuz1Pl9O83lw5uk/sRkZCTJ00zqPjqBpVA5eoHZvj
xshjWXSOtwK0Q2EwOHCNZXUr4Ap4AkXGS8Ntookb2A1Ih/7AFB3jdYuTwOvv
wXB2JBt4zpCIV+b08PIYCjmjY0pB7ZiLK5MiE8PRKzFDLfkOVkNOrbwCVSuu
lp8Uy+Ca8/1+x+DbSrvBJTVa/VsvpXQyMJ2+xL8Ncg==
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1: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
XtDC/wG+lKdx
                  "], "Children" -> CompressedData["
1:eJwdk1V0FgQARu9BRBAUFRBRFLDoGDE6Ro9mo3uDBbXBv8EYzeju7u7u7u7G
BhRQMMDuy+Dhfufc8z3fPJHxYdFpgIT0qRMWkRQSCEQkh2dIldC4xKiYqEBQ
cOyz/1YqaZ7zAml5kU1sJh0vUYCCpCcDmXkNneTLZCQTE/3fV/jPCf7rq/zj
eP/2df4yO2+QhT/NypuMMxtj/cMx/u5o3yIHb/MO+cjPb+bkV/PyLu+Ri9z8
4ih/dqR5eJ8PGOFHfMwTP+Sxw/3JYf7oUH8wxe8d4iMHW4jCBFOahw6yCEX5
zmKUoCTfGkRxBvrAAZaiv/ft5z37WoayDGM45SjPN7alAhWpSjW+thJVCKEy
yd61j3dM8ra9rU4vv7IlNajJl9aiNqF8YaJ1qMvnJliP+jQk4Gf29FMb8Ik9
bES8jQkjnCY0pwW3jPOmTblhM67b3Wt286pdbUVrrtjFy7bhkp1tR3s6EEEy
fbloJN3oTkc6EUWs0cRwwRhj6cx5oz1nlF3oylk7ecaOxhFPAomctgcBIj1l
T04a4Qk7eNxe9CaJY7b3qO3sQ1uP2MZ+9GcAAzlsaw/ZykG09KAtHExzDziE
FIay32bus6kjGMkkJrPXUexxIqNp4hjGsttwxzGeXU5gp2HusLHbbeQUpjKD
mWyzoVudxnQauMX6zmI2m93AHOq5jLrOZR6bnM9CFrGAOm401A3WdjFLWEot
11vTddZwOStYSXXXsJa1rmI11VxjVVe7jlWuZ6UhrrCKG6nsciu5ha1c4CLb
2M4BDrKDneyhosus4FJ3sZvyLrGceynrYvexyP0stIyHKO0JTnKYIxzlGAsM
dr6lPE5J51nCU5zmLOeYa3HneIbZBjnLYp6nqDMt4iUKe5lCzrCgV7jKdK+l
9lTAaV5nqje4SX6nmM/J5vUpnkC6gg==
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{13, 4, 1, 6, 10, 11, 9, 15, 13, 
                   6, 12, 17, 13, 16, 16, 1, 15, 18, 6, 5, 10, 15, 7, 15, 10, 
                   13, 1, 11, 4, 8, 12, 14, 15, 10, 1, 6, 18, 1, 7, 18, 4, 18,
                    13, 10, 18, 1, 13, 18, 2, 13, 13, 2, 10, 13, 18, 9, 1, 3, 
                   16, 12, 18, 18, 3, 7, 5, 10, 15, 18, 9, 15, 1, 7, 12, 4, 5,
                    18, 1, 10, 2, 18, 7, 2, 10, 14, 8, 15, 13, 13, 3, 4, 6, 
                   16, 3, 17, 16, 14, 16, 16, 16, 2, 4, 18, 18, 4, 15, 18, 13,
                    18, 1, 17, 15, 18, 6, 1, 1, 13, 13, 13, 3, 2, 6, 2, 13, 
                   11, 3, 13, 9, 1, 9, 10, 4, 10, 15, 10, 1, 10, 3, 12, 7, 2, 
                   10, 4, 16, 4, 1, 18, 18, 18, 13, 7, 7, 13, 16, 7, 6, 16, 9,
                    15, 13, 3, 6, 14, 16, 10, 13, 9, 10, 13, 4, 18, 12, 9, 14,
                    1, 4, 16, 1, 2, 16, 5, 4, 18, 7, 4, 4, 13, 18, 12, 7, 8, 
                   3, 10, 18, 5, 17, 18, 9, 17, 10, 17, 1, 9, 11, 16, 10, 12, 
                   7, 15, 16, 3, 2, 3, 11, 9, 11, 15, 13}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJxNUDkOwkAM9K69NjyDJ9DQU9KGFwSJowIpICFeynfwjp2IIrFnvDM+NqfH
cKlE9Fz5bxjf+2kaP8e1g8P9db6ep+3uVhx9/VMSKlSpITZi/6tjRkURlQyx
gq/ON0fNX/asc+IvzDE77pkCBSdwkEVr6a7Qdib82CvRUeAwT1KTa3CPfoxc
0Ef+6hWqri6oSG4R/RV6QfeGaWMzw/6GKSJXuOkyK2dXhXc4GTxiQstrzM6d
K3lTQ2zQz7cq0M/3iqk599PcrOXlbbkS0w/sQw2r
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1: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

                  "], "Children" -> CompressedData["
1:eJwdiWV0FgQAAO8hKCUGpSgKFh0jRsfo0Wx0b7CgNvg2GKO7u7u7u7u7YXaD
hBK2gp6TH3fv3bu8kfFh0WmAhPSpCotICgkEIpLDM6RGaFxiVExUICg49v+f
kkqa57xAWtLxDu/yIi+Rm1mmJwO5mGlGMvEGb5KZl8lKNrIww9eZ7iu8ik7z
X1/jH6f6zClmJwdPnezf5uQvJ/mnE/3DCf7ueN/ibX5znL861l8cYx7y8rPn
eY/3iSCSD/iQJ7biI/JRngrkZ7TlGGUBClKIwpRlpI8twiPLUJRiFGeEDx1u
ECX4yZKUYpg/OtTSDPGBwdx3sPcc5F0H+oMDrEglalGbylThjv2tSgi37Wc1
qvO9yX5nDWrS129N8hv7WIdQvrY5dalHY5pQnwY0ordfmWhDEvzSgF/Yy8/t
aRjhNCXez2zGp8b5iT382Ba0pLspdrM1bWhLO27Z1Zu254YduW4HrtnFq8ba
ic6c4jRRRLOaNcQQy2xivGIXRjKKrnSjOz1IIJE4ou1JL+KJ8rKdvWQnLxrg
gpGeN8Le9CGJvgxnBMn045zD6M8AztrRgXRwMEMYRHvP2M6htPW0bTxla0/a
yhO29LgtHM0YptHcsTRzKk0dR7jjmcAxw5zIJCbTxKNO4YiNPWwjD9nQg07n
gDOYSQNnUd/91nOfc5jLPPY6nwUsZI913W2oi1jMEpayjDrusrY7reVyarqC
Gq6kuquo5g5DXMs6trCV7a5nA1XdZhU3UtmtbmKLm9lsJbdR0U2eZDs72Mku
9rKPjVZwg7vZQ3nXW8517ucAB1lrWddYxtUe4jBHWOVRVnqcYwS7wtKeoJTL
LekyS3iGIM9S3KUWc4nnWGxRF3mBi1ziMldYaBGvco0FFvY6N5hvCvMs5E1u
MdeCzrGAs83vf3RiuIM=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{10, 4, 1, 12, 8, 15, 1, 9, 18, 
                   17, 13, 6, 16, 15, 16, 5, 7, 18, 18, 1, 1, 6, 3, 6, 9, 16, 
                   6, 1, 7, 11, 18, 13, 15, 13, 2, 11, 16, 1, 11, 7, 18, 2, 
                   18, 2, 17, 1, 11, 15, 15, 18, 15, 18, 10, 2, 7, 16, 10, 18,
                    7, 18, 13, 18, 10, 10, 3, 18, 10, 10, 18, 5, 15, 13, 11, 
                   1, 3, 2, 1, 9, 15, 4, 1, 2, 14, 1, 7, 4, 2, 13, 3, 13, 7, 
                   7, 8, 16, 15, 4, 1, 1, 17, 3, 18, 4, 3, 15, 15, 10, 18, 13,
                    2, 1, 6, 13, 14, 4, 10, 1, 3, 12, 13, 17, 11, 6, 16, 10, 
                   4, 13, 18, 11, 10, 14, 13, 10, 5, 13, 13, 10, 3, 5, 13, 13,
                    13, 13, 10, 1, 13, 6, 13, 11, 18, 1, 9, 16, 5, 12, 4, 10, 
                   10, 9, 10, 14, 16, 7, 18, 2, 9, 1, 12, 9, 10, 14, 7, 10, 
                   12, 3, 13, 1, 9, 9, 12, 12, 18, 16, 10, 17, 16, 15, 18, 13,
                    12, 15, 18, 10, 12, 15, 4, 17, 18, 4, 7, 18, 1, 3, 10, 13,
                    4, 3, 7, 10, 1, 7, 11, 7, 15, 17, 3, 16}], "RootIndex" -> 
                 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJw9kEEOAjEIRYGWVo/hEdy4d+l2PMGYjLrSpJoYz+plhE87i04/9PNg2F2e
01WI6LWxzzR/jq3N3/PWgtPjvdyWtj/c2aKfHaVKTImEsulxi2VdFdMMhyv3
VvMk+NzF0Iyb4Q9KeLUTFUftjUFK0O4oqGJkeCVk1OYe+2tBTnD7cSWYpiJy
6lCp10d/Bk/wD+EKis815siIY56gR4f4jwKndJ/AFbWlMxm9a8/GXhTMuk6b
sIuMfoqc4j1mTOhcsF0GIaOLds7Yi+ec/gc01A2U
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1: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
                  "], "Children" -> CompressedData["
1:eJwdiWV0FgQAAO+hKIiKghIWonSPGB2jR7PRvcGC2uDbYIzu7u7u7u7u7tkJ
BhhggR7DH3fv3buckfFh0WmAhHSpCotICgkEIpLD06dGaFxiVExUICg49vlP
SSXN/7zAi6SlHe15iZfRpqQjPf/ZhFfIQCh1eJXXeI/3eZ2M/Os0n/oGT3yX
f3yTv81EZt7ibaaalSn+ZRb+dLLZyM47TPIPJ/rYCT5yvB+Qg+KU4EPGWYSx
5uQjPiYXvzvG3OThNwuRl3z86mh/cZQPzc8DC1CQkf7sCH+yMD863KIMsxhD
/cEg7jvEkpSiNoMNpjT3LE8ZBvm9Ay1LOb5zgN/a3wpUpBKVCaEq39jPKvT1
a5P9ympUp49fmuQX1qAmva1FLz830c9MsC4B61GfT+1pAxoSTg8/Md4UG9GY
OMPo7l27eceu3raLzehsc2JtQYwtacUto21NlDdtww3bct1OdiCC43Q0ko6s
Yz2diGIIQ4kmhnh6EEuknenCNSPsSge70d6rtvOK3blsHJdsa08CJNKLi7Yx
gdZesJW9SaI/Le1DMudt4Tn7ctZ+nLG5p23mAAZyykGcdDAnbOpxmziM4Uxj
OiMIdxzjOeZIRjGaMYR51MaOpZFHbOhhJzCJyUykgYes7xSmctB6HrCu+63j
DGYyi9nsM9S91naPc5jPAnY7l3nUcpc13elCllDDHS5iMdXdbjWXsozlrGAt
VV1JiNtcwypWs9UqbrGym63kJiu60Q3sYCcb2cRmtrDBCq63vOvcyja2s9Zy
rrGsqy3jLnazh70c5Rj7KO0Bgl3lflZayoOUdIWHWO5hlnmEpZZwicVdbJAn
OMkpinmaMyyyqGc5x0LvsMAizvc8F7jIJS5zlWvMs7BXKORcC3qdAt7kFnO8
wWzzO8t8zvQ2M8zrXfKYQm6nm8tn41HAfw==
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{11, 1, 17, 18, 13, 1, 1, 10, 6, 
                   7, 1, 15, 1, 11, 14, 2, 13, 4, 13, 6, 3, 3, 6, 9, 12, 4, 
                   16, 2, 13, 7, 1, 14, 16, 13, 16, 18, 17, 7, 16, 16, 2, 6, 
                   9, 4, 15, 10, 10, 18, 18, 16, 4, 1, 15, 17, 1, 17, 5, 9, 1,
                    9, 15, 9, 4, 7, 4, 11, 10, 13, 13, 14, 1, 7, 15, 7, 2, 1, 
                   7, 7, 9, 3, 4, 9, 15, 2, 18, 6, 10, 16, 15, 9, 11, 10, 10, 
                   14, 7, 1, 9, 3, 7, 1, 15, 3, 3, 15, 15, 5, 3, 10, 9, 13, 
                   10, 15, 10, 18, 13, 5, 14, 13, 2, 13, 11, 1, 1, 13, 13, 3, 
                   6, 13, 7, 18, 3, 1, 10, 6, 13, 10, 1, 14, 16, 13, 18, 1, 
                   16, 17, 18, 9, 16, 11, 17, 1, 10, 1, 7, 13, 13, 1, 15, 10, 
                   9, 3, 7, 10, 10, 2, 16, 10, 18, 3, 18, 16, 10, 7, 10, 4, 2,
                    7, 12, 4, 1, 4, 9, 3, 15, 13, 14, 5, 9, 2, 1, 8, 4, 13, 
                   18, 4, 18, 10, 13, 14, 13, 18, 12, 10, 18, 18, 17, 1, 18, 
                   12, 15, 4, 4, 2, 7, 11, 3, 17, 15, 9, 18, 15}], 
                 "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJxFUEkOwjAMjGM7gWfwBC7cOXItLygSywmkgoR4Kr/BHrtFkdPEMxnPdHN6
DJdaSnmubBvG936axs9xbZfD/XW+nqft7kZ2+1p1W2qL7Su219IKWamVWM/v
DRw/OU5WHQy1s4BZ0VcgvnuxYQI8tFpqEXCf2HJux2vJSbKoec2eXDl6sy7j
Dadag07wKjTcLaejnr5cl9CVxCL130fkEyhE/r64ELAVkwluW6auC0qZijBd
8Y6BUeaIP6KYwGBGakGSjn3mUf4DTSfO/wERoA2E
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1: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
hGldPMVvPZH2f7eYpik=
                  "], "Children" -> CompressedData["
1:eJwdiWV0FgQAAO+hIhiAoISCCCpdI0bH6NFsdG+woDb4Nhiju7u7u7u7u2ug
lIGdYOs5/XH33r3LExkfFp0GSEiXqrCIpJBAICI5PH1qhMYlRsVEBYKCY//7
Kamk+Z8XeJGXmMNc0vIyOtF0pOd1MvAKE3yN8f7jq/ztOP9yrBnJxFSm8QaZ
eY8xZuFN/jQbf/gWvzva38zKr44yOzl4m3f4xZE+Nye5GeEzc/Gz7/KTw/3R
YeYhL+/zAROYyIfkozkt+MH8fO9QC1CQQhSmCEX5ziF+62CLUZw61OUbB1mC
IL62JGUI5itL8aWl+cKBPrUslahMOQb4ueWpQEU+s7+fmuwn9vOJVahKNUJI
sjZ9fWx1alCTR/axFok+NMEHBgylHh/b2/o0oBGN+cheNiTe+8bZhJ7eM5ym
9DDFMO7a3WZ0845dvW1LIoikFa25ZaxtiPGmbWlHezoQ7Q2j7EgnrtvFa3a2
M11Ipj9XjSKGWKKJ9IoRdqUbCSTSnR5ctpOX7MlFA1wwjnh6cd6O9qaD52zv
WdvZh7Ym0ca+tPaMrexHS0/bwlMOYAhDGcggTtrcEw7muM0cxnCOOZ6jhjuC
MEcyitGM4YhNPWwTDzmWcTT2oI08YEP328B9TmKvk9njFHZb3+nMYDb13GWo
M6nrTmexwzput7bzmM8217HVBayllgtZxGKWsJyabnEpm63hMqq7yRBXsJKN
rmKDa1hNNddb1XVWca2VXc8GNrKJi1xiM1s4SyW3UtE97GWN29hOBXewk13s
ZrXlXWU5V1rWfQS7nwOssIwHOcRRjrHcwyyztEco5VJLusTjnCTIxZ5gkSVc
6CkWeJozFHe+xZznOeZ6njleYLZFnWURL1PYK1xlpte4zg1mWMjpFvQmt7jN
HaZZwKneZYopTDa/k8znv4OpvIE=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{18, 1, 15, 18, 10, 13, 3, 14, 1,
                    13, 1, 12, 13, 2, 3, 15, 15, 1, 5, 7, 3, 10, 12, 10, 18, 
                   1, 15, 15, 3, 10, 9, 14, 18, 1, 9, 2, 4, 3, 18, 7, 13, 4, 
                   17, 5, 18, 14, 2, 13, 7, 2, 10, 14, 3, 6, 18, 6, 10, 7, 6, 
                   18, 13, 3, 17, 18, 7, 14, 13, 18, 5, 3, 15, 4, 18, 10, 7, 
                   16, 16, 16, 4, 11, 13, 13, 2, 11, 13, 1, 13, 9, 4, 1, 15, 
                   18, 13, 4, 18, 2, 7, 1, 13, 2, 4, 8, 18, 15, 15, 7, 1, 7, 
                   15, 11, 11, 7, 18, 3, 16, 12, 12, 13, 1, 1, 1, 13, 16, 2, 
                   6, 11, 16, 5, 6, 14, 16, 4, 13, 4, 5, 17, 18, 10, 10, 16, 
                   18, 7, 10, 1, 14, 1, 10, 7, 1, 7, 14, 9, 9, 1, 16, 1, 17, 
                   12, 10, 6, 5, 1, 16, 12, 1, 13, 16, 10, 11, 16, 12, 2, 10, 
                   10, 12, 13, 12, 18, 4, 3, 15, 1, 18, 18, 17, 16, 14, 13, 4,
                    4, 18, 7, 1, 16, 11, 10, 1, 4, 9, 4, 10, 13, 7, 6, 16, 6, 
                   3, 11, 4, 4, 12, 15, 9, 15, 2, 17, 3, 3}], "RootIndex" -> 
                 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJw9UMENAjEMa9KmhTEYgQ9/nnxhgkM64AXSgYTYlWFIHAtVd4prx3G6OT+O
Fy2lPFf+O07v/bJMn9PaweH+mq/zst3dxNHXv15akWKl8gzHo6jfD78Vr4Lr
5ALHEUeCvuDDo6EjdQq2AoszFV6hTEUHUkepCGxwMyYx9Ci9lDrlpMxk6GzM
bMysrAeUgvmKjkADSTrSpo+hQ6Ee3C0r404V2FALqgoukXJuZhhIK0gm4Bv8
8g07t1U6Vqbu/9SdSuULCGcI8hl1kesHWKANoQ==
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1: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
                  "], "Children" -> CompressedData["
1:eJwdiWV0FgQAAO8hKliogIkC0s2I0TF6NBvdGyyoDb4Nxuju7u7u7u7uZraA
gh1gH4Mfd+/du+yR8WHRaYCEdKkKi0gKCQQiksPTp0ZoXGJUTFQgKDj22U9J
Jc1zXiAtL7KUZbzEy/QmmXSkpya1eIVXeZO30Km+xhT/93X+8w0yMNl/neTb
ZCQv+chEZj7gQ/7xHf72fd5lou8xwb8c75+O84ljzcJHfExWHpubbGTnD3Px
CWP83Rz85mh/NSe/OMqfHWkeRviTw83PMAtQkB8daiEK84M1KEJRylGeIIZY
nBIUY7DfO8iSBPPIgZZigA8tS2n6W4Z+fmdfv7WPD0z2vhW4Z0W+sRKVCeFr
q1CVanxlb780yer08gt7+rmJfmYo4TSmNnWoSz0+NcH6NCCMgCn28K4NaUR3
7xjvbeNsQlNu2c2bNqMFLWlOV2/YxVa0pjs9aENb4oinHe3pQleuG0EHOhJJ
Z6/ZyShijSXGaGK4arRXjPKynbhkZy7a0Qt2sBuRnjfCc7b3rO0M0Nae9CKB
NibS2jO2MomWnraFp2xuH/oymzn0oz9jaeYABjKM4Zx0EENp6gkHM4QmHrex
xwx3BCMZxWiOGuYRG3nYhh5yDAdt4DjGc8AJTGQS+63vZOo5jelMYSr7rOte
67jHGey2tjMJdRa13GVN5zKPhSxiPgvYaQ13WN3tVnObVd3qYpZQxS2GuJwV
XOIyK1nFUY6xmjVsZBNrWcdmN7DJyq6nkhut6AYruN7NbGUbWyjvOsu5nbLu
Yjc7KONOSrvWUu5hL/s5wBr3sdpgV1nSlZbwIIdYYXEPU8zlHmGZQR7nBOc4
z1KLepJTLLGIiz3NIs+w0LMssLDzLeQFLjLPgs61gFe4yi1uM8dr3CC/s73O
LPN5k7zONI93yO0M7zLdXKaQ02nm8Cm698J+
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{13, 15, 1, 18, 12, 18, 10, 1, 5,
                    11, 10, 1, 2, 12, 7, 18, 14, 4, 16, 14, 13, 13, 18, 6, 9, 
                   11, 13, 1, 10, 13, 1, 4, 7, 7, 15, 10, 7, 4, 12, 4, 9, 7, 
                   7, 4, 2, 1, 18, 4, 3, 14, 10, 13, 7, 7, 16, 7, 11, 12, 1, 
                   17, 16, 18, 1, 7, 1, 18, 1, 14, 18, 9, 14, 16, 11, 16, 11, 
                   18, 12, 4, 9, 17, 10, 11, 15, 13, 18, 16, 6, 13, 9, 10, 7, 
                   8, 1, 18, 18, 10, 12, 14, 15, 17, 17, 4, 15, 3, 7, 15, 15, 
                   3, 18, 10, 1, 15, 1, 10, 6, 13, 15, 14, 3, 5, 9, 18, 6, 11,
                    2, 13, 2, 13, 11, 7, 1, 4, 7, 2, 10, 13, 13, 6, 1, 2, 1, 
                   15, 15, 7, 15, 12, 15, 7, 10, 10, 1, 13, 4, 13, 14, 12, 18,
                    13, 18, 9, 10, 2, 6, 18, 2, 15, 18, 7, 17, 17, 11, 6, 16, 
                   18, 10, 10, 18, 13, 18, 3, 1, 18, 15, 13, 1, 12, 12, 6, 1, 
                   13, 11, 16, 16, 1, 10, 13, 10, 17, 7, 13, 18, 12, 2, 4, 10,
                    15, 3, 15, 15, 3, 16, 2, 18, 9, 3, 11, 18, 15, 2, 17, 3}],
                  "RootIndex" -> 1, "NominalDimension" -> 0|>]}, "Processor" -> 
             MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 7|>, 
                "Key" -> "(f1f2f3f4f5f6f7)", "Invertibility" -> "Perfect", 
                "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
             "OOBConfusionMatrix" -> CompressedData["
1:eJyNlXtMU1ccx2Fz6NoVBJmbDzoZRF4iTEBgSo4gOMUBEzcQpRO6jIeGh2My
IdHZDTarEpXOBLWgZaZC7zm31Y6OrVB1UMZkGRDHmIsCa/BRsJmKCHXDrEt6
7k3O3Y3+0fS/m+/5fL/f39dXWpL+4XMuLi5ezp8q1fBdv0QHbPszv0gUQxCp
aF1lDoCgprZqk7AegsDx6Ac+Vggu30lRblZDoDiSKMj4EoLHZROh7xRB0BZ0
KSf+Fwg8zZIadS8ElE4yPqsVgjtNO1uXZ0KwN7PVJA+jQeKrW5e9nwpBU5vG
PjlOgYKAJX0lkQic3phlDCiHQF55cY2bigKB90ZlsjMUkDdAgWAbAtKcT8Qf
dUJQnCJ1i3KFILQq9+HUBlaPoOKYl9sAq2fnoS3x2jAIMkbSO+RpFKj0d4+0
LWD1qFNy+0RtkNHzxlXJ/aQGCkirH93tT4Zg8NPYFVNLIdCceTJDiyjQPP7W
ie02CqRMCuqyHd//aVbH3ggrzavHRz3lqo5l9Si2vrRpeh8Elj9807OVFFCM
tXjYC1g9gt21N5OeaBg9Qud7hI/jVA/+oRg+xoiG7Oc7NaDZIupe5OCP9dQv
y7pSfI0CwUcHvG+YaEZPxwe+yfVzWD4ZHvq6de1cv0g+Prpdg7sDWD5i53v0
xdXvzdNSDB/SL5yfHvsraFE561dNYXyvxME1QR1dtuc//k7/+fwi+cgGG++i
QpbPcWf+SD0Vt1+znB9j/aILTc0ft7F8hoL7RzboKYZPbanv7GQF4viF9dh7
L5a4ruTy2bH42s9ZboiTH1IP9ivotkYX9ybk7ReZH1OBqEV+jubkp+WbK7Fi
A2L0nJ13yXJLzfIxV8ccmnF8b3pjiF9eKeLkJ/qUKj/HE3H8wnxmSiZClqRB
Tn7Cne8b0718wPAM/SL94uNzPevGAhjO8vEY2mU8LERMfkg+pB7M58DJ4+3e
4fx+kf36TDq00PA6Ap7K/KqjtyAnz8EDK90NRYjjFxxUK/+MQcw9xHne7/we
6ddfeaEudCHi5Bnfn6SJ+WNKGzfP2K/A7rL63MO6p/aLzA9fv/D9eXeFok+W
gZj8kHnmu889XXHGzEoNb374/CL3gswP3oug9cM/fPU/fmE9+D5jPVsuj/i/
6OCM/SL7jvlovn174uAJ/v3CenC/Ospf+HHubJaPd35nfJXiAtMvrIfMz6+B
o2F5PTRoeijb8fVmipMfvn6Rfj3rfRasgRGNcYjpF9l3nGfcL7wX9q7fjnR7
IUYP5sN3n0eny0oP+iBGD84z5tO7VmA5tp5i/IKrzpmtCVrOnk6m+tncY2gQ
PFQ6bL/K6nnavvPxKRq4N7Lcyr0/5H5hvyr8VWs95mhBe+Xvw9YLiNkLkg/u
F7kXfH6R+359NWpc7OgX1rNOvdBq13Pz/P1cbcz5Ogi2TepWp+kRsxeYD76H
mA++P2qx332d4x/zKYraEzLfhDh5nlGcrRV9rmX82r7PW3T6EQTxS8ONAxU0
k+ebYnNEl5Dm5Hk4gY7y+lsH/gURjfK4
              "], "Calibrator" -> 
             MachineLearning`CalibratorFunction[
              "TemperatureScaling", <|"Theta" -> 5.532657348632154|>], 
             "Method" -> "RandomForest", "PostProcessor" -> 
             MachineLearning`MLProcessor["Identity"], 
             "Options" -> <|
              "FeatureFraction" -> <|
                "Value" -> 7^Rational[-1, 2], "Options" -> <||>|>, 
               "LeafSize" -> <|"Value" -> 5, "Options" -> <||>|>, 
               "TreeNumber" -> <|"Value" -> 50, "Options" -> <||>|>, 
               "DistributionSmoothing" -> <|
                "Value" -> 0.5, "Options" -> <||>|>, 
               "Implementation" -> <|
                "Value" -> "Default", "Options" -> <||>|>|>|>, 
           "TrainingInformation" -> <|
            "Configurations" -> 
             Dataset[<|<|
                 "Value" -> "RandomForest", 
                  "Options" -> <|
                   "FeatureFraction" -> <|"Value" -> Automatic|>, 
                    "LeafSize" -> <|"Value" -> Automatic|>, 
                    "TreeNumber" -> <|"Value" -> Automatic|>, 
                    "DistributionSmoothing" -> <|"Value" -> 0.5|>, 
                    "Implementation" -> <|"Value" -> Automatic|>|>, 
                  "NaiveImputer" -> Missing["KeyAbsent", "NaiveImputer"], 
                  "EMIterations" -> 
                  Missing["KeyAbsent", "EMIterations"]|> -> <||>|>, 
               TypeSystem`Assoc[
                
                TypeSystem`Struct[{
                 "Value", "Options", "NaiveImputer", "EMIterations"}, {
                  TypeSystem`Atom[String], 
                  TypeSystem`Assoc[
                   TypeSystem`Atom[String], 
                   TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 5], 
                  TypeSystem`UnknownType, TypeSystem`UnknownType}], 
                TypeSystem`Assoc[
                TypeSystem`UnknownType, TypeSystem`UnknownType, 
                 TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
             Dataset[<|
               "Configuration" -> {
                 "RandomForest", "FeatureFraction" -> Automatic, "LeafSize" -> 
                  Automatic, "TreeNumber" -> Automatic, 
                  "DistributionSmoothing" -> 0.5, "Implementation" -> 
                  Automatic}, "ModelUtility" -> Missing[]|>, 
               TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                 TypeSystem`Tuple[{
                   TypeSystem`Atom[String], TypeSystem`AnyType, 
                   TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType,
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>], 
             "InputDimension" -> 7, "OutputDimension" -> 1|>, 
           "AnomalyDetector" -> None, 
           "Log" -> <|
            "Example" -> 
             MachineLearning`MLDataset[<|
               "f1" -> <|
                 "Type" -> "Numerical", "Weight" -> 1, "Values" -> {500}, 
                  "ID" -> 6175595636656066259|>, 
                "f2" -> <|
                 "Type" -> "Numerical", "Weight" -> 1, "Values" -> {60}, "ID" -> 
                  3250360151571622964|>, 
                "f3" -> <|
                 "Type" -> "Numerical", "Weight" -> 1, "Values" -> {70}, "ID" -> 
                  5836769562449164475|>, 
                "f4" -> <|
                 "Type" -> "Numerical", "Weight" -> 1, "Values" -> {105}, 
                  "ID" -> 2702154115347595006|>, 
                "f5" -> <|
                 "Type" -> "Numerical", "Weight" -> 1, "Values" -> {70}, "ID" -> 
                  5808551868119997867|>, 
                "f6" -> <|
                 "Type" -> "Numerical", "Weight" -> 1, "Values" -> {120}, 
                  "ID" -> 7520944139751369250|>, 
                "f7" -> <|
                 "Type" -> "Numerical", "Weight" -> 1, "Values" -> {75}, "ID" -> 
                  6121582641204234430|>|>, <|
               "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                "LogDensityRatios" -> 0, "RawExample" -> False|>], 
             "TrainingTime" -> 0.184912, "MaxTrainingMemory" -> 1968320, 
             "DataMemory" -> 1069968, "FunctionMemory" -> 586232, 
             "LanguageVersion" -> {14.2, 0}, "Date" -> 
             DateObject[{2025, 4, 6, 20, 10, 15.456161`7.941676618017366}, 
               "Instant", "Gregorian", 2.], "ProcessorCount" -> 8, 
             "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX", 
             "SystemWordLength" -> 64, "Evaluations" -> {}|>|>],
         Editable->False,
         SelectWithContents->True,
         Selectable->False], "[", 
        RowBox[{"\<\"Probabilities\"\>", ",", 
         RowBox[{"\[LeftAssociation]", 
          RowBox[{
           RowBox[{"\<\"Total\"\>", "\[Rule]", "680"}], ",", 
           RowBox[{"\<\"HP\"\>", "\[Rule]", "126"}], ",", 
           RowBox[{"\<\"Attack\"\>", "\[Rule]", "131"}], ",", 
           RowBox[{"\<\"Defense\"\>", "\[Rule]", "95"}], ",", 
           RowBox[{"\<\"Sp. Atk\"\>", "\[Rule]", "131"}], ",", 
           RowBox[{"\<\"Sp. Def\"\>", "\[Rule]", "98"}], ",", 
           RowBox[{"\<\"Speed\"\>", "\[Rule]", "99"}]}], 
          "\[RightAssociation]"}]}], "]"}], ",", "3"}], "]"}]},
    {"\<\"Round 2\"\>", 
     StyleBox["\<\"water\"\>",
      StripOnInput->False,
      FontWeight->Bold], 
     RowBox[{"TakeLargest", "[", 
      RowBox[{
       RowBox[{
        InterpretationBox[
         RowBox[{
          TagBox["ClassifierFunction",
           "SummaryHead"], "[", 
          
          DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
           "Ready"}, 
           TemplateBox[{
             PaneSelectorBox[{False -> GridBox[{{
                   PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                   GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                    Axes -> {False, False}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                    FrameTicks -> {{None, None}, {None, None}}, 
                    GridLines -> {None, None}, 
                    LabelStyle -> {FontFamily -> "Arial"}, 
                    Method -> {"ScalingFunctions" -> None}, 
                    PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                    Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                    ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                    FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                    GrayLevel[0.94]], 
                   GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "7", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{"\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Numerical", "Numerical", "Numerical"}, 10], 
                    "Tooltip"]& ], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    TooltipBox["18", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{"\"bug\"", ",", "\"dark\"", ",", "\"dragon\"", 
                    ",", "\"electric\"", ",", "\"fairy\"", ",", 
                    "\"fighting\"", ",", "\"fire\"", ",", "\"flying\"", ",", 
                    "\"ghost\"", ",", "\"grass\"", ",", "\"ground\"", ",", 
                    "\"ice\"", ",", "\"normal\"", ",", "\"poison\"", ",", 
                    "\"psychic\"", ",", "\"rock\"", ",", "\"steel\"", ",", 
                    "\"water\""}], "}"}], Short[#, 1]& ]], Annotation[#, 
                    
                    Short[{"bug", "dark", "dragon", "electric", "fairy", 
                    "fighting", "fire", "flying", "ghost", "grass", "ground", 
                    "ice", "normal", "poison", "psychic", "rock", "steel", 
                    "water"}, 1], "Tooltip"]& ], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 BaselinePosition -> {1, 1}], True -> GridBox[{{
                   PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                   GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                    Axes -> {False, False}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                    FrameTicks -> {{None, None}, {None, None}}, 
                    GridLines -> {None, None}, 
                    LabelStyle -> {FontFamily -> "Arial"}, 
                    Method -> {"ScalingFunctions" -> None}, 
                    PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                    Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                    ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                    FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                    GrayLevel[0.94]], 
                   GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "7", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{"\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Numerical", "Numerical", "Numerical"}, 10], 
                    "Tooltip"]& ], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    TooltipBox["18", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{"\"bug\"", ",", "\"dark\"", ",", "\"dragon\"", 
                    ",", "\"electric\"", ",", "\"fairy\"", ",", 
                    "\"fighting\"", ",", "\"fire\"", ",", "\"flying\"", ",", 
                    "\"ghost\"", ",", "\"grass\"", ",", "\"ground\"", ",", 
                    "\"ice\"", ",", "\"normal\"", ",", "\"poison\"", ",", 
                    "\"psychic\"", ",", "\"rock\"", ",", "\"steel\"", ",", 
                    "\"water\""}], "}"}], Short[#, 1]& ]], Annotation[#, 
                    
                    Short[{"bug", "dark", "dragon", "electric", "fairy", 
                    "fighting", "fire", "flying", "ghost", "grass", "ground", 
                    "ice", "normal", "poison", "psychic", "rock", "steel", 
                    "water"}, 1], "Tooltip"]& ], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"RandomForest\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["434", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 BaselinePosition -> {1, 1}]}, 
              Dynamic[Typeset`open$$], ImageSize -> Automatic]},
            "SummaryPanel"],
           DynamicModuleValues:>{}], "]"}],
         ClassifierFunction[<|
          "ExampleNumber" -> 434, "ClassNumber" -> 18, 
           "Input" -> <|
            "Preprocessor" -> 
             MachineLearning`MLProcessor[
              "ToMLDataset", <|
               "Input" -> <|
                 "Total" -> <|"Type" -> "Numerical"|>, 
                  "HP" -> <|"Type" -> "Numerical"|>, 
                  "Attack" -> <|"Type" -> "Numerical"|>, 
                  "Defense" -> <|"Type" -> "Numerical"|>, 
                  "Sp. Atk" -> <|"Type" -> "Numerical"|>, 
                  "Sp. Def" -> <|"Type" -> "Numerical"|>, 
                  "Speed" -> <|"Type" -> "Numerical"|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                "Preprocessor" -> 
                MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                    MachineLearning`MLProcessor[
                    "FromNamedFeatures", <|
                    "FeatureNames" -> {
                    "Total", "HP", "Attack", "Defense", "Sp. Atk", "Sp. Def", 
                    "Speed"}|>], 
                    MachineLearning`MLProcessor[
                    "Transpose", <|"FeatureNumber" -> 7|>], 
                    MachineLearning`MLProcessor[
                    "WrapMLDataset", <|
                    "FeatureTypes" -> {
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical"}, 
                    "FeatureKeys" -> {
                    "f1", "f2", "f3", "f4", "f5", "f6", "f7"}, 
                    "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                    Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
                "Perfect", "StructurePreserving" -> False, "Missing" -> 
                "Allowed"|>], "Processor" -> 
             MachineLearning`MLProcessor[
              "Sequence", <|
               "Input" -> <|
                 "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "(f1f2f3f4f5f6f7)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 7|>|>, 
                "Processors" -> {
                  MachineLearning`MLProcessor[
                  "SynthesizeMissingValues", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Distribution" -> 
                    LearnedDistribution[<|
                    "ExampleNumber" -> 434, "Preprocessor" -> 
                    MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>, 
                    "f4" -> <|"Type" -> "Numerical"|>, 
                    "f5" -> <|"Type" -> "Numerical"|>, 
                    "f6" -> <|"Type" -> "Numerical"|>, 
                    "f7" -> <|"Type" -> "Numerical"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7|>|>, 
                    "Version" -> {14.2, 0}, "ID" -> 3128401418847633772|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7|>|>, 
                    "Mean" -> {411.241935483871, 67.3041474654378, 
                    74.92165898617512, 67.7442396313364, 67.67281105990783, 
                    67.83410138248848, 65.76497695852535}, 
                    "StandardDeviation" -> {115.13644076732302`, 
                    27.391842294252207`, 30.71975813877622, 
                    28.181382985980058`, 30.848355839437538`, 
                    27.105445883488365`, 29.403674950174253`}, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7|>|>, 
                    "Version" -> {14.2, 0}, "ID" -> 3798507262341624293|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                    "DirectTraining", "BatchProcessing" -> Automatic, 
                    "Model" -> <|"RotationMatrix" -> CompressedData["
1:eJwBmQFm/iFib1JlAgAAAAcAAAAHAAAA6vz8sLu14L+wIu0GX2qVP8gd/+8b
X5i/GBqulqOxkr9VVlB6riyTP/2VkzU00p+/KdgcbKY96z/ZtkHvKQXUv2lh
oV0Y1dG/KOmbq5iL2D/o9PZM9ufnv6iAPP1ffsA/uMVFnoXSz78Gqeb5Q+PJ
v3sKGr35hte/ggAX5GOqtL+U2kmXG8Dlv6uFv/d1ttK/4LlKfhb7xb86t3+W
wqreP9+caulhH82/eXLbgUr31L84lrJBNzDhv97XRoSqztG/Mdn70GB23D9q
1sDNjhi+P71r+TDCsOC/mF1BC1yTyr+qJs9rusfYv5jpan3Id9c/Cjm0LnJt
zD9sLO3tKjrCP92cHu3Svue/TbFZs66Yyr/KwyFGA0DNvwy6xgnyPdm/ThAt
pyFFwr8qmh8Z5kLfP2XlyW5uw9c/fwn+JuwC0D+YkIwZa8niP8ZheY1vtsm/
/VOzCoNG0r8PdEiUePzlP8nVzfQyP8S/1MZUgD6wiD9J6ky4CkniP/cPsGcH
98u/8sMv4Xq+y783tN+H
                    "], 
                    "Precisions" -> {0.2730820523511628, 0.8939851571938014, 
                    1.2763266948968766`, 1.3431047514495789`, 
                    2.3323864168032413`, 3.808262197876167, 
                    32007.728257058516`}, "NoisePrecision" -> None, 
                    "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7|>|>, 
                    "Mean" -> {-0.00021029944479236565`, \
-0.00010307100027342122`, -0.000010380306694434879`, -0.00013040320243778327`,
                     0.00009072330493771542, -0.0003151098510840589, \
-0.0002183918929986646}, "Output" -> <|
                    "(f1f2f3f4f5f6f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7|>|>, 
                    "Version" -> {14.2, 0}, "ID" -> 5259173057983746779|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 7|>, 
                    "Key" -> "(f1f2f3f4f5f6f7)", "Invertibility" -> "Perfect",
                     "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"|>], "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 7, "Options" -> <||>|>|>|>, 
                    "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"(f1f2f3f4f5f6f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7|>|>, 
                    "Mean" -> {-0.0002102994447924188, \
-0.00010307100027342813`, -0.000010380306694473251`, -0.00013040320243780346`,
                     0.00009072330493762935, -0.0003151098510840604, \
-0.0002183918929986835}, "StandardDeviation" -> {1.0000610752234282`, 
                    0.9996497687328827, 1.0003576732404964`, 
                    1.0004943925286276`, 1.0002722006066052`, 
                    0.999672786897769, 0.999439358031459}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 7, 
                    "Output" -> <|"(f1f2f3f4f5f6f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.2, 0}, "ID" -> 
                    886936155450518819|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7|>|>, 
                    "Mean" -> {-0.0002102994447924188, \
-0.00010307100027342813`, -0.000010380306694473251`, -0.00013040320243780346`,
                     0.00009072330493762935, -0.0003151098510840604, \
-0.0002183918929986835}, 
                    "StandardDeviation" -> {1.0000610752234282`, 
                    0.9996497687328827, 1.0003576732404964`, 
                    1.0004943925286276`, 1.0002722006066052`, 
                    0.999672786897769, 0.999439358031459}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 7, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.2, 0}, "ID" -> 
                    886936155450518819|>], "InputDimension" -> 0, 
                    "OutputDimension" -> 7, 
                    "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {305}, 
                    "ID" -> 14566826155945013|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {50}, 
                    "ID" -> 3475895217677343472|>, 
                    "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {40}, 
                    "ID" -> 1301051682472937812|>, 
                    "f4" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {85}, 
                    "ID" -> 241594786734218612|>, 
                    "f5" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {40}, 
                    "ID" -> 8046481646316822211|>, 
                    "f6" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {65}, 
                    "ID" -> 992805473035634020|>, 
                    "f7" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {25}, 
                    "ID" -> 73236510287448288|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.028249, "MaxTrainingMemory" -> 254864,
                     "DataMemory" -> 33728, "FunctionMemory" -> 59512, 
                    "LanguageVersion" -> {14.2, 0}, "Date" -> 
                    DateObject[{
                    2025, 4, 6, 20, 11, 49.25281`8.445005988957233}, 
                    "Instant", "Gregorian", 2.], "ProcessorCount" -> 8, 
                    "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX",
                     "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                    "LogPDFDistribution" -> 
                    MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-4.3864719032357256`, \
-4.3864719032357256`, -4.276109064901494, -4.262540931695793, \
-4.222509008631812, -4.19775993388705, -4.150877758245389, \
-4.090077393829596, -3.9120734996482627`, -3.8580496289372346`, \
-3.7495750571565667`}, "LeftBoundary" -> -4.276109064901494, "LeftScale" -> 
                    0.05518141916711583, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                    Around[28.774230926118246`, 0.45621412465825306`], 
                    "EntropySampleSize" -> 10|>], 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "EvaluationStrategy" -> "ModeFinding", 
                    "Version" -> {14.2, 0}, "ID" -> 3520938463763109121|>], 
                  MachineLearning`MLProcessor[
                  "ToVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7|>|>, 
                    "Version" -> {14.2, 0}, "ID" -> 8401888890595954248|>], 
                  MachineLearning`MLProcessor[
                  "Standardize", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7|>|>, 
                    "Mean" -> {411.241935483871, 67.3041474654378, 
                    74.92165898617512, 67.7442396313364, 67.67281105990783, 
                    67.83410138248848, 65.76497695852535}, 
                    "StandardDeviation" -> {115.13644076732302`, 
                    27.391842294252207`, 30.71975813877622, 
                    28.181382985980058`, 30.848355839437538`, 
                    27.105445883488365`, 29.403674950174253`}, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7|>|>, 
                    "Version" -> {14.2, 0}, "ID" -> 3416117032667718646|>]}, 
                "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
                "Missing" -> "Imputed"|>]|>, 
           "Output" -> <|
            "Preprocessor" -> 
             MachineLearning`MLProcessor[
              "ToMLDataset", <|
               "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Preprocessor" -> 
                MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor[
                    "WrapMLDataset", <|
                    "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                    "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                    Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
                "Perfect", "StructurePreserving" -> False, "Missing" -> 
                "Allowed"|>], "Processor" -> 
             MachineLearning`MLProcessor[
              "Sequence", <|
               "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Processors" -> {
                  MachineLearning`MLProcessor[
                  "ToVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.2, 0}, "ID" -> 4544819100394706971|>], 
                  MachineLearning`MLProcessor[
                  "IntegerEncodeNominalVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                    "Index" -> {<|
                    "bug" -> 1, "dark" -> 2, "dragon" -> 3, "electric" -> 4, 
                    "fairy" -> 5, "fighting" -> 6, "fire" -> 7, "flying" -> 8,
                     "ghost" -> 9, "grass" -> 10, "ground" -> 11, "ice" -> 12,
                     "normal" -> 13, "poison" -> 14, "psychic" -> 15, "rock" -> 
                    16, "steel" -> 17, "water" -> 18|>}, "MissingCode" -> 0, 
                    "Version" -> {14.2, 0}, "ID" -> 5206921949863604364, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
                  MachineLearning`MLProcessor[
                  "FromVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|
                    "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {18}|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Version" -> {14.2, 0}, "ID" -> 5922851939305123031|>], 
                  MachineLearning`MLProcessor[
                  "FirstValues", <|
                   "Info" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 18|>, 
                    "Key" -> "f1", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"|>]}, "Invertibility" -> "Perfect", 
                "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
             "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
             "Marginal" -> <|
              "bug" -> 0.046460176991150445`, "dark" -> 0.028761061946902654`,
                "dragon" -> 0.028761061946902654`, "electric" -> 
               0.06858407079646017, "fairy" -> 0.03761061946902655, 
               "fighting" -> 0.050884955752212385`, "fire" -> 
               0.07079646017699115, "flying" -> 0.00663716814159292, "ghost" -> 
               0.024336283185840708`, "grass" -> 0.08628318584070796, 
               "ground" -> 0.035398230088495575`, "ice" -> 
               0.035398230088495575`, "normal" -> 0.1504424778761062, 
               "poison" -> 0.03761061946902655, "psychic" -> 
               0.09292035398230089, "rock" -> 0.0331858407079646, "steel" -> 
               0.017699115044247787`, "water" -> 0.14823008849557523`|>|>, 
           "LabelSplitter" -> 
           MachineLearning`MLProcessor[
            "FeatureLabelSplit", <|
             "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
              "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
           "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic,
            "Prior" -> Automatic, "Utility" -> 
           SparseArray[
            Automatic, {18, 19}, 0., {
             1, {{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 
               17, 18}, {{2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {
               12}, {13}, {14}, {15}, {16}, {17}, {18}, {19}}}, {1., 1., 1., 
              1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.}}], 
           "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
           Automatic, "BatchProcessing" -> Automatic, "Model" -> <|"Trees" -> {
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 2, 3, 3, 5, 7, 2, 1, 1, 3, 2, 5, 1, 
                   7, 7, 4, 1, 5, 7, 3, 3, 7, 7, 6, 2, 1, 3, 3, 7, 5, 1, 2, 6,
                    5, 3, 3, 6, 3, 7, 2, 7, 3, 5, 1, 6, 6, 5, 5, 6, 3, 1, 3, 
                   4, 3, 5, 5, 5, 5, 2, 4, 6, 2, 2, 6, 4, 2, 1, 1, 3, 7, 2, 6,
                    5, 7, 5, 2, 3, 1, 1, 7, 2, 6, 2, 2, 3, 3, 3, 5, 5, 2, 1, 
                   7, 6, 2, 6, 3, 1, 2, 7, 3, 4, 1, 3, 4}], 
                 "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBTQOy/CFib1JlAQAAAGgAAADAbTrG/cW2v3A7u9OXqb0/WMG+ZI4t67/o
jWo5UpzFPzB+7ePv6fC/OGNrErk27b9AGJZuRVq1v5hE5GDqPfO/0J1QuQd7
8L9IMIv3KuHwv2izzbZ53tu/CJZfxnoS9L8Y28qB0LD8vyD1uRlQL/C/8M0y
zs3d8b/Ez8XpHmcCQFCn/oDeRfq/uC77doTQ0r8Iv0WTimrCP5iDDnLveui/
OBXQitMD1b8AcOKVXbnRv6DRSrMmH+e/GGWW1ZAHwj/4w9JXo7ncv9CnSksa
Ju+/2AJqQyb95L9oY+g2w7zmvxidgv8ypKi/4LAStRFs57+gxcILN8btv1AS
UPuwCu2/SLj3WM43478wijnkrkjNv1DtL4LkY9q/ABwwB7kotL9ggVitZ/P7
P6gutP8d8/0/WJy1tKWc7r/I8rSR83rxv8hcTDjbceo/KNqTIsQe+j9gVKx3
AQrxv4DbHuPjrfS/SIyUqZ2d4b94cCld+9vtv0BcgkktXNC/4MaK00g70L94
niHYYG21PzC61NtBLwFAyNp9qee+iD9Y6xcruPTzPzjjHyaYfri/CIbWpo3p
/T9IwYL5wUvQv/CVvHUSddc/4DptNz5Ztb8Ihoxt2HDOPyCgGXlFE+q/AKdt
xTg74b8YGSsY53HhPxAnGsrGQe0/gK4BU1ff5D8QLON1pR4AQFAlHdK90MA/
cCnhB3pT6j+g8Z/7a8L2P9i9KFbrz+M/WMs7hpti+z+oxq4IrWv9P7jpc7MI
w9K/UKchxiUg5r/oG7NALeTOP6hpVugRbOG/CHiVsLBktL947a4ftRK2v5Bq
Uhd57eE/aLVlDUiIsj/QVIVeV9vCP5jJYmhyLey/cHBcco+y0T9oDH/2FFXS
P3i4vXFUDNI/YA3TmhhOVj+I8lJ/Cd7wP/BX54ArRe8/GGXW//kjvj/ohLL8
LNLZP2A2Cjav8+4/qLMurF3v4T9wdu4dryflP8hmtgIg/tG/6BfCIgWQzj9g
aKd88cbdP+Dc33cMEuo/AF5jAqE0sr/43WLjqq/kP/DHC+B9L/0/SEPbiaDy
478gHJP6GXWYv9BSlLnJ8PA/2I69Mb659j84zozDJyDqPyQAvIFPGgJAH4HF
ZA==
                  "], "Children" -> CompressedData["
1:eJwdidVSFAAAAHewwO4uFOzCwA5MQDAOuw89uCedOZ1x/BK7CxW7u7u7u7s7
1tOH3Zmdjc+eFMiJASbHRhUITk2JRILTsuKikTZxSig3FElKDv/74Sgx/ylA
QQrRjvYUpghNaEoscSRSj6IUowxlKU4JSnNSLckfS/HbE/7yuD89ZjnKU4nK
/PCo361ARY74zcNWoSp1OORXD1qN6nzxgDWoSS32+9nafHKfH43ng3utyx7f
m8A7d1ufXTZkp29twBt32IjtNmabr93qK7fYjOa8tAVJtOSFm23FJtuw0ee2
5pkbfGoybVnvE9fZgbU+tgsdWWMnOvPI1T403650I4XujGOVPejJA1faixUO
YSi9ybMPy00ljfumk0Em9+zLXZd5x34MYCC37c8tl3rTAINZ4g2zGMRir7vI
ay50GAsczgiuOt+RzHM0c73iKC47x0uOYSyzvegsg2RzwfFMIMR5Z3rOHM4a
5oy5nHaGp5zuX1N+2uM=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 1, 5, 13, 18, 4, 13, 14, 18, 
                   18, 3, 12, 3, 7, 13, 18, 11, 11, 16, 13, 11, 1, 6, 13, 13, 
                   5, 9, 10, 15, 4, 15, 18, 4, 2, 13, 7, 13, 4, 18, 7, 18, 5, 
                   17, 14, 2, 5, 15, 14, 5, 13, 10, 13, 10, 15, 2, 16, 18, 13,
                    11, 10, 13, 4, 7, 10, 14, 18, 18, 13, 17, 6, 10, 1, 2, 6, 
                   16, 13, 3, 6, 16, 2, 15, 5, 18, 1, 18, 3, 15, 2, 4, 7, 13, 
                   4, 12, 10, 6, 18, 10, 12, 18, 15, 10, 8, 15, 15, 17}], 
                 "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{1, 7, 5, 1, 4, 5, 2, 3, 7, 3, 7, 3, 3, 
                   2, 5, 5, 1, 2, 1, 3, 1, 4, 3, 2, 2, 4, 7, 5, 1, 5, 4, 4, 7,
                    3, 7, 3, 3, 5, 3, 3, 2, 5, 3, 5, 7, 6, 7, 3, 2, 1, 2, 2, 
                   5, 4, 6, 1, 1, 4, 6, 1, 5, 3, 4, 2, 7, 6, 3, 2, 5, 7, 5, 3,
                    1, 1, 2, 5, 3, 7, 7, 4, 2, 1, 1, 3, 1, 2, 1, 3, 4, 4, 1, 
                   5, 1, 3, 3, 1, 6, 5, 6}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBJQPa/CFib1JlAQAAAGMAAAAQdg5W2Q/5v3hdJP4rWvO/gM2cDPPDtL8g
YN0C/DX/vzgIpJ21N/G/mD1JH9YM8b8I7L7BVZHcv1jBvmSOLeu/aAC1ABxN
6j8oBkykba7zPzB0llfLH9C/uJIbkkWV7b/ol8HBk1LKv6h8Q8vTbfO/cBUB
Mhiz4r/ATa6Gl0Dzv4g9shBsOe6/YIYsk0xn5L8AhSyjlSXwvyjZ2ZEmcuW/
gNgrNVnw8L8AhxLZ5UTqvygnTT1HjdU/WOxBCmjM3L/YMzbW9zbmvziMAeVF
nui/eMamukkpvL84e2xA4m3iv6jMfVFh0uu/EOZpSy4dx79oSW11TU35P0h+
wv0uy3u/QFgnBYCwzD/onXXc+0PvP+BhEmDbtvK/YKDJ6ObOz7+YcQtwXnvE
v8AOlz3EGua/+AECx6NQ5r8AU+fkrjrsvzBPl5dcPKC/gFbAQjvI8r84ztL/
DXrvPwjZhRddWb6/KFp9uZ8P7b8Al1TquijSv3gIMSnGm7s/qEoyJxjW7D8Y
AP0WsDDbP+BAKLhmJOM/+LAUZ5u24j9oGBr8kSz2P4hM5ngJ58+/IBfqjxLS
1T8ItSAGQwTSv3hzyTvJPek/WGf/Cxlq8b9gGpBqjmrjP6BmaFjy3vG/4Kc3
XN6F6T/45DH7XqDpP6DPT2tQpde/IJi76YEyuj8AcPWeBV3Gv4Bd6P/Gg+S/
+Pzkj/pv0D/g0qAWXW7UP9BODs5STcg/QNW5JRP+7j/Qhgp/AiPyP9il6DPN
se0/IO7FquZ/xL+YpNMYnBLnP8Dmph/DleO/IMDUV/D33r9I6sSb2priPxAJ
bL4hRMW/SPsWT0aZyD8I62iAG/nRvwhIY68iZeK/SNGN2p6b4T8gaWkGJtLl
P4iW1g6hXvY/2Atx9biT9z+wrbCyLRfuPxjQvfNWDsk/gKBqrDpv9D/oogdR
d5vUv4i7fzEZe86/yKG02Fzjsb+waTEIp+zzPxiPTNXA/PM/INTCB5Le5T/Y
sgoNXMyyv0DyVoR+hc8/0MO95iZD4j9IoxZUzgXxP+gPKzWdPO8/kEizB7YF
6j+5n6YI
                  "], "Children" -> CompressedData["
1:eJwdkVVPFQAARs+wALs7MDERBWwFBRHbiygqiheH+qTb1c35X+zuxgI7sAu7
UOwu7DhefTjfdvY9npi8uYGZEcC8yPAEggtSQqHgwsyosGTMmZ8/Kz8UnzT7
3z8jTMR/KqAVqUIkf6xEZU7721NGEU0f+lKVYlvSimpUpwY1aUJTflmL2tTh
pyetSz0a0oj6nPCHx23AMb971MYc8ZuH/eohm9GcLx70sy0o94CfLDKG1vSg
J21oy0cLbUd7Ptid9+63A7G8syNv7cIbO/Hazrxyn13Z60u7EcceX7jbeAp8
7i4T2GkiSTxzh73Y7lN788RtPnarj+xHfwZQ5hYHMogp5JBMCpmM56GDGUIq
D9xsqWkMJZ37bnIYGYxhLMMZwT03eteR3HE0o9jgbdd7y3XedBw3XOt1A1xz
jVms9qqrnMBESlxpNiu84iQuO5lLLncq05hOkIvmcsFlnnep58wLd1jiWRd7
xkX+BYD10Og=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 18, 2, 16, 15, 10, 14, 12, 1,
                    1, 4, 10, 7, 16, 13, 13, 14, 5, 13, 6, 11, 10, 1, 13, 16, 
                   5, 3, 11, 10, 18, 4, 4, 5, 10, 4, 2, 15, 7, 13, 13, 1, 18, 
                   15, 4, 6, 5, 4, 10, 14, 15, 10, 18, 13, 2, 1, 6, 4, 9, 3, 
                   18, 11, 13, 9, 18, 18, 6, 18, 18, 10, 13, 13, 18, 13, 2, 6,
                    14, 16, 6, 3, 1, 6, 15, 13, 18, 7, 18, 7, 14, 7, 18, 15, 
                   12, 12, 2, 4, 17, 18, 18, 13, 15}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 1, 3, 3, 2, 3, 3, 3, 1, 7, 5, 3, 2, 
                   7, 1, 3, 3, 5, 5, 6, 6, 1, 4, 2, 6, 1, 1, 5, 4, 1, 4, 7, 4,
                    5, 5, 3, 5, 3, 4, 4, 2, 7, 2, 3, 1, 1, 7, 3, 6, 7, 3, 6, 
                   4, 2, 4, 1, 5, 7, 6, 1, 2, 4, 1, 7, 4, 3, 2, 4, 7, 3, 4, 4,
                    7, 6, 7, 3, 6, 2, 6, 3, 1, 7, 7, 5, 6, 2, 2, 5, 1, 3, 3, 
                   2, 1, 4, 5, 3, 6, 7, 5, 5, 1, 3, 2, 7, 2, 6}], 
                 "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBXQOi/CFib1JlAQAAAGoAAACIAaxWS7G3v2iwoJ5A8fi/oEsmI6q/5L8w
TAGdpHbzvwjsvsFVkdy/sOqI2Ez4978YwmktxyTFP4BRipnAUfU/0J1QuQd7
8L+IbTEn0Hv0P1iNxqRRy+y/uJIbkkWV7b/IQqV+rFLhv8h7d2saIe0/wIcj
8j4787+oQr4ESNb0v/gL/kQq1OS/0L+OKgs94r94Lkvx/hbov4j1tgjOeOu/
IM94Fb0T6b/gXg5iqNPsvwg+ie4aZea/oPYW93QJ7L9QtKZm7AbpvxCagLMU
Ge2/cNBr7RAI579oRPj4k3/Qv5B7LNZRIoG/aH/Piqyw9b9QCFeQrODVP9AM
y7hKIu2/aJpn9Rnd07/gPMMWNeXwv0B+3aQ5H/C/+HPISwrs5D9IVHfj3lPV
vzArq/iIOpU/QFOfeHm2478AmtRJ0T7lv+BUh9Yu09E/OOOMevsB1D/YMWBT
x/J8P9j1yL7QnfM/mErXAi3Etr8guiUBFFXxP7DsMKu1GO0/aNsoOVhoxT/g
EsZV2l3nP3jEB+HY4+Q/GBCyRBcC+j+IMty6YLTSv0jEDF9DW/k/kIye9hBc
3r94Qq+ms5LpPyhsPa4bQ+K/sP0BWhu/5D/wHiCYbSz2v8CImJEF0PG/6Jhj
0U2G6r/gA1vqqQPRv0hsHT8v0fm/qLjzIvKd0b+4jVRgglf1P+DAGN+iQ/I/
qKoubqCp4r9g3SeEviW2v3gvG1JhBca/aARM5gSlu79IYerqzi7yP9iUsaqy
Auu/AJDlLfz95r+Y1qFy5zzsv+j4Q4jo0OU/AHHyw6U89D+Qr5xetejoP8zY
gR4ixAZAUHvyGHbvxj/Yc+dYmezJP2iy45+ljec/SDFAPRcJuL9wdIOZ0k/B
P7BVkbwQ19y/EJlppVpssj8wf06OWq7pP+jeAmYum9C/KNnRC3hQ6j/wQ62y
p4v8PzCYO1VkYdE/OKuxeCM/kD/4vhi/dEn2P7Bv8blFfNC/YEN7ZVof7D94
So7ysGi3v0DWJI+WcQFA+ArXYN1t3z9oHrgLxePQP8wQMugKEABA+OQx+16g
6T8gzsrIW8rwPwCDyi0zU/A/mIby6NSaxT9QpfQcS5/xP1g0HNG1ULC/IEub
spNIx79oQb4pjPPyP9aNzXQ=
                  "], "Children" -> CompressedData["
1:eJwdkVVTFAAABnewwMTuQLETAztQDGwPuw89QB905nTG8YfY3WAndnd3d3d3
rqcP+83sfI8blzYxkB4FTIqOTCA4JSkcDk5NjYlIyoTJoYxQOCEx898/PkLU
f3KRmzwk0py8HDcf0egxY8hPBSpSgIL88aiFOGIsRSnMYYtwyN8e9JfFKE4J
fnrAH5akDGX5bim+WZqv7veL5SjPPj+710/usRKV+WgCH6xCQxoRR1Wqsdt4
qvPeXb5zpzWoSS1q89YdvrEOdanHa7f7ym3WZ6svbcALc3zuFp+52cZssgkb
bUoznrrBJ663BS3pQBKtWGdb1vrY1jyyDQ9d4wPbcd/23HO1HenEGMZy12SG
M4LOdKEr3ehFb1Lozh17cNtV3nKlPcn2pln2YYU3HEZf+hFgudcdQCr9ueYy
r7rUgQziioMZyhKHsNjLLvKSC73oAi8435GMYjTzDDLX887xnGmcdbYh0slk
lmec6WkzOOUMx0UqnXS6J5zmX3R93uE=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{15, 6, 13, 15, 12, 14, 18, 12, 
                   10, 18, 12, 1, 16, 13, 15, 7, 18, 7, 14, 13, 1, 13, 13, 2, 
                   12, 6, 15, 18, 10, 4, 13, 15, 4, 2, 10, 18, 7, 9, 13, 4, 
                   18, 14, 18, 4, 7, 4, 1, 15, 10, 10, 18, 13, 9, 18, 2, 1, 
                   11, 10, 16, 11, 6, 7, 18, 18, 7, 14, 10, 5, 6, 5, 1, 11, 
                   16, 16, 6, 14, 3, 1, 11, 16, 5, 15, 18, 1, 7, 3, 9, 7, 3, 
                   10, 7, 12, 18, 15, 18, 13, 12, 2, 7, 2, 18, 4, 11, 18, 10, 
                   17, 15}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{1, 2, 3, 6, 5, 1, 3, 6, 2, 5, 5, 5, 3, 
                   7, 2, 2, 1, 4, 5, 4, 5, 1, 6, 3, 2, 2, 1, 1, 7, 1, 6, 2, 7,
                    7, 5, 2, 5, 4, 1, 5, 2, 3, 2, 6, 1, 7, 5, 2, 7, 2, 1, 7, 
                   3, 4, 3, 3, 2, 2, 4, 3, 2, 3, 7, 2, 7, 4, 6, 6, 3, 5, 1, 4,
                    4, 3, 4, 2, 4, 6, 7, 1, 6, 6, 3, 5, 5, 6, 2, 5, 3, 5, 3, 
                   7, 4, 7, 4, 2, 1, 7, 1}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBJQPa/CFib1JlAQAAAGMAAAAYdcAMYij5v0CY1Jgr7/G/gIuLRRDG9L+A
kJ4cFvXnv1ghhHqn0c6/aP78LBJs9L8Qz4M4S/n9vwABYm47ocm/QHIj7Kwk
3L8gKyPb/Hf8P4AiFDnQOeK/wFz4jb3+8L8Y4f46jn7Ev5Dxrqk6YPO/OEnr
U4xo6L/QWHGbGE/hvyCBUn4Zpe+/aLbsG+kXtT9wAuqVFhrqv+AAiNDrlu+/
WNp276uO4r9QJbgt2+HuvwC4QiHUsO2/iDO7+Ebb3r/Y2fHmRgPtv4g0x1mX
Rty/EF4+jj3V3b9wHJ/yLnnuv7iUKyAUSeG/mOLPXGDE47+4IsMlvjLsv4gb
ODzflcc/kB+RYuWY5z9Q6ePhcr/jP0DMCTWKONC/qMRXQVqPtL9oJKjz0zDv
v3BohxSstfE/IDOaOk/j4L8YN3bhA5Xsv0hUsFbIwtk/OCMsVGqS/D/oEd/h
KXawv2Cr3ymgHLU/yAdZXpVIwL9gZm5yeGa4P7CAtio2ktq/sOvkbySC5D9o
Z1SlnSv4P5DLrkgMV9I/eP8PvwYX/z/Qk3caSrzuP7BGeKNqaeM/QPQq2Vcl
tD9Ia84NN7nSPwhvsKzuQeK/SJxNHynLtr8IFUYoIaTev8hjYe4ce9O/KHoA
xCw77794QnZsGeHsvwD26t/zrNW/aARM5gSlu7+oN3u4GkXhv0i5DgdS28w/
cPxNDsX47j/4/OSP+m/QP0AeELk4cYa/GMD/o30L5T8oDTQq5yHnP6Dsr8z6
iPI/+NhTLkkm1j+Il/RHs3vmPwiuItrAEuu/gPaMiKHHzL/IYzftL3a7P/ii
v4tTLNw/MAAZ9mTm8j9AXRruId7vP1A9w4FJ9es/4HB8vFDGxb+wsSIEVDr9
P5hRkRfgjvc/0Jp/cxtU7j94a19+HlfzP/DXGECBJ+y/YFt6rlJg5z9Qurdg
2RfzP5A0axL4LOY/iGpx3lbnsT/4IxzwWHvxPzgnu/fuZ/w/sOlQPN9P5j/Q
2PheQrvyPyQAvIFPGgJAGMzOj9vD5D9YtxEW0Rn6P/Ah+lB8+9y/oPGf+2vC
9j8W3Ke1
                  "], "Children" -> CompressedData["
1:eJwdifdTDgAAQN8llOxNRPYqMrIjOzNfZI+vLvyUu48753+xN2XvkS1kZG/Z
K3uveH388N7duxefNT8wJwJYEBVWILgoNRQKLs6IDkda7sKcuTmhpOR5/352
mIj/VEDPG0lF/lqJaKrwx8qUGcVvzxlDVbrSjWpUpznx1KAmv4yjFrVpQpF1
qEtjYvlpPX5Yn++etQEN+eYZG3Harxb6xVN+9qRNOeEnj9uMY370qB88Ygta
0orDJlFga9rw3ra0pwPtOOQ7D9qRTrz1gG9MoDNdeG0ipe73lft86V5fuMfu
9CDIbpPpSYAMetGbkYyiD30ZxGD6scsUBtCfnT53h88cyFNTeeJ2H7vNIQzl
kSN46FaHscXhbPaB+ZaYxn3zvOdo7jqOMWxyLBu94wZvm8541nvLdU5gIlOY
SiaTuOlab7jG607mmqu96jSuOIvprHIGK73sTC65wtkst9hlZrHUi2ZzwSWW
A7kz0Og=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{18, 13, 5, 13, 15, 9, 13, 7, 4, 
                   18, 16, 13, 1, 11, 18, 16, 13, 10, 11, 18, 1, 3, 6, 16, 13,
                    7, 7, 18, 2, 7, 10, 18, 14, 13, 12, 15, 6, 4, 4, 10, 12, 
                   13, 13, 5, 13, 6, 18, 10, 12, 15, 4, 1, 15, 16, 10, 3, 18, 
                   10, 14, 18, 6, 6, 6, 18, 6, 1, 3, 13, 5, 16, 2, 5, 13, 16, 
                   18, 4, 18, 10, 7, 2, 1, 17, 9, 15, 10, 13, 5, 9, 10, 7, 5, 
                   18, 4, 4, 8, 18, 17, 13, 2, 15}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{3, 6, 5, 5, 2, 7, 1, 3, 2, 3, 5, 1, 5, 
                   2, 7, 3, 7, 4, 5, 5, 6, 6, 1, 3, 1, 1, 6, 3, 2, 2, 6, 4, 2,
                    1, 5, 7, 3, 1, 1, 2, 7, 5, 1, 2, 7, 2, 5, 5, 6, 3, 7, 6, 
                   6, 6, 4, 1, 1, 1, 4, 5, 3, 5, 4, 7, 6, 5, 5, 3, 6, 2, 3, 4,
                    2, 3, 7, 6, 2, 3, 5, 6, 6, 6, 6, 3, 3, 5, 4, 5, 5, 5, 5, 
                   6, 1, 3, 3, 2, 2, 3, 1}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBJQPa/CFib1JlAQAAAGMAAAD43DuXs7/0v6DhlUpYUfa/QISu7hsezb+Y
3HjlMPr5v4CkyTTEIPG/QPsJWN/A7r9AREULGHT3vxjcB+suYf6/mKpr0Yn2
7b+Ar4Ub/oTnP/BljdJ8oFs/cOSZUb79az+IHRHBHzPqv7C1SryFgtG/mMCc
sVsC8r94kBBE7WLEv6gWKfo3wuu/2FKkBVh95r8YHPCIPF33v0iCTkz+PuK/
EHL0guvF6r9glKkFwfrkvyjJX0FEJ++/4D+uDY4O67+wIMPFWAL8v9gBc6Cs
APG/CPsqke9U8b8Qzh+noxHiv0CHLg+ueu2/6G0XR8vB8r+glW+KGFznvwCS
TEzOgNm/8DN2h7xZ17+wt8yZ11jqv9jIVmOigvO/2M8NHpmI17/gq4dSFs7u
v1hETem2s8K/yPw0DBeC5r9o0PlgU7W0v7jglDSKluC/sK8FplPdz79IJ5/k
c8K0P+Bb224dqvQ/OPHVoux287+YmJ5kGYbqP3iJB9sDGOK/6CMlj/kc1b+Q
rieQXXbIv8ABzC+ZRPI/aMy0L3Wnzj8Yw0MMZgfzP2DfI/4KNNe/6Ag17JQH
2L/gnpJrAaXYv4jPTSdEWd6/0HiKpf8i8b9QGPbOmkniP0AN9IbRRek/yA7x
eim81D94Y94Jn4pMP+CkZn2b0vA/uG8lvsNoyj/Yuj6DQVnjv1DINVfHQdg/
GBhpevIh1j/Y1V3mkkeyP3jSFaEKsOS/SMH5iAEgxj8IWcCVtmWpv4BxCViv
JOq/6On54hej7b/AuYMoq9nGP7iURYiSwew/MEVdATKDA0CIXw+O8ffSv+D1
LgVJ+7c/EMANPyiH3z8g0NU2zJbiP4honMTBx76/AFwXlGQq5D8oZmQUTk3k
PwB9vTvp5sy/oKRd3Y4V6j+oGxStmZjjP3hS6n+ckN4/kEf6z4SW2z94J15W
slfsP6g0kXcuIfs/WNROZbEGzT/QKZf49+HuPziReNIB+eU/8LTsCeFH9T9A
4GDcjizqP4gYXKpbqei/2AwD6PSx3T9oa6R/rxjaP7CsHoZORcS/UMi6zqc8
8D8jC7Hj
                  "], "Children" -> CompressedData["
1:eJwdkVVPFQAARs+wALs7MDERBWwFBRHbiygqiheH+qTb1c35X+zuxgI7sAu7
UOwu7DhefTjfdvY9npi8uYGZEcC8yPAEggtSQqHgwsyosGTMmZ8/Kz8UnzT7
3z8jTMR/KlCRSkRTFa1MFSL54xl/e9pfRvHTU1ajOj1JoAY1+WEXalGb73ai
DnVpR3vqUZ9vtqEBDflqcxpR7Beb0ZgmfPakTTlhucf95DFb0JKPHrUVMXzw
iK057HsP+c62vPWgb+xALAd8bZGv7MhLC+3Mfl+4z67s9bndiGOPz+xOPD14
6m6fWGAiSfSjP73ozWN32YedPrIvZe7wodsdwEAeOI1BJJPNJFIYzHBGMIRU
Ss3gvmncc5tD2Wo6w7jrFu+42dtu8pYbHckGRzGam653DGMZR4BMxnPDdV53
rddcYxYTuOpqS5zIFVc5mSlcdqWXzOGiK5zKci+4zFyWOp0g511iXrjEORd7
1kX+BVjm0Og=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{18, 1, 10, 13, 1, 6, 9, 11, 14, 
                   12, 1, 2, 7, 16, 10, 18, 16, 18, 10, 13, 5, 7, 13, 16, 11, 
                   13, 6, 4, 7, 10, 18, 15, 1, 7, 5, 18, 1, 10, 10, 7, 3, 4, 
                   2, 2, 13, 4, 10, 17, 13, 18, 15, 5, 5, 1, 9, 15, 3, 13, 4, 
                   11, 1, 17, 10, 4, 18, 6, 10, 11, 14, 10, 13, 6, 11, 16, 3, 
                   13, 16, 18, 6, 18, 12, 2, 13, 15, 18, 15, 18, 7, 4, 9, 7, 
                   7, 12, 11, 10, 17, 15, 12, 3, 18}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{3, 1, 1, 1, 6, 2, 3, 7, 4, 5, 5, 4, 4, 
                   4, 3, 2, 2, 4, 6, 7, 3, 6, 3, 5, 4, 5, 4, 3, 1, 3, 5, 4, 7,
                    2, 1, 7, 1, 4, 5, 7, 3, 2, 2, 2, 2, 6, 4, 3, 3, 4, 2, 5, 
                   4, 4, 3, 2, 5, 6, 3, 6, 4, 6, 1, 6, 5, 7, 5, 2, 5, 4, 7, 2,
                    5, 4, 4, 5, 5, 4, 3, 6, 4, 1, 2, 4, 1, 6, 1, 6, 5, 5, 3, 
                   5, 7, 3, 7, 6, 2, 4, 2, 4, 5}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBNQPK/CFib1JlAQAAAGUAAACwrJBI0aTEP5i+gBPTs/C/sJTYy8aM7D8Q
dg5W2Q/5v9ghAv61yNw/gFXweUHy8b/QDRFz98jUvwi/RZOKasI/OBclx2S5
87/odtSUhWXyv8BuKTzV7uy/2OQj6yPoxr/oRk4HHhLtv6hma5e8gu+/eMgU
kHRZ8L8Yp1Dr1drvv2gL5qL6PO+/+FXhwywb6L8AhBjRMY8QQGgAtQAcTeo/
KCGyXQw677+AtiirWlHwv1hMIgQIXc+/mM3RH/tXxb8wSvezbonzv3Bn761T
Guq/2JQkYjQX8r+Anf3ATr7xvwAES+43cuy/yPTUObrv8L/oO/av6PruP0A1
HNSuVoq/mDo5DJFk8r/YW+O38gznv7jXjtPhteO/cD0xRzzn87+IPbIQbDnu
v+jddzHk4tU/0LIkxAxCuz+A4TEW+hLNv4gerw8tQN+/mNVA8wsj57+QlbSc
//fBv6iYEFyP/qa/kEXd4b2e4L/Aeyge7LvQPwBXvnHodOY/EAvco6SbdD84
C705IlfivxC+G/zPOc0/kCNuMVMJ0b9w7rx0X7Hdv9i8R+8Bv/M/uG8lvsNo
yj8IsQoJN13UvwAN7mGBCfY/IH5kjZyytb9YFKjA+OHvPxgQskQXAvo/6LYU
Zc/47z9waIcUrLXxP8ADAcjGTd6/iEMvo5vVpr9ACoqVOx7ovyDEEnMgtuy/
uLErN1Hg5r/4bfUvBRzqv5BPaJX2ErW/aGNxBhFU77/wy61bgn7VvxCiioy2
WfE/WO3F/maq0L+AENlo/iHFvyAAMklG++O/cDoIB5YF1j+AC82Xwmm5v3Ai
0QuLz+S/2AESBcyzrj9IYerqzi7yPyhRBUm/ma8/AHfTH/EGzb9AHcL2NHjj
PzDW9TlZFbc/CLuY/SJk5j8gXdFYRw/qP4gY7i5X1tw/cOhVxFrP8T/g70LK
N4PxPxCSP1j+8/U/qPy6MU1B/j+YJU+uGEXyP/jVs39oQKw/8K07nX4NvL8w
GHRD9o/oP3DRcRYPrtw/aBKhEuNCyb/MqlDfgP4CQOi0MSN2S+Y/gGfVOVPe
+D+wwgen9sbgP9iLUqoP3+A/3mOxQA==
                  "], "Children" -> CompressedData["
1:eJwdiWVPFQAAAG9YhC3YhY2NgR3Y2D6wwHroUz/p9nRz/hW7uxMLVLBQsbtb
7G49n364226XmD07MD0KmBMdUSA4LzUcDs5Pj4lE2qy5oRmhcHLKzH8/FCHq
PyUoSSm60Z3SlKEyVYgmhjjKEstJ9YR/PO5vy/HLY5anAhUp8Kf5/rAS3z1q
PAm05YhVOWxd6lGN6tQgz5rU4pu5frU2X6zDZw/5yYPW54CJ7Pej+2xAQz7Y
iMY04b05vrMpSTSnGXt96x5b0JI3tuG1u23FLl/Zmpfu9IU7TKYd7elAsdt9
7jY7ksIzt9qJzjx1i13Y7BO78thN9qAnYxlHL3qTwWhS6cMj03loX/rRnwdu
9L4bvOcABjKIu6ZxxyHcdjC3XO9QhjGcEdx0nSNZ6yjWeMPVXjfANVd51ZVe
cYWXHcMllzueTC46lSyWOZFJXHAC513qOSdT5BLPOoUzBslmsadd5DQWWmiI
Uy7wL20E1OY=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{15, 2, 13, 6, 10, 10, 7, 4, 1, 
                   10, 12, 18, 15, 17, 12, 3, 18, 14, 5, 12, 13, 18, 3, 4, 1, 
                   5, 2, 4, 16, 6, 5, 13, 6, 7, 14, 11, 4, 13, 13, 2, 18, 14, 
                   16, 6, 6, 13, 18, 12, 17, 2, 9, 2, 7, 4, 10, 18, 1, 4, 16, 
                   4, 14, 2, 12, 4, 12, 18, 7, 7, 5, 10, 9, 11, 15, 18, 2, 7, 
                   10, 10, 17, 15, 18, 18, 15, 15, 11, 10, 4, 10, 2, 9, 6, 7, 
                   11, 18, 12, 10, 4, 15, 13, 3, 13, 18}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{7, 6, 4, 4, 7, 3, 5, 6, 4, 1, 5, 5, 6, 
                   4, 5, 5, 3, 4, 3, 2, 4, 5, 3, 2, 3, 6, 5, 5, 3, 5, 1, 6, 4,
                    4, 2, 5, 2, 3, 6, 5, 4, 1, 3, 6, 4, 4, 3, 2, 7, 7, 2, 3, 
                   6, 7, 7, 2, 1, 6, 4, 7, 3, 6, 2, 7, 2, 5, 5, 3, 4, 7, 6, 6,
                    4, 4, 3, 6, 7, 7, 3, 3, 6, 5, 5, 5, 4, 5, 5, 7, 6, 2, 4, 
                   2, 1, 1, 4, 2, 5, 2, 5, 4, 5, 3, 1, 4}], 
                 "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBTQOy/CFib1JlAQAAAGgAAADIzXkM3KPvP/htblMeYfa/cE49QgIr4D9Q
SF59zbzcvzAs4Xk6Hsi/IP/t4RIS7L9oHV02THr8P4g68IOdHOy/SBCpd7p4
678wY5hT49ThvyhOMQQc0OW/AEkYRUA0778IrAXWV3rwv6DtiEbEi++/sGtP
bqiW57+IeUlQ5WrsP+CVb4bNnt+/PMlfkF8/BEBQ1mwqFtb3vwhKI78Ty7k/
WCZyyCtD1L/4TNhMnkLxv1CXmpcrweS/EAe+EsTr3L/YMVwXn0fyP1C0pmbs
Bum/wFz4jb3+8L8Qinwa/zbvv4wVmNzN5gJAAOmRmny5sr/I2n2p576IP6gx
qbG5HeK/IBZpCSJh2z/gCIMNSKnsP3ggGk0Hveq/oFQ2aj9x2r+wCeD/6fzo
vzh8w/56G+y/+JWoeY7e6r8gEl1sUh7Ovyh4p6KkxdU/aClyqszu2r9Yz8Rz
Wdz0P0DBp+RyL+k/6Mwws97L4D/YhvFponDYPzhubQBbv/g/aN92iU7gs7/w
Koco5UDYv6Cshgeohea/sPduiy4jxj+oi5vCjLGjv1yUKmPKigdAcE+tYTdf
078owHf5JVHAv8BQR+zPVNY/uHhHU1V05r9YEBtpa1bxvwjJBIxn6ty/0EAj
WTVIm7/oret8BPXpv+A/LLJNDdO/UMy6WMWH8L8AZdJccoWUv/Dj8kNROOC/
ABYrDat23r84ZT64yZrPv+h3VdC1w86/6Iz47wGauL+Qri8dUaiRv0iiY50U
D+W/INsL04/+6T/IcB894U7QPyC/kVGzprY/GDhZ8W7B1b/w3QLbgI+1P0jK
BVNzdc0/+HA0aHuBwT+o1rKEZlDiP2jSsggZvPg/SEvMd1oLkj9IN+e8LXrH
v2gCGTzdmqw/eB0Xvo8x0L9AAXoQSXHGPzAa+RL6z+o/2ItSqg/f4D+Y3Ykz
W9jRP+B0vgbxo8Y/uCTMcdNR+j8gADJJRvvjvxAFgsllHLg/+Lzv6kyV0b+Q
g1LrhtnXP7Dk8rZZXNG/4NKizR95ej84BXcECUXzPxgPLH+b2dC/wDUt1Uk0
5j/IobTYXOOxvzhJItXVyvM/yBB1EpZH1r/YZg7Z2cj9P6jddK994/A/ZCG8
Dg==
                  "], "Children" -> CompressedData["
1:eJwdidVSFAAAAHewwO4uFOzCwA5MQDAOuw89uCedOZ1x/BK7CxW7u7u7u7s7
1tOH3Zmdjc+eFMiJASbHRhUITk2JRILTsuKikTZxSig3FElKDv/74Sgx/ylA
QQoxnBEU5rhFiEWPGcdR29KOohSjOEcsQ1lKUJI/HrYUh/xtaX550HKUpwYH
/GkFKlOFilTih/v97j6rUo1v7vWre/xidT6725rssha1iacOn2xCXRJozE4/
msgHd/jeeryzPm9tQEO224htvnGrr91iU5rRnM22pg0t2GQSLXnlRl/aihdu
8LnrTWadz1zrU9vTkU50YI1PXG1nuvDYQXSlG73ozSNT6E4PHprvA1fZk5Xe
d4X37EMqadw1zzsuN52+ZJDJbQP0Y5m3XGp/BnDTJQ5ksTdc5HWzuOZCrzqY
IQzligu87DAuOd+RjCKHXEYzhmzGc9F5jmUcF5xrkDmed7bnnOVZJ3DGEKed
6SnDnHSGJ5zuX9wr2uM=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 2, 14, 10, 15, 1, 16, 11, 11,
                    6, 13, 10, 18, 9, 10, 5, 1, 13, 13, 18, 18, 4, 5, 4, 4, 
                   18, 2, 7, 10, 10, 4, 18, 18, 14, 10, 13, 18, 7, 1, 18, 13, 
                   15, 10, 4, 4, 2, 6, 4, 15, 10, 4, 5, 7, 13, 18, 13, 15, 13,
                    13, 7, 15, 17, 14, 17, 6, 18, 5, 16, 9, 10, 18, 18, 13, 5,
                    18, 12, 12, 4, 3, 12, 13, 2, 18, 13, 7, 7, 6, 3, 7, 7, 6, 
                   9, 2, 12, 12, 3, 18, 15, 13, 18, 2, 4, 8, 5, 10}], 
                 "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{1, 6, 3, 3, 1, 2, 4, 4, 5, 2, 5, 4, 7, 
                   7, 3, 2, 5, 7, 4, 7, 1, 3, 5, 1, 1, 4, 6, 4, 1, 1, 3, 3, 2,
                    2, 4, 7, 2, 3, 3, 1, 3, 3, 7, 5, 4, 6, 4, 4, 3, 7, 5, 1, 
                   1, 7, 3, 6, 1, 6, 5, 3, 2, 1, 7, 1, 7, 2, 4, 3, 4, 6, 3, 7,
                    4, 7, 1, 4, 5, 1, 3, 6, 3, 5, 6, 1, 6, 4, 2, 3, 2, 4, 5, 
                   1, 7, 3, 1, 4, 3, 4, 4, 1, 7, 1, 4}], 
                 "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBRQO6/CFib1JlAQAAAGcAAADI7wGRMRH7v6DhlUpYUfa/gIuLRRDG9L8g
ewGAAyL2v4A4UTfvuvW/kE6pU3EXBUCIaNPn6v3jvwB0pAOlIvu/0EQOBzGt
z79w+qRZkvntv7Cb1N1xGLS/SGeKdgGtyL+Yu/K/1izXPyhOZ5LT8vM/ADxu
BA9e5z84X9bHSNXvv6jfWA7Om+y/ePo3hZWY7r+o3WeYo+7pv6hCEHATorO/
sGEaUtAe9L/wQpWP7knwvwjFT6o1qOy/iKqDblQU47+IgaWgRQfsvzBsa3tb
xuM/ECg8Iz/Q5z+wivkLOFp7vxjLBZ02dMG/CNM4T1Iy67/oQDoNkDDJv/CT
d6ojCdy/oNt86tsy2b84tuAowXnxv/gPXnCHzOm/UFBuwFcS8r/Y2Vv/zkrE
v1g3EMrXZ+2/wD6o8etg6L/wz/uE2UXuv8BurgSVo+i/2CyR0El9679AWCcF
gLDMP2CnAy2L6cq/IMvYJKxp5r9YEUB7jEXxvygr/RsFtfM/aNPkFOlM8D+Y
0HK0CfnwPwgnLw48B8S/6NY2bP3H9L+wj5TCspToP2h6WGXJAp8/GA/RgFwW
7T+oSjInGNbsPxD4iAOItsU/aE3c0hQA5z8gIwNsd2/zv3jcF+v4i8S/yKD9
HEtO8j/oR/8QOQLZv/APkyRubfc/CHD0Clbl5z+wupN70y/6Pyiovo40V96/
UBDNhJRK5L+IA54vmknoP4ADcFeI2uK/GMzEUW7t7j/YNi8J51nqPygcVkyK
Ise/yBY8zcR11D/IKQSya77Tv/DLwO33HPG/8DCxHZue7z9o2GStQkrDP2i9
h+tabPM/AEVAj+bD6j8Y0jckyR/qPzCLKu5X4e8/yDp53ZoTxb/Y4DJoVsve
P2gKFZqYHem/cGi9HuEa6D+YevjB8ynmPwjB/EeiptM/iDAIhCX7w7+Qr5xe
tejoP8h3PEZpwKc/CEa3hF9X4z+gCmIUPef5P2jNniJP9+c/yNl5IAGBl7/4
S9Jphwvqv3jcQVKM5vM/oPfq5SnD+j9Y9CTeAFPLvyDjaag2SPI/4DeGqJZQ
0T/I4LQrUyX6P1CrizdeAPc/8OEYrEQC7z9wsgu5a4fRv+Bitvw=
                  "], "Children" -> CompressedData["
1:eJwdidVSFAAAAHewwETsFuwWAztQQME+7D70OJ905nTG8U/sTsQO7O7u7u7u
Wk8fdmd2NjFnSiA3BpgaG1UgOD01EgnOyI6LRubkaaFwKJKcMunfD0eJ+U8h
tDBFKMofT1mMWEpQkt+e9JdxFOeEPz1uKUrzw2OWIZ4udKUsCaTQjnKUpwUt
qUBFqlGd71bim5X56lGrcMSqHPaLh6zBQRvThJrUojaJfPaASdThk434aF0+
2JD31qM++31nA966zzfu9bV7fGVTXrrbZuyyOTt94Q6fu91kWtGaNjxzm08t
sC1bfeIWH7vZ9nSgI514ZGceuskHbvS+G+xGdyYwkVTW25N19mCt91xjGulk
0IvRjKE3+WaSxV1Xe8c+3LY/fenHLfO86SoHMJBBBBjJSm+YzXVXeM3BDGG5
Q1nmMJZ61eGMYIlXXOwoFnnZhV5ygWMZx0XHE2S+F5zneXM451xD5HLWOYaZ
7RlnedqZ/gV8Wdjk
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 10, 13, 13, 4, 6, 13, 10, 6, 
                   6, 13, 18, 14, 1, 17, 10, 13, 5, 5, 12, 2, 2, 11, 9, 18, 3,
                    4, 6, 18, 13, 10, 18, 15, 7, 5, 18, 18, 12, 12, 13, 3, 7, 
                   4, 10, 9, 12, 15, 10, 15, 15, 2, 6, 5, 15, 15, 13, 13, 13, 
                   1, 11, 16, 10, 14, 10, 18, 13, 13, 18, 18, 7, 16, 10, 6, 6,
                    13, 11, 13, 14, 13, 5, 18, 18, 5, 15, 4, 10, 5, 7, 10, 18,
                    15, 14, 14, 7, 7, 4, 13, 15, 10, 17, 15, 4, 8, 4}], 
                 "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 3, 1, 1, 5, 4, 1, 1, 1, 4, 6, 4, 2, 
                   5, 6, 6, 6, 7, 5, 3, 6, 1, 5, 4, 7, 1, 4, 6, 4, 2, 3, 4, 3,
                    6, 4, 4, 2, 3, 2, 3, 5, 2, 7, 2, 4, 3, 5, 5, 4, 5, 3, 5, 
                   2, 4, 2, 3, 7, 2, 2, 6, 5, 4, 7, 7, 3, 7, 2, 4, 3, 6, 4, 3,
                    4, 5, 5, 6, 4, 2, 5, 2, 3, 5, 4, 5, 6, 5, 4, 5, 7, 7, 3, 
                   7, 5, 1, 5, 3, 4, 6, 7}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBJQPa/CFib1JlAQAAAGMAAAAg182gB9rov/hzyEsK7OQ/4GJhDeDd4b+w
YRpS0B70vyCBgEgwkuy/IAxK2FPj6b/QmdimAI/yv2DgXi0wPvu/wOAY4oGN
+L8QWaOK77zzv4AkMpogtPS/wH4iRpRi4b/IjKwGZtzdP8Dcv8Tq5+y/eHAp
Xfvb7b9oxoqfFOPxv0DUvEKQWOS/2PlWDO84yr/YHofOsZ/sv5AgNOtkT/G/
aFBDb9ET3r+wh8ua4Cnrv8jtCHT1pLa/2DTbaNaC8794thtPAJjnPwBj/+0Q
qfC/KBSgVoW+8L9Y0CgFiGbuv8DPxfHVC+S/4BSxRUxr4r9YTCIECF3Pv4jI
RfwM7+a/YPLJs3ed6794OHlOOzDYv2CddUDWf+q/UCQBP05D4b+ooeOpkDnc
v3D02Zvn5dS/mFs0RsVe5L9QBpgNVsfmv5CopSIUg8+/KNnRC3hQ6j/wZ89V
F1bzv+i9mU9mnL8/qG5fAwYDsz/AHj5GoOf0P4gU+CY8ENG/cBvGDkIe0L/4
mlIv1G3dvwAwV6M57eO/kKWwzNw94j8AywsfJpHnv1AQNye36dc/EIhTQKPB
4D8IA1mM8DXWv9Azsd3tJN+/SPGqN4UeyL8wcEex/z3kv4g1OQskCuA/ePef
cNVS9z9gxOFE1oPZPzjWanMYEtG/yGa2AiD+0b/Qk3caSrzuP+jEhRYW952/
QKzwKh671b/4gBIW/1nYP6i9sPwnSNW/sCAr6mQy4j/A7mRWmh7iv0iU2Rso
19G/2L+ZR8YX3L+IHUCFSpPSPyDZkpnr9bQ/4PQ3NYq1yj/gCsYUEznxP8hI
3Y7/lcY/6LuAahL/0L/wZWv5K3DzP2Ay6xAliMw/WILGzlUxtj9wt1bIDtDf
P4gjWa1mc8W/ILf2uHnhzj9o/xe5k230P2DkR68ZkfE/YMPS+jGyyT+I/bAg
0oHyP4ijTSsgy+8/yHw4s8yH178ofw7aDYPiP6DjWo68Tee/8NHN6Q7g/z/0
KnpXX1EBQPzW2EY67wJAoBwN94yR5z/IJPg1n1jyPwCKsngl2vI/wJhIynTG
pL8RQLOP
                  "], "Children" -> CompressedData["
1:eJwdkVVPFQAARs+wALs7MDERBWwFBRHbiygqiheH+qTb1c35X+zuxgI7sAu7
UOwu7DhefTjfdvY9npi8uYGZEcC8yPAEggtSQqHgwsyosGTMmZ8/Kz8UnzT7
3z8jTMR/KlCRSjSgIZWpQn3OG0kUWp1oqlKNc/7xrL894y9PW4Oa1KI2Pz3l
D+tQl3p8t9hvnvSrJ/zicRvRmI504rNNaMcxm9KMcpvTkla04KifPOJHDxtD
az7YhrYc8r0HfecB21NkBwp9ayxv3G9nutCfAby2K33pRzfi6M4+e9CTePb6
yj0mkEhv+vDS3SZR4At78dxdPnOnT93hE7f72G0OZBCTmUIyKTwym8EMIYPh
lJlKGlt96BaHks4Dh1HqZu+7yRGM5J5jGMVo7rrRO27wtusdyzgCZHLLiYxn
nTfN4oZrncAar7vaa65yEiu96gpLXG4OU7niMqeRy3SWetklXjJIXrjERRd7
wUX+BSS/0Og=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{14, 15, 2, 1, 11, 12, 7, 3, 1, 
                   3, 4, 2, 13, 18, 10, 7, 18, 18, 10, 16, 6, 11, 18, 18, 13, 
                   5, 9, 3, 9, 4, 7, 2, 2, 2, 3, 18, 7, 9, 4, 7, 17, 10, 7, 
                   15, 14, 5, 5, 13, 10, 10, 13, 5, 6, 13, 1, 18, 13, 5, 14, 
                   6, 4, 15, 4, 12, 17, 7, 10, 5, 2, 18, 16, 6, 13, 1, 16, 10,
                    2, 14, 10, 16, 1, 14, 6, 4, 9, 1, 15, 9, 7, 18, 7, 12, 5, 
                   5, 13, 18, 13, 18, 3, 15}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{1, 3, 7, 5, 3, 4, 2, 5, 5, 1, 6, 4, 4, 
                   5, 3, 4, 2, 6, 5, 3, 3, 7, 6, 3, 3, 5, 1, 4, 7, 4, 1, 6, 7,
                    3, 3, 1, 3, 4, 1, 2, 1, 7, 1, 2, 6, 1, 6, 7, 6, 4, 7, 5, 
                   4, 1, 3, 1, 5, 4, 1, 4, 3, 5, 5, 2, 4, 1, 2, 1, 4, 3, 3, 7,
                    7, 6, 6, 5, 5, 6, 4, 1, 5, 6, 1, 3, 5, 6, 1, 3, 4, 3, 1, 
                   2, 3, 3, 1, 1, 1, 5, 4, 4, 1, 4, 1}], 
                 "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBRQO6/CFib1JlAQAAAGcAAADAy/iyvmz7v5i8qrrBt/y/SFPD4QvKAEDA
lCULNBXzvyhSrhy8L/K/QPCLAYlv0b8o954nIAfyv5BM7ZxX5ey/iONCkVAl
8r+AOFE377r1v9DnzncpkOC/KJ3D6QsL7L/Az8Xx1Qvkv8A54q8GTMu/aPFK
7PavxL+Y4t7p37QBQPDp7RGIG/q/MOUJSYXb9L+AsBBeS7j4v1DfVPo7YsQ/
GGyBGKdCwL9gJXN7d1TVvxh+C4geWsm/kGcfwirg5D84cKMBHjS0vyDXzaAH
2ui/+AkeBzRn1T+wJKFbVQvjv+hhXBQ+b+0/mMAknM1gyj9A+KMeZfbmv1gU
qMD44e8/sBhQyUyl9T8oegDELDvvv3C04ye5cWk/8J7peBxb7L9w5nBxFvbf
PzCv7CK8U++/CKVL7m857r/wZYVuo0jnv+A38jM+9eS/OHpDKRcW179Y+zvY
hTXwv8gB7scPFOm/cGmg3jCl878Y5hT56f7yv5DWU6571OS/6HsssTyLuj8I
XNwWYAjlv1DTm0XYEbm/OGNrErk27b+wui0Tnkrjv0hCAhw0fNq/gOhnQznN
6784wGXq9Ujkv7iHNcAUAey/mJA/qMeT2j9o37NqFUbHv3CKINeX49g/MASe
B10KvT8wdp/rDpTov8Drqi6QT8u/uCRyZuSx2b+Y0tI3yq/WPyARNSRPCu8/
aJq/fpUwzb9IUXamh/DQv9iyG9wQXOC/WISY/ERyrT9I+iLFTqfjv5C22pf+
89Y/cHSDmdJPwT9gN6Rie5S2P2j/F7mTbfQ/wPPHSZ3d8j9ghZfV276yPzCE
e+/Ut9S/oKMk533t7D8gADJJRvvjv1DFy0cnKuU/OLiCpw9W37/wR6FHYw7t
P9gEP+WTNOg/6MguWoRU+z9YeXPR+trOPwgjA7pTkIS/eL2SusqA4z+w8Mhq
pT3sP2gpxydm4dG/QKxUWd5k7z94ylgEhnbtP/C9P8Cc38m/cEzvXFUaBUAw
5IyUQ4oAQDggTcIGcvc/QBnL8v6u6j9ApaMrwWrzPxAC94ARGO8/+BqYYQF6
1j8A9stTL/b3PxTwEwnPTgJAIPbANqweDECoq6vTtNX/P6jEu4k=
                  "], "Children" -> CompressedData["
1:eJwdidVSFAAAAHewwETsFuwWAztQQME+7D70OJ905nTG8U/sTsQO7O7u7u7u
Wk8fdmd2NjFnSiA3BpgaG1UgOD01EgnOyI6LRubkaaFwKJKcMunfD0eJ+U8h
tDBFKMofT1iMWH4b5pdxlCGe4pSgJMctRWl+eswfHvW7RyxLApWpwjcP+9Vy
fLE8FajIZw/5yUp89KBVqcYHc6lODQYR4L01qU0itTjgO/ebRB360Je61COT
LOqzzwbs9a17bEgjGtOEFrSkKc14426bs8vX7vSVO0ymFR3oSGu2255ttqEt
Ly0wha2+sB3P3eIzN9uJzqSRThc2+dSNdqUbT9zgY7uTynp7sM5H9uSha33g
Gu+bwT170Zt877raO+Z521X2Y6W37M9NVziA5d5wINdd5jWXms1ghjCUHCYw
jOGMYjQjGMlVl3jFxV52kZdc6EXHMJYFjmO+45nnBYOcd67nnMhZQ5xxjqed
7SlnedKZ/gXD6Njk
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{18, 1, 15, 5, 13, 10, 4, 11, 16,
                    7, 6, 6, 3, 9, 1, 14, 7, 13, 4, 10, 10, 7, 4, 10, 18, 5, 
                   6, 4, 17, 18, 13, 1, 7, 15, 10, 13, 4, 4, 2, 11, 7, 13, 13,
                    6, 17, 1, 4, 13, 7, 3, 18, 17, 4, 4, 15, 1, 15, 15, 13, 
                   13, 6, 1, 11, 10, 14, 4, 12, 1, 4, 3, 13, 10, 10, 18, 18, 
                   18, 14, 4, 15, 13, 14, 10, 7, 2, 18, 15, 3, 12, 4, 4, 2, 
                   13, 18, 5, 16, 10, 9, 3, 15, 8, 13, 5, 12, 15}], 
                 "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{6, 2, 2, 2, 1, 5, 6, 3, 6, 7, 2, 4, 6, 
                   7, 4, 5, 3, 3, 2, 7, 5, 5, 2, 1, 3, 5, 2, 7, 2, 3, 3, 2, 7,
                    4, 7, 5, 6, 4, 7, 4, 5, 1, 1, 5, 7, 7, 4, 4, 5, 3, 1, 1, 
                   2, 4, 2, 2, 1, 7, 7, 1, 5, 4, 6, 2, 3, 3, 7, 4, 5, 1, 7, 2,
                    3, 3, 5, 3, 6, 3, 3, 5, 6, 2, 4, 5, 6, 2, 5, 2, 7, 4, 7, 
                   2, 1, 2, 2, 1, 2, 5, 2, 3, 7, 2, 6, 5}], 
                 "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBTQOy/CFib1JlAQAAAGgAAACQ5cwKSicAQGRQEo6c0QtAWGREuzYC6r8I
xZpVr//xvzjECSKllPC/ICsj2/x3/D948wg+0Nv0v0DtAbYayOS/ODGOo5mT
0r+A2mRE4o3mv9DvuyQXq/W/SLgbPtqJ6T94YizXQfjwPxDdClPL4/o/mEcf
3fPc7j84TVWBd7/svyhMHWrFOuI/GOH+Oo5+xL/4vxn8twTwv4i14LDBfOm/
0IK+pb5N77/QaRTP8JX0v6DduAWfOOq/WAXHe3L9+79IMIv3KuHwvxAvUpw/
EPa/wPGdl/sZ5T+ADOV1hfrJvxCdZkC7Y7o/gJ39wE6+8b8w0GXFtqjqvyjO
VCWHBNG/kPzoNiFU7b/wlNNq+K/qv4CKhzyeh+a/iPh3PPL21b94VBCUsU7W
P7jiDfd/FMY/yNyGSOET8r/gwnqieufTv0jLKtU++uI/KP3U9zyY5b+An50R
9FjpP2CnAy2L6cq/WMp3NbIp7T+QC3q9/9ffPwg+ie4aZea/gAoMLb5K77/4
XJkJFD7iv2hj6DbDvOa/EA8xJI7Q7b8g3SmqVRrDv8AWlbol1dE/oPygYUOT
4L/ggKAb3yaiv9ixHTdFLui/INaXD1/d5D/wgM/SbzDXv4ABMZ43Mfg/kNgk
0G+45z8YQ5RvtI7kP6jldc+iRbe/OK8l3FXzsb+gS+NCf8ezv4C6S5chBeU/
yHI8zPfxz7/Q8NxSFkLNPxC0CibhHec/uNeIyjOg2r9QP+yTxYSmPwi4JzbM
dMu/IOPfZ7ii6j/480aCbVbTv+hxJ+Rqhs4/oLjai/FQu7/Q28/nuSOMv5h1
glE54rQ/gKG5cXVQ2j8YiESnAWfvP/i3jjCm7OE/ICm3eESdxb9gJY09ZDjt
PxATZg1tddG/4BO8iA4t7T/ovnV6VibtP8hbrpMNtuQ/GOtTEoXM8D/oR/8Q
OQLZvyB3BdqwIvg/cPxNDsX47j+QiDsDoO3Wv4CrMlaMcNO/INhV3u8g4D+o
tHCQp2y5Pygdwwii2ec/eIvHQDrx5T9oFAis2lC0v1CHhhgGys+/yKARg8t/
6j+4GMzmrTvqP+DIN6d6O+I/oNG9PRAv67/M2IEeIsQGQNjySXC0xOQ/EB7J
Lg==
                  "], "Children" -> CompressedData["
1:eJwdidVSFAAAAHewwO4uFOzCwA5MQDAOuw89uCedOZ1x/BK7CxW7u7u7u7s7
1tOH3Zmdjc+eFMiJASbHRhUITk2JRILTsuKikTZxSig3FElKDv/74Sgx/ylA
QU6aQy6FKEwRYilOCTSOYpywKMf94zF/e9SSlGICRyxNGYYwlLKU45eHLU8F
alKLihyyKtWoRGV+etAfVuG7B/xmdb663xrs84t7/eweaxNPHepSnwZ8MoGP
1iOR3X5wl+/daUN22IjGvHO7TWhKezrQjG22pg3N2WoLknhrS964xde24pWb
TaYtL91kOzb6wg0+d70d6USALDqzzmf2pwtd6UYKT11rd9bYk148sQePXW1v
8n3kKvuQShor7csKH5rOA/PMIJP79uOey73rMgew1DsO5LZLvOVibzqIwSzy
hgu97gKHMZwRjOSa873qPEcxmiuO4bLjuORYLjrXCwY5bzbnHM9Z5xhitmec
5WlnGmaGp5zuX72N2uM=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{10, 6, 18, 4, 18, 15, 10, 11, 3,
                    13, 12, 4, 5, 10, 15, 13, 4, 12, 10, 1, 4, 7, 6, 16, 14, 
                   13, 3, 6, 12, 18, 1, 13, 13, 7, 7, 4, 6, 6, 10, 10, 18, 9, 
                   11, 17, 16, 14, 1, 13, 10, 15, 9, 2, 18, 18, 5, 4, 16, 5, 
                   4, 13, 1, 13, 13, 6, 6, 7, 15, 4, 1, 10, 15, 18, 18, 18, 7,
                    18, 4, 3, 1, 2, 10, 13, 2, 5, 5, 10, 14, 4, 18, 2, 13, 18,
                    12, 10, 7, 13, 13, 18, 6, 15, 15, 2, 9, 3, 18}], 
                 "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{1, 2, 1, 5, 5, 2, 1, 5, 7, 3, 1, 5, 5, 
                   7, 1, 5, 7, 2, 3, 4, 5, 5, 7, 2, 4, 7, 3, 6, 2, 4, 7, 4, 5,
                    6, 5, 1, 5, 6, 4, 4, 2, 4, 6, 3, 5, 2, 4, 5, 1, 7, 7, 6, 
                   5, 7, 5, 3, 6, 7, 4, 3, 1, 4, 3, 2, 6, 7, 2, 3, 2, 3, 5, 2,
                    5, 4, 4, 3, 7, 5, 6, 5, 7, 1, 2, 2, 4, 5, 1, 7, 7, 3, 3, 
                   5, 3, 1, 7, 7, 4, 4, 7, 2, 3, 2, 2, 1}], 
                 "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBTQOy/CFib1JlAQAAAGgAAADAy/iyvmz7v9g+aTBt4vG/KHJvaZVi8L84
m+SFJ2/jv6gfkFmi5Oy/4F2Nf1zv8b8Ap9XPwdrxv+B5wbXbb+y/CNQJVVxh
9b8gGSB8Ylriv1CohHYakPq/aJ51lOaK87/oa9jF3Pj0v+AiC8f5rPC/MIe8
+cTP7b+4KZXDGDD7P1BFsh4TRPG/iBs4PN+Vxz9Q31T6O2LEPwBHLXlwywFA
uNEs0wZQ8r+4A3cp2QDxv5ibor6arNm/QHIj7Kwk3L9It3bzRijWP9DDudF7
h+o/mLJnL9Y14r+YpGuj2Jy8v8hclGxg7Oa/+FXhwywb6L+AUBBuUnTzv6Dt
iEbEi++/QA59WE10579obPLtgVTwv5CjYeX3Nde/IIFSfhml778QpzDoUerA
vzhTUpMpT/C/YJ11QNZ/6r+QHasOsEDXv6ARjojO6OW/ALEngqdV4b+Q4SoW
aXjnv2DaJYLvMNS/0A6pS0Kc4r+AwjJzUwbqv4hUF34UueM/YNdmuXAryT/Q
CmnPeRrpPzB29XW4XPO/iCgIEkBp6j+oOXZK9KrFPwhNT9R+Qew/UOG3hWY1
1D/4NxMag2W3v4CvhRv+hOc/CC9gsRjeAEBYhXj0DXjmPxgFEdJIRbQ/qJdJ
kKUW37+wDcknfEmpP8g8n21gD9e/kKWwzNw94j8In1DMEP3DvxAswOFd/9K/
UIGZz8yS5r8osmO5hGuwP8AePkag5/Q/wG+1jiph0D9A0eTD4sz4P3DbQjku
bN+/+LAUZ5u24j/oG7NALeTOP+AZlgA4Z6s/6A2yJl8s6D/oT2louyvyP3Cb
Bbbj1/o/KMppxFLzwT/YXhwnpom1P7AaRdoUcMo/4Nd0LR0Awj8YAm1bY83J
PyA+XeODCdI/kPZdHcbquL8AOevLR47Fv2B3O5lDP+w/eOBX/8nt6z8AKKAy
R4Lpv+iMzqGjc80/iC3L28gr278gRCMjWLSTv8BlYYtnaOQ/CFC/Ikf66T9g
RvSqjJDnP5DG8NUjZfg/qMf3Wt9ivb84gmnNSQWmP2jMx0J6RfI/GNttbTY3
8T/gNEB1D6HnP9C9rvNHPNo/6LJbszwJuD/YBJmxuXHTP+C2SGkxFe0/jQ28
kA==
                  "], "Children" -> CompressedData["
1:eJwdidVSFAAAAHewwO4uFOzCwA5MQDAOuw89uCedOZ1x/BK7CxW7u7u7u7s7
1tOH3Zmdjc+eFMiJASbHRhUITk2JRILTsuKikTZxSig3FElKDv/74Sgx/ymA
HrEghShMEUpRmljiKMlhi3LIPxbjtwf9ZXFKcMCf7veH+yxDWSpThe/utRx7
LE8FKrLbSuzymzv96g6rUo0ccqlODZJoSU1q8cUW1CaeZjSnDnVpQEMSSOSz
9fjkdj+6zQ/W571bfecWG9GYtzbhjZttyiZfu9FXbvCl633hOlux1ue2pTVr
fGYbklntU/NtR3s60JE00unEKlPozhM704WuPLYbj1zpQ1f4wB7ctxf37Mld
8+xNH+643Numcstl9iWDm4bIZKlZDKIfS+zPAAYS4IaLve4ir7nQwQzhquMZ
yjCuOJrhLPCyI7nkCC463wuO4rzzHMNYzjmObOZ61iBnnONpZ3vKCZx0liec
6XHDHHOGR53uX6oX2uM=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{4, 15, 2, 10, 13, 10, 12, 18, 7,
                    4, 1, 4, 18, 2, 7, 10, 6, 7, 10, 9, 12, 7, 5, 4, 15, 13, 
                   7, 2, 10, 6, 11, 6, 13, 10, 16, 3, 5, 14, 13, 7, 9, 18, 4, 
                   14, 9, 18, 10, 1, 13, 18, 10, 4, 2, 15, 15, 18, 15, 1, 15, 
                   5, 14, 13, 1, 4, 11, 6, 15, 6, 13, 16, 18, 10, 7, 3, 18, 
                   14, 18, 1, 16, 5, 12, 4, 9, 1, 13, 14, 18, 6, 1, 5, 17, 2, 
                   13, 3, 18, 4, 7, 10, 8, 4, 10, 13, 3, 15, 7}], "RootIndex" -> 
                 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{7, 3, 2, 4, 3, 1, 6, 5, 6, 5, 7, 4, 6, 
                   3, 5, 3, 1, 1, 7, 3, 2, 4, 4, 3, 2, 1, 2, 6, 4, 4, 5, 7, 7,
                    4, 6, 7, 6, 5, 1, 5, 2, 3, 4, 6, 3, 3, 1, 7, 1, 2, 1, 5, 
                   7, 2, 6, 3, 3, 7, 3, 3, 3, 3, 5, 3, 5, 1, 6, 4, 4, 6, 4, 1,
                    3, 2, 1, 3, 4, 6, 2, 3, 4, 7, 1, 5, 5, 3, 4, 4, 7, 4, 6, 
                   7, 3, 2, 6, 4, 6, 4, 1, 2, 7, 1}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBPQPC/CFib1JlAQAAAGYAAADoYVwUPm/tPxBWbeoVXuu/OB+uHfeQvD9o
p39unu7pv3BOstJJgd+/8KUL2Rg9AMDYtp2d3sfbv9BHbNStbeG/YIYUcN0h
879A3olRYXKzPyBzjU7E/56/IANYSgzB7L8Q4xzl4hDpv8DbOL3IK/K/WIh6
JPHG879YNxDK12ftv3jl0fyZP9W/8Fb5YOLx6r9Qi0vqlD/iPwBT5+SuOuy/
gHzZaJ4K2b+om9jdwOTTv2iEe86gtPC/AN3dxpj85r9wRcOK1RDxv9gz1feq
1eu/0HTKf/Eg5L9QhKXzZyDlv8TYqX2qrgFAgC+M8oNh5b/I55IbNuncP+A3
LGGxZem/gBQSli4T8r94V+R6Lf/nv8gVVKB58eq/iN5u3zOV1L+4Cf2YlCfr
v9DzVu6VuOe/aP9AkFMa7L8wMgtnnlDivyCUpm+0O+e/mJemmEYl6j9gxndx
vm3QP+Ap0VrgQbm/WO5M1RRU7z+4GhH6OZNzPyhOSSPD2ei/oOUqkJPG8L/I
DqqT/MLwv8hmVusCfea/MGOI7tju0D9AS//uqT/Vv+icV7ABy8E/gMqPIjEb
zD9o0Szv3ZbSvyBK1trQr8q/8AbL9n+Q2b/wKoco5UDYv0h+WjKL6v0/wO4t
nc5Cs79gE/T1L8HNP/jJecnNFuo/FFnrlPMeBUAYYDZ0O2nvP/BDrbKni/w/
2A4afU0X6j8wc/rrFQ76P9CIXpIDL+g/CEa3hF9X4z/4x8jMCQTjP4gj6QvV
1u4/GPGsgOO8qr+4jc17TyTAvxB54s+NAdQ/eGTp4MEw5T+oCiOem5fOv/jE
S6vd0PA/yMeAU9kF8D+ozRrMWAmzPyCu4MONjbK/GFhI8IWt/T+QZqXvQCzh
v7j6exrh3/I/ECjjRNvZtL/ARDcK+KvIP9j/sJkGSOA/uAuuHuo46T+ACC9H
6wvdv7heh6IRdvU/ONZqcxgS0b94Xp/CXBjFP4zPAUobdQFAUEILKhMO8T/w
xwvgfS/9P0C8vu9tFKe/0FKUucnw8D9Q5IO5mGn9P4Akb/+kn5g/WPTfcecU
+j+4vZN1T2v3P5B/JRZn1Po/OCBNwgZy9z+ff8ai
                  "], "Children" -> CompressedData["
1:eJwdidVSFAAAAHewwO4uBMVWDOzAQgzUQ+w69E6fdOZ0xvFT7O5ALFSwu7C7
u7tzPX3YndnZ+OwZgXAMMDM2qkBwdmokEpyTGReN9OmzQlNDkeSUaf9+OErM
f4pQlGIMJ4vilKAKVdFYylCWOEryx1OW4qSlOeFvj1uO8vyyAj895g+PWpFK
fLcy3zziVw9bjerUpg5frMFnD/nJmtTioB89YF3q0Zgm1CeeJPb7wQa8d58J
7DWRPTakEe8s8K35vnG3TWnGawM0pwVtaUdLdvnKNrSiNcns9KV5vnCHz91u
e1J4Ziod2GYXutKRTjx1q0/szGO3+MhcH9qNB3anBz2572bvmWMvetOHvtx1
k/1IYxCD6c9GBzCQO6Zz2w3ecr03XecN15rBEK67xmsO5arDuOJqM1nlZVc6
gpGMZwKjWOFolnvJZY5hLBdd6gXHcd4lnnOxE5nEWYMUushsFnrGyUxhgSHm
G2aep53rX+Ei1uU=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{18, 1, 7, 15, 1, 10, 1, 15, 5, 
                   2, 12, 4, 3, 12, 5, 13, 16, 3, 9, 6, 16, 16, 18, 10, 14, 
                   13, 4, 14, 5, 15, 7, 10, 15, 18, 10, 10, 18, 18, 12, 17, 
                   15, 18, 12, 4, 4, 2, 2, 13, 18, 5, 4, 15, 13, 13, 10, 10, 
                   10, 13, 1, 15, 15, 18, 18, 3, 6, 15, 6, 1, 18, 7, 13, 11, 
                   11, 3, 3, 13, 18, 12, 9, 4, 5, 18, 18, 18, 3, 14, 4, 13, 
                   10, 11, 17, 6, 5, 13, 9, 4, 16, 13, 12, 10, 7, 4, 15}], 
                 "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 2, 4, 6, 6, 7, 5, 1, 3, 4, 2, 1, 2, 
                   6, 7, 4, 7, 5, 1, 1, 4, 4, 6, 1, 2, 1, 3, 7, 6, 2, 2, 3, 5,
                    1, 2, 1, 6, 2, 6, 2, 3, 1, 3, 1, 5, 1, 7, 6, 5, 3, 4, 2, 
                   4, 1, 6, 3, 4, 3, 1, 4, 2, 4, 3, 4, 2, 3, 5, 7, 7, 6, 5, 1,
                    3, 7, 4, 1, 5, 4, 7, 5, 4, 2, 2, 5, 6, 1, 4, 2, 1, 2, 5, 
                   1, 4, 1, 2, 2, 4, 1, 3, 4, 3, 4}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBPQPC/CFib1JlAQAAAGYAAACYBNkOnBPLv/jinsAv0fK/gGPLYwFh1L8A
h9Op8Dv2v9Tk42BbTwJA+CbEYJZa5r8wAX0jr9PpvwhTGYsvidW/QKCs3SSE
9L9wXy5UkKD9P0jc1xRLO8g/+DGpWlSJ8r/AuVfvmQDxvyBp8I8OA82/GMhP
ajRH7r+AiQL2L9Xmv0DNqhXPHfE/AEkYRUA077/oYDMhq5vxvzAr9l8ib+e/
kC9nu0+R779APWNvRcPRv/Dzia2yrLq/mKKrem3l7L94hzpkMwPpv8goGMIw
uum/+KViB2hDkr8Qzig4bmHkv+C5N2bwBuu/0A5RSLyB5b8o862dXabQv8AP
zZbzHdm/WFw+ZWKM3r+o8qvXSLbqvwgeu03U6tE/mC6qyctC2L8Q0kNP9Anl
v7CCMYpbr+G/QBgX2XqL7L9IpkGEbVHRv/ivWVKjJeu/4Go/JB8S+D9gA7jd
9ezkP5BEQ+3SNco/SNBSzHW1z7/oGoKkfMy+P5AOh2WHsua/6Guj5PdX4T/I
R3RG/yHyP+AnyU/zWOK/aPeYQ9pn2r+Q8lz/iRfqv9iUJGI0F/K/OGlILWKC
8r/g1ZKhIuLqvxBMQkLf4em/AEA2wB75479QgEjsX7TovyAjhqgXQOE/GBoI
vU5L8b9YWx05DQDev8CLoENiq+y/mJ1sLmG25L8YO69HQ8LpvyiRmUJk8OC/
SBW9vgR01z8obRK9J1ncP2BRZu9R2by/GKMty0OW7T9cRlaR4ZgBQGgdXTZM
evw/0NOZwiZL3T8QbywDcujev9Bw98x/N/O/2L/FZ7rZzD+oK5wuzQi0P5CK
fX+tuPQ/wP/5dbhatD/gyLnD8e+8v9iLUqoP3+A/oK5lcGwU7D+IPZuQ5uzH
P7BN2AvrLra/mMLXERq0/T/AIqbdX+/eP+B6bGUl49c/KGljJx6/lr+YRfWB
LNazv9RhFN1D9QFAaKzQfilT8T/ItqrsWxb+P7DgZeNbQd0/aMzHQnpF8j+I
L8N+6yvjP9iPlc0SeOk/cHBcco+y0T+QQx9x8zWHv8hoMn5HrOU/CM4khtJ0
8T/QKjFyfBLWP1AXHeMOlec/wEIAoqa4+T80R7Zf
                  "], "Children" -> CompressedData["
1:eJwdidVSFAAAAHewwO4uBMVWDOzAQgzUQ+w69E6fdOZ0xvFT7O5ALFSwu7C7
u7tzPX3YndnZ+OwZgXAMMDM2qkBwdmokEpyTGReN9OmzQlNDkeSUaf9+OErM
f4pQlGIk0wYtThwlKUEsfzzmb49aitL88ohlKEt5KvDTcvzwsN89ZEUOWokD
fnO/X61MFapSjeokkMgX91mDmny2FvXZa232WIe6fLIeHy3wg/nG04D37vad
u2zITpNozFsb8cY8X9uEVzblpTtsxnab04KWbLMVW33hFp/bmmfm2pbNptKL
duTYnhSe2oEnduSxm+xEZ7qw0Ud2pysbfGg3Hrje+/bgnj256zrv2Ju+9OO2
fbjlWtPoTybDSWeNNw1wwwFcdyCDGEwGQxjKaq+5yquudBgrvOJyL7vMLEZw
yaWOZIkXHcUFF3ve0YxhLOMYzzkXedYJFBrmjBOZRJBsJnPahZ5yCiEWeNL5
nnCex53rX5zR1uU=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{18, 5, 4, 2, 9, 15, 1, 13, 16, 
                   7, 3, 7, 13, 1, 10, 18, 16, 18, 11, 4, 5, 10, 11, 6, 10, 
                   10, 2, 12, 15, 5, 1, 18, 18, 5, 1, 9, 13, 10, 5, 18, 5, 18,
                    4, 3, 18, 9, 2, 13, 14, 10, 13, 16, 10, 7, 4, 15, 16, 11, 
                   18, 13, 4, 10, 13, 13, 12, 18, 5, 12, 14, 18, 1, 1, 13, 14,
                    17, 13, 3, 1, 10, 15, 7, 7, 15, 13, 4, 7, 15, 15, 18, 13, 
                   7, 18, 10, 10, 18, 9, 14, 5, 13, 4, 2, 18, 10}], 
                 "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{6, 2, 5, 3, 4, 5, 5, 4, 3, 6, 1, 6, 7, 
                   4, 1, 6, 4, 2, 2, 5, 3, 1, 4, 4, 6, 4, 3, 1, 5, 6, 4, 4, 1,
                    4, 1, 3, 5, 5, 7, 5, 4, 4, 5, 6, 7, 5, 7, 3, 5, 6, 1, 7, 
                   2, 6, 1, 3, 2, 1, 7, 4, 7, 4, 2, 3, 5, 7, 6, 1, 2, 4, 2, 7,
                    4, 6, 3, 5, 3, 4, 1, 1, 3, 5, 2, 4, 4, 3, 7, 1, 7, 5, 5, 
                   7, 2, 6, 7, 6, 1, 7, 4}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBJQPa/CFib1JlAQAAAGMAAAAgTuwBfgH5Pzh/tug7LeE/YMgq5KBY5z8Q
AtE+qmrrv4BBsuIu8PA/gMlt/a+mxL+wm9TdcRi0vzjQKZnYoe+/KFKuHLwv
8r8Ykgm2Ixfzv8DgGOKBjfi/AP6hC9Jh878YOtC6zznRv8CGUMJo9re/WDsA
8jbn67/4x635TdG4vyADWEoMwey/KPBi/enptL8wYVaLbzjav1iRPTIFELU/
AO50brww779g5480DjX0v7jiDfd/FMY/gIUPgb6M0T9o/mZZF+71PxCCqEAS
SNS/iCjHLVx9yr9QtHCxZSXovyA86cmK7uS/kOEqFml457+IK2tdvebTv/hm
wbtsbO+/iK+5DMjs7L8IUJikArvvv/gwpajiVe2/AI7vKacT4784S757vFPi
v/COawFYJMm/+GssTMcu0j/4VCyPgCfqv0gIKWA9s72/+KhGn9do17/gKvXq
1q7sv/gdK8c5x/e/sJlQXdVezr+o45AAv27vvzBQvZP43+u/wDweUxM7/z+4
XQy5fyDQv5iEAiVKZcK/MGOI7tju0D94Jxm9WRziP/jHMb9AD8w/SAAuxM4g
5b8IqVOjPJ70PwAIlPkuJ8u/EP3pjhrQjD/gN/IzPvXkv/ClbGN06O4/KGIy
EB+75r+ARJmG4I3pvwAAPEdaFNG/WAIKB1+LyD8AsR+KMavfP0gGrpbudO8/
yE7UHshq4j/wDEeJFb/mPyAhw7kRlrU/+O2fbBcG0j9A9CrZVyW0P8DjXCLc
Jrq/QJLwEkJlm7+QpDfq78q2P4AVCtK7n7w/MORGCOgb0D9AXIJJLVzQv0BF
N5mlEvA/mD2Hpnva7j+A+ODAbRrkP5hUfSBqFN6/2PXIvtCd8z8wfu3j7+nw
vxg62uC9u+Y/EJ0DPcMjz7/oGwUT033ZP/h6mR1xR/8/UEiLElki8T/YVbkL
LKvoP/guug/MbPI/ULXy3n9DuL+owFyod3jtP2iA7T/Ij66/IG5+EBJ4/T+4
tfkYhYvhv3AgejZ5IHI/WAEyCxmWAUCAgTgsrnCpv1gou3oFCOS/2Ot0xl+1
AUDv1p/w
                  "], "Children" -> CompressedData["
1:eJwdkVVPFQAARs+wALs7MDERBWwFBRHbiygqiheH+qTb1c35X+zuxgI7sAu7
UOwu7DhefTjfdvY9npi8uYGZEcC8yPAEggtSQqHgwsyosGTMmZ8/Kz8UnzT7
3z8jTMR/KlCRSuQyncpUYSSjiCSKxjQhmqrUoz7VuGB1aqDn/eM5a1KL2py1
Lmf8bR1+edqfnvKHxTagId896Tcb8dUTNuW4SfSiGc1pQUti6UgrYvhiB1rT
hs8es9y2tKM9nzzqR4/4wcO+95CdOGgc3elMF7pywHd2461FvrHQ1+43nn32
oCcJJPLKvb50jy/cbW/6MJBBPLcv/ejPMwscwC6futMn7jCZFEaw3cduczBD
SCWNR251KOmUucVhZPDQ4Txws6Vu8r4bvecGRzOGHKYylvVmMp67jiPAOu+4
1ttmMYGJ3HKNN11tNpO44WSuu8prTuGqKy1xhdNY7hWXGWSpl13iJfPCLRZ7
0UX+BTW90Og=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{15, 1, 7, 10, 1, 15, 7, 15, 1, 
                   18, 14, 4, 18, 3, 7, 14, 18, 16, 13, 12, 13, 18, 10, 2, 10,
                    1, 18, 4, 10, 7, 9, 18, 13, 14, 4, 11, 6, 13, 5, 18, 7, 5,
                    6, 13, 10, 12, 18, 15, 18, 13, 4, 18, 18, 4, 14, 5, 15, 4,
                    15, 6, 18, 14, 1, 18, 10, 11, 5, 1, 3, 13, 17, 14, 13, 16,
                    15, 4, 4, 7, 15, 2, 7, 18, 7, 4, 4, 2, 6, 16, 13, 14, 16, 
                   4, 13, 18, 17, 11, 15, 12, 17, 9}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{3, 5, 5, 1, 6, 2, 6, 5, 1, 5, 2, 5, 3, 
                   3, 1, 3, 2, 2, 4, 2, 1, 5, 6, 4, 3, 7, 6, 4, 5, 2, 1, 4, 6,
                    5, 6, 1, 3, 6, 2, 3, 2, 4, 6, 5, 2, 5, 3, 3, 3, 4, 7, 3, 
                   5, 4, 5, 7, 4, 4, 7, 5, 7, 4, 5, 1, 2, 3, 3, 2, 7, 6, 7, 5,
                    1, 7, 6, 6, 7, 2, 4, 7, 7, 6, 2, 5, 7, 4, 3, 3, 3, 7, 6, 
                   2, 6, 4, 7, 2, 5, 5, 6, 6, 6}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBNQPK/CFib1JlAQAAAGUAAACo0ek0Csjpv6i288rOnc4/WCGEeqfRzr/A
y/iyvmz7vwzqRtDXwwlAoN24BZ846r/43FuwOGHnvyhL0+cPnPW/WCwkkYzA
/r94Mh3K+UTjvwA2BxZsPPS/KH0CYTyS878Inn1hqDrvv2ChdkOtbfW/aP78
LBJs9L94ysmCRWjvv3D6pFmS+e2/KPBi/enptL9IlYIV18jlv2D+sMVpROe/
eE1TqHxIrj/A66oukE/Lv+jeomeM0+C/UA9CB+zn6b8APG4ED17nP1jKdzWy
Ke0/SMyDsGYF5b9o0+QU6UzwP5BXc/vp3ue/cG8hRYC33L/YValC3fS4v9hS
pAVYfea/eBsDyjB68L+g8Umty1Hvv1AbbljfGum/iLzokYjq8L8AoDMZCzjJ
P2hhHZCijO+/KAFE2Iei8b9Qam3cCvGwv5AI4xLfgem/wJwnWSMuwb+gjxdc
AovhvzjBP5KjUdq/IL5g4hkBiz+wwSQeFDPVv5ClsMzcPeI/0DOx3e0k37+Y
0HK0CfnwPxRewZBZNgBA8EwCMxg32r8o2zvbQtr0P+gjJY/5HNW/kB5YWleF
9j+ALuAa1yHVv1h7SMIPLcI/AM/xaeh+nb/wqVFbd97rP6jTDn0eV8s/AOr2
Vi6t0z8IG6V9hLbuv8hjYe4ce9O/2N1nHMqciL+oP4XQWgXhP6AOqEyHfs4/
sBCOiwoV4r+wc8q9HZDjP4Dyb5Te3ey/UGoiY2c4l79AB9e6TjDmv5Awh88f
v+a/sJRRq9Fd7D+wRv13/xTsP0j7Fk9Gmcg/WGz3btQR3T+4emFkIvuzP2Ad
i49DIOG/yAoU1iUJwT+QTabKYB39PyD3+mDFWuQ/eFnumkUo9L+AajrE/Bzw
P/BHYHVz+OU/CEErrcq59D/YAAzgC1jkP8BCAKKmuPk/AFTB/xzo4z8YHvWa
xaP3P9i/mUfGF9y/GLmNps8Z+D+wl9o+Dw/kPzhPgLS9aLg/wO5kVpoe4r+g
Y/pTVKbgP3jn3Wa+jfk/YGlNGzHotb8I9FR4JG71PxgzdoV+vuo/QB1Prkws
4T/4BtlojCDRPwCKsngl2vI/5JmwVA==
                  "], "Children" -> CompressedData["
1:eJwdkFVTFAAABnewCFuwCxsbAzuwsT2wwDr01CedOZ1x/Ct2dycWqGChYne3
2N26nj7sN7PzvW1i9uzA9ChgTnRkAsF5qeFwcH56TETSZs0NzQiFk1Nm/vtD
EaL+U4KSlKIGNSlNGapzxmhOG0scGsMfCy1LOX5bnl+e8qcnrUBFfliJylTh
uyf85nG/Gs8XE6jKMatR4Gfz/eRRa1GbLnSlDnVJph31qE8SzUnkiE1pRgMa
0ojDNibPj+bahEN+8KDvPeA79/vWfbagJW/M8bWteGVrXtqGtuz1hXsstj0p
7LYDHXnuLp+500505qk7fOJ2u9GdsYyjBz0ZyCAe24tHbrM3qTx0q33oywP7
cd8t3rM/A9jsXTd5xzSGMZzBbHQIGxzKem+7zhGsdSSjuOUab7raGwZIJ4Pr
juaaqxzDSq+6wvFkRhovN4sJBMnmisucyCQuO5lLLvWiU7jgEqey2PNO45yL
LHKhZ13gXw9V1OY=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{18, 10, 16, 10, 7, 5, 4, 10, 5, 
                   10, 12, 15, 13, 11, 4, 10, 3, 1, 13, 10, 14, 13, 6, 13, 16,
                    1, 11, 10, 7, 18, 4, 18, 2, 15, 4, 12, 10, 12, 5, 18, 13, 
                   15, 2, 2, 1, 4, 4, 18, 7, 15, 10, 12, 1, 1, 13, 18, 15, 14,
                    1, 15, 4, 15, 18, 3, 18, 6, 7, 11, 7, 6, 18, 13, 14, 2, 
                   16, 6, 13, 13, 18, 7, 16, 7, 3, 7, 17, 14, 10, 13, 18, 17, 
                   10, 18, 11, 10, 5, 9, 2, 13, 12, 4, 4, 15}], "RootIndex" -> 
                 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{4, 5, 7, 2, 5, 3, 1, 1, 5, 6, 3, 5, 5, 
                   2, 5, 3, 6, 5, 5, 3, 1, 4, 6, 4, 4, 1, 7, 3, 5, 4, 6, 5, 6,
                    7, 5, 6, 7, 5, 3, 4, 7, 3, 7, 7, 2, 6, 3, 4, 3, 5, 2, 4, 
                   1, 1, 6, 6, 4, 6, 3, 2, 7, 6, 3, 5, 4, 1, 7, 4, 4, 3, 6, 5,
                    1, 3, 1, 5, 2, 3, 4, 5, 6, 2, 6, 5, 7, 3, 2, 1, 1, 7, 2, 
                   4, 4, 2, 1, 6, 5, 5, 2, 5, 2, 3, 1, 3, 6, 5, 6, 4, 7, 4, 
                   6}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBhQN6/CFib1JlAQAAAG8AAADYUqQFWH3mv2hsawSpc+y/4L85ZuxX878w
MTvieEPkv1Adh9x/47Q/KEzEpNzh9b9gpPFOWCPxv3CLA9G1f/+/SLdjGfLG
7L+gZRnTHRLrvxjh/jqOfsS/aKJlK9dP97+YgPYev4Dzv9D2wYXs0fK/CIaM
bdhwzj/4BdK0V1jaPwjo0nXVL+m/YN7lMPYwib/Qv44qCz3iv2g+QH/r1eK/
uFO0pxLE8L/o95OTgVztv+C5N2bwBuu/+FXhwywb6L9AyAymvMDvv1hDKV1Z
4eC/uNY2ncaB/T9w7UwpMpzfP0iFnxPg7bI/wBlBQH5v2D+YlFg+ax/dvzhl
236wOe+/KAGJUNpwur8YdPOIQY35vzgo2+Jt8em/iPUFWDAk5b94LD5gsKL7
vwAQsBqoQ+K/4DgT38Suyr+o1BbAdLbjPxgI+leqT+k/iPjgbdSP9z94sgmC
KDmwv1D1MAGFI8q/kL9erxZd3L8AO6SfPYrcv2C7OhiCnNW/2NTy3Agt5L/A
zY6SId/lv4h+APlDCvG/yIysBmbc3T9oW/BtvATjv2CH5cczle6/sEmiyJ7+
57/orx0tLcrWv9ihyjyJMNG/iCtrXb3m0784DIrfEgTlv8BSVSZT6bU/sDEp
IkgC7b9Ipj9115bmv6BgZZIgaPa/2PXIvtCd8z8I1zPHV6nZv7DlShYgmuA/
kERD7dI1yj/4VI1XA6zBP5Dc9nXfQrU/UICL0YS68z/ADgO5XcLQPxgXsJvC
hNG/YGY8+CI60L+ADdEd11WdP3B3n7MgHeo/aDi41eK84D9wVLl83374P0Bd
Xc8kGvM/MLYTm9Xv6r+QvpfbIk3QP+D0NzWKtco/OEoj3u0t0r+AoFZfuzS5
PzjQHjnIvP4/8CtAd5aMyD+ox4CVG1j1P1jAuvipBuK/WJi/wKq0uL9Q9pfA
GnDZP8BCdvn8fsw/ODAfzyxE9D8Yn29+R7fFP+A10j6qAsi/iCNZrWZzxb/o
A+Vse66mv0jufhujLfA/OJkxIK7hyj+AYiehd/vhP1iKLqU7UvM/kCVFj1Rb
2z+Y6yo4LX38P5CWEhMSm9E/gFdhbo+02r8Axn9lXwr/PzhuqOUEReK/WPQM
xbYixj/Yi1KqD9/gP3AoZB6q7Ps/GOOpFeoNA0BY8dVDt4b5Pzihh0U7UOk/
AITE3otk7z9kL+BY
                  "], "Children" -> CompressedData["
1:eJwdiWVPFQAAAG9YYHcXdisGdmBj+7AblLB429PN+S/s7u7u7u7u7u7WE/1w
t90uMiEYSAoDRoWnKRA/JiYUih8bF5EWsamjE5MTQ1HRKf9+MI2w/6QjPRko
SjEykons5CCcCPSIfzxsZg6ZhYNm5YC/zcYv9/vTnPywELnYZ27ykJe9frcg
+cjPN/f41QJ8cbef3eUnC/PRInxwp8UpQXkqUJJI3rvDUpSmDGV553bfus03
bvW15XjlFitSiQ50pDKbbcAmq1CValSnPhutQRQv3eALaxLNep9bi9qs85l1
eOpa61KPJ67xsat95Cob0ojGNOGhTXngSu+7wmbE0JwW3HO5LWlFG9rSmmXe
dal3XOJtF3vLWG7ajvYs8oYL7URnkkimC10ZzAKvO98AcXRjnt3pwTXn2pNe
XHWOvenDFeO57Gz7Mst+9OeSAxjIIC460wvO8LzTPWcCZ53mEKZ6xkROO8UU
hnLKyZ50kiccxnBGcNyJjmSCqYz3mEGOOs6/sbPo3A==
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{13, 18, 1, 13, 4, 13, 12, 2, 12,
                    7, 7, 15, 2, 4, 12, 1, 5, 12, 18, 16, 10, 12, 10, 15, 3, 
                   18, 15, 18, 11, 11, 18, 16, 13, 13, 10, 2, 7, 13, 18, 15, 
                   12, 2, 7, 7, 13, 18, 10, 7, 4, 2, 7, 15, 5, 14, 10, 13, 18,
                    7, 1, 14, 6, 6, 13, 11, 7, 18, 1, 7, 1, 16, 15, 5, 1, 9, 
                   4, 6, 2, 18, 13, 11, 14, 10, 18, 14, 3, 6, 3, 1, 11, 1, 18,
                    6, 14, 4, 15, 18, 2, 5, 9, 6, 12, 10, 4, 10, 4, 15, 13, 
                   12, 15, 11, 2, 18}], "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{7, 7, 4, 5, 5, 2, 1, 4, 2, 4, 5, 7, 5, 
                   6, 2, 1, 3, 7, 1, 2, 3, 1, 6, 1, 6, 5, 4, 2, 6, 7, 2, 7, 6,
                    5, 3, 5, 1, 3, 7, 4, 3, 3, 7, 4, 1, 7, 7, 4, 3, 7, 3, 4, 
                   7, 5, 1, 2, 6, 1, 6, 6, 2, 3, 5, 7, 6, 5, 6, 7, 7, 1, 3, 7,
                    4, 6, 4, 7, 2, 7, 7, 2, 6, 4, 1, 6, 2, 3, 1, 3, 3, 5, 6, 
                   2, 5, 2, 7, 7, 3, 2, 6, 1, 3, 1, 1, 1, 6, 4, 1, 7}], 
                 "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBbQOS/CFib1JlAQAAAGwAAADoYVwUPm/tP4BTrIgrPeG/EINFqDFD1b/g
rvnnr9bxP2BSk/XfS9C/kMDAvRoB2L9oGg2s3I7IPyh5CDMFLum/OANvLXa/
778IhM2Z1ivpP+iEXny4mOq/6JnpS1zo+L8YRZ32B+zev8j5z7clJ8i/UEQ9
E1Vs8L9YLCSRjMD+v2AkWxxkBO6/qNp05RC28L/QUk4pCYT/v7hfv1BcN92/
0Bjdstgj4j+YDNbWL8ztv/COSiqMavC/cOUJnrXX7r8g+JjPiKbAv/BUAG3n
fKM/LDAwBdthAUAY3uOwuwPSP+hbJ9nnJ92/yK0Omu1v878YDKGaAGHmP0i5
pKuaR+m/QPWkNa7/3b+4qb+cK0PVv3CoTsjc2O2/qA8Oe2Hl5L8YYPMxlhzU
P8hRzG+mtfg/uCbpuFLb5D9gCQxrHZqav9ChemOwVfO/MENXwtc/9j/Yk5Sw
oXbZP1h2O8rtA9y/aDW4sRuK8r/oKTstI0jbP1hxv8wGbpq/2FKkBVh95r+g
JIFBxcPUv5jO5+7Jztm/OCwO4R2y5r/gk9qTMTLov8hGPX6OGMq/iBT4JjwQ
0b8A/rPoaR/sv+gR3+EpdrC/YHDhYxNpwb/wjXEw+uCpvyAjA2x3b/O/OFNS
kylP8L+oCucQwUDSvzjSY6H369S/EOZpSy4dx7+gEpp+BRegvzB1bUnbQPU/
gGq8xyiAtr8QCJf9tsmRv6i9dbPvhZS/yNE8MhRo2T8QIrXG1XPcP4CQSOJm
JeW/WI553y2T6j9k6VY5GKIBQNAQMd1KIBBAgDGZoadHrD8Q5DPFu6W7v8gK
FNYlCcE/oIuy6H2F4D/QfZC2hKzNv4idC5CUJLe/CHbMjLiw3D9wYdo7b8bw
P8hHXzo/T7M/EOPh7WmotD8IjBULDrfdPzgtCttpFq+/IIHrSLM+5D9Agcnd
M1HVP8ho680wzrY/2IL+lRLP8D8Qj/2no/vrP/gmyoPy/8c/5L1x4hz0A0BQ
ddLbY3bxv0Bxk+riyABAIM58ysjN+j+YGNSKD3gEQEjVOPoUudA/SG3KlUtx
9D+oOwqOMCv6P8DqkPIo3ec/6DnbSfjs5D9oVmeC28jwP0Afxu0wBO0/+FTG
qxcjzb+oWTURkRjMv6ClGCJj1fI/aMgOB0Lq+j/q085S
                  "], "Children" -> CompressedData["
1:eJwdiWVPFQAAAG9YYHcXdisGdmBj+7D7oQ9QmW5PN+fvsBO7u7u7u7u7u86n
H+6228Umjw2kRAHjoiMKBCckhMPBiUkxkUgcMz6UGgrHxaf9++kRov6Ticxk
YRCDycpJK1OFbEQTwwm1BNnJQU5ykY/8/DE3vz1uHo6Zl6P+8ogFKEghCvPT
w/7wkEU4aFGK8d0DfnO/xdnnV/daklKUpgxf3ONny/LJ8sSy24+W44O7fG8F
3lmRt1bijTutSjWa0Zzq1KApO3ztdmtSi1fWJp5t1iGOutTjpVt9YX2eu8UG
bPaZm2zIRp/aiMZssAnrfeI6H7vWFrTkkR156Bof2IoEWtOG1d63Lfdc5V3b
0Z4O3HGlt11hIsvtxDI7s9QudOWWS+xGd3rQk970IUASN13sDRd53V5cc6FX
7csV+3PZflxygRcdwEDme8F5DiHDocz1vHMcxmyDJDOcWY5mpiOYYYjpppDK
OdMYyTTPOtUzjuK0U0xnsqec5F+ncOLf
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{13, 5, 16, 10, 18, 16, 7, 3, 18,
                    12, 16, 6, 13, 10, 15, 6, 13, 5, 13, 4, 2, 3, 10, 16, 3, 
                   18, 18, 18, 18, 7, 18, 18, 7, 9, 15, 18, 10, 9, 13, 12, 10,
                    2, 14, 4, 18, 18, 11, 15, 7, 6, 6, 2, 15, 9, 14, 9, 17, 1,
                    1, 18, 11, 10, 1, 10, 15, 17, 11, 4, 11, 1, 18, 1, 6, 18, 
                   7, 6, 2, 3, 13, 10, 13, 2, 3, 18, 2, 7, 18, 11, 12, 5, 1, 
                   14, 12, 13, 3, 10, 12, 15, 4, 4, 13, 4, 9, 5, 15, 10, 10, 
                   2, 13}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 2, 5, 6, 5, 7, 6, 3, 2, 1, 3, 6, 3, 
                   2, 3, 7, 7, 7, 5, 2, 1, 3, 3, 4, 1, 2, 5, 5, 1, 6, 3, 6, 4,
                    7, 2, 7, 6, 3, 5, 3, 2, 1, 4, 4, 7, 7, 5, 1, 6, 6, 6, 5, 
                   4, 4, 5, 5, 4, 5, 7, 3, 2, 6, 7, 4, 5, 3, 5, 2, 2, 6, 4, 7,
                    1, 3, 4, 5, 7, 5, 2, 1, 2, 1, 2, 6, 2, 2, 5, 3, 3, 3, 6, 
                   2, 4, 7, 5, 2, 4, 5, 3}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBJQPa/CFib1JlAQAAAGMAAABonnWU5orzv1irae1sMOS/WCHx4+Pg7L94
ofjYEVP2vxgc8Ig8Xfe/+PPRnuk46b9QpyJbYw32vxiGn+RgIe2/WAurZIaF
yD8ovn82c6rvv3h4kVRcHMU/+IpPJyJk879Q31T6O2LEP/Dv/BteQPe/iA07
BuXP7b8wEjA1fsblv6hNcRe8fvO/4OU/YAGL6j9YSRS0EGDZP6Bg07/C39C/
OErDcuoCjT9w0j6b9PjqvyCm0PsZYOK/MFYOShKk7L+IPbIQbDnuv4hJ6Scz
7Oa/MEHrG5gEfL/Qv44qCz3iv/Ce6XgcW+y/IGmbMjPjur94+7TrmxT2v/jc
W7A4Yee/YF2YrC2m7L8AD07Dm+jkv1gwBj5MPOe/4I8tu8i37r9g6PQNJ9Xw
PxBqW4PV4ui/AKqw9v5Ysz+wMTTIlLzUv8g3p2W1y9u/CI72WS6M67/ANkXU
LyPMvzhVMUOTmua/UItL6pQ/4j+IN0Jc2FThv7AJFOZT0Mm/2OKlxczR7D9w
ZP/x4jrov+h5QZRFz+o//NqdWmuXAUCoOeEsqI/fv+C/I4ocBus/KPuiLBgy
6D9YM9OhU1d4v5DBuX8a+PU/WOIjZNEnxj+QnOi3p7LTP/hwNGh7gcE/ENJP
3E3x3r/YlygL3YjhP8iV+pj0Fu0/cNvyl6iUxT9o4QqDwsnpv2CFl9XbvrI/
GBe6/SPkMj8obRK9J1ncP/iK/0HlA9c/GB8YZGEY9j/othRlz/jvP/j/qaNc
W/k/wBBxNP+85r8gkPcU/vH6PyB+Y5FDhd8/CBx31JiGub8grerEOSHiv8DC
xcgbV+a/qNtxU+bhzj9oRRTfEALhv+AxP08Ap+U/0LXcROBv3T9oIh7yTljp
P+gKSQRWxtk/qPFDWOXVxj+Iey1AsELJPwCDbvrKpOo/yINuSMzB/T+gHA33
jJHnP+gM6H01yuw/eA/9xYOy6T94lnaOYEznP4Dd43kQEbk/0ICslG1wz794
T9sfyE3gP0hM4bh2iOQ/0BQ+bcaK0T9YbE7eIajgP5g2wQI4KQBAqL56bAb1
6T8gMK+B
                  "], "Children" -> CompressedData["
1:eJwdifdTDgAAQN8llOxNRPYqMrIjOzNfZI+vLvyUu48753+xN2XvkS1kZG/Z
K3uveH388N7duxefNT8wJwJYEBVWILgoNRQKLs6IDkda7sKcuTmhpOR5/352
mIj/VCCSilQhhkpURqP56zn/GEWZRf72rFWpRm3q8Mvq1OCMPz3tD2tSi0K/
e8q61GMow6hPA745kIY0IoFEGhNLPC1owknjOOFXm/LF4zbjmJ9tzieP+tGW
tKYNrTjiBw/73gLf2ZZ2tKcDh3zrQd/YkU4c8LX77cw+u9KNUruQxF5fucfu
7LYHybx0lz3pxQt32ps+DGCHz91uX/rxzG0+tT9PTOGxW33kFh+aygMHMZjN
ljiE++Y7nDwnMZkRpDGSUUxkk/fc6GjGcNex3DGdcWzwtusdT4AM1jmBtd5y
jTdd7Q0zue4qpzCVa2YxjelcdaUzmMkVg1x2FpdcYbGzuehyL7jMbJZ63iWW
AxCF0Og=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{7, 1, 10, 15, 16, 6, 4, 15, 12, 
                   4, 12, 7, 15, 13, 4, 17, 18, 14, 2, 7, 18, 13, 10, 7, 5, 
                   13, 18, 10, 18, 4, 10, 1, 13, 2, 15, 5, 11, 5, 7, 3, 1, 9, 
                   16, 13, 4, 2, 4, 12, 7, 10, 4, 18, 18, 16, 6, 6, 13, 13, 
                   11, 4, 18, 10, 16, 10, 12, 3, 9, 7, 17, 10, 18, 1, 12, 15, 
                   15, 13, 2, 12, 1, 12, 18, 15, 4, 12, 13, 17, 11, 2, 13, 18,
                    6, 14, 13, 12, 15, 7, 10, 7, 18, 3}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{1, 4, 7, 7, 2, 5, 2, 2, 6, 1, 6, 2, 6, 
                   4, 7, 5, 6, 5, 4, 3, 3, 5, 4, 2, 5, 4, 7, 5, 2, 7, 5, 6, 3,
                    5, 4, 4, 1, 4, 1, 5, 5, 2, 3, 4, 2, 3, 3, 3, 3, 4, 3, 2, 
                   7, 6, 5, 7, 7, 2, 4, 4, 1, 7, 3, 2, 4, 6, 5, 1, 3, 3, 1, 4,
                    7, 6, 2, 5, 1, 5, 6, 5, 5, 3, 4, 4, 2, 4, 7, 3, 7, 7, 3, 
                   1, 4, 6, 5, 4, 3, 5, 6, 4, 3, 7, 4}], 
                 "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBRQO6/CFib1JlAQAAAGcAAADAy/iyvmz7vzgXJcdkufO/yM15DNyj7z+g
wRSnlIzxv2AORFfIZvS/kP5DJQYV0L8QBYLJZRy4P5Aq9AfOBfY/SNAGgDD/
4j+ILrzmOy7yv6hBEuadpdS/cIXNwDnp8r9IjJSpnZ3hv8icjFK/1ca/IA8I
vhlV87/QRUO/v2Xwv3BH03bbkvS/+OTTWsM74r9AVfNftdnwPwDO+la8Ltu/
+Fno09iTtj9YhhH6DYHjvyCL7pzjz+m/gNFgNhxs5L/I1eld43Liv5h2JGma
9+m/0FQo/bXU4794HxCdjUPyv/ADwj4/uqM/iDqhr0OG8r9Qpv0iyILvv5hF
fI3r2PS/2A1FL2Nb+T+gxcoe+WzQv+gDL1CYFui/uMr31GYb7b/I2n2p576I
P2hJbXVNTfk/cHjW3fI7qL9oY3EGEVTvv2jeIE8s5Oy/6FqGkMTT0T+wio48
cjXyv0he0FP4GtY/INHiqArM57/Y9ci+0J3zP8hDDghJ2NW/IO7FquZ/xL84
LQrbaRavvygEMh98IsY/oGqQTY4f6j+gVtwgcpfxv8DnXTcNsM6/SMH+P1Im
5b84uoXZyuvNP7AXXCUeKOy/qLmXcqLuxD/IWCiuKQ3qv4D3CpatMPG/+FXh
wywb6L9wxO3oey64v9AyLyU5c8m/CNGVe9YLuL+Q2W3T9DHyP5h2fklS6Ji/
cKUusmLazj9QuXX7PwyHv6CHFM0/Sds/eOpXLhqX8z+0ziKoz9oCQOjFcRFJ
ueo/0DfwZkuA0D/I9etNtnzcP1gBMgsZlgFAIOK+8JAn07+oT2zKzkTuP5D4
c3PAveE/UNmrzVWL5D/wfLpO9LP5P8BEe1w06tQ/8F8M+MPT4T9w7DY/ID7q
Pzjk8NaydOk/QCSaYgNT5T/Q0ZhC1qfnP3BOPUICK+A/sB0aj4GU8j+glDbh
kGPnP6BdoNJVP/E/APwRNUD98z9QK8KsSg/av1jekbHjTts/wLXmqxKP/T94
8qeqwOPhP/CBQI2rqPc/wM8O1eAV7D9Il1rK3sr4P+gIK4fGnPQ/yOxgvCP3
zL9oJ/cLRrvgP2BFNbf3d/U/+IXYES2v8j/gwBjfokPyPwZ7ysU=
                  "], "Children" -> CompressedData["
1:eJwdidVSFAAAAHewwETsFuwWAztQQME+7D70OJ905nTG8U/sTsQO7O7u7u7u
Wk8fdmd2NjFnSiA3BpgaG1UgOD01EgnOyI6LRubkaaFwKJKcMunfD0eJ+U8h
ClOEohRDj/vHY8YSx1CGUZwStCSZkpTit0f9ZWkSKEcZjvjTeMpy2B8esjwV
qEd9KlKJJA5amSpUpRrfPeA391udfdakFjXY61f3+MXafDaRT+72o7usw07r
ssMPbrcBDXlvCxqxzXc2562NaUKBb2xKM7b62i2+crMv3WQrWtOL3rShLd3o
zgtTeO5G29GeDmzwmZ3oyHqfus4nduaxXXhkVx661gem0pM13rcH98z3rmnc
MZ3bZnDL1WaSxQAG0oc8b9qfG/bluv245iqvutJBrDBANldc7mWXOZghXHKp
F13icEYwhrGMZLEXXOR5R3HO0Zx1oeNYYJAcxjPfM85zAnPNZY6nnUiI2Z5y
licNc8KZ/gVWJdjk
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{10, 18, 15, 4, 13, 10, 13, 4, 
                   16, 12, 18, 11, 3, 18, 11, 6, 13, 10, 7, 13, 15, 18, 18, 
                   10, 7, 10, 7, 12, 18, 13, 18, 4, 16, 9, 18, 2, 18, 9, 15, 
                   5, 13, 13, 17, 4, 10, 10, 4, 2, 2, 13, 13, 4, 7, 10, 4, 1, 
                   6, 5, 14, 13, 1, 10, 2, 1, 6, 7, 6, 18, 12, 18, 1, 10, 6, 
                   1, 14, 16, 16, 10, 2, 18, 4, 7, 10, 14, 9, 18, 15, 5, 3, 7,
                    6, 18, 15, 2, 5, 4, 15, 5, 13, 15, 8, 7, 12, 18}], 
                 "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{1, 5, 7, 7, 5, 5, 2, 6, 7, 3, 7, 4, 1, 
                   7, 3, 7, 4, 5, 6, 7, 4, 1, 5, 5, 7, 5, 2, 2, 4, 6, 6, 7, 5,
                    1, 6, 5, 5, 6, 6, 2, 5, 3, 7, 1, 2, 5, 7, 1, 7, 4, 4, 7, 
                   1, 2, 3, 7, 4, 5, 2, 6, 7, 6, 3, 4, 7, 4, 3, 6, 4, 4, 6, 3,
                    2, 5, 7, 5, 2, 3, 2, 3, 1, 6, 5, 2, 1, 7, 6, 6, 4, 6, 6, 
                   3, 3, 1, 5, 5, 3, 4, 5, 2, 7}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBNQPK/CFib1JlAQAAAGUAAABY0sxS+OD4vwiWX8Z6EvS/kPzoNiFU7b+Q
IalMaK69v9gwqU363/O/6LyAq1BS8r8gXAe1CZXRv1gc8yHoa+K/ABbAuXxl
87/wTdxTw7ruv5CyqEH3H/a/CJl2324S5L+wvI6juUjuv/A3NDdIXPO/qEn1
MXbO2b8IKnCkoevyv5iNm/J3bNA/gLuQ3JZ6YL+A0+mgg0fhP+hvUYaYbfC/
4ES7QaWUpr/QnVC5B3vwv3CK3DxHMNq/OGRlNQhp4794/X+bc2XBv2iedZTm
ivO/0BxxDmQq678I7T21QYKpvzBK97NuifO/AL/OAlmU878YBF3iyyPlv8DO
+vGg7+e/cGfvrVMa6r8QDzEkjtDtv0ij0lSuLuW/qLw0xfw2779Q0w38WPDw
vzgSVoxhJeW/iBpmmDE55b/IOMPJjBjkv0Ai0BC6wd+/ONJjoffr1L94f/uC
LniovxCE2vAFquK/4Nhu4XFS0j+4ZRchv8znv/CozUxsoug/EMQm5eME8j/A
tDs6HsD6P2gKOFAuJ+M/CCJd7RSBhL+Agc0EZg7mP5h3wHezTcG/MJpo7IIc
uj9AkoWN/6PEv5ibV4Iuss+/uBWMqL7L0D9gGcNJIW/Wv7jpc7MIw9K/2Pnp
tsjr4T+AJ89ULvLrvxAyCi4f9+s/gPODj3p76r+ojNB1pEbLv7i8ijwCFOI/
ID7L9usp8b9Qj+pYKuLgv8g7mG6/eLQ/ONZqcxgS0b9QIAQ6XVCtv9B+DKXE
XvQ/UJj/xa6Q0r9IySKwlPWmPyD39kZXB6W/CJNRA/wY2T8Y7MAYNi/3P2gU
CKzaULS/kNhqCFVr5z8wp+AnghHHv8DqkPIo3ec/0NqOKEQZ4T9oDlOE5oPN
v9DTlXyBO/A/kJYSExKb0T+g1CyKYKTwP/C6oEYaY7y/AIqyeCXa8j8ge/EI
TiPtP7CSHye5ltA/wFJ1QHzBhb9Ydu8uwX7xP8AEmxwgkc8/MJsuAywZ8D/w
kHGl4pTwPzCwWkpfpsW/2B6FSQ6Pxb+gANjViyytP4iKafA+ito/oAhzDTmx
ir9AXV3PJBrzP1A0gIgq/sm/zee2IA==
                  "], "Children" -> CompressedData["
1:eJwdiWVPFQAAAG9YhC3YhY2NgR3Y2D6wwHroUz/p9nRz/hW7uxMLVLBQsbtb
7G49n364226XmD07MD0KmBMdUSA4LzUcDs5Pj4lE2qy5oRmhcHLKzH8/FCHq
PyUoSSnKEI0W+sfS/PaUMcRSlWrEUZZfVuSn5fhheb570m9W4KsnrERlvliF
eI772WMmUOAn861ODVrSipoctTZ1+GgtPnjEutTjvY14Z30acti3JvLGBrw2
z1fm2pgmvPSQTTloM5JozgFfuN8W7LPYHFvThhQ68dy9tiWZduzxmbttzy47
0JGn7vSJO+xMF8Ywlq50YySjeGx3epNKD3ryyF48dLsP3GYf+tKP/tx3q/fc
4gAGMpRhDCKNIWz2rpsczEbvuMHbrnc46xzBWm+5xpuuNkA6NxzNdTO45iqv
utIrrvCyyx3HeDLJ4pLTmMBELrrMCy51EpOZwhLPm805gxS52LNO5YyLDLHQ
0y7wL9D61OY=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 15, 10, 15, 11, 10, 17, 5, 
                   10, 13, 16, 6, 16, 13, 4, 18, 18, 1, 1, 16, 18, 4, 10, 14, 
                   13, 13, 11, 10, 4, 17, 5, 10, 5, 15, 13, 13, 4, 9, 15, 2, 
                   10, 7, 10, 5, 4, 13, 1, 3, 14, 14, 4, 6, 17, 18, 6, 9, 18, 
                   17, 15, 10, 11, 2, 13, 6, 7, 10, 6, 7, 18, 18, 2, 18, 12, 
                   16, 11, 13, 6, 6, 5, 18, 7, 12, 3, 9, 12, 14, 14, 2, 7, 6, 
                   1, 14, 7, 12, 2, 10, 13, 10, 18, 12, 15, 18}], "RootIndex" -> 
                 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{6, 4, 3, 5, 5, 5, 4, 5, 3, 5, 2, 7, 2, 
                   1, 5, 4, 1, 6, 5, 5, 3, 4, 6, 4, 4, 1, 4, 2, 7, 1, 5, 7, 6,
                    7, 1, 6, 2, 7, 2, 1, 3, 4, 5, 7, 7, 4, 3, 6, 1, 5, 6, 7, 
                   1, 5, 1, 7, 7, 6, 1, 2, 3, 4, 1, 7, 4, 6, 1, 2, 1, 7, 4, 7,
                    1, 5, 3, 4, 5, 1, 6, 5, 2, 7, 4, 7, 3, 6, 6, 7, 5, 1, 4, 
                   5, 1, 2, 3, 7, 2, 1, 1, 1}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBLQPS/CFib1JlAQAAAGQAAABA5W/j6CH5v2BZBwNKr/S/EALRPqpq67+A
yW39r6bEv4gnbRWgls4/wG4pPNXu7L8AdKQDpSL7v5h4kj8HtPO/GMSb1bC7
8L9wrzVy5uf3v3whuoWktgBA2JOUsKF22T+YqmvRifbtv4DiEO6Kxe+/IMDc
nYIE27/ovGfPoivgv7iXzyfY1eC/KEZtvfsf4r/g9Dc1irXKP7D59vGCoMA/
MD+jVX3X5L94Qq+ms5LpP1gQG2lrVvG/MMVUVf5V8D9o7D7evKXiv6hzn6RS
p+q/sOfkULlO5b8gXAe1CZXRv6gr4AiqxfC/4M29LEc07r842vESlODsv9A8
H9QtY/O/iDrwg50c7L9QB+l8E9v4v/AOIpj9HO+/wGISATVa9r94hzpkMwPp
v6AWhrEpJOy/4At+wKY16r/4PnAwQkftv8CjUYRhMsU/mKtsX8TI5r84ZT64
yZrPvyhde0z9TO2/iG0xJ9B79D/Q75Sr5cTEP8AePkag5/Q/mKhXT1nI7b9Q
jRJbW0jZP3DMhX1UYMM/aAwj0sk3yb/Q4ndxtgTRP2gpcqrM7tq/uGvZp9oH
0L+YStcCLcS2v0gXvl++bsg/AGfebTmWzb8oib7heWKzv8i8fFabj9Y/ZFAS
jpzRC0CYJoj6W5j2P6CzvycQZts/ANVAHmwV3D+4YgX/lqvkv1wNuoRDpQFA
qAxZpUI64r/wacfkeebpP8BvMUlvisa/sFwBAnEB9z9o52dpxFH1P+BGKhdw
1+4/cNorQJGG47+gbhUemYTmP2AiWlf66OE/MMOih8IUvL9gei1mMejGv9jG
AtBzJew/KEjvGE8W2L+4QOvxVxXlPwDprdvfH/E/UBH78t058D9gi5wi2Gvi
P1j51BHv37o/QESmqUvklr9osuOfpY3nPwgBvrCfI90/4KKY2QEr/D+41G3y
PuDSv6BFZG87j/g/WN6RseNO2z9o4QqDwsnpvzg1yWmjSPM/iJbWDqFe9j8A
besy2Ab2P/huq6WLi+e/UJDFP0+gpT9InE0fKcu2v3hk6eDBMOU/sLqTe9Mv
+j94bWpi0YjzP84/tiU=
                  "], "Children" -> CompressedData["
1:eJwdiWVPFQAAAG8YgAVityhgBwZ2oBiooD7EroegftLt6eb8LQZ2gWIXit3d
3d1i9/n0w912u/ic2YHpEcCcqLACwXmpoVBwflZ0ONJnzc2bkRdKTpn57+eG
ifhPGfSYZSlHeSKpQU2iiOaPcVSgIlWIoRKV+e1Rf3nEnx72h4eM5aDfrco3
D/jValRnv1/cZy1qM5BBfLYO9WlAXUqsx14/uceGNCKVfjQmnra0owlNaU4L
PlpsAol8MIlSd/veZrxzl2/daUta8cbWtGGHr93uK7fZnq0m04GXbrEjnejF
ZjuTQk82+cIuPLcrz9xoN7rz1CKf2IPHbvCR631ob/rQlwcWet8C77nOu/bn
jmncdgC3XOtg0rnpZIYwlPFM4IZrHEYGmQwnQBbXXe0IRnLNVV51paNYYTaj
ueJyLzuGS47losu84DjOu9RzLvGsEznjJE6b7xSmcsogJ11sDtM44SJzWehx
F/gXAMzS5w==
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{13, 13, 13, 13, 1, 10, 14, 18, 
                   10, 15, 2, 18, 11, 11, 3, 10, 6, 12, 7, 14, 6, 6, 13, 13, 
                   1, 17, 2, 14, 13, 16, 5, 6, 16, 18, 1, 15, 10, 10, 4, 2, 
                   18, 5, 7, 7, 4, 10, 4, 18, 2, 1, 7, 2, 9, 17, 18, 10, 1, 
                   15, 18, 15, 4, 5, 16, 15, 1, 18, 7, 12, 17, 1, 13, 18, 7, 
                   18, 11, 6, 3, 13, 13, 13, 18, 6, 18, 6, 3, 9, 17, 10, 4, 
                   10, 18, 7, 9, 3, 18, 4, 15, 13, 14, 18, 15}], "RootIndex" -> 
                 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 1, 4, 4, 4, 7, 7, 1, 4, 2, 3, 1, 3, 
                   2, 5, 7, 2, 2, 1, 2, 6, 2, 5, 4, 3, 6, 6, 1, 4, 4, 7, 2, 4,
                    6, 6, 5, 2, 4, 1, 7, 3, 3, 7, 3, 1, 5, 3, 7, 6, 5, 7, 5, 
                   4, 7, 2, 3, 6, 1, 1, 7, 2, 7, 3, 1, 2, 4, 1, 7, 4, 2, 4, 6,
                    7, 1, 5, 7, 4, 5, 5, 6, 7, 5, 4, 7, 3, 2, 5, 4, 7, 6, 1, 
                   2, 7, 7, 3, 7, 6, 3, 3, 3, 2, 2, 6, 6, 7, 5, 5, 5}], 
                 "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBbQOS/CFib1JlAQAAAGwAAAC4qsWEYJW0v3i9krrKgOM/eHkmamNk6L/4
vfOsrQjnPyDgyKKxvtU/aMy0L3Wnzj/gKqr7cCXov8DL+LK+bPu/6BbpVUey
8r+AsFH60zDrv7BKi0/6ZO+/mFwtFInS3b9gFg1Q/knvvyjwYv3p6bS/aFvC
mYDd87+gsaNzjb30vzC8koA3jfC/UHwug3wr4L/4MalaVInyv3CFzcA56fK/
IPiYz4imwL842ZjADhztvzCKOeSuSM2/UAhXkKzg1T/gZZJkBdPkP1D8+m7Z
09a/qHSVW84r0b9ItfeB1ArBv/CAsrErD/K/ECqh/khGw7/wSDtzg5F/v3iH
OmQzA+m/SJgwBTVU6r9IIf/BGnHwvziJiILaZOe/OOFyEzM/3L/QUr8wsnGz
P4BcoYhWhdq/qEgnPnO17r/YrnOG+G3Bvzh8w/56G+y/QB7lHDX35L94oP9J
QebPv8gbTba5D+i/YLjotKInvz+gj76VI+/Fv4B1FrYFjd8/iHeBSmmf8j9w
rVh0wGjTP5jkDmjiic+/eONG4qZ58b9YHjuDA0Xav2jT5BTpTPA/ACmun9r8
6D8oHcMIotnnP/DGhr/7jPc/UJ6gc+Bo/T8A93j81bPqP0jhx/Cp7us/uFQe
b+alzT8wj0xGhzKzPyC0CClfpOo/2AwOgt8FxT/wgaDFKfDeP0hVIOHUFe6/
2NRyllQg7z9IKBbAVoOqv8g74QV31OS/aIhRafU+0D9o33aJTuCzvzgkIZT3
2Oa/0AHrq9+W5T/Ygjw4/RCuP6grnC7NCLQ/8JWW0vNa+j/4VI1XA6zBPxjt
FKwlDsW/iHDZo+AAwD9IiQNJePP1P/DiEwraKeo/gOGFRnJX6j/QIn/WRhzy
P1Alu1H2TeY/CNI0nWwt3b+wj8s4XOLWvzj8FvNfhuE/KAoRrU479z/Iw4PB
VfYAQIBFhc6yReA/oEXmOTGN2z/wz0KozNrwPyAimjoypd0/wJAa2brx8z9A
qKYgqQHwP/CXyuHx7PY/qMeAlRtY9T84+KagANb1P5DMX0ozb7W/uLYcO3RQ
2D+o88s4ySLYPxAFgsllHLg/WAIKB1+LyD9QeeuVX+HvP3CljfJ/c/E/zNy7
4o+FA0DgMGxC7c75P6DY6tvYz+A/eGXaUuEJ8j9jWt4I
                  "], "Children" -> CompressedData["
1:eJwdiWVPFQAAAG9YYHcXdisGdmBj+7D7oQ9QmW5PN+fvsBO7u7u7u7u7u86n
H+6228Umjw2kRAHjoiMKBCckhMPBiUkxkUgcMz6UGgrHxaf9++kRov6Ticxk
oTktyEo2tAHRxFCPE2YnB3+szW+Pm5Nc5OaYvyxAHo7607z8MB/fzc83j1iQ
Qny1MEUoyhcPW4zi1KAmJSjJZw9ZitJ8sjofLcMHD1qWA8ZSjvfu953lqUBF
KrHPKuy1Mnt8626rsss3VuO1O33lDl9aixdu97nbrEMcddnqM7f41M3WZ5NP
3Gg8DWnEBhvThMeutynrfORaH9qMB66xJatNoDX3bcU9V3nXNgxmCG1pR3s6
0JFE7rjS266wE53pQU+60JXuLPeWy7xpN2641OsuMUAS/VhsLxZ5zT5ctTdX
XGhfFnjZ+fZnngPI8JIDGcRcLzrHoQzjgrMNMsvhjCCZmZ53huecbogUUklj
JKM46zTPONXRTPG0kz1lOied5F/xm+Lf
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{16, 4, 4, 5, 1, 1, 7, 10, 2, 13,
                    18, 11, 6, 14, 7, 12, 18, 5, 12, 5, 10, 10, 13, 6, 13, 16,
                    13, 11, 1, 16, 7, 10, 18, 13, 5, 18, 2, 12, 5, 4, 10, 10, 
                   9, 4, 18, 15, 18, 15, 4, 10, 8, 7, 2, 18, 1, 15, 14, 4, 13,
                    15, 18, 2, 3, 1, 1, 18, 7, 10, 13, 3, 6, 18, 4, 14, 13, 
                   15, 9, 3, 6, 9, 12, 10, 13, 15, 4, 15, 7, 13, 4, 5, 17, 18,
                    14, 13, 12, 11, 18, 12, 18, 13, 4, 5, 7, 6, 15, 4, 15, 15,
                    2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 3, 4, 4, 1, 5, 3, 5, 7, 7, 6, 6, 3, 
                   3, 5, 6, 4, 6, 2, 5, 5, 3, 5, 6, 3, 1, 3, 2, 2, 4, 7, 4, 7,
                    5, 6, 1, 4, 1, 6, 4, 6, 7, 2, 6, 7, 4, 1, 6, 4, 6, 5, 3, 
                   7, 7, 6, 2, 6, 5, 2, 1, 5, 6, 3, 3, 1, 1, 3, 5, 3, 1, 6, 4,
                    2, 5, 3, 2, 2, 7, 1, 1, 5, 5, 6, 7, 6, 6, 3, 4, 6, 3, 3, 
                   3, 2, 7, 2, 5, 2, 6}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBHQPi/CFib1JlAQAAAGIAAABILrTQMG/8P/hOE0O57+g/+MfVbOJe1j8I
UG6b5PnuPzhNDGHhiuE/aGxrBKlz7L84cKMBHjS0v5CWedGdiey/2Pvc7ejY
+j8o+G34CL3tv0iUU++mE/a/SJBxxZzA97842potOArfvzg8igBBbvW/CJZf
xnoS9L+QMlJQbt3xv7AvwrxjJOS/uEJamFfP9L9I7r2Zzwbtv4C8wKLctvi/
EHFeJbi47L8I5wfTi9rkv4jcqaHtifO/WHGCAJ9lvL8Ic0rlUBblPwhmpCAw
I/A/yOViFYy/5D+YqTQwDIHqP5AgyapqZc0/gGg8SuCivr/g5T9gAYvqP5C1
ARSes+M/cCvdEWyz8L8IeJWwsGS0v6gxqbG5HeK/iNpUQ+je8b9QMoh8Qa3v
v1ha60UPdeW/wEXCyBUh67/YNNto1oLzvxjihArO2OS/iMhXwahr179o33aJ
TuCzvxDsLgDWFOm/eBgLmLX25b8AQf82T4Dmv0gYAK8FmuO/uG6nexMBsz8A
xEz4Btfmv2jX/x+vu9A/sKZkrayA57+gRhQH2ATmv3g+KnFM8M+/CM6hFgc+
2z+QgukWAPPUv2hPo5QH0c6/qJ6M3ajY6T/QiGnp7al2v/AKjIL7Qrs/KFST
OPwBkb9ARplxLWvhP1jX0Un7A+0/4Gr1JDIx4r8wL/4g0ejEP2Bl12tL6Og/
IJvlvUNQ5j/A7i2dzkKzv3BW+dzKP/c/oE/KNZLk5z+AwiI3tIXdv8A+2qo5
xvg/6IPV+vT63L8oHRYFVYP3P3gt9H46rtq/gFH9bxoJ6j8QP5bxl3e5v2DL
BA/JPcg/gP5Jwj684r/gDoD0n9fWP5gJY3rqQdg/CPerlBE/0L8IM5ZpambT
P4gY7i5X1tw/gDGnXDv+4L8oYLJCgEHHP0BhZ7ee79w/GNtR290I9D84fF1z
hu/PP9ifW7qZPuc/yJfxTDso9j8IziSG0nTxP8DYWT6NWew/gN3jeRARuT8A
+foT7UHqP1CqtjwXzuk/yINuSMzB/T9oFwJev9riP0C06rw4++4/u4ipzw==

                  "], "Children" -> CompressedData["
1:eJwdiWVPFQAAAG9YYGC3omC3GNgISNo+7H5vQ/2k29PN+WPsQEUUCxsVu7C7
u7sVPJ9+uNtuFx9aEJgTBSyMjigQXJwaDgeX5MZEImf+ory5eeHEpHn/fihC
1H8qUZkqzCZIVaqRTQ7RxJDJCatz3KY0owY1qUUsWo8/HrM2dajwqOXW5bdH
/GV9ftqAHzakEaV+tzHfbMJXD9ucFnzxkC2JI4ODtqI1ny0xngSGkkIb2jKY
IbSjPZ/swEcP+MH9dqQT791nZ7rQlb32oCfd6M479/jW3SbSi4EM4o296UNf
XrvLVyYxgGL7sdOX9ueFO3zudp+5zadu9YlFPjaZR24xlTQeutkHFjqMdO67
yXsWeNeN3jGL227wlsMJsN4RjOSmo7jhGEaT73XXec2xXHUcV1xrLuOZwEQu
O41JrPGSU7joZC642vNOpcxVTmcGM1npOVd41lmccbmnXeYpQ5x0qX8Bmw/O
6Q==
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{18, 1, 1, 6, 13, 3, 6, 7, 14, 
                   13, 1, 4, 13, 4, 7, 5, 4, 7, 13, 3, 10, 5, 10, 13, 18, 2, 
                   10, 4, 7, 4, 10, 15, 5, 18, 7, 14, 16, 11, 11, 9, 16, 5, 
                   10, 13, 10, 12, 10, 16, 17, 13, 2, 3, 8, 15, 4, 15, 17, 14,
                    16, 15, 1, 11, 13, 4, 13, 14, 10, 18, 18, 7, 1, 15, 18, 1,
                    7, 13, 5, 4, 18, 13, 9, 10, 12, 15, 4, 18, 9, 13, 6, 3, 2,
                    16, 3, 3, 18, 4, 10, 15, 5}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 2, 2, 4, 6, 3, 3, 3, 7, 4, 1, 4, 1, 
                   6, 4, 6, 3, 7, 4, 3, 4, 1, 7, 3, 3, 4, 4, 6, 6, 2, 4, 4, 7,
                    1, 3, 4, 4, 3, 7, 2, 6, 2, 3, 3, 2, 1, 5, 6, 3, 3, 4, 2, 
                   1, 6, 2, 6, 6, 5, 6, 7, 1, 2, 2, 3, 3, 2, 6, 7, 3, 7, 3, 3,
                    7, 4, 5, 2, 5, 6, 4, 6, 2, 2, 3, 4, 5, 1, 5, 3, 6, 1, 5, 
                   2, 2, 5, 4, 7, 2}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBFQPq/CFib1JlAQAAAGEAAAAQtPunWPzPvxAGyNpNndy/0BXRaam49z+4
LK6/3n/Rv4g0ky+gMOQ/COVk6p5T979AG5pHICz6v5i8qrrBt/y/6MqYZaW2
8L+oBSjRmqDzv1AhPQxBhPq/EI9UMunE8b/oGWqgmVTwv4CCDbc/IPa/SOXn
YFLq47/gy0Y1+b3jv0Df98qLbei/KIjtO36xn78gy9gkrGnmvwA/Es56X9+/
wOpRKzDY7L/Y9rDd6dTtvzAxG2RHzO+/SK3IGvf/6b/YYubxj5LvP2g7p5HU
obe/EGwKlcxB8D9gJsk1T0P2v5iEAiVKZcK/QJMHMzfzxb/I1pIBpczRv4Ak
qkxldNG/oKoYy1gH8r/47J/RTObtv2CUEcELWOe/KEfMaEDY4L8UoLdJNuEH
QNj/f2xKn+c/iNblT1Dilb841SshTkfXPwjIwvUF0+e/yFAyTtbQnL8wtYPR
43/zPzh//YHU9fc/uBABwPpp9D/QojrZjKblP3jdycCm7s6/2GtV8JBY9T84
l/KTJoPiP+j+JglXTOm/YA12CZsI1L9AUcy1lE3kv1jUQ+Utts8/WHtl+BiZ
2L+IRjybURvRv/jXDa1qCuW/WEIVQqwF8D9Ya+cSQ2vsPxDDooGvOeQ/CLqk
SSw/qz8QHYti12f3P9AL9YRVorm/OIksrSkeuz8gX1vExifHv7BoqZk2HK+/
iAAvMB7J4b+oMRA90M+1v+jSGeE86+6/8EO2v5fZtT9o7sx3buzjPwDr/Fxi
I6+/OM6Mwycg6j943aBbZdm7v+iWD1lqK/I/EDaejx/C7j8g3Jrf2ddiP+Bw
/44J9PE/qOnj0RBS5D9YXCWYXvf3PxCiN/kxKNK/6BxzS0u/4T8gDlskUubE
P5hUX/G4GOY/uBopLZsJyr+YNYbxx1DsP6Dt9yFnZes/yF2rpT0u1D8wnbqu
x6nsP+BwfLxQxsW/sE8GAQ7I8D+AZpv/AAT2P2A/leChzKw/yD1dFVr6zj8A
eF9OgV0Cv+DAGN+iQ/I/qMEFCLzF7z8Yfb9XKiL8P9S/pb4=
                  "], "Children" -> CompressedData["
1:eJwdj+dTDgAAh5/LKit7r5CMjIysUBQS4Q1le92FT9y93Dn/TPYeyciMZM+s
7E32nplPbz48v7vnfp+emPlLAgsigKWR4QkEl6eEQsEVWVFhSV+8LHdhbigh
cVHVHwwT8Z9qVKcGvelDTWrRitZEEoU245+1qUNd/nrZP5b623rUJ5pfNqAh
l/zpRRvRmAov2ITz/rAp3z1nc1rwzbN+tSVfPGMb2vLZ036yHbF0oT0d+GgM
HTnlB0/63k68szNvPWEcx31jPF3pRnd68NoSX3nMlxbbk6P24ogvLDKBvuGG
w/bjkP0ZwHMPmshAkhjGIA44mCGUu99n7nMohT51r8MZwRjGkkwKaexxJLt9
4i5HUWAqO31svqPZ4SO3m8445jKPh2aQyUTGM4EHbvO+W53EZO45hwBZzGAm
U9jiVKZx183ecZPZbPS2OUxng7dc7yzWedO13nA2Za7xuqu95iqvutIr5lkJ
bpzM6g==
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{5, 18, 15, 10, 6, 1, 13, 12, 7, 
                   12, 12, 1, 18, 13, 18, 13, 13, 14, 18, 7, 13, 18, 5, 6, 16,
                    7, 7, 4, 15, 13, 14, 7, 5, 13, 1, 18, 2, 14, 12, 10, 13, 
                   3, 10, 9, 10, 18, 7, 1, 2, 10, 14, 7, 18, 1, 3, 6, 10, 13, 
                   10, 6, 12, 3, 11, 5, 6, 6, 13, 13, 3, 10, 7, 10, 15, 12, 
                   15, 18, 7, 18, 18, 12, 18, 3, 4, 15, 4, 14, 13, 4, 4, 18, 
                   7, 8, 4, 10, 17, 15, 15, 5}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 1, 4, 7, 5, 4, 4, 5, 1, 2, 7, 7, 2, 
                   1, 4, 7, 2, 7, 3, 5, 2, 1, 5, 5, 6, 2, 7, 3, 3, 6, 3, 2, 7,
                    3, 2, 1, 4, 7, 7, 7, 3, 6, 3, 1, 7, 7, 7, 3, 1, 5, 5, 7, 
                   5, 1, 3, 6, 3, 4, 6, 5, 7, 2, 4, 3, 3, 1, 3, 5, 6, 4, 2, 1,
                    7, 6, 4, 6, 6, 6, 7, 5, 2, 2, 2, 6, 4, 7, 4, 5, 7, 6, 4, 
                   2, 7, 6, 4, 2, 7, 7, 2, 3, 3, 6, 7, 3}], 
                 "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBTQOy/CFib1JlAQAAAGgAAACQ/kMlBhXQvxB2DlbZD/m/eEKvprOS6T/Q
jxne75bcv9CCvqW+Te+/kAnqdhyJ8r+oHcmqQYj8v1iIeiTxxvO/2BQY9B8y
8r+w0OqI25LRv2Bcds/c2eQ/+EE+VZVRkD8QB74SxOvcvxjrshaAO+6/uBQP
+cZR8j+g6LwLv+Tjv6B9N4Mqv8a/8Dc0N0hc878445KiNP7qv2BOtOpR+em/
+MMWupld5L/Ycj8eFDruv7ilIRAdCeq/oMXKHvls0L+gwqsiMWPzvzhJ61OM
aOi/uOwt0n533L8QVm3qFV7rv0iP/oBN5t6/IAhhIhFw3r/wCr7f4s3kv0j5
Qj64S++/0AxAhdrrrL+wB9Z9KSvqv4C/AVBHQuS/GEB8NHa45r8AykHl+0vF
v9jp0m9dV+c/oAhmlHcv4j9gYwbVe6/4P6hqstgg3uQ/eJ4h2GBttT+Yl6aY
RiXqP4gMC2TZHp2/2Gj3zHKE8r8YcWVxNM/rv6jHgJUbWPU/eBLyCXTn9D/Q
0hwa4rTov/Df3Q3E1LI/EEb65bJQt7/w0kY7URvyv2hhtltZuM2/8IDF+FQb
8r+4/5cpc/7rvzCV9MHy/+S/UEkpPYZLyr/YlLGqsgLrvygJHNZQUvC/II0o
+YOew7/w72BFBxPUP8DWNueBvYy/wA/EbdK15D+AejxCPdrpvwCEzPKHUue/
GIYhJWMB0j9g3WYzmBnvvzAfN452aNk/EMOiga855D/AYzn1KgXhv1AR+/Ld
OfA/4Kc3XN6F6T948XchLy/hv0C24tg8HvM/iPF/mkiktr/QBUEWaQrRP/B8
uk70s/k/+CXqr13F9D9owAul8/Pgv1BhZ4wwdPY/+ERUgYV2rT9YmL/AqrS4
v2hhLXZZONO/iGicxMHHvr8A1y9EoWXJP5jn3+KTZci/AAoEgVx64b8EbEZh
g8cCQEBxk+riyABAEELrOscF8D9Qw+hz2WLVv0jVOPoUudA/GLj1+Jcl+D9o
/xe5k230P1j49fdgowFA6P6BnryEtr+YxVDRqd/nP3gb8Ky+Oum/AAazNlQg
8z+YyjKrjb/sPwCs+KweOO8/9Fs6TUITAEA4ulivm2DyP+huxYyXowJA/X/J
Cg==
                  "], "Children" -> CompressedData["
1:eJwdkVVTFAAABnfAABM7UbFbMTCwUFQQ87D70AOedOZ0xvGX2F0odnd3d3d3
d60nD/vN7HyPm5A1OZAdBUyJiUwgOC0lHA5Oz4yNSPqkqaGcUDgxKff/nxsh
qoBoClGYFrSkCEWJpRgaw19P+MfjFqcEZSnHb49ZkqOWojS/PGIchy3DIX96
0PJU4Id1qcgBK1GZ7+63ClWpzT6/uddqVCeeGnx1jzXZbS0S+OIuP7vTT+7w
o3X44HbfW4931qcBDWnENt+61cY04Y1bfG1TXtmMlzbnhZtNpBVjGUdr2vDc
YbQliQ505JnteGp7nrjJx270kRtMphMP7UxXutGF9T5wnSmstQep3Lc791zj
XXvSi97ccbW3TaMf/Ukn31v2IYNV3rQvN1zpAAZy3TwHEWAoK7zmcjMZzFWX
ecUhXHapl1zicEZw0cWOZJGjWOgFRzOGBZ53vuMJkhMpkMUEspnnOec6kTme
NcQZZ3vaWZ5ypied4T9DaNrj
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{13, 4, 1, 13, 6, 12, 14, 5, 3, 
                   13, 10, 4, 10, 12, 10, 11, 13, 13, 10, 11, 6, 12, 11, 13, 
                   7, 4, 7, 7, 15, 2, 10, 5, 10, 18, 15, 7, 4, 2, 12, 18, 18, 
                   5, 18, 7, 5, 1, 4, 2, 14, 10, 18, 18, 5, 17, 18, 10, 11, 6,
                    18, 16, 7, 6, 11, 1, 12, 14, 18, 18, 3, 7, 11, 18, 1, 16, 
                   13, 3, 18, 10, 5, 4, 13, 3, 14, 1, 12, 15, 13, 18, 5, 10, 
                   9, 4, 3, 15, 4, 4, 8, 2, 15, 12, 15, 10, 9, 13, 11}], 
                 "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 1, 4, 1, 1, 4, 5, 6, 1, 6, 1, 1, 7, 
                   2, 7, 5, 3, 6, 4, 7, 4, 3, 5, 4, 3, 6, 4, 5, 2, 5, 5, 3, 7,
                    1, 1, 7, 4, 3, 2, 4, 1, 5, 5, 5, 4, 1, 4, 3, 2, 6, 7, 5, 
                   2, 3, 7, 3, 6, 6, 2, 3, 4, 4, 5, 4, 5, 4, 7, 5, 4, 6, 3, 3,
                    3, 2, 2, 5, 5, 1, 2, 5, 6, 2, 1, 2, 7, 1, 4, 1, 1, 5, 2, 
                   7, 6, 2, 1, 2, 7, 3, 5, 5, 3, 6, 4, 7, 2, 5, 7}], 
                 "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBZQOa/CFib1JlAQAAAGsAAABIhZ8T4O2yPwBMrfxzImE/qCuPWeOt4z+4
VLtrkCbwv2AZT4MJdNM/yJyMUr/Vxr9YIfHj4+Dsv/izqkh1Wva/UIUvjGuz
9L9g3eNphuX5v8hxt44oEv2/0FJOKQmE/7+4ckm5ldv6vyBd6ehE/PG/uEmO
YQs+578QRYRAXEvvv7AZhqaFPtq/AEwOLiDV9L8wVg5KEqTsvwjUCVVcYfW/
YKnlWUoO77+AzlZ6wdVPv/C+fUrl8r6/UBYzGp1p2b9QRkVteMryP1DAdE56
UuC/2FKkBVh95r9Igk5M/j7iv6CIU6uO19M/MH+QdTPL5L+YzdEf+1fFv4Cd
/cBOvvG/MGxVkiY14b8Y8ayA47yqvyhDKMCES86/qL3Z81cP8r9wePoDs/Tu
P9gskdBJfeu/4IrFkgLoyL9YhNIlW6auvwg0HW3RNeu/8LefwU0q4L+AwxBw
FofqvxhsOoVmWuK/CD6J7hpl5r/QePON66rjv/jTKy0Ui9y/8ECmV8Uk9j9w
yAQn4b/Qv6i5zfOjbdK/+FSNVwOswT84OIjyJdW3v3DAxzLsCZg/iPjgbdSP
9z8AOERb4HC9v9j1yL7QnfM/oJbLBbe3/j+wEmUix+eGvxjTjeX+S/o/oGRU
wxxv9z+gs78nEGbbP+i/M3vKre0/uCqRxRJ2t78Y6zih5LsNQJikWiL52/k/
OB+Tby/xAEDQVl6thZLqP8iDbkjMwf0/4PtFEAFr2T/gPuhXjSnSv9C4BK4o
b7C/2LUm94Xomr9Y1vNa49bZv7i9b6Rvy9A/WOIlqCex5z8Qc2hPJo7mP0Aw
IKSp1vA/4PAObaaE7b9ojUQlAb/ZvzgNGjXCf7Q/dGELwz7cAEB4TMhJ3z24
v8BxHFVxNIy/6APlbHuupr+Q7j7miWW6v9ieL7O4G+c/sOS8aSqV6b8o9tzb
gVfmP/h0XBZ4z8c/yEvt3G504z+QNXHbb4TFP8wQMugKEABAYJxwlm0h5D/4
7Z9sFwbSP/hGjI46Jeg/kCVFj1Rb2z9wiPlvE8jYvzhVo98uqvM/gKpxMDhb
0z846LWOa7z9P4DONsLolvM/YMFIKdDq8D/gwBjfokPyP9CQeUZTX/E/WO76
npMV0j/AEQLKR7fwP/gdHob5R8I/DinTFA==
                  "], "Children" -> CompressedData["
1:eJwdkVVPFQAARs+wwO4uVOzCwA5sFOti90UvoG66Xd2c/8PuLsTu7u7u7u7W
49WH821n3+OJTR0fSIsCJkRHJhCclBgOByenxEQkadzEUHooHJ+Q8e8fGyHq
P9nITg4SaUdOclGP+kQTQ3FKkJs86CH/mJff5uOXB/1pfn5YgIIUojBFKMYB
v1uUb+73q/v84l5LUooy7PGzpfnkbj+6y7KUozwVqERlPrjTiuzwvbG8c7tV
2OZbtxpHVd64xWpU57U1qEVtXlmTl272hXV47iafWZenbvSJ8TQmgcc24JEN
acQGH7reJjSlJa144Dqb0ZwWrPW+a7xnlndtzR3bcNvVtiXTW66yPR0IkkpH
OjGcEXSmC/0ZQBJduWk/upFML3rTnZXecIU9WO51e3LNZV41wBWXmkIfLrvE
S/bloou94CLPO5DBDOGcgzjrQs+4wKHMdxjzPO1cTznHk852JKMiLWZ5wpmG
SCOdGR53uhmM5pjTPOoYjjjVw07xL2bY4OA=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{5, 13, 15, 18, 11, 4, 10, 4, 15,
                    13, 13, 6, 18, 7, 12, 12, 1, 1, 10, 14, 18, 3, 11, 10, 18,
                    11, 10, 2, 13, 9, 13, 13, 5, 6, 3, 6, 14, 12, 10, 5, 3, 
                   18, 7, 13, 3, 18, 1, 7, 18, 4, 7, 15, 15, 18, 2, 13, 10, 
                   18, 17, 16, 1, 6, 10, 13, 13, 18, 3, 15, 3, 18, 7, 10, 13, 
                   16, 5, 14, 6, 13, 18, 6, 2, 16, 13, 11, 12, 17, 18, 5, 10, 
                   15, 3, 9, 14, 4, 2, 15, 4, 10, 18, 2, 15, 11, 10, 13, 5, 
                   10, 15, 15}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{1, 5, 5, 5, 1, 1, 6, 6, 2, 1, 7, 2, 3, 
                   2, 4, 3, 3, 5, 7, 5, 7, 4, 3, 5, 3, 3, 7, 5, 5, 2, 1, 2, 2,
                    6, 5, 7, 2, 6, 3, 2, 4, 3, 1, 1, 7, 2, 1, 1, 2, 4, 4, 2, 
                   7, 2, 3, 4, 4, 2, 6, 4, 4, 6, 7, 3, 1, 1, 6, 5, 7, 1, 3, 3,
                    7, 1, 6, 1, 2, 3, 7, 6, 7, 5, 6, 1, 2, 3, 1, 6, 5, 2, 7, 
                   2, 5, 1, 6, 5, 7, 5, 2}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBJQPa/CFib1JlAQAAAGMAAADYFBj0HzLyv9BZBC1J5PO/CCpXq0Fat79w
rzVy5uf3v1AhPQxBhPq/0DQChZN697948wg+0Nv0v+DQ6eyIHe2/8KZQF6j6
8b/grqxiZ4n0v9DZF5gQqva/gDzbprNx3L+gSyYjqr/kvyBAlQhaA+S/6Ie0
XG0/8j84HmXn/qTEv5A40zsIUu+/0L+OKgs94r/Yzw0emYjXv6DLIHi+Beq/
IJRRR44O3r+YwCSczWDKP5ieIO9lf+e/OBq/M6xQ8r8w9mBmOxTqv7iBSiLF
p/C/yBUm0OXauL8QAwfAfsnivxDmaUsuHce/gPL7bDkq57/QCqKJFnLtv8jy
tJHzevG/eAkmoowl57/A23p3kOTxv4hQAB8LMPK/2Gj3zHKE8r+IGzg835XH
PzDTMobXyOq/GL5oACFB17+IZGifLPTMv8jWkgGlzNG/wB4+RqDn9D8gAYN4
kOySv5guqsnLQti/EImGtaW05L/IfmNTxYy1v3gr4sHUCI4/kKZZy8Nh3j9I
naQScbEAQEh+wv0uy3u/iDz1DHUpCkBQQYywIPe2v/C5mBYhXfU/6MFgh7VB
57+Ip6BtCAP6vwh7Nggzmry/2LVFHfQs8b+o81w0f2LLv2B1eatfMuw/NAep
Zd6gAUAYqX0cqxbkvxCa9YayDbM/+B0ehvlHwj/4f+M46t3wP6jvWk6IK/o/
cGi9HuEa6D9AB9e6TjDmvwh4lbCwZLS/6IzOoaNzzT9Qw7DL2fDkP7AQjosK
FeK/QHfvCzKZ6D/IcYZZR6/tv5iMAXd7adC/SNzjrhB78T9QEDaKFqL7P1g7
KOXbHLu/0EZiURWwtz9o0ATItFDFv9AiMNLt9+8/6Lpq6o744L+wWzKLNxfn
P7h6YWQi+7M/2DEcdb8U5T8Yu3L2qYa5P2Bvpwh5wvg/MFrAcylCtD+QXziN
pLvgP6AKYhQ95/k/UKqDPMjH9j/gQ8USJFvfP+jxKW57E/M/qFjv8o6utD8Y
oDP7V8ryP1go7f5rOOW/8N/dDcTUsj+MzwFKG3UBQKi1+YWX3vk/2G5V3DW8
tz/bOamj
                  "], "Children" -> CompressedData["
1:eJwdifdTDgAAQN8llOxNRPYqMrIjOzNfZI+vLvyUu48753+xN2XvkS1kZG/Z
K3uveH388N7duxefNT8wJwJYEBVWILgoNRQKLs6IDkda7sKcuTmhpOR5/352
mIj/VCCSilSlGlqJykTx1yL/eNZozlhmFWI47W8LrU4NutODmtSiJa2oTR1+
2YK61KMZzalPA37alIacsjGx/LAR3z3pN5vw1RN+8bhxHPOzR/3kET8azwcP
+94CW9OGd3bjrYdsSzveeND2dOC1HelEAqUe8JWJvDSJF3bmuV145n67ss+n
7vWJe0ymJ/3oz2N78cjd9qYPD+3LA3dZ4k5TGMBMZjGQVGaww0FsdxSjGcw2
7zuEew5lGFsdzhbvOoI0NnvHkdw23zGM5ZZ5jiOdaUxnPJsMsNGbbjCDCdxw
IpOZwnUzmcR6r7nOq651Kmu84movu8pLrrTYFV50uReczXmDZLHMbJZ6ziWW
AzoW0Og=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{13, 1, 10, 2, 7, 10, 9, 16, 18, 
                   12, 3, 10, 7, 3, 11, 6, 12, 16, 7, 11, 13, 10, 14, 5, 1, 
                   10, 13, 16, 11, 15, 13, 15, 9, 4, 15, 4, 4, 18, 7, 3, 18, 
                   12, 13, 18, 10, 4, 5, 10, 9, 1, 2, 13, 4, 13, 13, 5, 13, 
                   13, 1, 14, 4, 2, 18, 7, 18, 1, 18, 6, 18, 10, 13, 6, 3, 16,
                    15, 1, 5, 15, 9, 18, 7, 14, 14, 7, 18, 3, 13, 17, 13, 7, 
                   5, 12, 10, 7, 15, 17, 15, 4, 2, 4}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{7, 3, 6, 5, 2, 3, 2, 6, 6, 5, 7, 4, 6, 
                   3, 7, 7, 3, 6, 7, 5, 2, 5, 5, 5, 7, 7, 3, 3, 1, 2, 6, 1, 6,
                    3, 1, 4, 4, 2, 2, 7, 3, 6, 6, 7, 5, 2, 5, 1, 4, 3, 6, 2, 
                   5, 5, 5, 3, 5, 2, 4, 5, 2, 2, 4, 3, 5, 4, 6, 4, 7, 5, 2, 2,
                    2, 7, 2, 2, 5, 4, 2, 4, 4, 6, 1, 2, 5, 1, 2, 4, 1, 6, 3, 
                   5, 4, 5, 3, 6, 4, 1, 4, 2}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBLQPS/CFib1JlAQAAAGQAAADQk3caSrzuP0hk+MREO+y/kP+icDrfxj+Y
Dd4RpJr0v8AhZlJTNtK/mLyqusG3/L8AGEWxN/vtv+jZUVhw3vG/+JRQbeRi
4r/QDRZ+8i7wv4BQEG5SdPO/uOIN938Uxj9gff7CgkPgv5AAh41dUfG/EO9S
QQ212r+QR09iWN/rv6g0dNNf8fC/QFJX5S6VlL/IRj1+jhjKv+AObMTmq9q/
QHQClnB15b9whogwwkDvvzB04RK8NuK/iMHuhnRjxT8Yodbssg/yv8CLyQTx
2ee/uGRnYkpX4r84KWKwn4frv4iqo6ynSfC/EAe+EsTr3L9AJfyI3SPYv1By
O2cacu2/iBpmmDE55b94Vegg4Cvqv8jtzRhB9d2/MEr3s26J87+4yvfUZhvt
vygBRNiHovG/aGRE4r4xqr+gXNqU6Y3Sv5iXpphGJeo/kGyfb/8+8b+4gO3Z
agzqPwDu6Yg8AfO/AMuKoat09b/o1/T1QtPXPxDbCX5httq/mEdSxZfW0r8w
ta78oji2Pyg/JKtRovI/sG0sBujs17+QPzDDuFzqPyiK1dIJHsU/2IJ/yPM7
9T+o0qr4wJLUv3hj3gmfikw/SI0mFK/s7j/gQ1ZG0BABQFhj23G438o/yAG/
vFV+0L+QMiCEuMj4P2hPo5QH0c6/aL2m+Vrn1D/YBDb/tfvev0A11yI28Nw/
CAsn2jqqxz9YtfmiRKL/PyD5cL+2vds/qKM6LZKxuT8I0uJq8SDQv4gwCIQl
+8O/sNRr0BBL1T9wFwQGqvy6P6DXoOHMNOE/yAoU1iUJwT+InQuQlCS3vyAn
8GmEW/c/AECvw33P8D/Ai/0sV2y4v3C0DR+mteg/eDMq5IQD5L9YZtg2fUnw
P/i87+pMldG/yGM37S92uz+wsblRTqPFv9AEqwO6lOI/WALZknL3tL+YZgs2
6AnsP6ASj0Z7UuY/gCYiW9tXpL9Ia84NN7nSP7hf743+CIC/YEd/zwRTcz9g
jDXhUo3yPzi1hISTKvA/gMm/qZwe6j/gQ9NW9+7uPzjEY+s40uU/aMzHQnpF
8j+Qd68/BbWev/9Ttik=
                  "], "Children" -> CompressedData["
1:eJwdiWVPFQAAAG8YgAVityhgBwZ2oBiooD7EroegftLt6eb8LQZ2gWIXit3d
3d1i9/n0w912u/ic2YHpEcCcqLACwXmpoVBwflZ0ONJnzc2bkRdKTpn57+eG
ifhPGcpSjpEEKE8k1aiORhFNBf54zN9W5JeV+OlRK3PEKsQQy2GrcsgfHvS7
cXzzgDWoSTOaU4vafDWeOtSlIY34Yj0+u9/6NOCT+/xoiY3Z6wf3WGqxTWjK
exNIYrfvTOStu3zjTl/bgmQ60JJWvLI17djhS9vwwrY8d7vt2eYzt9qRTvSm
D0/dYmdS6EJXurPZJ27ysd145EZ7UORDe/LAXtx3g/fsy3BGkEo/7rre/qQx
gELvOJSBDOK2g7llOjctcAjrvOFah5HBddeYyWqvucqrrvSKK8xiFBOYyGWX
m81oLjmGi47lgsscx1LPO55zLnESkzlrkDPmO4WpnHaxp1xkDtM4aS4nXOhx
F/gXdBjS5w==
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{18, 1, 13, 15, 9, 4, 10, 5, 6, 
                   17, 18, 13, 13, 10, 12, 2, 4, 18, 4, 13, 6, 13, 7, 11, 16, 
                   14, 10, 12, 4, 5, 11, 13, 13, 15, 18, 1, 3, 3, 7, 14, 13, 
                   9, 4, 4, 13, 13, 2, 16, 18, 13, 4, 7, 10, 5, 10, 9, 13, 7, 
                   1, 14, 15, 15, 5, 1, 10, 3, 12, 12, 18, 7, 18, 6, 10, 16, 
                   16, 6, 13, 10, 5, 4, 17, 15, 10, 5, 18, 2, 7, 12, 18, 2, 2,
                    11, 15, 6, 13, 3, 4, 4, 8, 15, 4}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 2, 4, 3, 6, 7, 2, 3, 7, 7, 2, 4, 5, 
                   4, 3, 6, 5, 7, 1, 3, 3, 1, 4, 4, 1, 7, 2, 3, 1, 4, 1, 1, 7,
                    5, 4, 3, 3, 7, 5, 7, 7, 2, 4, 2, 2, 1, 1, 7, 2, 2, 7, 4, 
                   4, 5, 3, 3, 2, 7, 5, 3, 2, 6, 7, 6, 2, 5, 2, 1, 7, 6, 5, 1,
                    3, 5, 2, 1, 3, 3, 2, 6, 4, 5, 2, 2, 3, 7, 2, 3, 3, 7, 7, 
                   6, 1, 7, 7, 2, 3, 4, 5, 2, 6, 7, 4, 6, 2, 6}], 
                 "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBXQOi/CFib1JlAQAAAGoAAAAQtPunWPzPv+iWhifg16K/oN40mDYm7L/o
jWo5UpzFP9CTZ+WzPtK/kPzoNiFU7b8ImAT21d+xvyByaqsN4fC/OFmr7BEH
7L+gfTfT8d/vv9inKk25ZNe/AFON1/qkxT+wxON0WuPzv4ioGAwiMdY/cBFL
GG7Ywr+YOxZpM+j4P9BLkeDbLPK/gAzldYX6yb+wYRpS0B70v2COX1jX7f2/
gLJh4ION3794PvMaXUjwv3CoI4rPrOm/aC9L+Ltutb94eeQgMtLwv/BPi7TE
nIy/gMozh+7W6r9IfqguyjbvvyjJX0FEJ++/yAaLXaAt6L+wcGXfF2atPzhh
mJQ8MvK/aAC1ABxN6j9QzAIwWvziv+BpyyUWYdG/sFDt4Fs387+Ar4Ub/oTn
PzjcUJ1rUeG/CFSxno7y6r+QcandOfTeP7BU7YR9pPG/8A0QfSr/0T/oplg4
5R7pP/ADwj4/uqM/eHTNIdR/4T+ogocoX5v7P6DTl1HxBes/iAA91mb567/I
Rl+1Jo3RPzDfCap8weM/wEhQosow6T8kw3LjvNIDQNiUJGI0F/K/uLFzOCjI
6T8Q1Q/KWK3hv9CLKqAtweW/iMUpZNcA8z/AZkJRGTnsv2B3O5lDP+w/uHvl
iTSW8z/wSxA4UEbPPxB1NcCVZec/UDXOfE2Tzb849LfkOd77PyBKkr+Imbm/
uEsicpyNtL+IvEqrMIflv5BcdLcGoOK/6Lpq6o744L8o6rvGHJO8PyAf9KrP
uLM/MFrAcylCtD+wpKu47dHov5DIK4JD7W6/ICAhfAVNrj84DbGvjP+ZP+hb
vBNeBOU/GJtc5QC64794RtqIjEy4vyhbLJFPi7M/OPi0fDM2w79wJGqTzlPU
PwiKdhiKttg/gNdKQrmM1T9IsqedZyP2PwBs/9Tovvc/CEgUMdPU0D9gJuDO
9KWxv+BjIufdPc6/EGuBqvp29T9gzg1GTufmvxBenS05XNK/QLIJ59S99j/I
luWaoGL1P7AeFxi0jfE/oNE5ABmvbz/oXxHn0+Xev5gXttCNRsw/1PtYyBXN
AEBQBxeLDevJP4jpSsIF9eE/sIgqs16e8j+4xL8CpVLgv+AiD/do8ew/SFJK
cGsK8z9oQb4pjPPyP5DfyeQ=
                  "], "Children" -> CompressedData["
1:eJwdiWVPFQAAAG9YYIvdYrdiYCtgYvuw+6EPkA+6Pd2cP8TuVhS7u7u7u7tb
z6cf7rbbxaVNCKRHAROjIwoEJyeFw8EpqTGRSBk/KZQRCscnZP77WRGi/pOL
3OShKc3ISz6qU4NoYqjGcfNTgGLEUpBjFuaohTiiHrYIRfnjIX970F8esDgl
+GlJfliOUpTmu2Uoy36/uc+v7rU8FahIJb5Ymc/u8ZO7rcIuPxpHVXb6wR2+
d7vvrEkDGlKL2tShLvXY5lu3+sYt1mezr93kKxvRmI2+dIMvjOe5TXjmepuT
QCta89QWPHGdLVnrY9fYhrY8Msd2tCdEOh1IZAhDSSKZVFbbkU48tCsP7Mx9
u3DPVd41226k0J2V3rEHt11hT5Z7y170pg837csNA/Rjmddd6jWX2J8BDGSx
g1nkIBZ61QVecb7DGE6QeV52rpccwUjmOIrRXHS2F5zledM45xjGMtOzzjCD
TM443dNO85TjOGkWJ5zqX4KG3uE=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 10, 16, 11, 13, 18, 14, 18, 
                   16, 13, 4, 1, 11, 18, 6, 15, 11, 11, 16, 10, 13, 11, 10, 
                   16, 15, 4, 7, 9, 13, 15, 5, 18, 4, 4, 7, 7, 5, 9, 2, 13, 
                   15, 13, 15, 14, 4, 2, 12, 5, 12, 7, 18, 15, 10, 18, 3, 15, 
                   13, 1, 10, 18, 18, 18, 13, 5, 1, 7, 10, 1, 4, 4, 13, 13, 6,
                    5, 11, 1, 17, 2, 13, 1, 7, 18, 17, 15, 17, 10, 7, 18, 12, 
                   3, 14, 7, 3, 16, 13, 15, 18, 4, 10, 12, 4, 4, 18, 13, 13, 
                   10, 15}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 6, 5, 1, 3, 2, 2, 7, 5, 2, 5, 3, 4, 
                   3, 3, 5, 2, 7, 3, 6, 2, 4, 5, 7, 4, 6, 5, 1, 6, 5, 3, 3, 4,
                    7, 5, 3, 6, 3, 1, 1, 3, 2, 1, 5, 4, 7, 1, 3, 2, 7, 4, 3, 
                   1, 6, 4, 6, 7, 6, 6, 1, 1, 1, 3, 3, 6, 7, 7, 6, 2, 2, 7, 7,
                    4, 3, 3, 3, 7, 2, 4, 3, 6, 5, 7, 6, 4, 1, 4, 1, 2, 5, 2, 
                   2, 5, 4, 7, 5, 1, 2, 7, 2, 7, 5, 3, 5, 4, 1}], 
                 "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBXQOi/CFib1JlAQAAAGoAAAAIKlerQVq3v/hv8WkDUPm/UGZzBw9t8z+o
g+yVsD3iP1BGFpmGosQ/ABdRMn6Z9D8I7L7BVZHcv+CsB0eiAfK/gCIUOdA5
4r9oLlqa6WrtP5CFiS/tH/a/WFsVtEeH8L9YudxHxF7mvxB/nTlgi/e/mH3T
ghXP8L/oIUle97rsv3CFzcA56fK/4NFJHZl04j8Y4f46jn7Ev2CGFHDdIfO/
YEBRRT4B7b+4FMX51Lbvv0Dg1NpTsey/0LUFpgSy8L+Y+PvST/zYv/iQlIUy
VPa/CMSBOx5F5b+oc5+kUqfqv6hArF7GW92/oAkdCKDo7L+AnQvCpvjlvwgN
0zXYnsC/uLTAYwSCvT+gxSngX1XRv1Bk/A/Ac+G/KAIQVZ5D2r+Q599NbGvw
v7hX0JSN8O2/GPGsgOO8qr9YjsrwCNH3vxC3wWda5M8/KD+Dichh0T94kehc
+Mrjv9CCvqW+Te+/gIYbffmY0L+w7DCrtRjtP4DcsjSoo8U/mJemmEYl6j/4
xzG/QA/MP2hOMPMTWcS/aEPQ0zCN4D84jWWPAHDPPyinaVFLOuU/cF31Rpw7
0T9of3WRufH3P0ijFlTOBfE/SBhlbXXg5z/E3A4kRsIJQKDMBgXbbfc/WG+5
0j2Pnb8A88CESEHkvwCZKXcnB+w/sK5gsm5/97/woPCQVz3vv0COUBjtHOa/
wJ6U9E2I1z9wHVY177vBPwDoy9MXK+M/0Av1hFWiub8gAQjPhLTGv3g+KnFM
8M+/ABczBfzty7+gfnWEVW/pP8DkmnKguuW/GF3Y6lXMqT+YYa83MvvlP5C9
bbywC+S/8Pv7Bqur5z9AEVvwb6fjP7hmb82y+MO/YDq2XEuQlT/Yi1KqD9/g
P+BWPDHl0e4/cN6hgvu05D84hywquBzkv5CXbmAbfdg/ONZqcxgS0b9AH8bt
MATtP5AgyapqZc0/QBvSN4vW8D84Y4tlMcfkPyAadfqhg9O/OFfHLSu93j8w
GZ6qd2z5Pyh1Bi85WfU/ROYMiM+cAUBoWyjn0xbnP1gCCgdfi8g/wGr4OPdy
mb8YgdfOEKfgP4jt43u2R/E/SMu2fsA++z8w5EYI6BvQP+AwbELtzvk/2B6x
mN+N9j8IRonDwHH1P9aexj0=
                  "], "Children" -> CompressedData["
1:eJwdiWVPFQAAAG9YYIvdYrdiYCtgYvuw+6EPkA+6Pd2cP8TuVhS7u7u7u7tb
z6cf7rbbxaVNCKRHAROjIwoEJyeFw8EpqTGRSBk/KZQRCscnZP77WRGi/pML
zU0LWpKHvOQjmngOG0N+6lCXAhSkEpX5YyF+W4HCFOGXRSlNGYoRy0+LU4pD
luCgPyzJdw/4zf1+tSzlKM8X9/nZvX5yjx+tyAd3W4U4arPL9+60KtWozg7f
WYsabPetNXnjNl+71Vdu8aX1qE8DXrjZ5zbkmY1pxCafutEnbrAJTXnseh/Z
jIc254EJ3HedrWjNKEbThrYMZ63taM89U+lAIndd4x2TuG0yt8yxI53oTBdu
GqAr3bhhP1JYbQ960p1VXjfbXvSmLyu95gr7sNyrLvOKS73sEi+52P4M4KKL
vOBAzjuIcw5mCEM560KHscAzzve0IxjJPE851yBpjGOOYxhLBpmcNEQ6sz3h
LI8702PO8KjTzWKaR5zqX1533uE=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 18, 4, 1, 2, 6, 13, 4, 1, 10,
                    16, 18, 18, 7, 13, 1, 11, 14, 13, 13, 5, 11, 6, 1, 2, 11, 
                   17, 16, 2, 3, 3, 4, 15, 15, 5, 2, 18, 3, 15, 13, 4, 7, 14, 
                   1, 7, 12, 2, 4, 7, 4, 9, 15, 15, 10, 18, 4, 8, 5, 13, 18, 
                   6, 13, 7, 5, 12, 10, 18, 18, 11, 13, 7, 14, 10, 15, 16, 6, 
                   13, 6, 10, 16, 15, 12, 10, 7, 17, 18, 10, 14, 13, 10, 18, 
                   13, 18, 18, 15, 10, 13, 14, 17, 18, 15, 15, 12, 2, 15, 13, 
                   5}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{1, 2, 1, 1, 4, 5, 6, 5, 5, 7, 3, 7, 1, 
                   3, 3, 4, 3, 3, 5, 7, 7, 5, 3, 1, 6, 6, 7, 1, 3, 3, 7, 2, 1,
                    5, 3, 7, 4, 4, 1, 3, 5, 2, 2, 6, 7, 4, 4, 5, 6, 2, 1, 2, 
                   7, 6, 2, 7, 7, 1, 1, 1, 1, 4, 3, 6, 5, 2, 3, 2, 3, 1, 7, 3,
                    4, 4, 7, 1, 2, 2, 4, 6, 6, 7, 7, 7, 7, 6, 7, 5, 7, 5, 5, 
                   7, 1, 5, 6, 6, 5, 4, 1, 4}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBLQPS/CFib1JlAQAAAGQAAABY0sxS+OD4v0CY1Jgr7/G/eHODbGSr9L+w
IMPFWAL8v5i9WtrZ8fa/WIh6JPHG879YVMLeGS/pv0CYwNMtR9C/yChY9EMU
zr9wQwCmMLLUP9jY4mtgJeu/yEY9fo4Yyr8oVJM4/AGRv6htYkf0dtC/6JfB
wZNSyr9oCkn7Hi/fv5g7sO4E6sO/gLJh4ION37+oGMJOzibRvzCiocJDFOG/
4Cm6tLE0479oR9Cyidfmv1BJjhMW++6/APgrbx/Wyb+4FUPyToTNv/gTgcVA
Pva/+IYj6WsG578o+t2349nwv2BI2exxiOi/oGRUwxxv9z/IrQ6a7W/zvyjA
1wOXKNo/UOJt6ZKR3D8gxBJzILbsvzAAPEGPP+I/eCeo1kUH7L90V644CHcE
QMDrh0Pc+eO/sEEKhEkxyj+gzHLgcCPfPxiCywyqyeK/SHu3V74x5L9wr47H
J7Pjv1jQKAWIZu6/yIoxrT9+sb/wQNmnkVH2v5Cz5ej+zNm/ON5YzYku6r+I
vugmFKv1v8AOMecxFbA/AKfVz8Ha8b9gikg09u3pvxjSopqer/C/0OnPXi3k
8b+wYIBug8/vvxD8CMbpL+y/qMeAlRtY9T8QgjlNDfK4v/jj4ETFh+2/KPr/
t73q0j+oLHsBoP/nv7T0pAsOiwNAqPPLOMki2D/IlrMLH/ruvxDDq84jpOQ/
8AdiBiZU0r8YYZqacfnKv3CLypmTyOQ/gMZPE7NbvD/Y8XqN5kDjP1icUIf3
XfO/ALM0W80G4r8wqaf1z2Z9v1Cd0wjbDt4/EGO1IXke4r+gNAW0YYLZP/ix
H2K/uLo/aHTboY9Mz7+IA9CYrZzRvzBiEWToR82/WBeKkD9B3j+gZZxGiJPR
vwBx8sOlPPQ/WJBYzARk4j9IlcjrzlzUPzjbl/djf+k/wAIPvWjF0b/o/IpZ
Fv7uP3CWfEvjruY/aL2H61ps8z9ARSaI3GXGv6hKebmQKNe/sGJHY7re5z/8
1thGOu8CQOjZ/deNgNK/8BdJD8h487+gUW2V1UfUP4Bu0uFgXOC/uJ2Dpxa7
+D8oenXZp4+4vxcrxCA=
                  "], "Children" -> CompressedData["
1:eJwdiWVPFQAAAG8YgAVityhgBwZ2oBiooD7EroegftLt6eb8LQZ2gWIXit3d
3d1i9/n0w912u/ic2YHpEcCcqLACwXmpoVBwflZ0ONJnzc2bkRdKTpn57+eG
ifhPGcpSjkii0CP+sTy/PWw0h6xARX550EpUpiOdqEIMbWlHLFVpQUviqMZP
G1KdGtTigDXZ7w/3+d0Sa1OHb+61LvX4an2+uMfPNuCTxTaiMfE04aO7bcou
E0jkgzstdYdJbPe9zWjONt+51Va05q1bfONmX9uGV27ype15YQeem8wzN/rU
IjuTQle68cQNPrYLj1xvd3rQmz48tNAH9qQXBd53nX1JZQpTuWc/7rrW/qRx
xwEMZBC3XeNg0rnlWG46hCxGMZRh3DCD6642k+FccwRXXeUVRxJgpZdd4SWX
m80yR7PUi47hgkscx3gmkO95J3POiZx1Emdc7GkXecogJ83lhDkcdxrHXOhR
F/gX9TnS5w==
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{4, 18, 1, 13, 12, 1, 14, 16, 18,
                    18, 13, 5, 16, 13, 11, 5, 18, 6, 18, 18, 7, 11, 6, 13, 18,
                    1, 10, 18, 7, 14, 18, 7, 10, 17, 18, 15, 15, 4, 13, 17, 
                   10, 14, 2, 18, 7, 4, 10, 18, 2, 13, 5, 5, 1, 15, 10, 12, 4,
                    2, 2, 10, 5, 7, 13, 12, 13, 13, 15, 10, 3, 11, 12, 16, 6, 
                   16, 5, 11, 2, 10, 7, 4, 13, 4, 15, 9, 9, 7, 9, 18, 14, 18, 
                   13, 3, 6, 10, 9, 15, 13, 18, 18, 15, 15}], "RootIndex" -> 
                 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 6, 3, 1, 5, 5, 3, 5, 7, 5, 7, 5, 6, 
                   6, 6, 5, 3, 4, 6, 7, 6, 7, 7, 1, 1, 2, 5, 7, 3, 7, 6, 6, 7,
                    3, 1, 4, 3, 7, 2, 4, 5, 4, 1, 6, 7, 4, 1, 6, 1, 2, 6, 5, 
                   6, 4, 1, 7, 4, 1, 3, 2, 2, 5, 4, 2, 2, 3, 5, 3, 3, 3, 5, 3,
                    2, 4, 1, 1, 6, 1, 5, 6, 6, 1, 3, 4, 2, 1, 6, 5, 7, 1, 2, 
                   3, 5, 3, 2, 3, 6, 6, 2, 5, 6}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBNQPK/CFib1JlAQAAAGUAAABwSgtezGrzP7CxIgRUOv0/WL0HMSM84r8Q
dg5W2Q/5v3CVLvAnJM8/sMTjdFrj879oq+9ZSljvP9gRQjVEEvq/kPzoNiFU
7b8Y2Ahviorav7glpCf5P/G/2B8nrYWB2T/ocRWcSlH2v4hpSAs0dfO/wOgx
bWPE5j+IlFqmBHTxv+hHpLmMPOI/CA8TyWGXuL9gWV1Ds/Tqv3Ar3RFss/C/
ELWNlbhv1b/IzXkM3KPvPwigbvHtNPM/EO28xJFl8L8oyueP/onKP2BdosQ6
IPq/KMGiRtfntD/Yas8iAD/Qv+gB95Ec6vW/yEY9fo4Yyr9Q1JIvThnuv0hB
e/lSBem/2KIU0Pc0sD+Q7RLV0ly8v3Du4jumdMS/+FXhwywb6L/4sbHfj3iz
P6i5l3Ki7sQ/QNX53Fe40b9gnXVA1n/qvzAKkb/1PsG/OKNN2bGn6b+YDNbW
L8ztv6DI0LVQXOe/gIGHUUJOob9IQgIcNHzavyCW3AGe7ey/mGGfHR2a1b9o
tWUNSIiyP7BQAI+mddC/YIFKNgbO8b8o0fOUJDDivzgMit8SBOW/yGPgWULQ
BEAQ74wB5MvSv7AS18Qaf7o/0HknGKfI1b9I4zZNoKHJP5AX2nkF69M/YG5C
mtdrs7+w157nT36pv5jtpfZEadQ/OCQhlPfY5r+IWWVp8QK3vyCPDENPeNQ/
KDbYgQMqtL9AR96SbaW0PzClNj/Wvdm/CCG1F8WQ4L+wIwd0FOfov1Ac6t/R
/fE/UF+R8Mb96T8gIpo6MqXdP+BNEKrH3Pc/4KZffjc85j+YC9pqwqbzP+jZ
/deNgNK/GCICIYj+5j8A21G5iJ/zvwDnDHZsIu0/wEaFxP8v7T9ob5fUxrbt
PwiG1qaN6f0/oJigevfy4j/wemqdNMHqP8CIpCnfWOk/+C56dAoszb+orrKd
ravUvzixYRy5bsi/aFZngtvI8D+EfTJE2IwRQJh2ddVRItA/8JItq5Ay+z/o
ogdRd5vUv5CWEhMSm9E/IKFx2eth/z/ACH6TpTvqP7DASUBBDfA/oDAicTxU
yj9Ylu9GwOYIQPALvEoxS/0/+wKx6Q==
                  "], "Children" -> CompressedData["
1:eJwdiWVPFQAAAG9YhC3YhY2NgR3Y2D6wwHroUz/p9nRz/hW7uxMLVLBQsbtb
7G49n364226XmD07MD0KmBMdUSA4LzUcDs5Pj4lE2qy5oRmhcHLKzH8/FCHq
PyUoSSl0IqUpQxZnjeaMMcTyx9PGUZYRjKQc5alKNX5bgV9WoSKF/rQSlTnl
D08aTwLfPeE3j1udGvSjPzWpxVf78sXaNKAhdajLZ+vxyfp89JiJFPjBfBvR
mO70oAlNaU8HmnHUlrQiiea894gtOOw782xNrm1J5q1teOMhX9uOVx70pQd8
4X47kkKxnejMPp+bYxe68sy9dmOPT91tT3bZm1R6sdMn7rAP233sNh+51Ydu
cQADeeAw7rvZQWwyjY0OZgj33OBdh3LH9d52OLdc501HEWCtN1xjOhmMZrXX
zWQMqxzLSq85jquO54orvOxyJ7DMSy51EpO56BSmMo0gS7xgNudd7DkXGWKh
RS7wLyKZ1OY=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{15, 18, 16, 6, 15, 13, 10, 10, 
                   4, 11, 15, 16, 13, 6, 7, 3, 10, 3, 14, 13, 10, 3, 6, 13, 1,
                    3, 5, 14, 1, 13, 15, 4, 18, 5, 18, 1, 4, 6, 16, 4, 13, 1, 
                   13, 10, 15, 5, 8, 4, 18, 15, 17, 13, 1, 5, 11, 13, 4, 10, 
                   13, 10, 13, 18, 10, 7, 18, 18, 18, 18, 13, 1, 16, 11, 18, 
                   14, 2, 4, 2, 15, 7, 18, 17, 4, 10, 7, 10, 14, 18, 10, 13, 
                   6, 16, 11, 6, 9, 3, 13, 9, 2, 13, 7, 18, 18}], "RootIndex" -> 
                 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 6, 7, 3, 6, 5, 1, 7, 1, 2, 5, 2, 7, 
                   4, 5, 1, 7, 6, 1, 3, 3, 2, 3, 3, 2, 3, 6, 7, 1, 3, 5, 6, 1,
                    1, 4, 4, 6, 1, 5, 1, 4, 6, 2, 5, 3, 4, 1, 3, 7, 2, 6, 7, 
                   6, 7, 3, 6, 1, 5, 7, 7, 4, 3, 5, 1, 1, 4, 3, 6, 1, 2, 5, 2,
                    7, 4, 1, 3, 2, 3, 2, 7, 7, 3, 4, 7, 2, 1, 1, 1, 7, 3, 1, 
                   3, 4, 4, 6, 4, 6, 3, 2, 5}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBLQPS/CFib1JlAQAAAGQAAABIkOQ0vRDQv2j3UQSa6bi/6GFcFD5v7T8Q
q/9Yv/fxv9gq82VC7rQ/AKFbJU+67L/QnVC5B3vwv6B9N9Px3++/YLHW7+YW
9L8AF4dTVMXvv9j9ytTBTPK/uLmzIB+myD/gt/WCyFPhv3CiX0iRZrQ/wF3F
ft2O87/wwd9Wvsjzv+gAGviM4de/YDBvPodq8b/o49hfsVXiv/gKRXVvx8K/
KK/XEBhYtb94SWRpIi3bP7Akq4oUKPG/mGkAYO5Wdr/4YB7nQpzbv+A5Fm7f
x+W/gL2hhAjY7b9oDQozsFSxvyC4xbjmsuu/sAfWfSkr6r9QVvoCRGDiv+BJ
qNUcMuW/eMfPFjwd7L9IYAehtEDuv5h2JGma9+m/yH22isd/xb+gjxdcAovh
v9Covfjp7sm/aD10UWar1L/g67SB/07rPyCWWhxCTPI/iDSTL6Aw5D9gdRjy
S5V1PxAwJ3QeRe+/YJQkTRbi/T/8NrQw5U8HQCDVbEWnGeo/uFtAvCzj5L/k
wuFjHOwFQCDivvCQJ9O/0FRYUbXUuT/QX6LFFAXbv3Bk//HiOui/WCf/uzJ3
87/AJN2wsi72v8jNPpRVtd+/WAKBlAgi8T9wfc1fBV/Jv1CLS+qUP+I/KHTv
A9LXzz+IOXy7L63yP/h/4zjq3fA/INqgGYam6T+gHMCC12nkv9D1KGoOVeq/
2Nvxharz4D9IJtMjJHLUv9Av3oWwfrM/UEVcT0+d0T+4uyqchZPcv+giMAgm
nHO/0BJmpdNo8z9gHYuPQyDhv3BKqJZ2FZi/6LzeEugb6D8A6wRLZmp6vxB5
4s+NAdQ/oOJif23w2b84ZygC0gLGv/gKaUBtnLe/2DKpTsoP1z8I2kYYkZ/8
P0jRLg7EfNE/+K5831Rh17/YPcCeRK/RP8iUT375KPA/wNLqiWaM8z8QLivl
por7P1Aa5Olr7uQ/CK4i2sAS679A55BCbYvyP+iHIgSIiPk/oLvmGbBV1j/w
FB98g7HRv0jPOA5lYP0/+FR5EoAi7D8A/NMqkQzivxjbjZZsjdQ/2G5V3DW8
tz9o8hdZmr/NPxvRtGM=
                  "], "Children" -> CompressedData["
1:eJwdiWVPFQAAAG8YgAVityhgBwZ2oBiooD7EroegftLt6eb8LQZ2gWIXit3d
3d1i9/n0w912u/ic2YHpEcCcqLACwXmpoVBwflZ0ONJnzc2bkRdKTpn57+eG
ifhPGcpSjvYkU55ItCVRRFOZKlSgIn884W8r8cvj/vSYMcRSjer88Kjfrco3
4/jqEWtQky8mUYvaJHDYz9bhk/HUpR71acBHD9mQgzaiMR88YKn7fe8+m9CU
d5b41r0mssc3FvvaZjRnty3Y5St32orWvLQNL2zLc3fYju0+c5sd6Mh4JtCJ
zvSkFyls9andeGIXHtuVR26xO5t9aA8euMne9GEgg+jLRgdQZCr9uG9/0tjg
Pdd710LvWOBtB3PLMaQzhKEM46brzGCtmQznhmu87giuOZKrrjZAFqNY5RWz
uexKLzmai67wgmMZx3LPu8xzTuSsS53EZKYwlTMuMUi+p13sKXOYxiJzWehJ
F/gX4mjS5w==
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{13, 5, 10, 13, 1, 1, 11, 14, 2, 
                   12, 12, 3, 11, 18, 3, 18, 5, 7, 1, 11, 6, 1, 6, 6, 13, 10, 
                   9, 15, 10, 5, 15, 18, 2, 14, 7, 12, 9, 10, 10, 10, 14, 18, 
                   4, 4, 12, 10, 12, 15, 15, 4, 6, 5, 2, 2, 10, 4, 15, 13, 6, 
                   6, 5, 18, 18, 1, 4, 6, 13, 3, 13, 11, 12, 16, 17, 16, 10, 
                   18, 5, 12, 1, 9, 18, 14, 10, 3, 2, 5, 12, 3, 18, 6, 13, 18,
                    11, 15, 15, 2, 12, 10, 4, 10, 4}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{1, 2, 2, 3, 6, 4, 7, 2, 3, 3, 5, 4, 7, 
                   6, 3, 7, 5, 5, 7, 3, 6, 4, 1, 7, 4, 1, 5, 1, 4, 4, 1, 2, 5,
                    1, 6, 7, 7, 6, 5, 4, 2, 5, 6, 3, 4, 6, 3, 2, 2, 1, 3, 6, 
                   4, 5, 6, 6, 7, 5, 1, 2, 2, 2, 1, 7, 3, 4, 2, 5, 6, 7, 3, 7,
                    4, 5, 7, 5, 1, 2, 7, 5, 5, 7, 3, 6, 1, 3, 1, 1, 6, 6, 6, 
                   3, 5, 6, 4, 4}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBDQPy/CFib1JlAQAAAGAAAACIhAeBUAX2P0Bphh9CpOY/CCwLp4m61j8g
g9GSi8j0P5jdMFwmTtK/iEkWa9aovT+gfAHQwcP2P7i8L6r6suQ/OAu9OSJX
4r9oPkB/69Xiv1iRPTIFELU/gKj6pJ3+3L8QEZXw2f/vv5jOGSfr9es/SDCL
9yrh8L9w0ovFvqPmv1iIeiTxxvO/WC9uAFlH8r8o+G34CL3tv8g+nMPxpOq/
+NxbsDhh57+Y+nF8GsrcvwBsHu//fPq/0LZ2JNYo2T9IhY2K7i34vxAINrpP
pua/yGnVbq2w4r+AN4R+gZfxvyDI4QwClua/sGRgSb4ItT+ImwlNMgG0Pxg8
ghj1SNQ/4DuLgcdqdb9QQY1QEEPtv3BgaZA4evC/WMp3NbIp7T9g8nCiBY+x
PxANPAyVXvC/YMFGltNk4r8w0F7VpM/mvxCPmVLplO2/EG4IGqY6uj8Ixhtd
h+Hqv2C2dYVNptQ/qG5fAwYDsz/QIjDS7ffvP3B3n7MgHeo/ALDuw3ZX5b8g
mGYIc3C6PxAIuYQCmOM/oGQjdEjMxL/w3QLbgI+1P7h0U4XTNce/MBH730SH
sz+Q2dm3rTXSPwB9vTvp5sy/uPQs0zap3L8wSsdSGbS/P9BID41dOOg/MO+k
zIvb8b9gxhPgarrWvzBqIUIodb+/2Paw3enU7b+wAfeXtR7fP9hi5vGPku8/
xCQbfEJfAkCYu72eV/rRPwjVqOe+U92/OHL8tTjn7D9ISm+W3pvXPxDf9u/6
1NM/oL9e0+930r9wrNj0NBrkP1gg0uIYbe+/eMA3TuchyD9IdcrB0rLwP6jd
QR7+v+Q/kO7M+ZrI3j+w+/ExJQ3cP1AT7uvVJ/C/sAJaytaK7j+gn1OjjSPx
vwQDtCqtpgFAONF0W4998T+Q+HNzwL3hPyBk3GzYNfY/MK7jjiGw6D9YtxEW
0Rn6P8BXA6Qe1OM/EEhN+LrPgD+Ayb+pnB7qP2BFNbf3d/U/uPAcdv4Zxb84
jbgmtcoGQFj49fdgowFA6A7pGJsD9T9K0Z5S
                  "], "Children" -> CompressedData["
1:eJwdifdTDgAAQN9llVHZexTJJiObEpEIXyi73IWfuPu4c/4aZSczIzOyt6zs
PTKyZ9bz5Yf37t69mIXLAovCgOXhIQVyVyYHg7mrMiNCkbZ0Rd7ivGBC4pKa
nxMi7D+1qE0dsplFXeoxlWmEE8FEyq3PZUcwkgY0pBGRdCKGKKLpQEca04Sm
NEMv+deL/vGCzWlBS1rRjvO25pxtOOtvz9iW0/7ylD9tT7Un/eEJv3vcWI7Z
mz50pgtxdKU7ZX7zqF+NpxtH/GKpn+1BTw77yV589JB9OWgC/enHAT+43wEM
5L37HEQiwynxnYN56xCq3Osbh/LaYbxyjy/dbaWjGE0SL9zlc5NJYSxjKPaZ
Ox1HKk9NYzw7fOJ2J7DNx271kVtMZxIPLXIym31gBlMo9L6bvGeA6czgrpnc
caMz2eBts7jlem+6zgrXOps53HAu153HNdd41fksoMAc8r3iav8Bu+LK6w==

                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 2, 15, 4, 10, 4, 18, 15, 5, 
                   6, 16, 11, 2, 7, 7, 18, 13, 4, 13, 12, 2, 4, 3, 18, 16, 1, 
                   12, 18, 1, 14, 10, 10, 16, 3, 10, 15, 12, 6, 5, 13, 15, 15,
                    17, 15, 4, 16, 5, 16, 18, 10, 13, 18, 14, 13, 4, 1, 5, 7, 
                   10, 4, 12, 1, 4, 4, 1, 5, 10, 6, 11, 6, 13, 5, 7, 18, 14, 
                   10, 15, 6, 9, 12, 18, 10, 18, 10, 6, 4, 16, 1, 16, 13, 11, 
                   4, 2, 12, 17, 11, 13}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 2, 6, 3, 1, 1, 4, 1, 7, 7, 6, 2, 7, 
                   7, 6, 3, 4, 2, 3, 1, 6, 4, 2, 7, 1, 2, 2, 6, 1, 3, 7, 3, 7,
                    1, 2, 2, 6, 7, 4, 7, 6, 3, 2, 1, 4, 3, 2, 7, 2, 7, 2, 7, 
                   5, 1, 5, 6, 7, 5, 7, 1, 1, 3, 6, 6, 5, 3, 4, 3, 6, 5, 2, 1,
                    3, 2, 7, 2, 6, 6, 4, 5, 1, 3, 4, 4, 4, 2, 6, 5, 5, 3, 1, 
                   3, 2, 4, 4, 4, 5, 3, 6, 4, 6, 1, 5, 3, 1}], 
                 "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBVQOq/CFib1JlAQAAAGkAAACAzZwM88O0vwjsvsFVkdy/OPS35Dne+z8Y
wmktxyTFP9iJXZVoufQ/QJ9jNUZI7b+wgPQDrBPjPxiD12kbtO6/8KmT1gCP
5r8Qzig4bmHkv7juhp2P1PS/QEp0UOj5779wJtgsmAraP+jKmGWltvC/2CkE
vniy6r9YXhrjaMPKv7gU1kcwt4y/gLBR+tMw67+Ygw5y73rovwj4wW3n5vi/
GJIJtiMX87/QT8QkLV7tvzhf1sdI1e+/2EzLtfa58L/Q/UAUcLLrv3BFw4rV
EPG/sLB3I2PA5L+gFxzJiGPuv6DvNsTxqe+/wB4+RqDn9D/QLLAtk43wP0B3
/aaPZPU/CCpwpKHr8r9oUfSNu0OmP4hkaJ8s9My/6GsVoLZx7D8Y7m0h+EXk
P9B/V5NXg+a/yNaSAaXM0b/QF6mG0PLkP4CJAN++6Oq/ELo8Seg1oT+A3F6d
V2jBv4hDL6Ob1aa/GAUR0khFtD8gciQj2yXaPyC+YOIZAYs/yLJa0sUl7T/4
5MT+hmuIP+gz/64UEdo/kMOmo6794j+ox4CVG1j1P7A5q4q89OE/OIOjuDGi
6r9Qv+FQ3OT5PzCV9MHy/+S/KE5nktPy8z8YkYcYG+7zPwCmoSm0TvU/1GEU
3UP1AUAwruOOIbDoPxjfS7/34fC/UKchxiUg5r/4hreBqDrpvyD7xTH6UrK/
iMc2pGfZ9D+oNM4jQDX8P9BbUc3L8vQ/oM/cEGjt4b8oDTQq5yHnP2jDqCaK
BNI/cHxVJKqN5j84dPzNQzugv+hPTZyHQNm/MJavqKTb7D+Ayo8iMRvMPzBl
bW2VSuY/eArOuQ+okT+om9jdwOTTv9C5syz3RLI/4O4wTb4uhj8g7sWq5n/E
v9gpipsC8OA/6Kmeju9F5j9Yt9bZo+HwP0BdXc8kGvM/sIIvlHO0tT9w2ial
bDjsP2iDs9rTONk/3OXdGBbhAkDIAgXn/hPkP+DzL/2Wy+E/4OWiUZW8zj+o
PDWYKTrpP7DkvGkqlem/IHXewYGkyL+oVITSQw7mP0hSpg8u7OM/4D7oV40p
0r+gu+YZsFXWPyhmZBROTeQ/QHr5LMIu9z8AdjTyMNXwPzDQSOXybPc/IHdO
Q3vx8D8A4dKN
                  "], "Children" -> CompressedData["
1:eJwdkVVTFAAABnfAALu7sFsxsOMMFNvD7kMP8EVnTmcc/4gFdndhd3d3d3e3
68nDfjM73+MmpE0OpscAU+KiEwxNC0Qioemp8VFJmTQ1nBGOJCZl/v8nRonJ
JZY85KUFLclHfqpwzDjiqcxRC1CQcpSnEIXRIxahKCUpxV8PW4zilOCQfzzo
bw9YmjL8siw/3e8P9/ndvX5zj1+twBcrUondfnaXn9xpVaqRwA4/2pwPVqcG
NalFbZqy3Tpssz4NqMtW67HF9+b4zoa8tTGN2OwbN9mEjb52g4ms95XNeOk6
X7jWJFrx3Axa04axjOOZa2xLO9rTgaeutiOrHMkontiJzgR47Eof2YWudKM7
yTx0KA/swX1X2JMUerHcew6iN33oyzL7sdS7LrE/A7jjYm87kFsGuWkqN1zk
dQdzzSFcdaFXHMZwFnjZEVxyvhed52jGcMG5njfbc4Y4azppjOeMWZ52AmHm
eMrZnnSWJ8yMNprpcWf4DyAz3OI=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{3, 10, 15, 1, 18, 4, 4, 11, 14, 
                   7, 4, 7, 11, 16, 13, 4, 11, 5, 6, 18, 13, 2, 3, 15, 7, 15, 
                   4, 13, 4, 4, 7, 14, 5, 18, 7, 18, 4, 1, 3, 18, 13, 18, 2, 
                   12, 7, 10, 12, 12, 1, 2, 2, 2, 4, 4, 12, 5, 16, 9, 12, 6, 
                   16, 17, 1, 13, 14, 13, 18, 10, 18, 6, 13, 2, 4, 10, 18, 13,
                    10, 6, 7, 14, 6, 13, 6, 10, 6, 13, 15, 9, 7, 5, 10, 5, 14,
                    17, 15, 4, 9, 15, 4, 15, 7, 8, 4, 15, 18, 3}], 
                 "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{1, 1, 3, 2, 5, 7, 7, 2, 4, 2, 3, 7, 3, 
                   4, 7, 3, 7, 5, 6, 2, 6, 4, 7, 2, 4, 5, 6, 3, 7, 4, 7, 4, 1,
                    7, 1, 7, 1, 1, 3, 1, 5, 5, 5, 3, 7, 6, 1, 5, 6, 1, 3, 1, 
                   5, 3, 6, 3, 4, 4, 3, 3, 6, 4, 5, 7, 6, 6, 1, 2, 2, 5, 5, 3,
                    5, 7, 2, 6, 1, 2, 2, 4, 1, 5, 3, 1, 3, 6, 5, 6, 3, 2, 6, 
                   7, 3, 6, 6}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBBQP6/CFib1JlAQAAAF8AAADYFBj0HzLyv8DL+LK+bPu/QM6E+eKP878A
XU1z/CfrvxBFhEBcS++/IPW5GVAv8L9gXHbP3NnkP0gDpLR7Rey/IAxK2FPj
6b/oT42uav7sv+jAuWqFq+y/8AtTermI8r8Qlix1hhLFv2CsWz1w9ea/EOlC
pLsM3z9QAk9iKxf2v+DlP2ABi+o/ONrxEpTg7L8Q0KXlRCbrvxh9g5p/RtG/
eOnyGyFq87+g8fY3rDrUv/D2FjwjR76/kIwZn6dGyD/oECPNEVbvvwAWKw2r
dt6/YJb5r5Tq4T9gnJSD6+PXv5hZKndYwdw/aAgFVpCG5r/w8MfNc7Lav4D3
CpatMPG/kF/J+anH7b+QWs2hPBLdv6jaDwcIhOS/YC9zV08jzz/oxXERSbnq
P2i5VpFoT+y/oOJif23w2b8oItlda27qv+gWzvrA/NI/CPNOW4zr1b+QzD1Q
fGOBv+hfEefT5d6/SHS55yJ2879YATILGZYBQDirzKv3XNU/gH9Y9lID0T8w
5QlJhdv0v8i2xJyvTfc/+HPISwrs5D84dDWg4hLsv7D/s/ALa88/2LIKDVzM
sr/QxzzrGzXSvxj/acEkLrK/mGgAgYw26L+wXaR9sTPePxhS/CLRRa+/sKyQ
SNGkxD9AsZyuG9f0v+hOquqXMuS/wJiVlIuEy7/4H1LQZDDav1j0Y99jDNO/
wK+Bp+7A0r9IVCLKDvKxP+CnmcHfj8a/WO3F/maq0L94OsOgy1TVv1j1TZED
z3e/6G2XfcJ99z9ovwfZbi3KP2D3am/so8E/UI3JB6Pp0T8gKEdds+x0vzD9
HCYv3+I/2MD3CjSi5z9ow6gmigTSP+C/I4ocBus/qHxo0v716T+g6Pliqlvc
PzjHYiRGEMU/MIGifvss8j+QMMJRM/zoP5i2Flf+avQ/gGab/wAE9j+4f7tr
0TLeP/AnDFRUs+c/6BxzS0u/4T+Ayb+pnB7qP1AcrlnuyKC/QMKAmzce6j8A
irJ4JdryP3BJZ54oEfM/XK+ivg==
                  "], "Children" -> CompressedData["
1:eJwdkOdTDgAAh59LKCOSTRSR7IyQWVbZ3uyMy134xN3LnfPf2E1CKHsle+/s
vWeUlcfLh+d399zv2xO/dFVgWRiwOiI0gZy1acFgzrqsyJBkrlyTuzw3mJyy
4t+/JETYf+oRTn2a0JQGnLEhEehpIzllYyr9YyPqPOlvK4yiGdG04Jcn/Glz
fnjcGFqSzABa0Zrv9qPWNrSnA21pR43H/OZROxJLAt3oxBHjOOxXO1PtIb8Y
z2e70JWDfvKA3dlvL3rz0UR6kMQHe/Lefb6z3Lf24Y19eW2Zr9zrS/vzwj0+
dyCDSWEQu31mqUMYylOzGUYq05jOcEYwlnE8cZcjGcVjR/PIMTx0p2mk88Ad
3rfEe47nrpOpcgJ3nEgGmdx2u5PY5i2LncJUblrkDQu9boEzmEmAfK85h6tm
ccVZzCbPy251Llucx2YvOZ8FbPKiG73gQs67iMWh8ufc4FnX+xfWKcjs
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{6, 13, 1, 7, 15, 15, 4, 4, 18, 
                   12, 2, 7, 14, 10, 4, 7, 17, 18, 18, 14, 13, 12, 15, 18, 2, 
                   18, 16, 6, 15, 13, 3, 6, 18, 5, 4, 13, 17, 14, 16, 13, 7, 
                   10, 14, 1, 18, 7, 18, 10, 4, 10, 15, 17, 10, 5, 1, 15, 11, 
                   14, 13, 4, 10, 15, 11, 18, 3, 18, 10, 7, 4, 10, 18, 13, 15,
                    5, 4, 6, 7, 7, 15, 6, 2, 6, 13, 3, 1, 3, 5, 10, 9, 2, 18, 
                   4, 10, 13, 18, 13}], "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{7, 5, 2, 1, 5, 4, 5, 6, 1, 3, 2, 1, 1, 
                   1, 5, 1, 1, 3, 3, 1, 4, 1, 1, 4, 7, 2, 7, 3, 7, 3, 4, 4, 5,
                    2, 6, 4, 7, 1, 6, 7, 3, 3, 4, 5, 4, 4, 3, 7, 6, 4, 2, 3, 
                   3, 3, 5, 1, 1, 7, 5, 7, 7, 4, 3, 3, 4, 7, 4, 4, 7, 1, 6, 3,
                    5, 4, 1, 3, 4, 1, 4, 4, 3, 5, 3, 3, 5, 5, 5, 4, 1, 5, 2, 
                   5, 5, 3, 3, 7, 2, 1, 4, 3, 1, 7, 5, 2, 7}], 
                 "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBVQOq/CFib1JlAQAAAGkAAADIzXkM3KPvP1ixmcGA7dk/EAWCyWUcuD9Y
0sxS+OD4v7CUUavRXew/ULIyNfyJ8b/YcIn3w3jsvxBhdfjM0fe/2BQY9B8y
8r/Ylqn9wQ7FP3gLcWj2LPm/CJ9NnSPN8b+ArYYrH6jjPxjZT05Hacc/OECB
zUdV7794x88WPB3sv0hXbWcJ6bi/WO+8K47Yxr+IDTsG5c/tv3Acn/Iuee6/
CNYiSlaq7L/401e4UaLovzAxIoewBPK/wJQmrmrw1T/gIgvH+azwv/hW+y/5
QdI/4D8eB1vw879Y5ccWS9f0vxi81yp9ncS/EEVN5tNu97/YCTs4v1Tmv3h5
JmpjZOi/0LmzLPdEsj+4WZ8kPOvcv+BVjxIV8Nq/GKRjfg1a77944PyZhxaa
v0hOvvupiO2/IOaE/ktI2L/YTMu19rnwv6DiYn9t8Nm/iMtqaCwr47/YJFH5
tGnmPyBBS8cPNse/COrekCT7x7/Y+ptkfivDvyCrNI/rONy/mMYLv+U6zD/o
k1Ehu+7kP4Ak0bdmrbQ/WEllIkFIuz+wHJnNeC/hv4iO1XIu1Ly/CNGVe9YL
uL8gPOnJiu7kv4At4mwlveg/6KWCqP4r4T+IeB7kXIrmv2C/2cy3U9C/GISX
F9j41r84DxDDlWnqP7jm+0COCdy/qP1asA462T+Aw9Q6yHHkPzifVfJEnuM/
sH9XIJo31D+gs78nEGbbPzzJX5BfPwRAaCbuRcBzzr9gpJZC2MnTP8Cay5Az
jOY/MKU2P9a92b/A9wsDyNbgP4DVg+1Wv9Y/YJTDQE1I4D+oG0O4bSPVv8gn
wuWmV/k/cAHfJbo/8j/QfsLIi4m5P7hvJb7DaMo/iHYhf5rM7D+QWji5ZPD1
P+hfEefT5d6/cIHnfkrVzz+gRWRvO4/4P2DC7uR3afM/aB1dNkx6/D/w1+C8
9Fzzv1DB+kEAIf8/uFrXSypmA0Cwb/G5RXzQvzCEe+/Ut9S/sDscMzqs8D8w
M64bybPYv4B3tdQmr+w/UGkWSP1t9T/gsC0zUgO1v1Cm3k2kkeY/0FKUucnw
8D8QdVd9M3jxPzggTcIGcvc/IEArGEKQ9z/AEQLKR7fwP9CFsdBkrdY/4L36
ljSI/T8fMs4m
                  "], "Children" -> CompressedData["
1:eJwdiWVPFQAAAG9YYIvdYrdiYCsgqNg+7H7oI77o9nRz/hG7O8Du7u7u7u7W
8+mHu+12cRkTA5lRwKToiALBKUnhcHBqekwk0iZMDmWFwvEJ2f9+ToSo/+Qj
PwUYyjAKUohudEejiaEwfzxqEYpSngr89oi/LEZxDluCQ5akFLGUpiwH/WkZ
fnjA7+73m+X46j4rUok2tKUye61CVb64x2pUJ4HdfnaXNYijJrWoSz1qs9NP
7rAO2/3oNj9Yn/e24J0NaEgjGtOE5my1KVt8azPeuNnXbvKV8bx0oy1pRWs2
+ML1Pnedz1zrU9uRSBLt6cATO/LYNT6yE53J86FdeGCu902mKyncc7V3XWUq
K73jCnuQRj/6c9vl9qQXt1zmTXtzwz70ZanXXeI1BxAgnasu9ooDuewgLrnI
wQzhogu94ALPO5wMxjGC+Y5kFKOZ5xjGcs65BpnjWWd7xlmOJ8RpZ3rKGWaS
xUmzOWEOx53uMaf5FzPE3OI=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{18, 1, 11, 16, 12, 15, 6, 13, 1,
                    5, 15, 15, 12, 14, 18, 14, 13, 18, 10, 18, 1, 1, 7, 13, 
                   11, 13, 16, 5, 1, 3, 10, 11, 6, 6, 13, 9, 10, 15, 18, 7, 
                   10, 5, 12, 5, 11, 18, 15, 4, 2, 2, 5, 13, 12, 18, 10, 15, 
                   1, 13, 13, 6, 3, 7, 6, 11, 4, 10, 15, 9, 7, 5, 4, 2, 10, 
                   15, 10, 10, 18, 4, 12, 14, 14, 13, 7, 2, 1, 12, 17, 10, 18,
                    10, 14, 9, 18, 3, 12, 15, 15, 4, 11, 6, 4, 7, 13, 16, 1, 
                   2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{1, 3, 1, 5, 7, 3, 2, 1, 2, 6, 6, 2, 2, 
                   6, 4, 1, 6, 7, 2, 1, 4, 5, 2, 6, 6, 7, 1, 7, 5, 6, 5, 6, 5,
                    3, 2, 1, 2, 5, 2, 6, 4, 7, 4, 2, 5, 4, 5, 3, 5, 4, 6, 7, 
                   5, 5, 6, 7, 6, 4, 6, 3, 1, 7, 5, 3, 1, 7, 2, 2, 1, 4, 4, 7,
                    5, 3, 5, 1, 7, 4, 6, 5, 6, 3, 1, 4, 6, 5, 5, 6, 4, 7, 3, 
                   7, 3, 5, 2, 2, 7}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBFQPq/CFib1JlAQAAAGEAAADAy/iyvmz7v5i8qrrBt/y/MDEih7AE8r9g
fX5yiGD0v+AiC8f5rPC/wNs4vcgr8r/Y0aNQj/zhvxB2DlbZD/m/+LaEv9hs
8b8IEltA/arxv/hqe1qD8+2/mFsLUezr7L/oBwFPTmncv1DF0LPRdfc/aJpn
9Rnd079YxLE6Pwr1P9Qk0mVuJwNAMDMWeN2Ny78wQogi5Bfnv3DRjfS+Re2/
eGuvXxHw3L8YEPrBdWjVvzAXm7h3ovW/gBc4cPgDyb+gHdQY2M3qvyDNvFbl
ENO/4HS2QfY56j9QW5asEb/mvzhAgc1HVe+/IBCFU+kC1r8gWcB73FXiv7hW
KqW5VvC/YKcDLYvpyr9AZe2eXctuP8hclGxg7Oa/QDn96Pl5679YpD3BmT7S
PzAT5b86WfM/+Ikf5W2T27+AeL26iuX4P7gVjKi+y9A/4Hu6mUam4b+g12fj
g9zuP8CGQiT2Xta/2M9ABgYp2T+wYCodawXkv8h3CWe/9ME/oE/nwV3d5L/w
9Wwc1wDcP8hwHz3hTtA/kBZWZWSFtD+oAlCuFffBP9hWNCZDUMW/WEmf+sW/
xL8oib7heWKzv2gETOYEpbu/2Eilx8bo7z+wpGzu8jHIv9CkPjIhjcY/KCBJ
0cDE5b/gQNhaGku5P8iOyKeZX/G/mG0v3pJr/D/4jbmL+LThPxjxrIDjvKq/
qOJ4KRaA17+AqzJWjHDTv3jhYbJgy8s/sASAMwOg7D9Yf0KJ+kzwP1Da0Deb
R/g/kI4ytAbF9j94RAAF8XDRPzC2GAXlTPI/ENsJfmG22r8oHmFb/ZrwP7CN
6DOUft2/mFUtHcve5j+QHwJ5tHzhv+AObMTmq9q/SIyUqZ2d4b9Yz8RzWdz0
P2BOAuqU5tM/OOMfJph+uL+AQFJJYBbVP4jtaEdZXO0/kIyzhQHt+T+gReY5
MY3bP9i/xWe62cw/sAH3l7Ue3z+wUiEhdjvqP9DY+F5Cu/I/2Lzzm6br9D/A
Rp/3JekBQMApK3e6Vf0/AGFSQNFI7T94FftVBGbZP9aQrBY=
                  "], "Children" -> CompressedData["
1:eJwdifdTDgAAQN9llRXZW0iyM7JCUUgJX0q2z134ibuPO+efsffOCAnZW1ay
995b5vPlh/fu3r3YOQsDcyOARZFhBYJLUkOh4NKcqHBkLFhcMK8glJg0v+oH
w0T8pxpanRrU5K9nrUUkdalHFGf8Y21+e9pf1uGnp/xhfRrQkGhOWukJY2hE
HJ1pTBO+e9ymNKMNbWnOMb/ZkhYc9atHbEWprTnsFw/52XZ88qAfbc8HY+lA
R95bYicO+M5i4+nCW4O8MYHRjKEr3ehOD5IZymt70ptEXtmLl+73hX147kD6
ss9+9CeJATxzr08t8ol7fOwgBrPbIezykTt96DAeOIL7DieFQlPZ4T23O5I0
7rrNdLY6ii3ecbMZjGU2m8wki9vOYhzZ5JLHLcczgY3edIM3nEiFAXJY73Un
Ue46rzmZq04jn7VecQqXncol1zidGcxktWWu8qIrveAKz7vccy7zH1U3zOo=

                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{18, 1, 1, 2, 13, 14, 4, 15, 18, 
                   16, 1, 18, 6, 18, 2, 18, 7, 10, 12, 13, 10, 13, 5, 4, 7, 6,
                    16, 2, 18, 2, 1, 16, 11, 18, 9, 15, 10, 6, 18, 16, 1, 13, 
                   13, 18, 13, 4, 5, 18, 15, 10, 11, 15, 5, 4, 13, 10, 4, 13, 
                   10, 15, 12, 1, 3, 12, 9, 18, 5, 6, 7, 4, 13, 1, 13, 12, 14,
                    7, 9, 4, 4, 12, 10, 17, 11, 12, 10, 13, 3, 13, 5, 14, 15, 
                   10, 18, 12, 4, 17, 15, 3}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{7, 2, 2, 4, 1, 7, 4, 3, 3, 3, 7, 5, 5, 
                   5, 1, 1, 2, 1, 4, 5, 5, 4, 4, 1, 4, 7, 4, 6, 5, 5, 6, 6, 5,
                    1, 6, 6, 4, 4, 6, 6, 7, 5, 5, 4, 5, 6, 7, 2, 3, 3, 4, 1, 
                   7, 2, 5, 6, 1, 7, 4, 1, 3, 3, 2, 4, 3, 7, 4, 7, 6, 3, 4, 2,
                    3, 6, 5, 5, 3, 7, 2, 1, 3, 4, 7, 3, 6, 7, 1, 7, 4, 7, 6, 
                   5, 4, 1, 3, 2}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBDQPy/CFib1JlAQAAAGAAAACAWYBGFmDzv/Bw9H51zco/kLAwokK54j/Y
63TGX7UBQNBJJBmPcek/2HprqHx3/r+4yeoYJ7TjP8CHb0KJ+PW/MOkVx6wH
ub/Ax2AtbKLuv1DM2EzZtug/YMThRNaD2T/4IlQNSzDwv0ArwcKXZrS/YLHu
57fY+L/4kfKsIBPxvxhRVClLYfG/iC685jsu8r+oHcmqQYj8v1iIeiTxxvO/
kIWJL+0f9r8Ai8M7WDvvvwivNZcHcNe/8Ct4d1Xtqz8YaYFAC7fvv8gFI0X1
2OM/0NlyJ29j6r8Ak1m4OWjhP9C/jioLPeK/yAil73Op57+IOvCDnRzsv1Cd
Pr+0AsY/oKAtw5ga6L9YrOLRK8vtv5BjJ4Z42uq/UK4x4Eth57/Q8RZxXYrj
vwivjCIlido/mIf209Hd0r+ArlKL3IvpPxCDMUGz+qO/MBH730SHsz9gzjnx
x0Xiv6B2g8/ZXua/WH+DlJuT378YSc3LhvPiP6h/AgW7tO6/ALlwEprauT+Q
e5AF8my9v3C04ye5cWk/YBy2gSU/zL8QIrXG1XPcPzBYe7Wecdi/YJXg5WD0
1z+otvPKzp3OP1AOaPCo9O2/cCsBuIq+7z8oMtu93jXgv2CsIes0Ovw/GPGf
jPOo4T+g4mJ/bfDZv8BapP9Xgfc/ECm29+Wo3D+I1m+1HN3rPzDC4UwRCdq/
qMeAlRtY9T9w3gnrRffzv6CE2Rp3J/w/iG4Mm7mStD/AHj5GoOf0P9A7yYSz
b/k/+AMS9rYb5L+wBRMRvdHkP2CccJZtIeQ/+K86D9dn8z8gA6KeusvEP8Dq
kPIo3ec/wJAa2brx8z/YblXcNby3P1D2l8AacNk/9Enf0pnUBkDo0esC/HLm
P8CJTwGvVuK/WM/Ec1nc9D8IUJJ7FsH7P8h8OLPMh9e/mJJcbshq6T+YR2J1
sXThvxCdAz3DI8+/MCMdQfBW178or9XiCSHXP9BPJdoGcPA/WPj192CjAUB4
a2RNsbr2PwhQvyJH+uk/sG6bIkPc+D9lFqhu
                  "], "Children" -> CompressedData["
1:eJwdifdTDgAAQN9llVHZexTJJiObEpEIXyi73IWfuPu4c/4aZSczIzOyt6zs
PTKyZ9bz5Yf37t69mIXLAovCgOXhIQVyVyYHg7mrMiNCkbZ0Rd7ivGBC4pKa
nxMi7D+1qE0dGtCQulxUL/jXeoQTwR/r89vz/vKcjYhkGgGiiCaZMTSmCa1p
Q1Oa8dMWVHvW5pzxh6f9bku+2YqvnvKLJ21LO9rTgc+e8JMdiSGWj3big8ft
zDHf25V3duGtcVRZZjzd6E4PhjCUnhy1N314Yy9ee8RX9iWB/ry0H5WWOoCB
DOawLxzEcxN55iGfetAnHvCxwxjFaB45nBHsdyT7fGiJD9xrEnu8725TGMsE
0rjnLsdRbCo7Hc8O77rdO05kCttMZxKT2eptt5hBkbfc7FQKvekmM9noLGYz
nRlUuMGZrDeLdWaz1huu8bpzuOY8rjqXKxY4n3zLXcBlc7jkav8BCHjK6w==

                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{15, 18, 15, 12, 1, 13, 4, 1, 16,
                    6, 13, 4, 18, 12, 18, 7, 1, 11, 18, 10, 10, 7, 18, 5, 13, 
                   4, 14, 18, 2, 5, 10, 14, 10, 10, 12, 11, 13, 15, 17, 7, 2, 
                   13, 6, 18, 10, 7, 18, 13, 18, 10, 9, 12, 16, 13, 18, 10, 1,
                    6, 14, 1, 15, 11, 14, 6, 18, 7, 3, 12, 4, 15, 14, 18, 18, 
                   3, 16, 18, 4, 11, 6, 16, 10, 2, 10, 4, 6, 15, 12, 4, 16, 5,
                    2, 13, 12, 11, 4, 11, 13}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{7, 5, 3, 2, 4, 2, 7, 6, 3, 2, 3, 7, 5, 
                   2, 7, 4, 7, 5, 3, 5, 1, 1, 7, 2, 3, 5, 6, 7, 3, 1, 6, 2, 6,
                    4, 3, 5, 6, 4, 6, 4, 2, 2, 7, 4, 7, 3, 2, 3, 4, 3, 7, 1, 
                   7, 2, 4, 6, 6, 6, 5, 5, 2, 4, 6, 6, 6, 4, 4, 2, 7, 7, 2, 1,
                    5, 5, 1, 7, 3, 2, 6, 4, 7, 7, 1, 6, 2, 3, 1, 3, 1, 5, 6, 
                   5, 2, 1, 5, 6, 6, 5, 4, 3}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBLQPS/CFib1JlAQAAAGQAAADIzXkM3KPvP7izT1k3VtC/sCAr6mQy4j94
B4xNwiGEP4i7fzEZe86/IOt0jDzs47+ovxjWGsDlP2Dozmt5X/a/wDGCw+fj
8L+Y7cCEAU3zvxjCaS3HJMU/QPsJWN/A7r8wjXDG1dzjv1giD1ymh/6/uA3s
KJKn479IJx1wtmPXvzCSuOqz/8m/uOH0f0m57L9QVqjpm073vwBF0R1rY/e/
UOysabib+7+oS01NcIXyv5DzGDgAxfG/eCAaTQe96r/4lmaXTL3lv9gQLKCS
VeK/8POJrbKsur/wT4u0xJyMv3BOstJJgd+/4JvACOf0yr8g9jFljBSmvwgD
WYzwNda/0JNn5bM+0r9Iz5l6PIK0P9ivQfBCJeI/GNwRmcq237+wJn0xxY3k
v4DWSZuPqd+/cMJdl7pU4b/omlCTTfjRv7Dr5G8kguQ/COqTAARv7z8IE4NZ
INnCPzAZnqp3bPk/wA8cGECA878Ib7Cs7kHiv5ifhLS8+uy/6J62ApzT7b8Q
Hn4Yqr/5v0BK4gdDwc+/GNKimp6v8L/QcO2DP1TkvwiiBEwblee/4EBRp9Ka
nb/YlLGqsgLrv7gz94ZkAOM/aC2eBP7Y3D+4G4jsLFfSPzCyBqCJJec/GEOU
b7SO5D+ArgFTV9/kPyC/kVGzprY/GKRQ2ljkoz9IS8x3WguSPxhFioRmK9i/
AC7Cu5kzt7+Ise4IurLQP+jeAmYum9C/gCTUva0Y4b/Y971+Errcv9jMOfQc
Tce/MJ44pfFg6T8Q8Zbn1ozUPzCwWkpfpsW/ACI/NBQv8D8oGuAG/2XeP2Cr
RSDVPs+/cGpEJlW54T8wiyruV+HvP1BSmQ0bws4/AAH7i6ma6b8Ak4szAMPu
vzSrrj/lhwBAuAk/T+D23T+oEeWXI27SP0jksUUK48Y/8NWVUwX/7z/Yv5lH
xhfcvyDYJaaIG+A/0CXtRSql1T9wpY3yf3PxP1D6Mz02/N0/iPdg6H7f1j/o
U4abZZfzPxAC94ARGO8/2CMI55DYzL+wxuqJJkG5v7A7SlBvzuE/iPcDVnbL
4D+YAhS+zeb0P+Z+shs=
                  "], "Children" -> CompressedData["
1:eJwdiWVPFQAAAG8YgAVityhgBwZ2oBiooD7EroegftLt6eb8LQZ2gWIXit3d
3d1i9/n0w912u/ic2YHpEcCcqLACwXmpoVBwflZ0ONJnzc2bkRdKTpn57+eG
ifhPGcpSjlFkU55IWtGaKKKJ54gVqIg24I+VqMxhf3vIKsTwy1hqU4eqxFGN
6tTioD+twQ8P+N2afHO/X91nXUqsx16/uMf6FPvZ3X6yIR9tRGN2+cGdNqEp
CSRSaguSaMZ7d/jO5rx1u2/c5mtb8sqttqEtXelGO9rz0i2+cLPJdOC5HelE
Z565yadu9IkpPLYLjyyyOz0YSYCe9GIQg+lNH9IYQF9SeWh/HtiP+27wnuu9
a6F3LPC2A7nlOm+aTgaZDGEoNxzGddd6zTVedbXDGcEVV3nZlV5yhRfN4oLL
Hc0YJjOFsYxjPBM47zLPudSzTuSMSzztJE6Z71QWm8M0ThrkhIs87kKPmctR
F/gXjjfS5w==
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{13, 18, 1, 11, 1, 18, 6, 13, 1, 
                   10, 7, 18, 13, 18, 13, 12, 14, 1, 6, 16, 13, 18, 7, 13, 10,
                    18, 12, 7, 13, 7, 9, 14, 3, 10, 18, 12, 4, 17, 3, 10, 13, 
                   15, 12, 3, 16, 9, 17, 4, 13, 4, 10, 7, 4, 2, 10, 13, 4, 15,
                    13, 6, 1, 3, 1, 13, 14, 10, 4, 18, 12, 2, 1, 18, 11, 2, 6,
                    6, 7, 15, 4, 4, 3, 13, 12, 10, 18, 14, 18, 1, 5, 12, 18, 
                   10, 11, 4, 4, 4, 12, 15, 6, 13, 5}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{7, 2, 5, 1, 7, 3, 7, 5, 3, 1, 5, 7, 1, 
                   6, 2, 7, 2, 1, 3, 5, 4, 4, 7, 6, 1, 6, 5, 4, 1, 4, 4, 6, 2,
                    7, 5, 3, 6, 6, 7, 4, 5, 4, 5, 6, 1, 3, 7, 4, 7, 6, 5, 5, 
                   5, 1, 4, 7, 1, 7, 7, 4, 2, 7, 5, 2, 7, 6, 5, 4, 1, 4, 6, 6,
                    6, 7, 1, 5, 4, 4, 6, 6, 3, 3, 5, 7, 3, 5, 4, 6, 4, 1, 1, 
                   3, 1, 7, 1, 5, 4, 4, 5, 4, 1, 4, 7, 6, 4}], 
                 "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBVQOq/CFib1JlAQAAAGkAAAB8ZxAGuWwBQGhayQUyVNK/uFrXSypmA0DQ
nVC5B3vwv4AqkDVbjfO/+OfRDw6Q87/Qw7nRe4fqPwiWX8Z6EvS/KDLBwLju
8L/AgC7QzAX9v6imcdy4aeK/wDHuJHm89L/IOlX/Cmb2v0hKivMVQem/qP/v
Pptp8b8w7AAacp34vxil/QiHc+i/IPcp2CWQ6b9I5LFFCuPGP3jz9D4lPeK/
2Ot0xl+1AUAYVMi373Dhv3BMaYeBzNu/4DrBHPzu5L84mwGtjdLtvyiwwqh1
1O2/2FwD6lu7pb9wbHzTcDXxv5hwTm93VO2/AKP+BV+h8r/YUqQFWH3mv7hW
KqW5VvC/EJf9/rsv6r9AzJh2qHDzv5il0CHBI7W/aFikUPMR7b9YckeR6f/n
v7Cpviq/Ws6/KMLHUx101r/Qi9w7IdXaP9AmmKicG9C/QKFA57Q/4b/QdFub
5ufRv/A8OunAdPQ/CITSuajV1j+IW1UniLvzv3hjzRDvzvo/2G9zQIlHt7+w
QkbbRTr6PxhT/epB7+w/kIGeUf+Hzj8w78jbZP3wv2B1hWQCF/I/cFShN8Jw
57+wYCodawXkv6C5g7URqO6/2IhvZTxv1j+I6Dp/moqUv8AJhxHjPfE/IBZp
CSJh2z9gAkxWVWvCv9jYYE3nYM6/uIOFKAsa4r8gvmDiGQGLP9g3wFQLlO6/
WPRj32MM079ocYJwbirVv4j6rNAaktY/UAn5CK89vz9o0+QU6UzwP8hMuIv0
6oi/eJPQ8iCoxj/4D23BlGLyP8h8OLPMh9e/CPhWV6Rh6T9QF6D5fgnVvyjR
qnRgSNe/GETL3mnp0b+YI9wJByzevyi+q0aNZt4/KM2hj4iR2D9wlfuUnAPp
P3BJB9Go3s4/CIIaIpui5r+4ymLjRj72P0gGrpbudO8/8Gk+nk6t8T8gKbd4
RJ3Fv+DAGN+iQ/I/OF2v+vK77D8AuTEZXefwP3hRSoRfVvo/wP1wqVb86z+I
qonjPevjvxBvbxsJeO8/uD5tXaq/BUA4EqhaWGfRv5iHSG8B3ri/0F5dqLjN
7j8IbcUo/ercv7Dl9AU2cvc/UFKZDRvCzj8IsSV2RPbcPxAs43WlHgBAACXm
xfQs7z9flMlm
                  "], "Children" -> CompressedData["
1:eJwdiWVPFQAAAG9YYIvdYrdiYCsgqNg+7H7oI77o9nRz/hG7O8Du7u7u7u7W
8+mHu+12cRkTA5lRwKToiALBKUnhcHBqekwk0iZMDmWFwvEJ2f9+ToSo/+Qj
PwXQkxakEI1oTDQxxFKawhShKMX44wl/e9xfFuenJfjhMb9bkm+W4qtHLUNZ
vtiQcpQnjppUoCKVqUIljvjZw37ykFU5aDWq89EDfnC/Ndjne/dai9q8c49v
rcMb6/La3dajPq/cZQN2+tIdvnC7TdhmM5rTlK0+d4vxtCCDcbRks0E22YrW
JNCGPvTlmRttSzueusH2dKAjnehGdzrThSemkMh6H7vOJJJ55Fq7ssaH5plK
rg9cbQ/SuO8q79mT3qz0rr244wpvu9x+9OeWIxnAMgOkc9OlDmQQNxzGdQdz
zSUOYbFDWeRVFzqcBV5xBJed7yjmOZoxXHKuFx3LBed43tmOZ5YhMjnnTLOY
4VmzOeN0T5vDKaf5F4Q83OI=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{4, 18, 6, 7, 10, 4, 4, 11, 13, 
                   4, 17, 18, 1, 18, 18, 9, 14, 5, 2, 10, 6, 11, 15, 6, 5, 14,
                    6, 5, 11, 1, 13, 6, 12, 13, 1, 2, 7, 15, 13, 7, 7, 7, 10, 
                   15, 13, 12, 2, 12, 3, 15, 13, 18, 15, 1, 15, 10, 13, 3, 10,
                    1, 7, 18, 10, 10, 7, 15, 18, 18, 18, 7, 7, 15, 12, 13, 18,
                    4, 16, 13, 13, 10, 18, 6, 5, 13, 1, 13, 16, 6, 17, 4, 2, 
                   4, 10, 14, 18, 15, 9, 5, 4, 4, 2, 5, 7, 18, 15, 12}], 
                 "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{1, 3, 5, 4, 4, 2, 1, 5, 5, 1, 3, 2, 1, 
                   7, 4, 2, 3, 7, 2, 7, 5, 2, 2, 4, 5, 4, 1, 6, 5, 4, 1, 7, 3,
                    7, 3, 2, 6, 6, 1, 3, 6, 2, 6, 6, 5, 3, 7, 3, 1, 4, 4, 5, 
                   1, 7, 2, 6, 3, 5, 4, 4, 7, 5, 6, 4, 4, 5, 6, 6, 7, 5, 1, 5,
                    2, 4, 1, 1, 2, 6, 4, 1, 4, 5, 4, 5, 5, 4, 6, 6, 2, 5, 3, 
                   1, 6}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwB9QIK/SFib1JlAQAAAF0AAADAy/iyvmz7v4jHUw7VwP6/WE886BPQ7L8I
ulZvmPzzv6jdZ5ij7um/8AdiBiZU0r+AKugSW5Pzv8Bc+I29/vC/wO3CmA+k
87+ganStqk7iv1DWbCoW1ve/oH03gyq/xr/YabMuHgf2v8glwESJJ/G/aLbR
VA3LtT/QkhEprCPhv3DSPpv0+Oq/IM58ysjN+j9wb0nor0bqvygo3zKf0Oc/
MF0vRhYl07/Q3NBkjhDqvwh0Gql45fK/IGRQ2wHQ779IMvPconzov6jqWhoh
M/8/mNXzrJBMzb/wrty+ni7pv1h5yevceOe/2FKkBVh95r+AN4R+gZfxv9B6
4YSf0u6/uMEo5mA45794PipxTPDPvyiCp6EeeOi/8IG2tSyI2L+QLJ8e9wbm
v8AOe+8InXM/2IUX3aLv6z8QkXfIYRLqvxCC6bxJhtK/aK8wK4Vh0b+I6ElG
veYAQDCMAGQJJdK/iDe3QP8d4b8osJPOB/D9vzhG5E0Iwty/cC4uoebR3r9A
Y5o5MXj1P1jD9cy8p/I/MI6f4hpJ6T8Q2JrhISjsPxj2FCpsmeK/0B41/9YA
7L9AyEIyROHhP3gwRh00jNY/IIPRkovI9D+owMZP1/r2P1CRfq/T0OI/KMnQ
ohd72z8Q7cbD4gD6PwhzUF9AXNQ/8NIqOmZS5D8oYpsJ+FGKv5g6qKhhUL2/
qIMjDD9F4r9AcLHYpw3jP5gsye2r7sU/CHztRb6H0D8YUNyV1oi1v/iuTYSa
sbQ/uNOu6sawtr/wDRB9Kv/RP/Ab+Z0pz7K/UA3sZqU36T/QSA+NXTjoP5gy
lDp3zLy/CC27um1Y5D84aGJ1j63gPzielZiMKNo/mHzY7gcU0r+oTG71V4uz
P+iWD1lqK/I/CNXkoqHc8D8w03CRpSnav/gpr3QZWfI/0FU3Sod/8T/4aO0N
2h/wP2Cj8iITMPA/iJ4qcLeu5D8ITSLxOFnaP1iJO0CEpfM/4NzfdwwS6j+7
VJfE
                  "], "Children" -> CompressedData["
1:eJwdkOdTDgAAh59LaBiRvbOyyQiZkdFS3oxEH3IXPnH36s75d6xQ2XsWISs7
QvbOLHs9Xn14fnfP/b49ccvXBFaEAWsjQhMoWJccDBasz4kMSerqosKVhcGE
xFX///wQYU00Q8NpTgv+esWWRNCO9vyx2kiiiKYVbYnht635ZRt+etkfXvK7
F/3mBWPpwCAG05FOdKM7X+3MF7vy2S40et4Gq+zBOT8ZT0968dHexNGXD/bh
vWd95xn70Z+3DmAgldZ72jee8rUVDmEor1zKS4cxigSGM4IXlvvckTzzpKMZ
wxLyGMsJExnPOI771GNOYCI5LOCJSUxiMo896hSOOI8spnLYaUwnmUOmkc4M
ZvLIg6ZwwFnMZg77feg+57LXVPb4wN1msMs6d5rJDu9bZjal3rPEu86n1gB3
3O5tF7KIbda41cXkcstib7rFG272uptcFip+zY1edYP/ADp8xO4=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{18, 10, 13, 15, 12, 1, 15, 14, 
                   6, 9, 10, 18, 15, 10, 4, 11, 4, 14, 18, 12, 15, 18, 11, 1, 
                   4, 10, 13, 15, 13, 4, 5, 7, 10, 2, 18, 9, 12, 5, 6, 16, 10,
                    16, 13, 11, 5, 17, 4, 2, 1, 13, 16, 6, 11, 13, 7, 13, 9, 
                   18, 7, 7, 18, 12, 15, 5, 15, 10, 9, 13, 15, 12, 18, 13, 13,
                    1, 13, 14, 12, 3, 6, 7, 7, 10, 2, 6, 3, 4, 10, 17, 18, 15,
                    2, 12, 4, 8}], "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 1, 4, 1, 3, 2, 5, 5, 4, 1, 4, 6, 1, 
                   7, 2, 5, 3, 5, 2, 7, 3, 5, 1, 6, 5, 2, 2, 3, 5, 7, 1, 3, 4,
                    4, 2, 4, 7, 4, 6, 1, 3, 6, 7, 6, 1, 3, 5, 6, 6, 7, 5, 2, 
                   7, 5, 6, 2, 4, 4, 5, 6, 7, 6, 3, 4, 3, 3, 2, 6, 7, 3, 6, 7,
                    4, 6, 5, 2, 5, 5, 4, 6, 5, 2, 1, 2, 4, 2, 1, 1, 2, 5, 1, 
                   2, 6, 3, 6, 1, 4, 4, 1, 1, 5, 4, 7, 1, 7, 4}], 
                 "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBXQOi/CFib1JlAQAAAGoAAAA4YPafNirLv7j56LRAzuO/iB1AhUqT0j9I
czaSCgPxv9j/f2xKn+c/UJDJzdPq8b+AIhQ50Dniv4BDovjSM++/gJqPlSdb
tT+45nsQ/xn9v/hcZTBxpfK/AP6hC9Jh878Qdg5W2Q/5v6B9N9Px3++/sF9k
aiaa3D9YiHok8cbzvxjh/jqOfsS/uAJWCAI677/gC37ApjXqv1AKMggmW+K/
uO6fpWIH8r+gxcoe+WzQv5BRHMap4uy/8POJrbKsur/QtSj42wDov8AeENbz
Zbk/YOHcdFXg77/Y94Yc4b/uv7jRQfenKe+/eA87yR/R9L/gEQc1Wc7tvwAg
qgLPeue/UMRuOOfl3b8g4VYNQTrQP9iXY0G3Ku6/CD6J7hpl5r9w3tRa5ZWx
v5B8f9474uq/yPCW+SLL3j84TQxh4YrhPxAoVxW8NvC/4A6U8p1N5T942ryy
DNrGP3ieIdhgbbU/WERN6bazwr/43EKymbSuv0gjxYCjSPK/wM1L8mkn5z9Y
9GPfYwzTv9AFDHoXqua/oBVYkd5K4r8oHcMIotnnP6hM27pZ1NY/OFedISSY
379oLZ4E/tjcPxghEMWQ/rg/0M2IXQwS0D8In3OTyD8FQHBKC17MavM/ANGY
5kCI1z9AFwmtURsCQNB+Zy6hKOE/2Njia2Al678AQDbAHvnjvwhvsKzuQeK/
sK5gsm5/97/IBb+A0OPsv6C4Q7RLD96/QKb4umQt/D/Mffqk33YHQKCUfMfk
LuW/OKXuoH6+mb+AY8tjAWHUv9iE4fkvIOm/CHiVsLBktL8Qg1t171u5v2Dz
HPyT190/qNtxU+bhzj844x8mmH64v4honMTBx76/0NOVfIE78D/49s2B32P1
P9BID41dOOg/gKBWX7s0uT9w5n/i9SGov/hycPpVmdy/AF51Xez79j9gk4k6
z03nP0BdXc8kGvM/oBmsXR+18D/QagLmQXziP5CMG0iz++C/mIZkPn1B+j8A
rPisHjjvP2ylB3jAJABAoEWqVaCWqL/olg9ZaivyP5AYuaEbdeY/kCqpepIl
9z8AcrA+Xyj6P9AN8wlx3vk/mPvP51rK2z/YAAzgC1jkPyBtJeyE+v4/kMbw
1SNl+D/4Ka90GVnyP6WMz4o=
                  "], "Children" -> CompressedData["
1:eJwdiWVPFQAAAG9YYIvdYrdiYCtgYvuw+6EPkA+6Pd2cP8TuVhS7u7u7u7tb
z6cf7rbbxaVNCKRHAROjIwoEJyeFw8EpqTGRSBk/KZQRCscnZP77WRGi/pOL
3OShFa3JSz5qUZtoYihJKfJz1kKcUQtQkNP+8ZSFKUJRTlqME/72uLEcszgl
+OVRf3rEH5amKoctQ1nKccg4DlqeA1agIt/d7zcr8dXKVGGfX9zrZ/dYjd1+
sjo12OVHa/LBndahLo1ozHvr8c6G1GeHDdjuW7f5xq2+Np5mNOeVTXhpU164
xQQ2+9xNPrMFLdnoUzfYhrYMYb3taM8TB9OBdQ5kEIkkkcxaO9GZx3bkkWt8
aI5dWG1XVtmNFLqTbQ968sCV3neFvejNPZfbh77cdZn9CJDKUgewxP4s9o6L
vO1Cb7nAm873hvMcyjCGM4LrZnHNkYxhLKOY62jmeNUgacz2irMMkc5lZ3rJ
GV40gwtmMo7pnnea55zqXySh3uE=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{18, 6, 1, 13, 13, 10, 7, 6, 11, 
                   12, 1, 4, 7, 18, 15, 14, 1, 2, 16, 5, 13, 6, 10, 18, 1, 18,
                    15, 7, 18, 18, 4, 12, 13, 2, 7, 15, 5, 15, 14, 5, 10, 18, 
                   12, 4, 12, 15, 10, 7, 5, 16, 2, 11, 15, 15, 10, 6, 13, 14, 
                   5, 12, 10, 14, 18, 7, 3, 18, 9, 18, 10, 13, 13, 10, 13, 6, 
                   11, 13, 17, 16, 9, 1, 15, 10, 4, 10, 16, 2, 15, 7, 9, 7, 
                   14, 10, 10, 18, 4, 2, 3, 18, 4, 15, 18, 13, 18, 4, 11, 2, 
                   15}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 2, 7, 1, 3, 6, 4, 1, 5, 5, 7, 2, 5, 
                   7, 7, 5, 7, 7, 4, 7, 4, 5, 4, 2, 2, 4, 5, 7, 5, 1, 6, 1, 2,
                    4, 1, 3, 1, 3, 4, 1, 4, 4, 1, 2, 3, 6, 6, 5, 1, 1, 6, 6, 
                   3, 7, 5, 3, 7, 3, 2, 7, 5, 6, 5, 3, 4, 1, 6, 4, 3, 5, 7, 2,
                    2, 1, 5, 4, 5, 6, 1, 6, 4, 1, 5, 1, 2, 5, 3, 7, 5, 2, 3, 
                   5, 2, 6, 5}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBBQP6/CFib1JlAQAAAF8AAADAhry3uc3zv5jtwIQBTfO/0JN3Gkq87j/Q
NAKFk3r3v5i8qrrBt/y/OL596joa8b9MEtlF3+4AQBAdi2LXZ/c/kEztnFfl
7L/QhrOazq7UPyjKsIHw1+a/ABZ5Oonvs7/IRdX1M4fzv6jHS4ODA8m/0Ka8
O2+b8b+YgPYev4DzvwBfXBcbZ7c/CBODWSDZwj/QbNrReubqv5D86DYhVO2/
qCtUdF33079gTrTqUfnpv9hSpAVYfea/CNLvd9Mw6r+Qv5ZSo5zwv2D+8AFi
ovS/MJnPM2j45b8Y0qKanq/wv3hHbBMr5+m/ONH9FD6dqb9YEBtpa1bxv1hT
N1WN3ey/8Mv+pdjn5b+A9wqWrTDxv5C9asFK2u6/cNIQd4I4xD9wdSaFDyHF
P0iK5U95Au+/iFkaXnoP5b+IPbIQbDnuv3hQsCHXkLU/oHaDz9le5r+ouDdT
hdfkv0DV+dxXuNG/6M+HtuNz5b9ga4AfbWbevzCY+UD57PU/6BuzQC3kzj/Q
SifD/uDpPyhDKMCES86/yG/eAIbT7z+4RuDntyzevwjaRhiRn/w/6JxXsAHL
wT9ojcf+8iTKPwiD9gUUA+U/qKxIhCp81L8gvx25LqTRvziJLK0pHrs/IOIT
sJYE3b+whpJaCxy4v0gdFPLz9ee/4FEIjwjtvj+IOcAZSfrZP4gl7gFZAtK/
QNLIgA6j5T+YQvj0TVfQP1AlHdK90MA/ID2fxqR01L8oUulv8nnXPyDXuWz+
tua/+Jftj6hk3T+QbtjWGM/hP3glqhWuVO0/iIV21Oix6T/gGZYAOGerP+h5
qL1V+/E/1DyM5HeJBEAgkPcU/vH6P6j4YxAjGMe/IGJE3A1xAkAoVJM4/AGR
v/hP/1kwbQNAEE/DOFN8vj9gsFVym1S0vxjswBg2L/c/4KJ3EAjV6r9Qq4s3
XgD3P8Csac2iSMQ/YJ1510qe0z9oOxHEqPvyP6hvs2RQFOU/kE51FYBP1j/Q
MewBjWL7P0jrdgyx+wBATp6eDA==
                  "], "Children" -> CompressedData["
1:eJwdifdTDgAAQN9llb1XVoQoIyNkldUw+5KVdLkLP3H3cef8N/YqskWIUrL3
yt6yySbPxw/v3b17UYtXBJaEASvDQwrkrU4OBvPWZEaEIm35qvyl+cH4hGX/
fm6IsP/UQ+vTiHAa0JA/nrXOM0bQmACZNKEpMzltM5rTmjb8tgUtacUvq/zp
KX9YaVva8d1BtKcDAxjINzvSlW50ojNfrfCLkXy2C7We9JPdiaY3H+1BFD3p
RbkfLPO9J+zDceMotS8xvLMfb+3PG4/52lheedQaj/jSEl942MHEM4ShPHca
wxhOMhN45iETKHYEIxnFQcdzwERG89QxPHG/Y9nnOPb62D0msdtH7vKhE3ng
VCYxmSkUed8U7rnTu6ZyxzSqTee2O7xlodOZwU0LvOF2Z7HN62Zwza1edTaL
2OIVs5jDXOax2cvO55KbXEA2F93oQjZ4wRzOu95c1nnOtf4FiSDI7A==
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{18, 18, 11, 10, 11, 16, 3, 13, 
                   5, 9, 13, 11, 10, 14, 2, 10, 3, 10, 3, 15, 15, 18, 18, 18, 
                   18, 15, 1, 13, 12, 16, 13, 14, 15, 13, 4, 10, 18, 4, 4, 10,
                    7, 18, 12, 9, 4, 13, 15, 9, 13, 7, 10, 4, 1, 15, 9, 6, 13,
                    6, 7, 4, 18, 7, 1, 6, 9, 18, 18, 10, 7, 1, 14, 6, 13, 13, 
                   18, 14, 12, 11, 14, 14, 10, 18, 18, 13, 5, 3, 17, 16, 15, 
                   2, 4, 3, 4, 8, 15, 2}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 5, 2, 4, 2, 1, 7, 1, 5, 4, 5, 4, 1, 
                   2, 7, 5, 5, 7, 7, 2, 4, 6, 2, 2, 5, 3, 7, 6, 5, 1, 7, 2, 1,
                    6, 2, 5, 6, 4, 7, 1, 5, 1, 3, 6, 7, 4, 4, 3, 2, 5, 7, 6, 
                   2, 6, 5, 4, 3, 4, 5, 7, 1, 2, 6, 6, 7, 1, 3, 2, 1, 6, 2, 2,
                    7, 1, 2, 2, 6, 7, 5, 5, 7, 6, 2, 1, 2, 3, 3, 1, 1, 5, 7, 
                   5, 6, 2, 4, 3, 7, 2, 3, 1, 5, 2, 2, 1, 1}], 
                 "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBVQOq/CFib1JlAQAAAGkAAACgna58Pf3Pv8CGvLe5zfO/JDDH+Tv+BUA4
FyXHZLnzv0ByI+ysJNy/YKd26KVw/b8YgknSqjnhv9hpsy4eB/a/aGxrBKlz
7L+ApNZaEsayP7CuUdFaAfG/iMbqnqxP779Qt7K157rrvwD+w6i2EeS/SHqW
V2Cm2T8ofQJhPJLzvzhAgc1HVe+/cLjGFFrN9L+QC3q9/9ffP+BDs/+uj+a/
QHv1UAgK579A+uxrnH3nv1ASUPuwCu2/KPeeJyAH8r8QVDs9r4rnv8AePkag
5/Q/MN8p66cg4b+4aCNVS+fUv2iPrKlOHvC/CClnaykS47+oFin6N8Lrv9Cr
19Ihm8w/0Ki9+Onuyb8IyML1BdPnv0DpPG4Qod0/kEuVSaSH2r9IUt0YSRfr
v1Syh+bJaA5A2M9M+Ga88L/oa9+DaLLhP3jRhT/fu+S/gCCXlfmp4j/QR6nj
80bbP0h0wJRvBOK/+DU3tpo04z+Y4t7p37QBQIiH46jmSt2/cPatF0nn5L/Q
w3w+QaKuP8jp2JH5KMu/eBL8/FXJ+j9QmDxp5zjYvwh0Gql45fK/CGJM29bK
/j+gmS23B162v2hO6AGrsuW/aEO6jBc/8r+I5uNPFCLoPwjkvM3eN/E/UJn2
LxKi4T+wupN70y/6P4AtA/po1+y/SFWdWNjR0D9YATILGZYBQNDWpO3kut4/
+CarRq5i6T+w7jfQZGXjP+j8iKHmT5w/SNE0yM9bqr+gVbxX6NfRP6A4SVa5
QMq/yNYKzsQ+7T8wMxZ43Y3Lv/hVK3OyeNu/YAQnvOOy4L9o33aJTuCzvwCW
N7Nuevc/0Je85KtfyD/gf5Sxycu/v2gdXTZMevw/8F48zMbLwj+AK+SlTl7b
PwDncTWVOwFAIF3RWEcP6j/oAW4uFEH4P6DQ7ygQ+Oc/oBWRV6gz4j8IRoFL
X17RP4hA2F8jl+I/hIS94XIvA0DIfU2DhKvyP5iHKx6z3c6/mI4T2lho8j9Q
koIdUrK1v2i018V8LPw/cHNhWqKI5z94G/Csvjrpv2jiVppRY9e/MC/+INHo
xD/wyljK5ZT1P+hE+AZX3Ng/SMSVy6gA9j9I1Tj6FLnQP9B0Fv2UDfU/2KBc
R5zz/j/I7tDn
                  "], "Children" -> CompressedData["
1:eJwdj1VTFAAABnfAALu7sFsxsOMMFNvD7kMP8EVnTmcc/4gFdndhd3d3d3e3
68nDfjM739MmpE0OpscAU+KiEwxNC0Qioemp8VFJmTQ1nBGOJCZl/v8nRonJ
JZY85KUxTchHfuIpgJ40jhP+9bgFKUQFKlKYIpSkFEU5ZnGOWowj/vGwJTjk
bw/6ywOWpgxlKcdP9/vDfX63PN/cayX2mEB1KlOFr1bli7v9bDU+ucsa1OSj
9fjgTmtRm/fWoS47fOd237rN+jSgIVt9YyNeu8VX5tiURF662WY0JzNa8sIW
tKUdLUniua1ozSafudE2bPCp621PB56YQUc6MYrRPLYzQxhKgHV2Ya1d6UZ3
knlkkB70ZCBrTKEXfVltb1b50D48cKX3XWE/ltufZd5zAHdd6h2XeNtUBrHY
Ww7mposcxkJvOJLrDueaI7jqAq8438uO4ZLpjGUcIeY5nglcNI0LzvW82YbJ
8pxzPOtszzjL0870lDP8B+PY3OI=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{18, 1, 10, 13, 4, 18, 3, 5, 10, 
                   15, 18, 13, 14, 18, 11, 16, 16, 5, 2, 3, 16, 18, 7, 18, 4, 
                   15, 1, 2, 7, 13, 10, 13, 10, 18, 7, 4, 6, 12, 18, 7, 4, 10,
                    7, 3, 5, 14, 18, 10, 10, 18, 2, 9, 17, 13, 13, 16, 18, 10,
                    11, 13, 14, 6, 18, 18, 1, 6, 6, 13, 1, 13, 17, 6, 11, 13, 
                   4, 1, 13, 12, 10, 15, 4, 5, 18, 14, 5, 7, 18, 4, 15, 7, 15,
                    2, 18, 10, 18, 4, 7, 14, 17, 13, 15, 10, 13, 8, 15, 11}], 
                 "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{3, 5, 4, 2, 4, 4, 7, 5, 2, 4, 4, 3, 7, 
                   7, 6, 1, 1, 5, 6, 5, 6, 7, 4, 1, 2, 3, 6, 1, 6, 5, 7, 3, 3,
                    2, 3, 4, 1, 2, 3, 2, 5, 5, 3, 5, 7, 1, 4, 7, 7, 3, 2, 7, 
                   7, 3, 2, 7, 5, 6, 5, 2, 6, 3, 3, 4, 5, 2, 1, 3, 3, 4, 3, 4,
                    3, 3, 4, 7, 4, 2, 1, 3, 4, 6, 5, 6, 4, 3, 5, 7, 4, 1, 3, 
                   2, 2, 1, 6, 3, 6, 2, 5, 4, 7, 1}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBPQPC/CFib1JlAQAAAGYAAADYYubxj5LvPxC0+6dY/M+/wCsdojG+E0AQ
BsjaTZ3cv3hCr6azkuk/iKiCxh8c4b9AuzDbekvNP1jadu+rjuK/eCAaTQe9
6r+oHcmqQYj8v+CAsws8TvG/GOH+Oo5+xL9AnHNMmz7aPyCpKJzHHMm/KHOj
U2J18L+YSI9XdVr5v1AhPQxBhPq/uAJWCAI677948wg+0Nv0v2iedZTmivO/
kOEqFml457/ILW7mrPfSv0Bm8t2cc++/SDqoGp/X4L+YDdsfjDXqv/gOOuAv
Yei/eCSYqHv+7b8Ytpp2cOXwvwCyKO4QY/C/IPH9AUBY1b/gBYLur23rv7BQ
7eBbN/O/mJemmEYl6j+gwsJE6T7WvzjjkqI0/uq/EGezWAYO1D+Y+Tn5qybp
v6gn8vmVrdC/KAEDH87u6T+A3F6dV2jBvwCxrDmnueS/kBWyBbL76b+ACcna
uw3ivyCeQTbgAuS/EN0KU8vj+j/I9dp3GE3wP0hsHT8v0fm/qMauCK1r/T/Q
GhWS+WH1P1h5fxYsZum/CNEQdq1ckz949nC4vmDyP5BA8tLgcJm/uLuLX8Et
8r8Y3HLkGDbhvzhowS/KsfC/CPFzSSJivr/grg14dwi6v2gdXTZMevw/+O2f
bBcG0j9Awafkci/pP5idbC5htuS/aE3y2H3WpL8gqCcTar7bP7jlagkGVec/
qGRJ/jls5T840f0UPp2pv4gK3vS6DNq/uFKAt5D0yL/gEQzgC7jHv5CvnF61
6Og/KOuw+m1syD/425WReTfkv8j4D4W4tue/uBWMqL7L0D/AUE3iqD7JP9hw
FM0btNe/UF7ixnzG1T/QukM7zjrePxjbjZZsjdQ/4EYqF3DX7j9I3OOuEHvx
P2hAv21cdOY/4BPA425q1j/czRUws1sCQAhQvyJH+uk/EDJKwxNZxb/4PvoX
xxT0P+A10j6qAsi/eEUbr/WQ6j+I+OBt1I/3P/Ai7lgRGdo/cPFFhSzQ3z/Y
DU5y9Ja1v5joKp3EC/M/IF8R+iHn9D8QI2WVzk/ev8AsP6ZdQdy/UDU1oQAC
7z8AeQkgfDTVP/zQR0T2MgNA0F+sCvHF+T/Rfrjn
                  "], "Children" -> CompressedData["
1:eJwdidVSFAAAAHewwO4uBMVWDOzAQgzUQ+w69E6fdOZ0xvFT7O5ALFSwu7C7
u7tzPX3YndnZ+OwZgXAMMDM2qkBwdmokEpyTGReN9OmzQlNDkeSUaf9+OErM
f4pQlGKM5JTFKUELWhJLHHWoS0lKUZ0aaGn+WIUynLQs5SjPCX973ApUpBLH
rMxRf3nEnx72h1X5bjW+ecivHvSLNflsLWpzwE/u96P1aMo+6xPPBxvQkL2+
N4F3JvLWPTYiiTcW2Jh8X9uEV+72pc14YXOeu8tWtGYYAZ6ZzFB22oa2tKM9
Q8gzhR12oSsd6MhTt/vETjy2M4/cZje2mkZ/utODh/akH1tMpRe9yfWBm+1D
jvftyz03edeNprPBDNY7gIHccZ2DWOttB3PLNd50tTdc5XVXes1MrprFcFZ4
xeWOYJmXXeooRjOGJQbJZizjGM8ELrnYiUzioou84ELPu8Bzzvesk5lCiELD
nHGep53rX7De1uU=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{4, 10, 13, 10, 13, 7, 3, 12, 18,
                    10, 1, 16, 13, 15, 10, 14, 13, 14, 5, 18, 13, 4, 1, 13, 
                   10, 5, 7, 4, 18, 18, 4, 18, 18, 7, 3, 7, 18, 2, 10, 10, 13,
                    14, 18, 10, 16, 3, 13, 15, 18, 13, 5, 4, 17, 6, 4, 18, 2, 
                   13, 6, 13, 4, 16, 18, 3, 6, 6, 10, 7, 11, 2, 13, 4, 12, 15,
                    15, 4, 15, 4, 18, 14, 10, 10, 5, 14, 18, 5, 10, 7, 4, 4, 
                   4, 18, 9, 15, 10, 16, 12, 6, 6, 5, 2, 4, 13}], "RootIndex" -> 
                 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{3, 5, 5, 6, 4, 6, 3, 3, 4, 5, 4, 6, 2, 
                   3, 3, 4, 3, 2, 5, 3, 5, 5, 7, 4, 7, 2, 4, 5, 2, 2, 2, 3, 1,
                    4, 2, 3, 1, 6, 3, 5, 5, 3, 5, 7, 7, 1, 4, 4, 4, 1, 4, 3, 
                   2, 2, 7, 4, 4, 3, 5, 3, 2, 7, 7, 5, 3, 7, 6, 3, 4, 7, 5, 5,
                    6, 4, 3, 5, 2, 6, 2, 2, 3, 1, 5, 1, 2, 5, 6, 7, 5, 2, 5, 
                   1, 6, 6, 4, 4, 6, 6, 4, 3, 6, 3, 7}], 
                 "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBRQO6/CFib1JlAQAAAGcAAAC4j8lbl4Tzv9BEDgcxrc+/sJvU3XEYtL+o
uxW96M7qv4CoWXnO4/O/WFTC3hkv6b+wDCori7T/v+A4E9/Ersq/SLgbPtqJ
6T+IQy2DYersvygr/RsFtfM/yLDmy1sF6L9QXpLREZ+HP1AQj2rd7PC/sBmG
poU+2r/wOOQPfbz1v+i78Mgy2dW/yIysBmbc3T/AAl7FI6Tsv/gbAI1I/9q/
4EV95LgRw784SfCGy37fv2gAtQAcTeo/YPTUnp6H5784nOtPzQjyv+htF0fL
wfK/0AN894tV5r+QZ8FjA7jgv8gpmLmcf8W/CCHZIMLv8r+YMELeoDrhvzDQ
ZcW2qOq/8BDGmnT37L+oty0DBhnfv5imiCe0LMe/YGxlFQBG4j+ganStqk7i
vxh2ysL+rO2/iNkchYtj8j84V4sPyzDvv5BJzN+fzPK/gFGKmcBR9T+4SyJy
nI20vxCJhrWltOS/aMLSJ1fD5D/gMT9PAKflP1Dho1B+wsU/qG5fAwYDsz8Q
iFNAo8HgP+isZnxT8NI/6L8ze8qt7T+wt0mW8OL1P1CT4J+28eI/KB3DCKLZ
5z/Y49rd/hj1P7Dneb332O4/eC8bUmEFxr8QwA0/KIffP2BXJmtOsrg/iMc2
pGfZ9D+wnF6tX9Xyv8jRPDIUaNk/gESZhuCN6b+gb6kU/urcP1iQvyEvw+e/
uIuUzGLBz7/QeHyEc+7kv/jzRoJtVtO/KMnQohd72z9gXG3S3cDSv+gbs0At
5M4/KObEHxKW2T8A23U7TkbwPwCu8zB/GBi/IO7FquZ/xL9oHV02THr8P5i7
WWUwR8O/YDq2XEuQlT/Y0ils5iK6P8jWCs7EPu0/kGpSF3nt4T+An50R9Fjp
PwiF8S3ToNQ/MERh9GEf5j/Y6OgKz6vhP6iQYGNRWOs/AOK+wVJ7xT8wRV0B
MoMDQECxyDsgEwRA0DY8EFV7dD8I4Q7Y9rzwP1DB+kEAIf8/jETWHXlZBUAY
w0MMZgfzP4ifOLgLjvY/JMNy47zSA0BAhYv2dfLyP7iGQDTaYdi/4MAY36JD
8j9ARTeZpRLwPwihXQGOAeo/GMD/o30L5T/IpKvQqJ/mP3lbvGU=
                  "], "Children" -> CompressedData["
1:eJwdkVVTFAAABncQFSwUu0WwEwM7MEBsD7sPPfBJZ05nHP+J3YVio9jd3d3d
3bUePuw3s/M9bkLWtEB2FDA9JjKB4MzUcDg4KzM2IhlTZ4RyQuHklCmFf06E
qP8UIZpzxhBLUYqhZ/1rcf54xhKUpB3tKUVp6pJIGU5bjnh+G0dZTvnLk5bn
hD897g8rUJFKVKYK3z1mVY76zSNWozpfPWwNalKL2tThkF886GcP+MkEPrrf
JOrxwRTq04BGNKYh+3zvXt+5x7futglNacYu39ia5uy0BTtsSTKt2O5rC3zl
Ntuw1Ze25YX5PneLHejIM8fSic6MYCRd6EovevPUbnQnlSdutgc9eewmH7nR
h24wjXSGs94+ZNCP/jxwnX3J875rvecABjOEuw7kjoO47RoD5HrL1WayypsO
ZRgrveEKr7vca45iDMsczVKvusQrLnYcixzPQicwkSBZkQYLnMR8LxvikpO5
6DyzmesF53je2f4Dgh/Y5A==
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{10, 13, 13, 10, 11, 14, 14, 3, 
                   4, 16, 14, 7, 10, 12, 9, 11, 6, 11, 5, 1, 13, 16, 3, 16, 
                   10, 18, 7, 4, 15, 10, 15, 12, 7, 3, 14, 13, 4, 4, 18, 9, 2,
                    4, 7, 10, 10, 18, 14, 15, 15, 1, 15, 18, 16, 13, 18, 11, 
                   1, 4, 15, 17, 18, 2, 18, 10, 1, 6, 5, 11, 14, 13, 13, 2, 
                   10, 18, 10, 6, 11, 7, 7, 2, 14, 12, 13, 5, 10, 14, 5, 7, 4,
                    18, 7, 4, 15, 15, 4, 2, 13, 17, 9, 10, 15, 12, 17, 15}], 
                 "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 1, 6, 4, 4, 2, 2, 3, 7, 4, 1, 3, 6, 
                   4, 6, 4, 3, 2, 7, 3, 3, 1, 5, 2, 7, 4, 1, 1, 1, 6, 6, 5, 6,
                    5, 5, 3, 3, 6, 3, 7, 6, 4, 1, 4, 4, 6, 3, 6, 7, 4, 1, 2, 
                   3, 4, 4, 5, 2, 6, 2, 1, 6, 4, 6, 5, 7, 4, 4, 5, 6, 3, 4, 5,
                    2, 6, 1, 7, 4, 2, 4, 3, 7, 1, 5, 3, 6, 3, 4, 5, 2, 4, 7, 
                   5, 5, 7, 3, 4, 6, 5, 1, 4, 2, 4}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBPQPC/CFib1JlAQAAAGYAAACwc3t5DwXAP8DL+LK+bPu/ECzjdaUeAEBw
ap9aorfyvzgmgs1k+fK/kJaRs58z979gDkRXyGb0v4CvhRv+hOc/WAs2DXAP
6j8wQTxtS+bwP4DiEO6Kxe+/eHteITXx2b/43FuwOGHnv5ippEffU92/+M1D
dLg99r/gmrkubn/qv+A/rg2ODuu/4BSxRUxr4r+4HIGYMinuv/hNEDA+tPi/
WJrlpqjztT+Qf7YkXzzuv8hjM4Gf5Lg/MI9XKQBVuD+ouZdyou7EP/hV4cMs
G+i/CL0vTwWz4b+4ob6CpEztv9DSHBritOi/IIg8E3bf578IWrmywfHqv4Ay
WIPoa+K/eBK9BeD257/4XJkJFD7iv/CFLgRl/+m/ENdBrwYH9L/wPh8duXrj
P2iWcOgiReQ/IAgGSqkl0r9QFE6hzKTwv6BBB/KJUsW/GGU53Gthsj9oAYQL
MCzpv/BvNjssQNY/+D+OPnfdzr8wf8F8x/1/vxDf9u/61NM/OHub1+M/4r94
kFsRPffqv4Ak0bdmrbQ/+FThDsZW7b9oRRTfEALhv2BQ+aFDHuo/cORuLPlF
8j8g260E+F/kv0jQUsx1tc+/2OW5zg4g8z8QLMDhXf/Sv4hcYwKN/tE/qDk9
GCiS6j9ImQZ9+xvlv/j5uwNR4hRAUJ6gc+Bo/T/o6MDnlnLlv7CfjwXekcI/
AELts4E96T9QUpkNG8LOPyArI9v8d/w/GMNDDGYH8z8IriLawBLrv/A1tRWa
cLG/4PQ3NYq1yj/oluiq1sHsv0h1wgJBafQ/SDFAPRcJuL8I7ssB6+jlP0DU
0/F7M92/4KHhZIS2x784BpOscd/Bv2BPXYH9aME/QFEL8PxC9D+wTwYBDsjw
PwBwEaL12t4/+JFoJYlhzz94Bcs2BBXXP7AEaBRYNd6/6ABvioHiur9oxq4W
uijSP9D7W0MiefA/aHBs/b900T9gV3KsL2jYP8DE1kzy0fM/WJbvRsDmCEDY
q53rU2LDv9CJrYAYFvA/APbLUy/29z9Ydu8uwX7xP/DRzekO4P8/eG1qYtGI
8z/QdvgUSnLpP3hnvIC4YtG/NAepZd6gAUDxUrUo
                  "], "Children" -> CompressedData["
1:eJwdidVSFAAAAHewwO4uBMVWDOzAQgzUQ+w69E6fdOZ0xvFT7O5ALFSwu7C7
u7tzPX3YndnZ+OwZgXAMMDM2qkBwdmokEpyTGReN9OmzQlNDkeSUaf9+OErM
f4pQlGL0ojfFKYHG8sej/vaIcZSkFKVpTwplKEtb2lGO8lShKr+swE8rU5HD
/rAS3z3kNw9ajep8NZEaHDCB/dakFrWpwxf3WZd6NGCvn93jJ+vz0Xg+WOB7
833nbt/akEbsMonGNKEpb9xpM5rTkla8tgWvzPOlO2zNdpPZ5gu3+tw2PHOL
T831iZt9bAce2ZWHdqQTOXZmkw/swn032o3u3HODPVhvT9Z511TuuNY+9OW2
YfqRxkQm0Z90bjmem67xhgMYyCCuO5hrrjaDIVx1KMMIcMVVZrLS4WRx2RWO
YCSXHMtFR3HBMZx3NOdc7lmXWeg4zrjUCSzxtIsNks0pFzmZhZ50gVOY7wlD
HHeex5zrXwS+1uU=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{13, 4, 18, 10, 14, 13, 13, 5, 3,
                    18, 1, 7, 1, 18, 12, 6, 15, 9, 10, 10, 18, 18, 11, 7, 13, 
                   7, 11, 1, 16, 6, 6, 16, 12, 16, 5, 15, 1, 2, 12, 3, 4, 1, 
                   2, 7, 4, 13, 14, 18, 10, 9, 4, 15, 15, 11, 13, 18, 18, 6, 
                   1, 2, 14, 10, 13, 7, 7, 5, 3, 7, 18, 6, 14, 13, 1, 14, 18, 
                   10, 13, 12, 4, 13, 3, 6, 13, 11, 17, 9, 17, 15, 9, 2, 18, 
                   7, 5, 4, 12, 4, 2, 13, 10, 5, 13, 10, 17}], "RootIndex" -> 
                 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{2, 4, 5, 2, 4, 4, 2, 5, 3, 3, 4, 6, 3, 
                   2, 6, 5, 4, 7, 3, 6, 2, 1, 7, 6, 5, 7, 2, 5, 6, 7, 5, 2, 3,
                    1, 6, 1, 3, 7, 7, 7, 3, 6, 1, 1, 4, 5, 6, 5, 1, 1, 3, 4, 
                   7, 2, 6, 6, 1, 2, 1, 6, 6, 4, 3, 3, 2, 7, 5, 7, 7, 1, 2, 5,
                    4, 7, 2, 3, 6, 4, 2, 5, 4, 2, 6, 2, 3, 1, 5, 7, 4, 1, 5, 
                   3, 6, 1, 3, 2, 3, 4, 2, 5, 3, 5, 2, 7, 6, 7}], 
                 "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBXQOi/CFib1JlAQAAAGoAAACQsDCiQrniPzhK2TWcUNA/GI9M1cD88z8I
7L7BVZHcvyAWaQkiYds/eCLXVUPz47/4MVNOU3/Qv2Bb/NA6I9C/YEkSYRkc
8r9wnRrTw9Hkv7gA3O3Aj+a/8JaH4vxI+b/YqhK07obfvwjJ2X3QffC/oBh6
swDC9L+Qx4dyINrzv5isHEVn6vO/KECGVOwkvL9wAvnxXcz0v6hVv68a1/K/
cD8UWn+J6b9oTy96qKXxv3jGprpJKby/8CUKT3UP67/gpefF++bwv0B/L662
p+4/IKAZeUUT6r9gpwMti+nKv7gmaw7AzOG/UFuWrBG/5r9IyWXNAE2KvzjN
7rqYyO+/eIXoe/hHtL/ILx9Azl36v7Cpviq/Ws6/iEq3GmeG7L/4XPgDyJHq
vwDCKjJzXuo/+Heqi+XT9j+o5YPbL17zv3iOChCLceI/gIkA377o6r+IhoLP
/Jfyv2gZywzIM+U/sFykPpATx7/oG7NALeTOP0w4HEZLJgBAMO/I22T98L+Q
GvNYyP7KP1CNEltbSNk/IHGywvEwzT84M6spvXW0P6A9bSsxLMI/aND5YFO1
tL9AKt6Vuvnkv9BT7FEfb5E/cNIC9/tfvb8YPjH+qELKP0goFsBWg6q/INbq
W2162j/otbFIfVbSv8CRG1jdUNO/kGpSF3nt4T+YCHHBGYjrP+iNGPTHAro/
OM4BSX59AUDw390NxNSyPxi3b1p3IvA/gHiYvQbP8r+Ykpu0s+zSPyDcsL8T
a7W/gGv+m4y9379wkdZ/H9HjP/BeorxTIP2/uLVruc8s3D+gATtRPmDmv4BW
k/rEte0/8BYgeWs+/D+AtO3wh/fWv9iLUqoP3+A/WNX2Ow428j+4EHN2SQi+
PxBx+m5EJOo/6P5Y8FFK0L9UKK/IOOAGQOjFcRFJueo/AER2oDwy8L8Avbtz
NsjRvyCbwFId4fA/IMVrOfGz6D+Y0Kkko+/jPwjaRhiRn/w/mN0wXCZO0r8g
xlJ958PPv7BuA+NyfPc/YK1LR01P5z+4lZEDn1eiv1jppSXH2+A/QNSK2irD
5D/geOGpxsvsv8ho680wzrY/qHUcVz4k7z+4GiwNU6jqP2hCS+nARte/4CIP
92jx7D+gLhemtuX3P6z8zw8=
                  "], "Children" -> CompressedData["
1:eJwdiWVPFQAAAG9YYIvdYrdiYCtgYvuw+6EPkA+6Pd2cP8TuVhS7u7u7u7tb
z6cf7rbbxaVNCKRHAROjIwoEJyeFw8EpqTGRSBk/KZQRCscnZP77WRGi/pOL
3ORhAAPJSz460ZloYqhJLfJTgCrEUZBClKM8WphSlKYIRSlGLH8szm9P+ssT
/rQEPyzJd4/7zWOW4ahlOeJXD1uBQ37xoJ+tSCUO+MnKfHS/VdlnNfb6wT1W
pwbv3e07d1mbndanAW+tQ112WI/tvnGbDWlEMlttTDwd2OJrm9CGtjRls81o
TgKbbMVGX9mCl7bkhRt8bmueud6nrrMd7XniWh+7xkcm8tAkHphjR1Z731V2
IdtupNCVld5zhd1Zbg96ctdl9mKpd+zNbZfYh8Xesi/9CJDKIm+60P4s8Ibz
HcQ8r5vJNQczhKEMY65B0hjOHEcw25GM4qqjueIsLzvTS47hoiEuOJbzzvCc
6WQw3bNO84zjOG0Wp5zqXzPp3uE=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 15, 10, 4, 4, 10, 2, 14, 13, 
                   10, 7, 7, 18, 18, 3, 18, 5, 14, 6, 13, 7, 14, 11, 3, 4, 14,
                    3, 4, 7, 2, 13, 1, 18, 5, 8, 18, 2, 17, 15, 15, 13, 13, 6,
                    15, 4, 7, 13, 2, 13, 10, 15, 5, 2, 11, 10, 4, 6, 1, 11, 
                   15, 15, 7, 7, 1, 3, 5, 18, 14, 4, 14, 13, 4, 16, 12, 13, 
                   13, 2, 18, 18, 18, 9, 15, 4, 1, 2, 7, 18, 18, 9, 16, 14, 
                   13, 9, 1, 18, 3, 10, 16, 11, 5, 6, 13, 6, 18, 10, 13, 13}],
                  "RootIndex" -> 1, "NominalDimension" -> 0|>]}, "Processor" -> 
             MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 7|>, 
                "Key" -> "(f1f2f3f4f5f6f7)", "Invertibility" -> "Perfect", 
                "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
             "OOBConfusionMatrix" -> CompressedData["
1:eJxTTMoPSmViYGAQguL6DPs7cgYb7MtY7E1jZNbYz5G+pLvOa439hX/72RpV
19jnTDl9xSFqjf2EW1xzlPatsa96pXz7u+wa+0N3XvLtLUTIH0wUulDbgeD3
f+Za9SRzjT1Dr6F1ZtFquLnMteXbi8QQ9hzdeG+GjvUae74Ew5kt4avsF71x
ep3Nusa+K8L/z5EVCHXOVXMNdA+uhZsf/+tI03yTNfZFd2xNH09ZjeGeXfsm
Pq8oX43hnnVHeTx2fiXsnnR5ltf5t1bZ/7s66876CWvg4fN76XONJO819v+1
yha7z1ltPyXLL1nrOTA8dgVsXeq+Fmf42Apciv79H9M9i6SrFU9mr4Lbf0jN
b3dT72oM9xy8d80mOnY1PHz4NW/+N/ZeB1d364gEQ2fserj5ulL1mTKrV9t3
sX1QUzRYi+Eel81BLgyCawmGT7PmqfVBGmsx3CM9b2Wf2wOEe2Dho2i2LMzr
OiL9eC/6ZPSVgviCpR+YucS6Z07vU3UhpPQDiy+Y+az7JVnvP1lHsnuOSxpM
ncm5nmB8wdIPLvcsvMSZtWvdGoz0vIg7+OVPp3UE8xfLt/mfpb9jxhcu90y8
mXN6a8l6jPjCld9h6QcWPnLhFUxFRYTDh9j0jJ7f0d2DHj4w96DnL1j6ItY9
zpcXbE6aj7CHXfr2hurjmPkdFl/o6ZnY/KWo6iG+igGzPOQxP5wY+QdhLrp7
YOGj6e1qtJxxI8H8BTNftfrO89VRhNMzLLxg7gkMCdOTfI8ZXzB7cJU/xMZX
0w/ORp7lmOUhenwxX9yQPTMLs76AhQ/MPbD4guV39PhCT8/o5TMu95xgmbyj
aSZmecj+0NP0Z+xmuP0s12RWGFmtwwgfzTuKLRyZa3GGD3r5Q2r4wNyzO39e
3sr6tfYNB3YH/ruOmb9whc9hsR6pE8ZrCZY/6O6Bhd+55cIL21etI1i/G66V
eHHQB1E+dr+9/EDywVr70tiaB4bJa4gOH1z1Bcw9sPB5IhbS8JdhHUb+Qk/P
sPCChQ+u8gcWr7jiC5d7cLV/0MsfWHsDZg9roL/hA6TyMGr/p7OfpddiuKdo
WfDZz+Zr4fbB2mMr7Tr2FYesx0g/hSe8dE+/24Dhnth/z0M4K9cQrE/5FBd5
uHtusgcAKNDyJg==
              "], "Calibrator" -> 
             MachineLearning`CalibratorFunction[
              "TemperatureScaling", <|"Theta" -> 4.195738097936388|>], 
             "Method" -> "RandomForest", "PostProcessor" -> 
             MachineLearning`MLProcessor["Identity"], 
             "Options" -> <|
              "FeatureFraction" -> <|
                "Value" -> 7^Rational[-1, 2], "Options" -> <||>|>, 
               "LeafSize" -> <|"Value" -> 5, "Options" -> <||>|>, 
               "TreeNumber" -> <|"Value" -> 50, "Options" -> <||>|>, 
               "DistributionSmoothing" -> <|
                "Value" -> 0.5, "Options" -> <||>|>, 
               "Implementation" -> <|
                "Value" -> "Default", "Options" -> <||>|>|>|>, 
           "TrainingInformation" -> <|
            "Configurations" -> 
             Dataset[<|<|
                 "Value" -> "RandomForest", 
                  "Options" -> <|
                   "FeatureFraction" -> <|"Value" -> Automatic|>, 
                    "LeafSize" -> <|"Value" -> Automatic|>, 
                    "TreeNumber" -> <|"Value" -> Automatic|>, 
                    "DistributionSmoothing" -> <|"Value" -> 0.5|>, 
                    "Implementation" -> <|"Value" -> Automatic|>|>, 
                  "NaiveImputer" -> Missing["KeyAbsent", "NaiveImputer"], 
                  "EMIterations" -> 
                  Missing["KeyAbsent", "EMIterations"]|> -> <||>|>, 
               TypeSystem`Assoc[
                
                TypeSystem`Struct[{
                 "Value", "Options", "NaiveImputer", "EMIterations"}, {
                  TypeSystem`Atom[String], 
                  TypeSystem`Assoc[
                   TypeSystem`Atom[String], 
                   TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 5], 
                  TypeSystem`UnknownType, TypeSystem`UnknownType}], 
                TypeSystem`Assoc[
                TypeSystem`UnknownType, TypeSystem`UnknownType, 
                 TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
             Dataset[<|
               "Configuration" -> {
                 "RandomForest", "FeatureFraction" -> Automatic, "LeafSize" -> 
                  Automatic, "TreeNumber" -> Automatic, 
                  "DistributionSmoothing" -> 0.5, "Implementation" -> 
                  Automatic}, "ModelUtility" -> Missing[]|>, 
               TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                 TypeSystem`Tuple[{
                   TypeSystem`Atom[String], TypeSystem`AnyType, 
                   TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType,
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>], 
             "InputDimension" -> 7, "OutputDimension" -> 1|>, 
           "AnomalyDetector" -> None, 
           "Log" -> <|
            "Example" -> 
             MachineLearning`MLDataset[<|
               "f1" -> <|
                 "Type" -> "Numerical", "Weight" -> 1, "Values" -> {305}, 
                  "ID" -> 8535734355147341023|>, 
                "f2" -> <|
                 "Type" -> "Numerical", "Weight" -> 1, "Values" -> {50}, "ID" -> 
                  998275991997603375|>, 
                "f3" -> <|
                 "Type" -> "Numerical", "Weight" -> 1, "Values" -> {40}, "ID" -> 
                  3629733169513138855|>, 
                "f4" -> <|
                 "Type" -> "Numerical", "Weight" -> 1, "Values" -> {85}, "ID" -> 
                  449388412109565700|>, 
                "f5" -> <|
                 "Type" -> "Numerical", "Weight" -> 1, "Values" -> {40}, "ID" -> 
                  1107047122513506220|>, 
                "f6" -> <|
                 "Type" -> "Numerical", "Weight" -> 1, "Values" -> {65}, "ID" -> 
                  617199241913160797|>, 
                "f7" -> <|
                 "Type" -> "Numerical", "Weight" -> 1, "Values" -> {25}, "ID" -> 
                  3978018923208285880|>|>, <|
               "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                "LogDensityRatios" -> 0, "RawExample" -> False|>], 
             "TrainingTime" -> 0.114199, "MaxTrainingMemory" -> 1041984, 
             "DataMemory" -> 500496, "FunctionMemory" -> 395880, 
             "LanguageVersion" -> {14.2, 0}, "Date" -> 
             DateObject[{2025, 4, 6, 20, 11, 49.3338`8.445719544641966}, 
               "Instant", "Gregorian", 2.], "ProcessorCount" -> 8, 
             "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX", 
             "SystemWordLength" -> 64, "Evaluations" -> {}|>|>],
         Editable->False,
         SelectWithContents->True,
         Selectable->False], "[", 
        RowBox[{"\<\"Probabilities\"\>", ",", 
         RowBox[{"\[LeftAssociation]", 
          RowBox[{
           RowBox[{"\<\"Total\"\>", "\[Rule]", "680"}], ",", 
           RowBox[{"\<\"HP\"\>", "\[Rule]", "126"}], ",", 
           RowBox[{"\<\"Attack\"\>", "\[Rule]", "131"}], ",", 
           RowBox[{"\<\"Defense\"\>", "\[Rule]", "95"}], ",", 
           RowBox[{"\<\"Sp. Atk\"\>", "\[Rule]", "131"}], ",", 
           RowBox[{"\<\"Sp. Def\"\>", "\[Rule]", "98"}], ",", 
           RowBox[{"\<\"Speed\"\>", "\[Rule]", "99"}]}], 
          "\[RightAssociation]"}]}], "]"}], ",", "3"}], "]"}]},
    {"\<\"Round 3\"\>", 
     StyleBox["\<\"psychic+flying\"\>",
      StripOnInput->False,
      FontWeight->Bold], 
     RowBox[{"TakeLargest", "[", 
      RowBox[{
       RowBox[{
        InterpretationBox[
         RowBox[{
          TagBox["ClassifierFunction",
           "SummaryHead"], "[", 
          
          DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
           "Ready"}, 
           TemplateBox[{
             PaneSelectorBox[{False -> GridBox[{{
                   PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                   GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                    Axes -> {False, False}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                    FrameTicks -> {{None, None}, {None, None}}, 
                    GridLines -> {None, None}, 
                    LabelStyle -> {FontFamily -> "Arial"}, 
                    Method -> {"ScalingFunctions" -> None}, 
                    PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                    Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                    ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                    FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                    GrayLevel[0.94]], 
                   GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "7", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{"\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Numerical", "Numerical", "Numerical"}, 10], 
                    "Tooltip"]& ], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    TooltipBox["156", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{"\"bug+electric\"", ",", "\"bug+fairy\"", ",", 
                    "\"bug+fighting\"", ",", "\"bug+fire\"", ",", 
                    "\"bug+flying\"", ",", "\"bug+ghost\"", ",", 
                    "\"bug+grass\"", ",", "\"bug+ground\"", ",", 
                    "\"bug+poison\"", ",", "\"bug+rock\"", ",", 
                    RowBox[{"\[LeftSkeleton]", "137", "\[RightSkeleton]"}], 
                    ",", "\"water+flying\"", ",", "\"water+ghost\"", ",", 
                    "\"water+grass\"", ",", "\"water+ground\"", ",", 
                    "\"water+ice\"", ",", "\"water+poison\"", ",", 
                    "\"water+psychic\"", ",", "\"water+rock\"", ",", 
                    "\"water+steel\""}], "}"}], Short[#, 1]& ]], Annotation[#, 
                    
                    Short[{"bug+electric", "bug+fairy", "bug+fighting", 
                    "bug+fire", "bug+flying", "bug+ghost", "bug+grass", 
                    "bug+ground", "bug+poison", "bug+rock", "bug+steel", 
                    "bug+water", "dark+dragon", "dark+fighting", "dark+fire", 
                    "dark+flying", "dark+ghost", "dark+ice", "dark+normal", 
                    "dark+psychic", "dark+steel", "dragon+electric", 
                    "dragon+fairy", "dragon+fighting", "dragon+fire", 
                    "dragon+flying", "dragon+ground", "dragon+ice", 
                    "dragon+psychic", "electric+dragon", "electric+fairy", 
                    "electric+fire", "electric+flying", "electric+ghost", 
                    "electric+grass", "electric+ice", "electric+normal", 
                    "electric+psychic", "electric+steel", "electric+water", 
                    "fairy+flying", "fighting+dark", "fighting+flying", 
                    "fighting+ghost", "fighting+ice", "fighting+psychic", 
                    "fighting+steel", "fire+dark", "fire+dragon", 
                    "fire+fighting", "fire+flying", "fire+ghost", 
                    "fire+ground", "fire+normal", "fire+psychic", "fire+rock",
                     "fire+steel", "fire+water", "flying+dragon", 
                    "ghost+dark", "ghost+dragon", "ghost+fairy", "ghost+fire",
                     "ghost+flying", "ghost+grass", "ghost+ground", 
                    "ghost+poison", "grass+dark", "grass+dragon", 
                    "grass+fairy", "grass+fighting", "grass+flying", 
                    "grass+ghost", "grass+ground", "grass+ice", 
                    "grass+poison", "grass+psychic", "grass+steel", 
                    "ground+dark", "ground+dragon", "ground+electric", 
                    "ground+fire", "ground+flying", "ground+ghost", 
                    "ground+psychic", "ground+rock", "ground+steel", 
                    "ice+fairy", "ice+flying", "ice+ghost", "ice+ground", 
                    "ice+psychic", "ice+steel", "ice+water", "normal+dragon", 
                    "normal+fairy", "normal+fighting", "normal+flying", 
                    "normal+grass", "normal+ground", "normal+psychic", 
                    "normal+water", "poison+bug", "poison+dark", 
                    "poison+dragon", "poison+fighting", "poison+fire", 
                    "poison+flying", "poison+ground", "poison+water", 
                    "psychic+dark", "psychic+dragon", "psychic+fairy", 
                    "psychic+fighting", "psychic+fire", "psychic+flying", 
                    "psychic+ghost", "psychic+grass", "psychic+steel", 
                    "rock+bug", "rock+dark", "rock+dragon", "rock+electric", 
                    "rock+fairy", "rock+fighting", "rock+flying", 
                    "rock+grass", "rock+ground", "rock+ice", "rock+poison", 
                    "rock+psychic", "rock+steel", "rock+water", 
                    "steel+dragon", "steel+fairy", "steel+fighting", 
                    "steel+flying", "steel+ghost", "steel+ground", 
                    "steel+psychic", "steel+rock", "water+bug", "water+dark", 
                    "water+dragon", "water+electric", "water+fairy", 
                    "water+fighting", "water+flying", "water+ghost", 
                    "water+grass", "water+ground", "water+ice", 
                    "water+poison", "water+psychic", "water+rock", 
                    "water+steel"}, 1], "Tooltip"]& ], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 BaselinePosition -> {1, 1}], True -> GridBox[{{
                   PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                   GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                    Axes -> {False, False}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                    FrameTicks -> {{None, None}, {None, None}}, 
                    GridLines -> {None, None}, 
                    LabelStyle -> {FontFamily -> "Arial"}, 
                    Method -> {"ScalingFunctions" -> None}, 
                    PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                    Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                    ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                    FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                    GrayLevel[0.94]], 
                   GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "7", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{"\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Numerical", "Numerical", "Numerical"}, 10], 
                    "Tooltip"]& ], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    TooltipBox["156", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{"\"bug+electric\"", ",", "\"bug+fairy\"", ",", 
                    "\"bug+fighting\"", ",", "\"bug+fire\"", ",", 
                    "\"bug+flying\"", ",", "\"bug+ghost\"", ",", 
                    "\"bug+grass\"", ",", "\"bug+ground\"", ",", 
                    "\"bug+poison\"", ",", "\"bug+rock\"", ",", 
                    RowBox[{"\[LeftSkeleton]", "137", "\[RightSkeleton]"}], 
                    ",", "\"water+flying\"", ",", "\"water+ghost\"", ",", 
                    "\"water+grass\"", ",", "\"water+ground\"", ",", 
                    "\"water+ice\"", ",", "\"water+poison\"", ",", 
                    "\"water+psychic\"", ",", "\"water+rock\"", ",", 
                    "\"water+steel\""}], "}"}], Short[#, 1]& ]], Annotation[#, 
                    
                    Short[{"bug+electric", "bug+fairy", "bug+fighting", 
                    "bug+fire", "bug+flying", "bug+ghost", "bug+grass", 
                    "bug+ground", "bug+poison", "bug+rock", "bug+steel", 
                    "bug+water", "dark+dragon", "dark+fighting", "dark+fire", 
                    "dark+flying", "dark+ghost", "dark+ice", "dark+normal", 
                    "dark+psychic", "dark+steel", "dragon+electric", 
                    "dragon+fairy", "dragon+fighting", "dragon+fire", 
                    "dragon+flying", "dragon+ground", "dragon+ice", 
                    "dragon+psychic", "electric+dragon", "electric+fairy", 
                    "electric+fire", "electric+flying", "electric+ghost", 
                    "electric+grass", "electric+ice", "electric+normal", 
                    "electric+psychic", "electric+steel", "electric+water", 
                    "fairy+flying", "fighting+dark", "fighting+flying", 
                    "fighting+ghost", "fighting+ice", "fighting+psychic", 
                    "fighting+steel", "fire+dark", "fire+dragon", 
                    "fire+fighting", "fire+flying", "fire+ghost", 
                    "fire+ground", "fire+normal", "fire+psychic", "fire+rock",
                     "fire+steel", "fire+water", "flying+dragon", 
                    "ghost+dark", "ghost+dragon", "ghost+fairy", "ghost+fire",
                     "ghost+flying", "ghost+grass", "ghost+ground", 
                    "ghost+poison", "grass+dark", "grass+dragon", 
                    "grass+fairy", "grass+fighting", "grass+flying", 
                    "grass+ghost", "grass+ground", "grass+ice", 
                    "grass+poison", "grass+psychic", "grass+steel", 
                    "ground+dark", "ground+dragon", "ground+electric", 
                    "ground+fire", "ground+flying", "ground+ghost", 
                    "ground+psychic", "ground+rock", "ground+steel", 
                    "ice+fairy", "ice+flying", "ice+ghost", "ice+ground", 
                    "ice+psychic", "ice+steel", "ice+water", "normal+dragon", 
                    "normal+fairy", "normal+fighting", "normal+flying", 
                    "normal+grass", "normal+ground", "normal+psychic", 
                    "normal+water", "poison+bug", "poison+dark", 
                    "poison+dragon", "poison+fighting", "poison+fire", 
                    "poison+flying", "poison+ground", "poison+water", 
                    "psychic+dark", "psychic+dragon", "psychic+fairy", 
                    "psychic+fighting", "psychic+fire", "psychic+flying", 
                    "psychic+ghost", "psychic+grass", "psychic+steel", 
                    "rock+bug", "rock+dark", "rock+dragon", "rock+electric", 
                    "rock+fairy", "rock+fighting", "rock+flying", 
                    "rock+grass", "rock+ground", "rock+ice", "rock+poison", 
                    "rock+psychic", "rock+steel", "rock+water", 
                    "steel+dragon", "steel+fairy", "steel+fighting", 
                    "steel+flying", "steel+ghost", "steel+ground", 
                    "steel+psychic", "steel+rock", "water+bug", "water+dark", 
                    "water+dragon", "water+electric", "water+fairy", 
                    "water+fighting", "water+flying", "water+ghost", 
                    "water+grass", "water+ground", "water+ice", 
                    "water+poison", "water+psychic", "water+rock", 
                    "water+steel"}, 1], "Tooltip"]& ], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"RandomForest\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["494", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 BaselinePosition -> {1, 1}]}, 
              Dynamic[Typeset`open$$], ImageSize -> Automatic]},
            "SummaryPanel"],
           DynamicModuleValues:>{}], "]"}],
         ClassifierFunction[<|
          "ExampleNumber" -> 494, "ClassNumber" -> 156, 
           "Input" -> <|
            "Preprocessor" -> 
             MachineLearning`MLProcessor[
              "ToMLDataset", <|
               "Input" -> <|
                 "Total" -> <|"Type" -> "Numerical"|>, 
                  "HP" -> <|"Type" -> "Numerical"|>, 
                  "Attack" -> <|"Type" -> "Numerical"|>, 
                  "Defense" -> <|"Type" -> "Numerical"|>, 
                  "Sp. Atk" -> <|"Type" -> "Numerical"|>, 
                  "Sp. Def" -> <|"Type" -> "Numerical"|>, 
                  "Speed" -> <|"Type" -> "Numerical"|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                "Preprocessor" -> 
                MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                    MachineLearning`MLProcessor[
                    "FromNamedFeatures", <|
                    "FeatureNames" -> {
                    "Total", "HP", "Attack", "Defense", "Sp. Atk", "Sp. Def", 
                    "Speed"}|>], 
                    MachineLearning`MLProcessor[
                    "Transpose", <|"FeatureNumber" -> 7|>], 
                    MachineLearning`MLProcessor[
                    "WrapMLDataset", <|
                    "FeatureTypes" -> {
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical"}, 
                    "FeatureKeys" -> {
                    "f1", "f2", "f3", "f4", "f5", "f6", "f7"}, 
                    "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                    Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
                "Perfect", "StructurePreserving" -> False, "Missing" -> 
                "Allowed"|>], "Processor" -> 
             MachineLearning`MLProcessor[
              "Sequence", <|
               "Input" -> <|
                 "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "(f1f2f3f4f5f6f7)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 7|>|>, 
                "Processors" -> {
                  MachineLearning`MLProcessor[
                  "SynthesizeMissingValues", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Distribution" -> 
                    LearnedDistribution[<|
                    "ExampleNumber" -> 494, "Preprocessor" -> 
                    MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>, 
                    "f4" -> <|"Type" -> "Numerical"|>, 
                    "f5" -> <|"Type" -> "Numerical"|>, 
                    "f6" -> <|"Type" -> "Numerical"|>, 
                    "f7" -> <|"Type" -> "Numerical"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7|>|>, 
                    "Version" -> {14.2, 0}, "ID" -> 3128401418847633772|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7|>|>, 
                    "Mean" -> {460.4331983805668, 71.37651821862349, 
                    84.36032388663968, 80.27935222672065, 77.72672064777328, 
                    75.89676113360323, 70.79352226720648}, 
                    "StandardDeviation" -> {119.93951997787633`, 
                    24.689241359129355`, 33.40646081503689, 32.41617809072408,
                     34.172937989954605`, 27.666965891754273`, 
                    29.190735985081254`}, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7|>|>, 
                    "Version" -> {14.2, 0}, "ID" -> 3798507262341624293|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                    "DirectTraining", "BatchProcessing" -> Automatic, 
                    "Model" -> <|"RotationMatrix" -> CompressedData["
1:eJwBmQFm/iFib1JlAgAAAAcAAAAHAAAAKvlKZinB4L9XrOw7JEkhv8ulbtOz
dFK/b3Sf1AV3rT8Pd0h7YW2AP01ukWPnnqM/b6fW3g4s6z8J0Am7V/fWv0Bu
+9LkNqu/+lDlGFOW1j8elZL0h33nv5pZet7jiNi/FdngpPEyxT9XCXGUcmPG
v1Pnpn9T3Ni/vhLbV3d+sb8DaMg/SxrjP39DugErdtI/55Ttx0yBzz+AevJ/
bS/hvz70QqiZQc6/mWQHCj3v0r/T7XwsG8LkPwwGnghNRMA/WjEGPm8a1T+9
fJzkqOCTP/AFM/4F6+E/fp0Cnjlvzb/q2aoaZjbZv4JCQ4ek7c6/UclkT4Pc
2L82mlEMXhDPv5ksAVwFT+Y/uWSXdZT3xj9Xwh7T9u/Ov7KTeqUwEde//rOF
PLZw1T8qwF54ZJPiv0DrRjjFMIe/sTCr88iH1r+iX27Hp0Tgv0+yrn75E8m/
PKwlHCBc0b/7aabrHkTkv4aqgKprar+/0DssuMMb3T/rc3ZADU/bv1sPRGrP
7tE/jb9R9Xx9yr+YVNGT
                    "], 
                    "Precisions" -> {0.2748955561963018, 0.8235745815805111, 
                    1.2377419649457737`, 1.48906973977363, 
                    2.4960816951580553`, 3.7442409860404835`, 
                    32023.023504953137`}, "NoisePrecision" -> None, 
                    "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7|>|>, 
                    "Mean" -> {-0.00010396330941892749`, \
-0.00020441724914266145`, -0.00007369029977248446, -0.00015472283758558407`, 
                    0.00024358397362270033`, -0.00034888826780929676`, \
-0.0001933959675508392}, "Output" -> <|
                    "(f1f2f3f4f5f6f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7|>|>, 
                    "Version" -> {14.2, 0}, "ID" -> 3572163192569545415|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 7|>, 
                    "Key" -> "(f1f2f3f4f5f6f7)", "Invertibility" -> "Perfect",
                     "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"|>], "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 7, "Options" -> <||>|>|>|>, 
                    "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"(f1f2f3f4f5f6f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7|>|>, 
                    "Mean" -> {-0.0001039633094191801, \
-0.00020441724914269538`, -0.0000736902997724321, -0.00015472283758554285`, 
                    0.00024358397362262785`, -0.00034888826780926586`, \
-0.0001933959675507792}, "StandardDeviation" -> {0.9999500120408468, 
                    1.0002904135650994`, 0.9998343494000775, 
                    0.999655009343307, 1.0001110878427368`, 
                    0.9999215779664257, 0.9998290965329294}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 7, 
                    "Output" -> <|"(f1f2f3f4f5f6f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.2, 0}, "ID" -> 
                    886936155450518819|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7|>|>, 
                    "Mean" -> {-0.0001039633094191801, \
-0.00020441724914269538`, -0.0000736902997724321, -0.00015472283758554285`, 
                    0.00024358397362262785`, -0.00034888826780926586`, \
-0.0001933959675507792}, 
                    "StandardDeviation" -> {0.9999500120408468, 
                    1.0002904135650994`, 0.9998343494000775, 
                    0.999655009343307, 1.0001110878427368`, 
                    0.9999215779664257, 0.9998290965329294}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 7, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.2, 0}, "ID" -> 
                    886936155450518819|>], "InputDimension" -> 0, 
                    "OutputDimension" -> 7, 
                    "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {700}, 
                    "ID" -> 14566826155945013|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {100}, "ID" -> 3475895217677343472|>, 
                    "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {164}, 
                    "ID" -> 1301051682472937812|>, 
                    "f4" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {150}, 
                    "ID" -> 241594786734218612|>, 
                    "f5" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {95}, 
                    "ID" -> 8046481646316822211|>, 
                    "f6" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {120}, 
                    "ID" -> 992805473035634020|>, 
                    "f7" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {71}, 
                    "ID" -> 73236510287448288|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.03097, "MaxTrainingMemory" -> 273984, 
                    "DataMemory" -> 37312, "FunctionMemory" -> 59512, 
                    "LanguageVersion" -> {14.2, 0}, "Date" -> 
                    DateObject[{
                    2025, 4, 6, 20, 12, 29.089152`8.216306042232873}, 
                    "Instant", "Gregorian", 2.], "ProcessorCount" -> 8, 
                    "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX",
                     "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                    "LogPDFDistribution" -> 
                    MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-4.46910569708118, -4.46910569708118, \
-4.422596825564649, -4.282343621601375, -4.194214637419501, \
-4.163084030310043, -3.9957379545022684`, -3.9637800258040716`, \
-3.9080928472447036`, -3.8547658428981784`, -3.8421442712327543`}, 
                    "LeftBoundary" -> -4.422596825564649, "LeftScale" -> 
                    0.02325443575826558, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                    Around[28.767106027561105`, 0.5103432996765571], 
                    "EntropySampleSize" -> 10|>], 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "EvaluationStrategy" -> "ModeFinding", 
                    "Version" -> {14.2, 0}, "ID" -> 3520938463763109121|>], 
                  MachineLearning`MLProcessor[
                  "ToVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7|>|>, 
                    "Version" -> {14.2, 0}, "ID" -> 8401888890595954248|>], 
                  MachineLearning`MLProcessor[
                  "Standardize", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7|>|>, 
                    "Mean" -> {460.4331983805668, 71.37651821862349, 
                    84.36032388663968, 80.27935222672065, 77.72672064777328, 
                    75.89676113360323, 70.79352226720648}, 
                    "StandardDeviation" -> {119.93951997787633`, 
                    24.689241359129355`, 33.40646081503689, 32.41617809072408,
                     34.172937989954605`, 27.666965891754273`, 
                    29.190735985081254`}, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6f7)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 7|>|>, 
                    "Version" -> {14.2, 0}, "ID" -> 3416117032667718646|>]}, 
                "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
                "Missing" -> "Imputed"|>]|>, 
           "Output" -> <|
            "Preprocessor" -> 
             MachineLearning`MLProcessor[
              "ToMLDataset", <|
               "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Preprocessor" -> 
                MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor[
                    "WrapMLDataset", <|
                    "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                    "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                    Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
                "Perfect", "StructurePreserving" -> False, "Missing" -> 
                "Allowed"|>], "Processor" -> 
             MachineLearning`MLProcessor[
              "Sequence", <|
               "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Processors" -> {
                  MachineLearning`MLProcessor[
                  "ToVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.2, 0}, "ID" -> 4544819100394706971|>], 
                  MachineLearning`MLProcessor[
                  "IntegerEncodeNominalVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                    "Index" -> {<|
                    "bug+electric" -> 1, "bug+fairy" -> 2, "bug+fighting" -> 
                    3, "bug+fire" -> 4, "bug+flying" -> 5, "bug+ghost" -> 6, 
                    "bug+grass" -> 7, "bug+ground" -> 8, "bug+poison" -> 9, 
                    "bug+rock" -> 10, "bug+steel" -> 11, "bug+water" -> 12, 
                    "dark+dragon" -> 13, "dark+fighting" -> 14, "dark+fire" -> 
                    15, "dark+flying" -> 16, "dark+ghost" -> 17, "dark+ice" -> 
                    18, "dark+normal" -> 19, "dark+psychic" -> 20, 
                    "dark+steel" -> 21, "dragon+electric" -> 22, 
                    "dragon+fairy" -> 23, "dragon+fighting" -> 24, 
                    "dragon+fire" -> 25, "dragon+flying" -> 26, 
                    "dragon+ground" -> 27, "dragon+ice" -> 28, 
                    "dragon+psychic" -> 29, "electric+dragon" -> 30, 
                    "electric+fairy" -> 31, "electric+fire" -> 32, 
                    "electric+flying" -> 33, "electric+ghost" -> 34, 
                    "electric+grass" -> 35, "electric+ice" -> 36, 
                    "electric+normal" -> 37, "electric+psychic" -> 38, 
                    "electric+steel" -> 39, "electric+water" -> 40, 
                    "fairy+flying" -> 41, "fighting+dark" -> 42, 
                    "fighting+flying" -> 43, "fighting+ghost" -> 44, 
                    "fighting+ice" -> 45, "fighting+psychic" -> 46, 
                    "fighting+steel" -> 47, "fire+dark" -> 48, "fire+dragon" -> 
                    49, "fire+fighting" -> 50, "fire+flying" -> 51, 
                    "fire+ghost" -> 52, "fire+ground" -> 53, "fire+normal" -> 
                    54, "fire+psychic" -> 55, "fire+rock" -> 56, "fire+steel" -> 
                    57, "fire+water" -> 58, "flying+dragon" -> 59, 
                    "ghost+dark" -> 60, "ghost+dragon" -> 61, "ghost+fairy" -> 
                    62, "ghost+fire" -> 63, "ghost+flying" -> 64, 
                    "ghost+grass" -> 65, "ghost+ground" -> 66, "ghost+poison" -> 
                    67, "grass+dark" -> 68, "grass+dragon" -> 69, 
                    "grass+fairy" -> 70, "grass+fighting" -> 71, 
                    "grass+flying" -> 72, "grass+ghost" -> 73, "grass+ground" -> 
                    74, "grass+ice" -> 75, "grass+poison" -> 76, 
                    "grass+psychic" -> 77, "grass+steel" -> 78, "ground+dark" -> 
                    79, "ground+dragon" -> 80, "ground+electric" -> 81, 
                    "ground+fire" -> 82, "ground+flying" -> 83, 
                    "ground+ghost" -> 84, "ground+psychic" -> 85, 
                    "ground+rock" -> 86, "ground+steel" -> 87, "ice+fairy" -> 
                    88, "ice+flying" -> 89, "ice+ghost" -> 90, "ice+ground" -> 
                    91, "ice+psychic" -> 92, "ice+steel" -> 93, "ice+water" -> 
                    94, "normal+dragon" -> 95, "normal+fairy" -> 96, 
                    "normal+fighting" -> 97, "normal+flying" -> 98, 
                    "normal+grass" -> 99, "normal+ground" -> 100, 
                    "normal+psychic" -> 101, "normal+water" -> 102, 
                    "poison+bug" -> 103, "poison+dark" -> 104, 
                    "poison+dragon" -> 105, "poison+fighting" -> 106, 
                    "poison+fire" -> 107, "poison+flying" -> 108, 
                    "poison+ground" -> 109, "poison+water" -> 110, 
                    "psychic+dark" -> 111, "psychic+dragon" -> 112, 
                    "psychic+fairy" -> 113, "psychic+fighting" -> 114, 
                    "psychic+fire" -> 115, "psychic+flying" -> 116, 
                    "psychic+ghost" -> 117, "psychic+grass" -> 118, 
                    "psychic+steel" -> 119, "rock+bug" -> 120, "rock+dark" -> 
                    121, "rock+dragon" -> 122, "rock+electric" -> 123, 
                    "rock+fairy" -> 124, "rock+fighting" -> 125, 
                    "rock+flying" -> 126, "rock+grass" -> 127, "rock+ground" -> 
                    128, "rock+ice" -> 129, "rock+poison" -> 130, 
                    "rock+psychic" -> 131, "rock+steel" -> 132, "rock+water" -> 
                    133, "steel+dragon" -> 134, "steel+fairy" -> 135, 
                    "steel+fighting" -> 136, "steel+flying" -> 137, 
                    "steel+ghost" -> 138, "steel+ground" -> 139, 
                    "steel+psychic" -> 140, "steel+rock" -> 141, "water+bug" -> 
                    142, "water+dark" -> 143, "water+dragon" -> 144, 
                    "water+electric" -> 145, "water+fairy" -> 146, 
                    "water+fighting" -> 147, "water+flying" -> 148, 
                    "water+ghost" -> 149, "water+grass" -> 150, 
                    "water+ground" -> 151, "water+ice" -> 152, "water+poison" -> 
                    153, "water+psychic" -> 154, "water+rock" -> 155, 
                    "water+steel" -> 156|>}, "MissingCode" -> 0, 
                    "Version" -> {14.2, 0}, "ID" -> 5206921949863604364, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
                  MachineLearning`MLProcessor[
                  "FromVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|
                    "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {156}|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Version" -> {14.2, 0}, "ID" -> 5922851939305123031|>], 
                  MachineLearning`MLProcessor[
                  "FirstValues", <|
                   "Info" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 156|>, 
                    "Key" -> "f1", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"|>]}, "Invertibility" -> "Perfect", 
                "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
             "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
             "Marginal" -> <|
              "bug+electric" -> 0.007692307692307693, "bug+fairy" -> 
               0.004615384615384615, "bug+fighting" -> 0.007692307692307693, 
               "bug+fire" -> 0.004615384615384615, "bug+flying" -> 
               0.023076923076923078`, "bug+ghost" -> 0.003076923076923077, 
               "bug+grass" -> 0.010769230769230769`, "bug+ground" -> 
               0.004615384615384615, "bug+poison" -> 0.02, "bug+rock" -> 
               0.006153846153846154, "bug+steel" -> 0.012307692307692308`, 
               "bug+water" -> 0.006153846153846154, "dark+dragon" -> 
               0.007692307692307693, "dark+fighting" -> 0.004615384615384615, 
               "dark+fire" -> 0.006153846153846154, "dark+flying" -> 
               0.00923076923076923, "dark+ghost" -> 0.004615384615384615, 
               "dark+ice" -> 0.004615384615384615, "dark+normal" -> 
               0.004615384615384615, "dark+psychic" -> 0.004615384615384615, 
               "dark+steel" -> 0.004615384615384615, "dragon+electric" -> 
               0.003076923076923077, "dragon+fairy" -> 0.003076923076923077, 
               "dragon+fighting" -> 0.004615384615384615, "dragon+fire" -> 
               0.003076923076923077, "dragon+flying" -> 0.010769230769230769`,
                "dragon+ground" -> 0.012307692307692308`, "dragon+ice" -> 
               0.006153846153846154, "dragon+psychic" -> 0.007692307692307693,
                "electric+dragon" -> 0.003076923076923077, "electric+fairy" -> 
               0.004615384615384615, "electric+fire" -> 0.003076923076923077, 
               "electric+flying" -> 0.010769230769230769`, "electric+ghost" -> 
               0.003076923076923077, "electric+grass" -> 0.003076923076923077,
                "electric+ice" -> 0.003076923076923077, "electric+normal" -> 
               0.004615384615384615, "electric+psychic" -> 
               0.003076923076923077, "electric+steel" -> 0.007692307692307693,
                "electric+water" -> 0.003076923076923077, "fairy+flying" -> 
               0.004615384615384615, "fighting+dark" -> 0.003076923076923077, 
               "fighting+flying" -> 0.003076923076923077, "fighting+ghost" -> 
               0.003076923076923077, "fighting+ice" -> 0.003076923076923077, 
               "fighting+psychic" -> 0.006153846153846154, "fighting+steel" -> 
               0.004615384615384615, "fire+dark" -> 0.003076923076923077, 
               "fire+dragon" -> 0.004615384615384615, "fire+fighting" -> 
               0.012307692307692308`, "fire+flying" -> 0.012307692307692308`, 
               "fire+ghost" -> 0.004615384615384615, "fire+ground" -> 
               0.006153846153846154, "fire+normal" -> 0.004615384615384615, 
               "fire+psychic" -> 0.004615384615384615, "fire+rock" -> 
               0.003076923076923077, "fire+steel" -> 0.003076923076923077, 
               "fire+water" -> 0.003076923076923077, "flying+dragon" -> 
               0.004615384615384615, "ghost+dark" -> 0.003076923076923077, 
               "ghost+dragon" -> 0.004615384615384615, "ghost+fairy" -> 
               0.003076923076923077, "ghost+fire" -> 0.006153846153846154, 
               "ghost+flying" -> 0.006153846153846154, "ghost+grass" -> 
               0.01846153846153846, "ghost+ground" -> 0.004615384615384615, 
               "ghost+poison" -> 0.007692307692307693, "grass+dark" -> 
               0.006153846153846154, "grass+dragon" -> 0.004615384615384615, 
               "grass+fairy" -> 0.00923076923076923, "grass+fighting" -> 
               0.006153846153846154, "grass+flying" -> 0.012307692307692308`, 
               "grass+ghost" -> 0.003076923076923077, "grass+ground" -> 
               0.003076923076923077, "grass+ice" -> 0.006153846153846154, 
               "grass+poison" -> 0.024615384615384615`, "grass+psychic" -> 
               0.004615384615384615, "grass+steel" -> 0.006153846153846154, 
               "ground+dark" -> 0.006153846153846154, "ground+dragon" -> 
               0.004615384615384615, "ground+electric" -> 
               0.003076923076923077, "ground+fire" -> 0.003076923076923077, 
               "ground+flying" -> 0.007692307692307693, "ground+ghost" -> 
               0.004615384615384615, "ground+psychic" -> 0.004615384615384615,
                "ground+rock" -> 0.006153846153846154, "ground+steel" -> 
               0.006153846153846154, "ice+fairy" -> 0.003076923076923077, 
               "ice+flying" -> 0.004615384615384615, "ice+ghost" -> 
               0.003076923076923077, "ice+ground" -> 0.006153846153846154, 
               "ice+psychic" -> 0.004615384615384615, "ice+steel" -> 
               0.004615384615384615, "ice+water" -> 0.006153846153846154, 
               "normal+dragon" -> 0.003076923076923077, "normal+fairy" -> 
               0.00923076923076923, "normal+fighting" -> 0.007692307692307693,
                "normal+flying" -> 0.043076923076923075`, "normal+grass" -> 
               0.004615384615384615, "normal+ground" -> 0.003076923076923077, 
               "normal+psychic" -> 0.006153846153846154, "normal+water" -> 
               0.003076923076923077, "poison+bug" -> 0.003076923076923077, 
               "poison+dark" -> 0.00923076923076923, "poison+dragon" -> 
               0.004615384615384615, "poison+fighting" -> 
               0.004615384615384615, "poison+fire" -> 0.004615384615384615, 
               "poison+flying" -> 0.006153846153846154, "poison+ground" -> 
               0.004615384615384615, "poison+water" -> 0.006153846153846154, 
               "psychic+dark" -> 0.003076923076923077, "psychic+dragon" -> 
               0.003076923076923077, "psychic+fairy" -> 0.012307692307692308`,
                "psychic+fighting" -> 0.006153846153846154, "psychic+fire" -> 
               0.003076923076923077, "psychic+flying" -> 
               0.012307692307692308`, "psychic+ghost" -> 0.006153846153846154,
                "psychic+grass" -> 0.003076923076923077, "psychic+steel" -> 
               0.004615384615384615, "rock+bug" -> 0.004615384615384615, 
               "rock+dark" -> 0.004615384615384615, "rock+dragon" -> 
               0.004615384615384615, "rock+electric" -> 0.006153846153846154, 
               "rock+fairy" -> 0.006153846153846154, "rock+fighting" -> 
               0.003076923076923077, "rock+flying" -> 0.010769230769230769`, 
               "rock+grass" -> 0.004615384615384615, "rock+ground" -> 
               0.010769230769230769`, "rock+ice" -> 0.004615384615384615, 
               "rock+poison" -> 0.003076923076923077, "rock+psychic" -> 
               0.004615384615384615, "rock+steel" -> 0.007692307692307693, 
               "rock+water" -> 0.010769230769230769`, "steel+dragon" -> 
               0.003076923076923077, "steel+fairy" -> 0.007692307692307693, 
               "steel+fighting" -> 0.003076923076923077, "steel+flying" -> 
               0.004615384615384615, "steel+ghost" -> 0.007692307692307693, 
               "steel+ground" -> 0.004615384615384615, "steel+psychic" -> 
               0.012307692307692308`, "steel+rock" -> 0.006153846153846154, 
               "water+bug" -> 0.004615384615384615, "water+dark" -> 
               0.012307692307692308`, "water+dragon" -> 0.004615384615384615, 
               "water+electric" -> 0.004615384615384615, "water+fairy" -> 
               0.007692307692307693, "water+fighting" -> 0.006153846153846154,
                "water+flying" -> 0.012307692307692308`, "water+ghost" -> 
               0.004615384615384615, "water+grass" -> 0.006153846153846154, 
               "water+ground" -> 0.016923076923076923`, "water+ice" -> 
               0.006153846153846154, "water+poison" -> 0.006153846153846154, 
               "water+psychic" -> 0.010769230769230769`, "water+rock" -> 
               0.007692307692307693, "water+steel" -> 
               0.003076923076923077|>|>, "LabelSplitter" -> 
           MachineLearning`MLProcessor[
            "FeatureLabelSplit", <|
             "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
              "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
           "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic,
            "Prior" -> Automatic, "Utility" -> 
           SparseArray[
            Automatic, {156, 157}, 0., {
             1, {{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 
               17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,
                33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 
               48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
                64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 
               79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
                95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 
               108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 
               120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 
               132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 
               144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 
               156}, {{2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {
               12}, {13}, {14}, {15}, {16}, {17}, {18}, {19}, {20}, {21}, {
               22}, {23}, {24}, {25}, {26}, {27}, {28}, {29}, {30}, {31}, {
               32}, {33}, {34}, {35}, {36}, {37}, {38}, {39}, {40}, {41}, {
               42}, {43}, {44}, {45}, {46}, {47}, {48}, {49}, {50}, {51}, {
               52}, {53}, {54}, {55}, {56}, {57}, {58}, {59}, {60}, {61}, {
               62}, {63}, {64}, {65}, {66}, {67}, {68}, {69}, {70}, {71}, {
               72}, {73}, {74}, {75}, {76}, {77}, {78}, {79}, {80}, {81}, {
               82}, {83}, {84}, {85}, {86}, {87}, {88}, {89}, {90}, {91}, {
               92}, {93}, {94}, {95}, {96}, {97}, {98}, {99}, {100}, {101}, {
               102}, {103}, {104}, {105}, {106}, {107}, {108}, {109}, {110}, {
               111}, {112}, {113}, {114}, {115}, {116}, {117}, {118}, {119}, {
               120}, {121}, {122}, {123}, {124}, {125}, {126}, {127}, {128}, {
               129}, {130}, {131}, {132}, {133}, {134}, {135}, {136}, {137}, {
               138}, {139}, {140}, {141}, {142}, {143}, {144}, {145}, {146}, {
               147}, {148}, {149}, {150}, {151}, {152}, {153}, {154}, {155}, {
               156}, {157}}}, CompressedData["
1:eJxTTMoPSmVkYGCYwwADH+xH6VF6lB6lhxsNAMFpuus=
              "]}], "Threshold" -> 0, "TieBreaker" -> RandomChoice, 
           "PerformanceGoal" -> Automatic, "BatchProcessing" -> Automatic, 
           "Model" -> <|"Trees" -> {
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{6, 3, 5, 3, 4, 5, 2, 6, 6, 7, 6, 5, 5, 
                   1, 6, 6, 7, 2, 5, 2, 3, 1, 1, 2, 7, 7, 6, 1, 3, 5, 2, 1, 5,
                    4, 3, 1, 6, 5, 7, 2, 4, 6, 7, 4, 1, 2, 7, 1, 6, 3, 5, 5, 
                   6, 5, 7, 5, 2, 5, 6, 7, 6, 3, 1, 3, 2, 5, 1, 7, 7, 6, 7, 2,
                    4, 6, 2, 2, 4, 4, 6, 4, 5, 1, 2, 6, 1, 2, 4, 3, 1, 7, 3, 
                   7, 7, 4, 4, 4, 2, 6, 7, 2, 3, 4, 6, 1, 1, 1, 4, 7, 3, 7, 1,
                    7, 5, 4, 1, 7, 5, 6, 3, 5, 5, 3, 3, 2, 2, 3, 3, 3, 4, 4, 
                   6, 7, 3, 5, 1, 4, 4, 2, 1}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwNkHtQ0gccwLGX6FWSKWKtTm6dlS5HtZmP7Mvs3MibyazUbWlczotpKh5d
cmmLtVQmaaC2PNdIq5VnmljbxN3m95eaUan5QPExXwSKDxQQFbVw/vH5//P5
0M+mRMTbkUgk8SrRJzf473xkQD8OU8iJGwEe+YmYbacGQr7msC5sGXkjSVkr
iSZkdLVw999+DcaIFy7tZ9cTzNmr7q1qG0ZTbaNu9QZkni8NzuC8RLlf7afS
FgNafTtO9BsXkZfqIoRKDbLn2yNXqheRqAsYGr6xgDxb4d5d4nlUWJIdHGWT
6OebH+aRokfGBvqOR63jWLYxezI51oKSODvv74ssqM8PS6iYN6Eob9Zt4bAO
FPJa+5qhSSxKKkiPejaJcmWVzPODDqSMbMkjuluhR8pfTnlqRorheIDp0QK2
Fd5cKziwiJaG0h2pa9cwSewo++OKDhCG7M3UWY1otd7OFIdPI4N86vqsVYse
rLZ0qXK12yNVc8u9EXoYn9N2lQ8hOyrj2JDrDHL1677xfj+ATB/H5JzNz0Gu
j0mz1S+DPKaNvTvWipSaa9PVZg0IRee8klwSsGwbty/07QAqj+Nbm3kU/SI9
Zxz4RoxGQe7pYD3Syt7tfOEzjn4nFgjBx53QE7jS5FO36vNqzDUyvRf1rTER
qpApVBwr3/mAPgvs7fRRs2kWFdfClVWbVz1zzrkF6saRVMzfoHswD1b+kuy+
th+JC5scAwJWwPqcQupwmgFlmC1WK2oBYb677k/pAAyPJDcTugkgZPzTmqPt
yBqvnfBi9gErrPZUduMoKsUnpZU1GiTPORdcpepQmRKvuoS9yHYtdjRyy1Gw
N9hwT9QBBC+Ic1YyBcp9TXc2LaiApQ8O+m2fGcmddMMivw4kX5uDIkMHUXC/
4tkP1hEc7pu/W/hHNcq3LrsHU9UojPcm2nMVwGG5fjVV3oCE5bWjNXcayDmN
jb3CbigKTXRaCUwA2u9BBQKXv0GSvZ366oYF9M7+nyS19YCI0XelPEuNnKFm
tbitE0tu/Rd3sAmRtjGJ/Li5E4xvm27a1TdDiarFu/V5PzAvEkfehGuhLGPS
ra6yGyiqLMpDwRx4VHMDHM7MI9lXRnoW3g28on/s9r9pR1pG6YeeRVNA+J6n
3wusB/KSof5HyTKw6pwP7uOYwXiIKs2MH4LhRLrZ9liFbOovxReXZkBRrnL3
Od8A7Lle54uSd8D71iXi30sP0ZhYfGj9F3pgXEsb/yjJBBLZbOpddSfSBv0D
6wWDULTccLnjswUYTom9/WuJBkp46kGb0wTsufzU0HdLC4xS2oWe9EnQar8z
U+fWMY1pXU3ULSZQXB5+cT1/CaIrH24NdR0Bjo6xx+uMPVOUmNZm6Vr9yQyl
+Pw0BtYBaVT+yiCQb5Lcq0rUyHyawNIE9QNr2tz3pVMVkPndP780zYBH4IE7
m5e0qK8Yy8u52gskyV8hiu29YBQe2ePNzUXRE27ItkIt9GQGyK68nwDu7srk
mOD38D8wHGAd
                  "], "Children" -> CompressedData["
1:eJwdkmeYDwQAh98H4USZRVZnZJZOQlmd2YVwKJs7zgz5O3fO7Ttu2SGrYZXV
MMoMIVuLMtIgKlRklf26fHh/z/M+v69vcOTI8IF5gNEFcyc8IjY0EIiI6xyU
K2EjoqMGRQVC6g/+/5+YS5775CUfD/AopdH83HW9BVjnHQty2yAK8akPUpgi
fOItS/AQD1OUYtx0rTdcY3FWe91VlqQU//mx//oI1/zIMjxGPyIoSzmu2pvy
VKAOT3PFily2Oo/zocF84CUrUZkq/ONKL1qVJ1jhBavxt8utQU3+sha1Weaf
LvVJ3vcp3vO8SzxnCHV5hrMu9g8XWY+FPkt9frcBv/k8DVngGZ/jtO/6q41o
TBOa0oxTvuMLhNKGF2lOC076ti1pxS++ZWvm+7Pz/Mm5/mgYnenCS8yxLbNt
R3tO+DLhvGkHOvKDs+zETI87w2O+YVem+wrTPOpUj/gq3ehOD6b4vZP9zp4c
theHnOS39uEb+/K1E/3KHCPpzwCi+NI4BpLtQbMcxGCGMJQDZjqMDEcTzWsM
Z78jGMkE9znevb7OHkcRIN3dpjmGGGJJdZcpfmGyY0lyp4mOI54EEtlhgttN
Iot4kxlnCnGmksbnprPNsW51PBOIdYsZfGYmm41xk9nk5Jay0TFuMNp7yNAg
zw==
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{113, 143, 6, 143, 12, 76, 98, 
                   128, 5, 37, 116, 96, 63, 78, 9, 76, 110, 7, 56, 41, 17, 11,
                    98, 46, 103, 16, 72, 83, 9, 100, 85, 84, 65, 72, 135, 13, 
                   87, 4, 27, 98, 21, 5, 109, 97, 88, 152, 3, 71, 97, 39, 75, 
                   146, 49, 64, 1, 34, 33, 51, 38, 63, 33, 28, 156, 4, 69, 77,
                    41, 27, 75, 50, 83, 119, 138, 5, 98, 84, 15, 9, 97, 96, 
                   79, 5, 96, 128, 65, 76, 94, 142, 132, 5, 127, 70, 113, 65, 
                   9, 18, 14, 124, 42, 74, 151, 50, 91, 24, 149, 20, 98, 9, 
                   90, 98, 104, 26, 46, 91, 147, 43, 27, 35, 76, 29, 140, 47, 
                   50, 2, 105, 116, 154, 76, 36, 33, 33, 111, 61, 25, 117, 
                   137, 115, 30, 16, 22}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{3, 6, 6, 7, 4, 7, 6, 7, 6, 6, 5, 4, 5, 
                   4, 3, 7, 5, 5, 1, 5, 2, 4, 5, 7, 4, 2, 5, 5, 3, 7, 7, 5, 4,
                    2, 7, 1, 4, 5, 4, 7, 6, 1, 1, 6, 6, 4, 6, 6, 5, 2, 7, 4, 
                   1, 7, 4, 6, 1, 7, 5, 6, 2, 1, 5, 1, 6, 3, 6, 4, 1, 3, 4, 6,
                    7, 7, 1, 5, 1, 2, 4, 6, 3, 4, 3, 4, 6, 5, 2, 7, 5, 5, 7, 
                   3, 3, 3, 2, 1, 7, 5, 2, 6, 6, 6, 5, 2, 6, 4, 2, 4, 5, 1, 1,
                    2, 5, 1, 4, 6, 7, 3, 6, 1, 6, 5, 1, 7, 7, 5, 1, 2, 3, 5, 
                   7, 7, 7, 2, 2, 4, 2, 5, 1, 3, 2, 1, 1}], 
                 "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwNkl1U0gccQCm3Ylsm1Qo4JaE7LXTZOG4jTfNHWh0pm9RyUisjK+cxLbT8
6NPyq39TN8pMtoo4Tc/I2nKzkObHDwyXTZ2Y5ubMQElAEQUHiUo1H+7Dfbhv
1yf+yPaDs0gk0nczML2axlLZLohMogn2btSh+Bg9P250CsS58Zsu+ZvArLlK
3eN2gvZ8/aXMf6fR7JUcmPvMinJ6js+ata/QfGsrt6nLga5yqRDKnfgPPzHt
2IyTfVeln6h1IXPMO6FEowZzq2PI6dWOZ+/kyhoCnWgWGsn2YSMKKgM+X88w
ory4WP8VdQwpNUXTOVdMyNb0cT6uH0D2rTpNwO4q5OcxaeVNkyBeFNGpyB9H
Za03mbvYhkpqZc+ZRX+jXNp+k7d2ABMbP32ivGVHZiypiCo1IWH0yPc4Z0M5
Y3dJbKsBs7btWuxf8TMQnIrYJaGDyD/sOHX5/jByLTFf/nhSi2zS6k/WenZg
EFXUkruwESM3uIkntYMgj98Xbda9QFmqmZc8aUDCxeGdOvkGhC0riTBGJxL6
pefaJa8hqHrVROk1J6hsz3wrCnpRnC2afa1bDZRl4TsMO0aRzUwdKKNrgK2I
G0k/jcBf6mMct/+HFAc3MYXuAOZfMlEJ2YjKNcU8RvADoCz09mC1PkWxLqR2
ntqIZP9ICvdxF9LSCqV37/yJ5AHZoLvOBnxnz8IMsRsIwcqevD4dqO63uBoz
ylHpf7cna7AGhDUNdk+aBiI9BF8bihVgK3jrUPV4PVDCpauzzd2Y+E7O63y6
EWVVjK2psTeRXJfSHuSrRkHJZ54K1R+gDJBMVkvsSJMn08P3dqH45rzGBWUP
QbLC09y3YhxFkjmKg8EjIPrWLPCbGgL2wHx17fUy4J8eefvoo6fIChMfvn6g
DwkNdYPzfBc2z7q4fHlRB9gONsd9wNKjNkDfbEl5jtpkuuXu3n6w7bvy07s5
z5EfLA44vsoAzAlpJe8bE4qVmXXuKAewVltDfv39NRLNJ/Y4sx8iwSdvvmeb
+bCBNZDvnAJyxZHW3kUvQUatodq9BlH4g68gO8mEomg/6YE5ZqAUtwvPBhmA
bPUjP4pzIUl7rrAn2oKRjfruYVc/UiTUQyMUA7C27N7UFqgH2u2VmS5fPWT5
vTwarbMCl6Oa59PRC2zuMmv8pBlsvAU762U6IMVaNyQkatGWwyMpXvWDRKUZ
cu4cwSp20tzvqU+Bu8Qa696mA31hnCldrUT54M6tc5nVSBuf7hnNaAR5Yu3s
5vUz/UfqoNIGC8jfu/pbJOcJkmiVafh+FTZHeSad8TRC1ouNy9ZRbCAMdW1c
3m4Bgr//Rsrte6gNKdmkiugE1a7ok6aRTmR+GBqT8awNaC1nQgjGMPIbomIe
TEwA27WUE2NvA3Y4jcNYZwfWPpLMdqEVifWtcfNlQ6glFaQHj9oxKCThRkLb
NFIIZ1J2hAdXtL2r6YvAX5BVObfj8UUDSDZHpc6mdAM77/j1e0Y9itz9D/cr
LCCc2JLnDpsEwf3gmBdpb0Bcei3Y97IDRDeeq3pjpuF/7OFiZQ==
                  "], "Children" -> CompressedData["
1:eJwdiWV0FgQAAO+BlDTSgjRIS0oo3SAxuhkwSvLbYIxmdI4uQQnpku6WUrok
lO4GadBz+OPuvXuXqXW3oHYxgNC40QoKDi8bCARH1I0XHVW7hoW0DwkUKNrh
44+KJsb/xOQTYjGctcYmDl+Sk7jEQ3Pwr2v8lPgk4Bf/MQkJScQHV5uYVb53
pUlJxmckJw1pSUFK3rnCVCz3rct8Y2peu9TPWWI60vPKxb70C16Ykb/NwHMX
+cxMZCYLT11oVrLxxJ/NzgIfO99HzjMXuRnAQPIw14f+5APzko/83PcrKlGZ
AvzoPQtSiDkWpghFmW0xivM1P3jXWd5xpiWYYUmm+w3fUorSVGSaZZhqeaZY
lsnethy3nORNK3DDiV53gtesQi1qU5VqXLU6V4yyBuP9jnFetiZ/OdY6jPFP
GxJEXeox2kuOsj4jvWgDLjjCRjTmvE34w76csynNGG5zhtmClrRiqCG0I5gh
nrU1Z2zDadtyykjb04GThnPCwXakE8f9nmMOsjNdOGpXjtid3+3Gbw70sD04
ZICDhnLAMPbbk1/txT4H2JsI9trfPfZht/3cZT922p8d9nW7gxhMH7cZYSS9
HcJQhhHuVnu5xZ6OIMyRjGKzoxnDWDYZ6kYDbnAc4+nheqNYZ3f/AyO8KMs=

                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{5, 154, 128, 9, 12, 135, 123, 
                   20, 65, 46, 4, 64, 106, 98, 97, 16, 50, 102, 107, 126, 43, 
                   76, 83, 94, 72, 131, 31, 104, 98, 116, 5, 56, 7, 146, 52, 
                   65, 76, 113, 153, 78, 104, 140, 127, 132, 41, 63, 33, 51, 
                   11, 156, 105, 14, 17, 36, 142, 26, 5, 150, 88, 146, 29, 
                   147, 118, 148, 81, 129, 94, 155, 155, 49, 10, 114, 78, 143,
                    87, 83, 50, 143, 96, 9, 67, 128, 98, 141, 104, 138, 9, 65,
                    120, 89, 5, 68, 122, 51, 98, 29, 69, 116, 151, 1, 151, 14,
                    85, 72, 2, 64, 9, 109, 99, 9, 20, 52, 33, 33, 59, 5, 149, 
                   113, 18, 131, 4, 44, 75, 101, 41, 70, 76, 30, 32, 73, 125, 
                   25, 27, 116, 128, 132, 124, 24, 10, 119, 11, 3, 28, 26}], 
                 "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{1, 2, 1, 4, 3, 7, 5, 7, 5, 4, 3, 7, 6, 
                   3, 1, 5, 7, 7, 6, 1, 3, 4, 6, 3, 4, 4, 2, 1, 2, 1, 2, 7, 5,
                    5, 7, 5, 3, 5, 4, 3, 7, 1, 4, 3, 6, 3, 5, 2, 4, 1, 1, 1, 
                   1, 7, 6, 5, 4, 4, 2, 7, 1, 6, 2, 4, 2, 6, 6, 5, 1, 6, 3, 3,
                    1, 5, 5, 3, 7, 5, 6, 2, 4, 5, 5, 3, 7, 3, 6, 2, 6, 3, 7, 
                   5, 1, 4, 6, 6, 4, 3, 4, 7, 5, 1, 5, 2, 6, 3, 7, 2, 7, 2, 4,
                    4, 5, 5, 7, 3, 3, 3, 4, 4, 3, 3, 1, 1, 7, 1, 7, 4, 6, 4, 
                   6, 1, 2, 4, 2, 7, 2, 1, 7, 7, 1}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwNkXtQ0gccwH/W0pW2fOSJZo18bNi00V0r19Z9SZeinR4+KvL0xFpJjzUy
r7I6ozbMHio+Uje30jKH1YymtpazLyqRT0BNIwsVBQUM5aFmqHP+8fn/c5/P
+v0/Rh+0IQgiaxFqZnTJd1+/B21BzZP2wlkkt+l2vr1uBbaN0wlgjSArlyf/
I8cCiguR9/svqlDk8jCmgDeCxbfEDndVsyh8UdAZ/bcJOeEnTTa1ZhTiXFVM
kgHottuyaeUWFIRcztqbP4bUuGK1cr0QA6kLNaefW1Cet/NAqcaMgb0LtU7S
KeS+vCZw3vwBm5f7l2xP0gK5yavDOcGCgT3SJer45zB5uOFCuJ09jUKkhByY
UAOX5z1y6kUD8jf5end0vAC+c++hVNtG4LZ0hkdGmYH5rCT5fFE3KmJ4kgbN
GLL+89+TktKJck/fOuryaaRcMrmovxlBOfdoRprrJAqYkrKYOguKDEKaQ7MZ
qW5xY8MrJ5BBiiUndY0gQy2LcpSOo0j5+nCr0YA08aaq7yPGkd+r4zcwjSia
GB44GSxBI9nemnuqB6gi/W8B6xb7/blsrileDXxW8xbBtkZgcK7wrot1SKSy
fGvnZUCypJCs3mOozYs48mDahLRawZpK/Rw+kdqf8V0uR35QYg5l0Yv1i+Z+
sp8VFBWRo75XrSjodSRlxg2CcLLu0Nr9vcgJ23tNf2cKWdKoiiLCCIJZhw81
nwwApZj+KEX5DoU5hrmReSU6ntbJCuyGkHj70T+/uuiQ/S+p6P2zMWTW7wsZ
P2RAeRm4Zveokb+EHbgq4xUy/komQrvk4LinUZkfYgZRRrVP6lINUmtk39a3
5cITDn3X1t87QPial5X+hQYpLUEzs17vMHCZ5BgzbhwZAS0fVs7cRNIJ2elW
7UskpnReX9m+A7rz2upTfqNIPzjqL3ZXozF8c9a6PikS0SSlR14rcuMjgld2
DiItYIP/ji+VWBrwKLb8pyakvzq6wsO9C43ludWga0NKD11w2O020pcYCvVv
74Eiv3CH/Y1pIBVvqIS2YTRG9Lm5qQaQ0+hj43rFjOQtfqGZd4qAG7pravWQ
CfhVgnrPdhUyNENx6T7DoF0FtZ/Rp4GoH5MP/DAM5KexPKufCqnJ66bcT4iB
lr4+0TtEBZS+c+XEWROQPu5aMysxQ6D92scOSRps3kg4JzBNQL/XtPuiVAaC
NedvXM0eBObd9lGHbDGWNnlJPa1aZN8m3fN4342cVddmavxGQXEuoTJNpgZ2
mK16Mmjx03jNkYebB5H8YPXnmV2DSEr52fomfwIEjrtnbKVdSLF1e3TuuB6E
5Yln7RhDSDlWwV6RIwZ2IUm9cMkMjkPM/Z5xEjjTlNj/MGwGKDFJLzc+mAJj
gudW58sGpN56XJ96XQkc1SZypcMbIIsswVUV3ZDZVy0q0yMQLi39rdvn4Yx7
WuPZ471A6CvTu8kSpAR9Gu8UOgdyydOom7Hz0O7tkcFNt6HRJPts0pjzwOxT
aMOWaoEVnMXQKQzAdvFv7w9agP8B/H9fmw==
                  "], "Children" -> CompressedData["
1:eJwdiXWYDwYAQN+nbWJymJzO6encdB6mxhxOx/zuOKedjtPd3WaaYdOx2Sx0
m+7ueI4/3vu+971MLbsGtYkBhMaLVlBwePlAIDiiXvzoqNolLKRtSKBA0XYf
flQ0MT4Sk1jERgfzzrXGIS7xiE9f+vEJn1KAgrz1ZxOwxoQkIjGfkZo0vPEn
X5uEpCQjOSl45WpfusqUrPRzVpiK5b5wmV+Qlnx8RTrSk5NcZCAjz13qMzPx
JUt86mKfmJnHZiEr2XjkIh+anQfm4L4LvecC75qbO+bhtnm55XxvOs8b5ue6
cy1EYYpQlGvO8aqz/ZpZFqM4V5xpCUrShxlethRtaUdpylCWcjTle8pTgYp8
w/9O95LTvOhUv6USlalCDWpywaqcd4rVmGx1JnnOiZ61Fmec4GlrU4fxnrIu
Jw3ihPU4bn2O2YCjfsd/NuRfG/GPjfnbJhxxnM0Y6w+04C+b86djPGyUwYz2
D1vSilG2ZqS/G8Ih23DQER6wPfvtTQc60onO9GK4XRhmV35kn0Pdaze604MA
oexxiLsNY5eD3ekgw4n0N3sSwUB/dYA77O92+7nNvvanjwPo7S/2ciARRtLT
QYS71R5ucQibHcomhzGcEYykuxsdzQZHsd4wowh1nQHfA9OTJM0=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{143, 113, 96, 128, 140, 155, 63,
                    132, 146, 72, 9, 14, 53, 9, 13, 97, 150, 8, 11, 1, 96, 49,
                    151, 123, 10, 5, 83, 143, 153, 89, 79, 64, 126, 16, 14, 
                   54, 101, 24, 152, 68, 42, 147, 131, 50, 151, 104, 135, 71, 
                   94, 5, 143, 39, 9, 109, 65, 90, 38, 137, 63, 5, 73, 77, 36,
                    107, 33, 32, 113, 115, 2, 132, 3, 119, 29, 111, 28, 22, 
                   82, 61, 39, 154, 128, 138, 140, 127, 7, 139, 70, 76, 96, 
                   72, 76, 65, 17, 7, 5, 50, 65, 98, 18, 116, 2, 31, 72, 145, 
                   98, 133, 21, 102, 4, 114, 149, 75, 116, 98, 5, 71, 106, 
                   136, 7, 29, 4, 133, 76, 39, 1, 11, 33, 33, 135, 118, 126, 
                   9, 50, 3, 11, 126, 97, 26, 112, 26, 16, 27}], "RootIndex" -> 
                 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{7, 6, 4, 5, 5, 5, 7, 3, 3, 3, 3, 2, 7, 
                   3, 3, 6, 3, 1, 5, 5, 6, 5, 6, 4, 3, 2, 3, 4, 3, 1, 3, 7, 4,
                    1, 7, 3, 1, 2, 5, 2, 1, 5, 7, 5, 2, 1, 6, 7, 6, 1, 7, 2, 
                   5, 7, 3, 4, 2, 2, 2, 7, 7, 1, 4, 1, 6, 2, 1, 4, 5, 2, 7, 6,
                    7, 5, 2, 1, 1, 7, 3, 3, 4, 7, 5, 7, 4, 4, 2, 3, 7, 1, 3, 
                   7, 2, 6, 1, 5, 4, 7, 3, 4, 6, 4, 1, 4, 5, 4, 4, 5, 6, 3, 6,
                    2, 3, 6, 3, 6, 4, 5, 6, 4, 5, 2, 3, 1, 5, 2, 2, 2, 2, 6, 
                   3, 7, 6, 6, 1, 1, 5, 3}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwNwwlUkwUcAPBPBRunK1EwREBBpiFSgWwc/oeUzVJZCrwJ+B4axSVH4jNB
sWmGCwmnqCzxmOQxEUh7qNPUPzjxaECjTRj3ho59bLB9k2PDB1i/936+O3O3
fDuLIIiS/5NK49XtVTNIOMcdXnXkFnAaGpexMmTANHTn+514DZcLh5fcnibY
Nt/sop09r0BUu+hIYdko8s/avz1R1I2ca8eahqe0qAh33DDRokIqTcbuU+uQ
b62nVxQ9RbH7/PEOfjuI7o1tLpl4hZSy2EB46lEyK7T8DEgxhX/Fl4zRI5n3
9egyh1EUetf7QWc3+GStnrdKN4npzKtR3DtjKKikGPJiKwbnukRWSSwo3t8v
2lVtRXGFt1V624pUaEp8qPs4Us8Zm8LME5i3vGQDd9UbFAawth7+jkLxaBjd
J20CJV4nTemlIyicaVw7VTWEEuJRBt/XhJzUgq7dfhNIy6Ipk5eOos96L4PX
gBE9FjjIptysqAkQti4NqkFeWQVrUYsGeRGakNjocRDMTpUFplWDINx/qDi+
CfZVnN5BBpGgvnG9l+gwoqDDZa6j3ASiocUF9c0jqFH8aJ9/QYuM6dHoc716
5BTrc+xSNaiY+8nDsLMU0vbbFrrGjoAkTVdj90KHHpkrH3nTO4DN0Xc8MNuA
MDnPJEl7QV0SXbM+XgYeF07JButNQFNdtp6P0QINjW41t9ohPa3yakXIv8ik
/2x8FzQJwcmh7kJ6P/A/O3d80ihHykVpr1wjB+7yH1jl9s3I/XV7oqdei5TB
/KLJ0Ik20webLx3UIzf62fY39/SoGWrijbx0ZbOTR0QrdG0giBR9urBUCxw3
Qd1jagzVe2o9C891IRWSExvZb0JGrFh+Y0UrKnoTFh9d1wc0p5Dguxo9SM9v
1jhm9yKdUzsdWU0CX3f2GIvZg/um9vrGRw+j+C79OO/da7C1P8twlRpgX3NO
nTixDxvCS8NqWWaUkllHLY9/wpQ6z8hcfis+MUPlifcJdoPi0BduxFsIthiG
eBEDoEmcdI1ZQAGH3FZr8B8Hxu5NCWN9OtB0kYm79iqR4PVfcumzgoeP9FRs
oR5ItarF+aIOiK+mD2SiBYUb5WGJH6ph459R/nsj7djMZ3HzT15XQsqcmCtl
jW0o2uBw/6+bViAkW1kXSzuQ3edlMT61geB+zUzAbyQIdJlVTsltyFgSqBpf
bQVpY1NeXRkJzIQAVmv2FKgLnOf0LOwEvuX87+ZtKuA6OqQH/mMBdkTwcMKh
NmS7pl75fE8V+kRzdN9btCCNiBpIWjcA6de6JB8/UKEtaw2ru1ABKUYv/yLZ
E+S0DJwOVw4Cu/Fm+UNtD7BDPU7L4yqRIeDmXvtmBG/yDj/Y9l4b2ubdDVQ7
/IHPl7388rY/CSJm0pagM08ghXMnN4pfic+H16pVS3qBlt/+ywuLGRp2BFN+
5UYQqioO8mcPga3oI+8CJw1Q4ZZjkD8MtsLyA4q/B8FHwcrLWjkI/wGeblSY

                  "], "Children" -> CompressedData["
1:eJwdiVV0EAQAAO8B0t0dAtIxOoWBioTE6GaD0TlijGZBTBAVBUVRuhulQ7q7
uzuVto7Bx9179y5PSJ+gzvGA/onjFBQcHhgWFhzROElc1O49ILRLaFhAua7v
fmwc8d4TH11tAj4gIYloSzsSs8r/rUsSkpKM5BSlGClIyX8WJBWp+dcCpCEt
+VhpOlb4j8tNzzL/NgMZycQbl/razLwyC1nJxkuX+MLsPDcHOcnFM3Pzlx/y
p3l46mKfmJfHLjI/C33kRzx0gQ+cbyHmed/C3LMId53rHedYnBKUJIDPqEUp
ZluaMtx2lmUpR3kqcMuZ3nSGN/zVivxiJaZbmSpU5Wev+5MfU43qTPOaPxrI
D161BlesyWU/4ZKfctGpXnCKn/O9tfnO89bhnJOtxxec9Vvr04CGNKIpzQji
G5vwtWdszGknecqvPOlET9ic47bgmC1pxQRb86VHbcMRY21PBw4bSzAhjGG8
HRlnKJ05ZCcOOtYujHEUozlgV7rRnR70ZL/D6EWM++xDb6Lda5R9ibQfYfRn
tOGMcgAj3eNAdjuIXY5wp4PZYQTbHcI2h/KHw93qcLY4gs2OZJPDjGSoUUSz
0SFuMML1xrDOwY4l3LWOY43j+d1B/uZA3wIMuR7Q
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{76, 154, 65, 75, 106, 9, 19, 
                   116, 150, 113, 72, 145, 46, 110, 76, 5, 20, 140, 148, 2, 
                   13, 72, 152, 64, 27, 84, 68, 98, 17, 84, 51, 151, 18, 7, 
                   38, 39, 91, 76, 45, 67, 53, 76, 92, 4, 3, 69, 105, 29, 26, 
                   26, 8, 24, 52, 128, 20, 83, 133, 26, 56, 122, 109, 147, 71,
                    57, 138, 137, 49, 141, 9, 104, 140, 26, 16, 86, 27, 30, 
                   132, 73, 34, 110, 15, 131, 98, 63, 98, 72, 31, 5, 5, 81, 
                   59, 51, 97, 14, 143, 98, 27, 46, 42, 99, 44, 80, 43, 98, 
                   13, 13, 104, 104, 151, 113, 16, 54, 76, 15, 113, 143, 111, 
                   50, 117, 8, 155, 124, 133, 142, 21, 146, 144, 127, 135, 32,
                    48, 11, 147, 83, 11, 118, 61, 28, 124}], "RootIndex" -> 1,
                  "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{4, 5, 1, 2, 5, 1, 1, 5, 6, 1, 5, 1, 7, 
                   2, 2, 5, 6, 4, 1, 1, 1, 4, 5, 2, 2, 1, 3, 6, 5, 2, 1, 2, 1,
                    1, 1, 3, 2, 3, 5, 7, 4, 1, 6, 2, 7, 2, 7, 1, 6, 4, 3, 3, 
                   3, 1, 7, 3, 4, 7, 3, 4, 3, 2, 6, 2, 4, 3, 3, 4, 2, 7, 6, 3,
                    7, 2, 4, 2, 7, 4, 6, 3, 5, 4, 7, 7, 7, 2, 4, 5, 7, 2, 4, 
                   6, 1, 1, 1, 2, 7, 4, 1, 2, 6, 6, 6, 5, 2, 3, 6, 2, 6, 6, 4,
                    4, 7, 5, 3, 1, 3, 5, 1, 6, 3, 4, 7, 5, 7, 4, 5, 6, 1, 4, 
                   2, 1, 1, 4, 6, 5, 3, 3, 4, 2, 1, 1}], 
                 "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwNkn1QkgccgEkrzVpjWkbXLDVLcqfXdVvSx/oRp0aWiagIy077HFpTzK2Y
fezd7IPKtGtl6GqHqcVIS20V1fKnlpuVH4izMNNeEoqPVFAUmKHzj+f/5557
AnZkcndPoVAo+ZOQe/5Za9WPo4iRMrHlSTdKjL31nnFWMOyO9Qpi2VAUxV0Q
esKK8plBxF9F/yH1WmtCXrYOSFqzwY07iuy6xtKr6nfoaKhL7hv5iCK/VepT
SaPoP3Zj+qr9dqT5JEZ4KI3IeW7S6kpJFGUfMc/bYkBifSD1h3Ir0gLmX9l+
246Uls+/zMzsRf9usdsfm0aQnvRN5c/DNrQMeGV0FNqQfjy+qXiuBWkHG8vu
uE96zVjhKrg1jHW/HG8rFFpQuaEk9rttepTFp60+TOiQcmLb+PobRlDaT5Y+
m6FHT9WaTUU5A8gR+CkG64dR84brofQaRknIlffVp0fQccDpu85tEM/llZfO
aXQgWejjzusbQf8PimOX4myolOpi6bFWZK5kW+QcEpn7mDxDthElYc0ZiuBO
kA06DEuzVCB7oW3KD5Lh8rirUHNUi+Lk4njC2I9khtG/9tcBoBwqbF2ytgc1
l0cEkgsdIEt2tl10b4BzgqGvedG9mJoePJ+XaAJycdh+R2AviPcNjWcK+4Cp
kHEXtXWBzF7N3TlVjRLb1p2Rwi7wpy45W23XIM2dPdIaaURCnyJS3R0EKYWb
y7pgR1VFQXZsTj/IHobMOh//GGjhg/cN6iGoMuaoQjoeg+xGxbprY3dRPlBQ
W2KuQUb+T+NH1/QDP7Tk/jlXA9Txrfj0UQ868nLfZkn1QPHpXenj9xwZEyFW
1YrJDq4NQu/Q9yAXPnvxW/EQMlip7fa4f5G4JEh18vRI7K1/cshsw6qpj1ob
OodRnu7yjppOAmM2j2uLVqM4/jA7ItEMwtTasFNPa0CcyB3faB8AaUuJz52F
w6iaHT3dmGYB0VefiYSUD8gPmFW7mNsCMuVul7ciDxguQU5IvgloLO8I6+Ye
JE1716bMmuxwIPfWre2VILKVdTe87Ab+0vYFnD2vkUjuupzwQIPE1O/Fq2+3
A0cxI6V2mh5obyMSK6RWtDzkB/iW9YCEDHI2NjWDZVGUB02pRcsCZXXFTj3W
LayXmnUWkIUezHr58hHSt5q8iNxBoP6YzE1X103+VxmZ5WEEYqPD7nxnBUb/
7CPpaTrgV8kvH3tmBupqVuObm2+RX0pd5FHdhZzEe0LCNQaUiN87lo9rge3W
X2h6rQDDirG53z5oB1UX/5XmYguo4pYtp+8ygFDg/Pv0sjdASZs2R3JGhgz/
pH5WSCcqm2POH62qAmZU38nAjBfIpIdv8r1vBlpXUsxErQEo2psJO8QmYFD1
Wk+nDuhRo+6vUl0gLd8xcEYzBhZiHf0L4Vmkh98jPxFqUd7hGcad6AHOrqdH
1MVDQFsys8bvuBbJ6wvlE5s7gV1Q86osphU82wQMZdEoGOaJAlXzRoEtvf7p
GvIdaBK8/wyP/gjC4MqMbSwXHOPtdU8JmML8H/dUZ5Q=
                  "], "Children" -> CompressedData["
1:eJwVkmV0FgQARe8BlJSQki4FpLtrdCOjmwGj89tgjB6M3kCRDgUJCSWUTlFC
upRGaQy6+zJ+vHfPO/fvy9GpX3DXeEBYorgKDokICgRCIpskjht1+oaHdgsN
FC3V/b2fEpf31HjEJwEfsNJylOdDEpKIxGQiM29NQlKS8cYVvvYjXpma5KTg
pctNyfemYpkv/JjnLvWZaXhqWp6Yjsem55Gf8NAMPDAj911iFrJyz8VmIzt3
zUsOcnLH3OTiO2/7Kf+7yP/8jH9d6D/m4Zbf+jn5yE8BClOEm37jDQtSiAVe
d75FKcY1S1GceV61BFec62VL8rdzLM1s/7IMlyzLRWd5wQpUpBLnnWllZhjF
aKoQRFWqMYzhVKcGHZluTWrRitbUpg7nbEpd6nHWhpyxPqf92j9twB9O85SN
+IKvbMyXBjPVJkzxpLGesBnNifG4LThmS4462SNOsg1tOexE2zHB9oz3kB04
6DhD6ERnunDAUH53rPuNtivd2OcYu9ODnvRir6PdY2/60JffjLIfo/zVoey2
P784gAAjDSOcXQ5kp4PY4Qi3G8E2B7PVSLY4hM0Od5PD3OhQRzCSDY5ivUP8
2UjHMNhoxvKTEa5zHOOZwFoHucaBTmQSqw33RycTQ2zcZ8L8wYCrHOA7decm
zA==
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{92, 12, 6, 128, 142, 20, 79, 98,
                    140, 85, 78, 9, 18, 9, 133, 14, 78, 65, 2, 72, 113, 5, 
                   132, 1, 64, 9, 1, 8, 65, 98, 91, 27, 9, 97, 104, 87, 39, 
                   67, 133, 34, 116, 76, 76, 70, 92, 116, 11, 35, 41, 24, 143,
                    38, 16, 128, 64, 1, 50, 50, 57, 72, 147, 150, 145, 131, 
                   94, 66, 75, 129, 54, 77, 147, 98, 156, 71, 85, 116, 96, 52,
                    16, 111, 83, 97, 49, 119, 26, 3, 9, 84, 98, 120, 10, 19, 
                   148, 148, 76, 110, 150, 7, 52, 86, 140, 84, 11, 18, 3, 113,
                    98, 33, 76, 53, 88, 1, 67, 70, 31, 154, 36, 98, 126, 7, 
                   143, 10, 73, 51, 68, 149, 104, 27, 59, 48, 33, 4, 113, 29, 
                   117, 124, 143, 50, 125, 126, 16, 22, 26}], "RootIndex" -> 
                 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 7, 3, 4, 4, 2, 6, 4, 4, 2, 4, 7, 7, 
                   2, 3, 6, 1, 2, 2, 2, 6, 3, 7, 2, 3, 7, 5, 3, 4, 5, 1, 6, 2,
                    3, 6, 5, 7, 3, 3, 5, 2, 1, 3, 7, 5, 7, 2, 5, 5, 2, 2, 5, 
                   6, 2, 7, 2, 1, 4, 3, 5, 5, 7, 1, 4, 3, 5, 3, 7, 1, 1, 6, 4,
                    7, 1, 2, 3, 6, 2, 1, 6, 6, 3, 4, 1, 7, 7, 4, 5, 4, 4, 2, 
                   4, 7, 1, 7, 7, 1, 3, 3, 2, 5, 2, 5, 5, 1, 5, 5, 2, 4, 6, 2,
                    2, 2, 2, 2, 5, 1, 6, 5, 4, 2, 1, 1, 7, 6, 5, 3, 2, 6, 1, 
                   3, 3, 3, 7, 4, 6}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBTQSy+yFib1JlAQAAAIgAAAC47p5oJATfP1hALlFh9d+/GD8aYcA2+D+w
wrxoiyHYP/hEdrUrKcS/EDAT8KVq8r8IZjA9FTXLvyhB3Rb2Yuq/2KhhOMMZ
8L8oA4YiUDr0v3jvLag2EPq/wEO2fGi58b8ou4Wrvcfgv+AyVZzu392/yDfs
lQsE4r8wokC0+9Txv3DpyYTKNva/yI9+D/Ud6b+Qtcq43K7rvyiDMQcSTuq/
CEoQ47kU679g0OIH+AD5v4iU0vxbAOO/oBQWPoc78j/4CovMSifnP8j0BQlm
XfC/AD/7oO2j4L+45ct1qGXDvzCn+9Q4CQtAeDTAnIyB5r84MP+0d8Xzv3C6
PH41Hd+/WHu67eoX179gukch1WDsP1jKluOEpPw/IHlcO7za4L/4VHK+JTzy
v2BW6/eQc+6/0KfyiZiW5T9YyDwiwyS2P3gX/RZqR6y/6A6Tlhbd/b/QCqeg
OJT5P+gTFTx9Rfg/QOaYMICA8L/46mQxkZr9PwBE5UhdHPm/mCTjK6x51j/Q
TDqaQYr3v/giSYPn3u6/jBnMNE+uAMBoXuvJ7Qruv3DRbN/8NuM/EHfpz5QH
4r+wcsW9dQKpv8ggzeDUve6/IEEvVh4Uyb844O0xNyP1vxCAIVR9K7S/mBpR
eHgHq79YqGUGupPnv+DCDbE2BfM/6AgE3Gi89b9wiIYbjE71v/gqWzhVy+m/
OLSAIPthtL+AbHlEChfgv0j3QafOQO0/iBh2S/V3kT8IGq1Fy47TP4BeOryW
QfG/kNiXKJqT4b+gb7dBW+X9P4jhK0171tK/aEBoP/rvs7+Q55rE53Pnvyyo
Cdy8ngFAnOQVRdpWAUB4TyHvzBuWP6gpXDJfDtm/cBtinFYS+D8AyZY0Hmjy
P+BHajmbSbW/4IrJaSbz0T+4L7l3GlXxP2h9WgXpy+c/YObWVdu0sj+4yEF2
/43NvxgncdBtKrI/eAWdnK8X2D94SmkYPV/oP/gEG7NWOO0/2OWY/xwQk78Q
WwsWXyXVP/hQjEml/fS/CDJ6vhyc6j9g9bB/Q57xP2CIL+JCfPM/sLXaQB/f
zj/wqZzbnOnnPzBuUjNPVOA/UGc6BBeYtz+YwwxNZjvgP3A2mf5cIf0/EJOl
Le3J4T8ArvGmYt3jP6APKPpNO/c/aARoqT7fpj94ojBQIjvkP5j+1GSGZfO/
eCaZFG425b8I6LeXMM3Wvzh9gMSS58m/iPq/MjRSsL/g+zylkZbbP3CVgIeY
QPg/cCvWQ1Iper/Q7UOmHau7v3i9Gx9BSe0/0OH5q6eWj78gGxu+B0/QP0gF
NoxFT/0/gI2O5SBE/T8wXsJeo4fqPwBpBRSIi6C/eCbe3oS25D9gZTcZzdze
PzDp40ogVcm/0PdlBKtW+T+A4CSveEn9P3D51UzJtAVA0DegTF8k/j8ocKvt
Oaf4P9DGulGeVP0/kK7Zd1sE4T9AEdHSzHCPv+NcO38=
                  "], "Children" -> CompressedData["
1:eJwdiWeYCAQAQN93obuMCNl0aViF4hBChEPiLjPr5AZxlzPOcWecW/bILntm
Zmak7IyGnT2iKNmr/Vx+vPd973vBXePCogKAPoFZCotIqBcfH5EYHpQVobF9
I6Mj4yuHxPz/M7MIeMwTZCM7nelCDp6kHOUJJIgSlOQpNpiL3ORkvbrO/1xr
Htb4NHnJxzP8ayH+MT9/u9q/LMCfFuQPn+Whn1uYIhSlGA9c5X2Lc8+V3nWF
pVhuaV7gjs8RzPPcdpm3XOqLfOZNX+KGS7zuy5RhsWVZ5O8u9JoVaEJTXuFV
KlKJ3wylMq9Rhar86utcdYFXnG8I1WjEPH9xrtWpwRvUpDZv8rNzrMVsLzvL
S9bhLerzk3W5aD0uONMGvM15P/Wcn3jWhpxxhqdtzCmne9JpNuMdTjjVH51i
cyb7LpNsQUuO+7FhTDSc9zhmK47aida0oS3tOOIE2/M+hx3vITvQkXEedKw/
OMbvHW0EXRlGCt85yg/oRiRRDGWk0cTQj/586wi7k2kPPqQnvehDXw6YYSzp
7jeOfX7EXnvzjfHsMc3dprrL4e40gR0OYLspbjORrx3IIIaZxFCTGcxXDmGr
Q/zSwW4x2eEkmUY6qQxyswPdZAYbTTSTAX5hgo8AVBga0g==
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{113, 53, 154, 20, 17, 110, 10, 
                   13, 140, 50, 7, 91, 72, 128, 123, 155, 140, 132, 56, 5, 12,
                    18, 19, 98, 87, 72, 15, 151, 153, 37, 64, 116, 72, 99, 98,
                    148, 98, 5, 98, 78, 128, 71, 88, 21, 5, 98, 7, 16, 152, 3,
                    154, 2, 1, 67, 39, 5, 92, 113, 146, 147, 53, 50, 143, 73, 
                   144, 77, 115, 61, 52, 83, 26, 26, 47, 133, 150, 9, 27, 65, 
                   65, 7, 84, 76, 151, 139, 86, 128, 10, 52, 74, 127, 10, 98, 
                   5, 150, 79, 113, 98, 145, 31, 90, 98, 151, 75, 9, 3, 24, 
                   116, 152, 131, 85, 9, 65, 109, 14, 26, 97, 75, 16, 131, 1, 
                   51, 32, 15, 33, 4, 68, 25, 117, 140, 58, 29, 111, 82, 22, 
                   112, 119, 50}], "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{4, 6, 2, 2, 7, 2, 4, 1, 2, 5, 7, 2, 5, 
                   1, 7, 5, 2, 1, 5, 2, 6, 6, 3, 5, 4, 3, 7, 5, 2, 1, 7, 2, 3,
                    5, 5, 7, 2, 3, 2, 5, 4, 7, 5, 7, 5, 4, 1, 4, 1, 3, 7, 7, 
                   1, 7, 2, 3, 6, 4, 7, 5, 4, 5, 4, 2, 1, 6, 3, 6, 7, 1, 6, 5,
                    6, 7, 3, 6, 5, 6, 5, 3, 5, 6, 3, 4, 7, 1, 4, 2, 6, 6, 2, 
                   4, 7, 1, 7, 4, 6, 3, 7, 4, 5, 6, 5, 6, 5, 7, 5, 5, 6, 6, 4,
                    4, 4, 2, 3, 1, 2, 7, 2, 3, 5, 6, 6, 7, 4, 1, 3, 4, 2, 1, 
                   7, 4}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBLQTS+yFib1JlAQAAAIQAAAB4oCWRZIbRP+jGdyC0K/U/sJvWBePv9j+g
W5U7pHTyP9hwY2Uw/dM/4DeQnJZr1j8YedZDG/vuv2CfXP2B2AHAOKf13UqJ
1j8YOlmkhrnwv/hJy7vq64Q/CDaeAMFP1j+46oe+spjxvyjh6FgbZtS/6Dgm
JUhg67/YJqESTYL3v3CRGD9GWfS/4CLepPSw+b940dRksET2v6CsO4HEdPy/
iLZu90JZ/b/YXUIzC2T6v8jcsLbN6JU/UPoKPZ8R77+oNdJtQurjv5ipWTq6
oZI/8GuaNwVH6D8wtXNRtKXWP5Ac6wey17k/8HZ7mgZaz7+YkAs+GAjUP8ha
iDO4GfW/iCRZrVIK+r8IwqCSPdPuv3gBWckLD8i/CKuKWRn59L+470K4NmbI
P0A8L6ri9Mm/AHGk4ckP57/oVFQALGrsv4j60gXW5+2/eKhNuIFT6b/gigvf
Y5DnvzDPdV5ZCN2/mLFxuPFE57/AznnT3BHLvyC+SKsrruq/QGMqmwvD6L+g
I8Un+8DTP6B4PsbAXdu/sONvRrp++D+oEwO1zLLqP/C+vEX40tQ/AGRXN0tE
+T9Qw8xrHnbQv/DflIGLtt0/8CddH6/Qur8wt7akoWLCv8DX8BKdVuG/qAzJ
nzhftb/AGF8iXLawPwjALWopteA/yO6/zyAHwj8AeBOU0Mu2vxg+P7kkRPE/
IEnhzybX6z+Y8qRi4Xr3PwgBcHtzyvA/mIDXwnVjyr8oDGgrox3SPyh4aQ6f
Mt+/MHXftYUjuD9491dE3lG7v5AMNsVLDOi/0Bjq+9eB2T+QJE4NQmjpP8Br
LSTsiMy/QDf8Xwwz0r8wvHV/mBvYPyiD23SoNs4/8AscibhF0r+QesO+lXfm
v3DUIX1+88m/uMW8mEtS0L8gmv5MdVTzv5BpRPSd8/c/2I6wiPYb/j+4NEmB
DBLQPzALkNnSXfO/CBbBVMIH2r+o+4q5FeHuvwAUg+kGTOc/sKNvMkYW/r/I
MUZ51PrGvwj16KCgKvO/gLlWQFoI3z9QCdgfX6LuP9gwrzR1xuU/AIHiiw9c
8L/oBGqX4fj1P1j/Yzcd6Ne/qCztClU05j+QPMvJKCD0v7h+hIIgUuM/eHms
qieP8j94q8Duhfrwv1A1jPC38vs/8OetRlwq6L8oTWVp4IbYP+gI/3HVEvW/
nJKP5i6bA0B4kiV5n7rrP9BEM0sUo9M/uAMU3ZvM4b8IRxj0cJfiv3BclVeq
Q/E/sAURqH2q0z8gYQ6ZWw/zPwAavQe0cdY/6PC4g8RNA0BYlLtIWvIAQMCJ
t6yMnvY/wCX/V1b737+4hPR0vW/tv+h08MnZJes/YNJtXFVa6T/AEtCf66fO
PwgthT4eme8/AFSbWOke5T/wOvGLP3PsP4gKEtNS7ec/gKw0o/jo8z87MDme

                  "], "Children" -> CompressedData["
1:eJwdiXeYDwQAQN939opsZZaV2VGXsinZ4y5khLvcyO5nnHN3HM6okK3sncqq
jJItsvfehIyQPes5/njv+973ikR0D40KAnqmT1FoeGzNQCA8LixDStTr1isy
OjIQHBLz/CenEPSCVKQmDc1pQVrS8RErTE8GtCn/m5H/rEUmMpOFl8jFcrOy
zJz8YjZe5qnZycHPPvEnH7vURy7xobl5YB7yko/7vsLbhPAqi81PAQpSiGAq
UJhFlqM89yzCXV/jjq9TlIXethjF+dES/GBJ3uCWpfjXsty0NDcsw3W/9x8X
eM3vvOqbXHG+FZnnZef6FnP829m+wyzfZaaVmOElp/selalCVS5agwtW4y+r
c95pnnOqZ63JGadYm/f5gMme9lvr8CF1qccpG1CfbzzpJE840YZMsBHjPW5j
jtmEo46zGaEcMYzDjvWQYzzoaFvyMYMYTCta054OtKEtB/za/Y7yE9qxz5Hu
dYR7DKcXvYngUzoSyW57EEU03fjKGL50l1/4GcPtRGd22oUdDnO7XdnmULfa
nT8d4ucE2GJPNpvsHw52k33YaCwbHGRf4ujHQONJcr0DXGcCa01kjf1Z7QB+
N4lVDuQ3+/uriSaT4ErjfQYIJRLW
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{96, 96, 98, 151, 6, 9, 12, 143, 
                   76, 65, 113, 92, 16, 110, 13, 5, 76, 153, 106, 72, 5, 67, 
                   98, 116, 92, 38, 53, 13, 71, 50, 143, 46, 33, 148, 68, 42, 
                   45, 20, 54, 98, 146, 13, 129, 111, 138, 138, 78, 123, 1, 
                   132, 128, 8, 39, 7, 133, 78, 11, 26, 124, 35, 147, 49, 83, 
                   140, 122, 127, 57, 71, 136, 143, 135, 16, 61, 113, 76, 9, 
                   18, 98, 27, 5, 19, 16, 9, 54, 129, 79, 1, 51, 76, 33, 88, 
                   51, 107, 116, 3, 143, 68, 126, 50, 9, 29, 26, 101, 75, 69, 
                   50, 99, 150, 98, 91, 151, 146, 132, 141, 155, 75, 133, 11, 
                   10, 144, 1, 135, 141, 14, 32, 29, 3, 82, 29, 22, 27, 117, 
                   27}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{4, 5, 5, 3, 7, 1, 5, 7, 6, 3, 2, 1, 2, 
                   6, 2, 2, 4, 4, 2, 5, 7, 3, 6, 6, 2, 5, 6, 2, 5, 4, 2, 3, 4,
                    2, 5, 1, 2, 7, 4, 1, 6, 5, 3, 6, 1, 6, 6, 5, 7, 7, 2, 4, 
                   4, 7, 1, 5, 4, 1, 4, 6, 3, 1, 2, 1, 5, 7, 6, 1, 5, 6, 1, 4,
                    4, 2, 3, 5, 2, 3, 7, 2, 4, 6, 5, 2, 7, 2, 6, 3, 2, 1, 6, 
                   7, 5, 6, 2, 2, 3, 3, 4, 1, 7, 5, 6, 3, 4, 7, 6, 6, 6, 4, 6,
                    7, 4, 6, 7, 5, 2, 3, 2, 6, 5, 6, 7, 6, 6, 4, 4, 3, 3, 7, 
                   2, 3, 2, 3, 6, 4}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBTQSy+yFib1JlAQAAAIgAAAA4Mnv4pFKFvyBrLw8t5fm/8NQAnWMH9L/I
rWzdGiPtP8giAPaAg/s/kCnKHTLg4D8YKioNVYryvygeBbgEJv4/wG9HwYkV
678QMuibGlToP1BXOKLULfm/2K5g9jd/+L/IWogzuBn1v+iu3k9DBvU/kLLr
q1Rk6D/A/Bhg/JrCP5jiXFxkofW/oB/U7fhq6L+g7xZ5giXxvwiUhC/F88y/
OIklBO8s77+gsjRv9WDiv0ivjtRtnvK/EK8az8PA9L/YomoTTqnmvxjcPwbH
sNe/6BQBf7CD9L9QuYynOZ3rvxB+Gs0t/vC/kCQ6RVnqwL/olxU77tvIv8AJ
WtGuPPO/gBegqF7Z6L/wya0oH3Trv1AK9LfHNvC/MAUMbemn7r/IFkiF28PB
vwDG9nQDHsw/QFscy1Zj1L9YPjFLoujmv1jwy6LtN8u/eIh+6M2Z179IYxvA
na13Pxjh8eH0Tcy/cJ8PadkVx794zcYztMLrv1DgqAYcDcy/WMxBvzGO5j9o
sa4MGjXcPzhYy+rbT+G/0FjQYwkg1D+AOGLk7QjUv4i0xU3dbs6/8H3SX5Va
8j8YPj+5JETxP7jRO42cDJO/kHSxgT1k4r/QZUBGtVPjP4ASer0THuC/KIlc
JcIxy7+gfwMWOKzxvwBWkdx/KuI/8Gad4scP9T8YymeNHDm0PwiqS7a6kcs/
UOIetWrD+z9IPFDXKe3xvzCIUptEOfc/4H0KvrF38L9gZdqgjrrNP2jAMXPe
isk/iDGO60msir+IlMbnv0LOPyhqfw6pAPa/sHvSpLXAwL9wHTnSiVf2vzCm
OtxqHfU/uOmkMLCQ7r8gqoNZ4cjmv3DA3Pwzi+s/6PCR/f+aCEAo0nZgMhjj
P5gL8hOnB9i/4Lw8qpiK8j8MLn8AtAcAQDABDoQ+ofI/uMpM7fFR+D8wfkta
ajnovwiNDXC3tcE/ODmHdlRytr84KAxEjRHov+hniTJlAJy/SBXlcQ7l8r8A
wlxGzCD3v8gRcqvwfaU/mIeBOPG+678oH8GYHNbiv3DQcChNhPc/4Et6qAGv
A0D4Dm4dS6HyP6ir3ZuErvo/OHVvXlKP8L9olBTHkBPlvyDOo91/wuQ/gFOK
o6F1+D84O/YUQYjzP6jdowvYU64/wJLuz1ZVmb/YV8LGSsfOP9A9a2J9U/U/
aJX+9pFqor9AfZRbM7Htv5B286mFatM/MOreinCE7D8w/Q0oYtHHPwAG7NfF
i/M/CI78xZrJ4T/wyoXN8dDAv0BpezK1scM/kIZ8jraL9j/I7TqbUSnLP1Av
JtYmPq0/iLCQ1GoM4r/AJrdlQWbDPyg6Vv8X1PA/MJrUo4jy0j+gzoAsqwD2
PzjnUVfDMf4/8I9qSqyU6L/4PfFtF9bqPwBnu170tPI/WKtPA8rj3T94Y9IX
2/YCQBg2Q+J3MfY/EDwvUFDFvb+Y0JgSDv7gP3pPROI=
                  "], "Children" -> CompressedData["
1:eJwdknl4CAQAR9/nyIZyk9vIfa4ylfu2cmRuCRs7OmzaltnJNmwoV5Szi0I5
C5XcZ+ikg9yKUKjchWf88X7f977fvy8oIi4sKh+QEJA3YeFJbePjw5N7BeZJ
aGxiZHRkfHBIzL0/N49898mPFiCUpynIAxQigPZ0IJDCtOUzi7DOB1nrHYty
2zXe8iGKUZwSlOR/P7UUpWlJK8rwiWUpx3+u9mHKc9P63LACj1CTiqzyupWo
TBWuudKqrLAaQVy1Oldc7mVr8K/L/MePrUVt/rYOdanHJT/yoku94BIb0JBG
NOYvm/GnTTjvowSz2HN+6Fkf43Ga8ochnPEDT7vIJ1jo7z7Jbz5Fc973lC04
6Xue8F1b847HbcMx3/ao7TjiAg/bkS7M91c70Zl5HnKuB53jLz7Dz3ajK7P9
ybfsTg+epSc/Oo4w3rQ3szxgL/Y70z70pR9v+IPZ9GcAA3mOTLL43hkO4nkG
M4TvHMq3TvcbpxlOBF871WEMJ5Ip7nMMUbzuXqPZYwwv8CIv8ZopTPZlRhDL
JEfyCnFM9Ctz3W2O8SSQyARHkcSrjHeX49zpaHaYzHaz3WaWqaSx1Uy3mE4G
Y93sGMeS4SbT3WiaG0z1S1MczwTWm2xOXh1fONrPTfIuB7Ea0g==
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{9, 6, 98, 113, 113, 150, 98, 2, 
                   106, 98, 148, 76, 1, 9, 65, 79, 98, 154, 19, 50, 5, 33, 54,
                    94, 5, 150, 51, 43, 126, 148, 106, 96, 91, 76, 98, 98, 
                   143, 3, 84, 50, 140, 133, 10, 86, 56, 124, 134, 155, 83, 
                   10, 153, 36, 11, 137, 143, 9, 7, 76, 5, 144, 135, 26, 128, 
                   5, 83, 47, 132, 117, 155, 16, 97, 16, 72, 14, 98, 79, 146, 
                   92, 76, 63, 110, 127, 72, 53, 120, 27, 154, 65, 54, 116, 
                   98, 88, 29, 50, 53, 64, 152, 151, 2, 143, 18, 42, 91, 123, 
                   103, 146, 152, 41, 31, 116, 138, 98, 35, 141, 59, 78, 125, 
                   20, 10, 1, 7, 156, 147, 109, 14, 57, 71, 24, 48, 140, 22, 
                   105, 29, 96, 61, 27, 3}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 7, 5, 6, 1, 7, 7, 3, 6, 7, 4, 7, 3, 
                   1, 5, 3, 2, 2, 7, 1, 6, 1, 1, 6, 7, 1, 5, 3, 6, 3, 5, 1, 7,
                    3, 1, 6, 4, 7, 4, 3, 5, 7, 3, 5, 5, 1, 2, 4, 4, 7, 4, 3, 
                   7, 1, 7, 4, 6, 2, 2, 3, 3, 6, 5, 6, 1, 4, 7, 3, 7, 3, 5, 1,
                    1, 7, 5, 4, 7, 7, 2, 4, 3, 1, 1, 4, 7, 6, 3, 1, 5, 3, 2, 
                   6, 1, 1, 6, 1, 4, 2, 1, 1, 4, 3, 4, 2, 5, 7, 4, 4, 3, 6, 7,
                    1, 5, 1, 1, 3, 5, 2, 2, 3, 6, 5, 5, 6, 2, 2, 2, 5, 4, 4, 
                   6, 4, 4, 1, 3, 7, 2, 3, 4, 1}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwNk2tMUwcYhg+KUoLTyiZW57QYhIIDOxjaRM1X70g1sOFqHTIUbyAojdEO
L2DH3FIQlasWcVivRRa1isrRgF8dXhoVrOVinRZLaeGgUM+hxdaw0vHj/fvk
+fG8wWnZP27zIQiiaHTc74wzztQxqHr3y7hZfhRqQ6zDyyPfIy8mYik5MIzS
QLp93XkLkskbApdMH8KcOZUPL48fRnpy0jdx9TRKVuljXVc+Im9FNLMn5jOS
GaXJRbNo5KkY8JabUZPdOCXVOFaoY/l0e1Y6kLtk8E344k9I1lfHP3njRvkC
kff9WAbl82bGJUoovNUlCuavJoSaLbMXZu2k0Vw7sf1PzzghK8ovXF/lRKqE
uTaGsaO8v0HRFGpB5WlvZbh8CLWZkQeSfDzIW++eLGkc9TpRtW6Tjx1VnqvH
1ttpIFqijiyJYNA9nFX9V0I/KkQrkkVkP7qvF6a4yh0o3RtySCe+iMUTtrfW
Hv0IutUHUkVqHyGxYN+FlIs6kBYbHzXM6wGKLvF4T7OE+hyVdhZPj9J/Fq2N
slpBG12ZG3qzBzlhpvP70AmJG1LNfuJeECS5tDnzWsHYIeuy/K0D1o2mMwXb
HJCTYjTdH6KQelg1NeW/ISD53uOpVxk0b3+yiLGNIGdHUWej0AEK8fGNdw93
I12WFaSKdSI779Cj4mYLbNJcmel/dwBrprmP3TG+Bmrqb+1BeQY0hymjWuZ3
ID/rp7njm2yoM31kZLQWpbMfHDyd0ASC/QH5t9W9qL2eBEVbepDNyt0lu9AK
7Poj9huDFhDU7fd+eeIUkkprAi+BQcGkNY8NhyqwJjSu5NjXTlQp2K2D4lHu
3m8lg5stIF12XWORaZEMHtI9dXSiNm9NmUzQjAqbYn9pqBP5U87mBvz+CuXq
c/xptedQH757YVCADTelFo5UfH8ThHU3M9yX+jBd8EVIfGQXCorqu7VtBuQc
4P7gCniBRpvSO4Ndhu7Nvi3LvnKCfHpPHt9iQzlT4DeC/cibf75gYXYH6MW+
VPRQH3Dyu6buTKSAyNxYL8pyAckRtcUn6oFf67v7IL8TJDhp3FpZN7CqXiyg
xC0gaEx7Zl2pB0qjDOfYPyB5b+IeyWAfxG2XOsbk2iD954y3+Q2vwGz4tHza
jl4svmHvzi/rQvpl9L9V2RTmiJaH96b/ilpZfN1ZmgZzZvDgyLU2rHkQ3SuV
vkVCJaADq0d/kD5/VYX/MySGz5Yd7rFDetD98pg9L0EjS55beLwZCUZWejT/
MSgHrCzfpc+Bm3uyzWV/jNLYS0xXYQ+QES1/pKlMyBGZIgVkE3AbnqtjMxxA
SJRqf68LiLcVGZefWkGoPWVo1HugmGr2f1n9GhLrCj9XS96BsrO5eevMQKGm
P5ule3oP9E7H1lunjKA4kjmnnWsAbszWkgkfDEClXWbHRIz2OGlZ+53PfcAm
O0y3HRSkh13dnbLUAzqOo0NRoQa3eseELWFGjCu3uRb3G6F4QNxhs5mAcIQF
bss0gqpmc+yu0hH4H5gIZ+U=
                  "], "Children" -> CompressedData["
1:eJwdiWl4CAQAQN+3IlMUUVKOORIKc0XOqWiEbDlSYWMbctRO2xjbHNsMlXIk
RXLkVohylrOUW+6jHJFbuXmWH+993/teUGT/sOgAIK5AnsIikkJiYyOSwwPz
IrRffFRMVGxw3Z7//9w8Au7zAA+Sj2IUR/PzCIV4iALcNZA7PsxtC3LLRd50
oYV5lMdZ4GPM94ZFuO48r1mUq871P+f4BE9SntmW4Cn+tRQl+cYrPsNln+aS
s7zoTEszwwuWoSzTPW8Q5yzHWb+2AhV5lmkOIJlKPEdlqtCTXlTlef7xK1+g
GmeMpDo1OO1Ug6lJJ96iFlP82w6csjZ1+NK6vMhJ6/EyX3jC+rxEAxrSiOOG
8JeNacpkm/C5fzrJY35mMyZ61Am+wqs0pwVHbMdhx3vI1whlnC1pxUFf54Bv
sN/W7LMNbfnUvX7iH451j2HsNpxdvslO27PDj+3IR273Q7c5xq125m1G+w7v
0oVR/m6uXRlpN3KMINvfzHKL3enBCKMYbjTD/NUYfnGom+1NP/rzHn3YZKYb
7csGM3yfD4gjnljSXe8Q1znYn03zJxNIJIm1DnKNA11tCgNJdZWprDTFQaQx
mCGkk+wKB/ijSf5gBsvNZCiJDmM4I0hwmbl8bxZLzWaJOSx2JN8Z77fGeQ+k
7iLO
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{151, 10, 8, 138, 140, 6, 103, 
                   98, 98, 79, 18, 97, 104, 113, 27, 98, 132, 79, 138, 19, 
                   139, 76, 71, 81, 92, 106, 150, 11, 110, 52, 72, 127, 153, 
                   145, 133, 50, 65, 15, 13, 24, 98, 2, 51, 102, 106, 152, 
                   145, 67, 9, 131, 5, 40, 63, 68, 67, 5, 107, 70, 7, 98, 148,
                    1, 126, 143, 33, 126, 50, 47, 97, 117, 26, 119, 147, 75, 
                   97, 118, 28, 22, 140, 14, 3, 10, 133, 98, 9, 116, 85, 13, 
                   65, 14, 5, 3, 110, 152, 87, 10, 114, 16, 151, 7, 1, 72, 
                   140, 5, 1, 71, 116, 126, 48, 122, 96, 16, 5, 50, 105, 94, 
                   144, 70, 75, 148, 137, 41, 39, 53, 116, 54, 43, 154, 9, 15,
                    31, 51, 29, 111, 27, 49, 83, 114, 57, 16, 26}], 
                 "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{1, 7, 4, 5, 6, 7, 3, 1, 4, 4, 1, 2, 3, 
                   2, 5, 3, 2, 3, 5, 6, 5, 5, 2, 4, 3, 5, 7, 7, 7, 1, 2, 3, 5,
                    2, 5, 3, 1, 4, 4, 4, 6, 7, 3, 2, 1, 3, 3, 1, 2, 2, 6, 1, 
                   4, 7, 6, 5, 5, 3, 7, 6, 2, 6, 6, 4, 6, 5, 2, 6, 2, 5, 7, 4,
                    4, 7, 2, 2, 6, 5, 3, 1, 7, 4, 6, 6, 6, 4, 5, 5, 5, 5, 1, 
                   5, 6, 4, 3, 5, 1, 7, 5, 7, 1, 3, 5, 2, 2, 7, 7, 2, 3, 3, 6,
                    3, 1, 7, 3, 5, 7, 4, 1, 4, 7, 5, 6, 5, 7, 5, 4, 7, 3, 4, 
                   5, 6, 7, 4, 4, 7, 2, 7}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwN020w2wccwPFQW7NVDasWzW0eetTpg6t202r9sj5ozY42aVV1tZghrjfC
WK1ll8UhSI1W1R0j9Ea02ubacK6jvzSjQiNNqUqocrFEzuOfRPL3PC++rz+v
vu4/JjPirCgUSsFG7yOsZOnbrOn80t6Vy5QxZH2ZODm5QwvkKApokRS63w+a
Q0dtLUj/s4Hn5KZHv1Hd1A75GyyeKz5u06VGQ9sXCTn185ixK/eZI6MPRPmf
X8gqMKNB3CmzqZWi22qqtGGbFlVOD/q7mK0ojJRdkqS8AGpdX+PSqyGkmHPq
bwe8Rrao8Z/Yu3PIPeWToyMJpHyYsrZr3UznzvB2+aaPIp/h1ZnkYER2fk/t
p2BB1m92hnf3plDITDySyf0Pqd8uO57ZPoTsvKyoFznzyCVdq02Bk0hEVcW4
ixfQXqIY6egeApIsSzJenIfdbRHBteQ4kvvjzgdc7kP6YPi+35NmQZ32cOf1
ykHMiJd7H8hUgnN3wk3aYQkIBS1lU64joC4S880718DvSgzDdk4H6hqb3kxr
Daqlw29XsQfkClPa8qoBi7c8bQwKW8Sz8RE8zXESWf2WbzY/mkDDvT1bfUMM
SCj2+t/5bBE5JbRomuApClwUB8MfUaTlvzb1qXgEkrfyvdn1BNrfFcR2jxmx
PMUx+3l/FwqnWWA9YUSWhhZVuGJE/sHY0jkZgdzUS8FWOQSq2pOp35fpQKwk
U+czJ5HbE0r3tdEiN5Ghd2M+BmGjB7FvxxjaR3ltM40No+rBjWJRayeecdKl
2OnmMaDo51ovtgWoFjK6jUZCgEmxpogmQfjw0O1xpQKpvX7+92dmgTTnPuKZ
jVAM7bMv/5ZBZEeZjEqsAXsdk2Kih7ElM0zf7DKGpJBBdYcRlLKaag7lD6H9
PUaurs4ELVNNvSUtgyiyK/VNta8AwjOkvqROBZwbz50tz4aRs8a0EmcpkZXi
88ulLX0oVPs8RIdRFLa/DjvmM4FuNbYR90N1eLZn2kOYOorc2Dfx35nf4tkn
CZTTvSpQJVUUHi+YRn5o0VdXPl4AauV0cLRaBvL34uYewx2IHJC5aPuXQFRg
fvxX90vkzE5zF9MMwDm9cm5NNwblkw8SJq0IcB6wXXU92gHOw2xuZ/oQcvaU
MPcG9YNbyquZiVO1aL/Wf1LyrhkETEfmzcKNjy6UM5QOBLCbKDwPjQZFrt6c
fU9mQa50HzHdMYHYoi+6WC0DetZH8SHPtCASnOGv5MlBfWKr3dK6FAmfk9s/
VGtAXfmHb3ugBDM2RY5ft9rwA/uqyKvzQN6qbqNqVMD3PPBSwtdD5PpPPobo
LuAsxGSLPDpAVNrh1NxlBLeKZC4tcx3k5xPONVx7B/KBvf6lswvA2rO/+pMn
7yGgI15yxG8EqKedTZy7WlSfOBA8MKgHUaeyqerwKOz2LEjnhehBGprduhyu
BW7r5VdBrnNAMXo7xl1VgzRu4WubZg2SiQ7H/Dmb6OLAa//mlQ3g/3gYYPA=

                  "], "Children" -> CompressedData["
1:eJwdiVV0EAQAAO8B0t0dAtIxOoWBioTE6GaD0TlijGZBTBAVBUVRuhulQ7q7
uzuVto7Bx9179y5PSJ+gzvGA/onjFBQcHhgWFhzROElc1O49ILRLaFhAua7v
fmwc8d4TnwR8gK4yISstTBESkZgkJOV/V5iM5OThQ/5zuSlISSpS8685SENa
spGddCzzH5eangxkZIlZyEomMvO3i33jIl+70Fcu8KXzfeE8n5uTXMw1N3N8
5mzzko+PmOVfzjQ/M/zTX31qAQryi08sxGOnW5SfLU4JHlmMh/5kSQJ4YA1K
UZr7TvOeP1qGspTjB+9agTuW57ZTvWVFblqJylShKlO8YTU+5nuv+53XrM5V
A7niZC9bk0/4lM+oxSXH8jm1iWEMdahLW9pRjy+4aBvq04ALfut5v7EhX9uI
IM45ycY04axNOWNrTtuMUzbnpC04YUuO24pjfuVRJ3rECbbnSw87gA4EE0Ks
h+xGRzoRyngP2oXOjPOAY91vV/Y5xu70oCcx9qYPe+3FHqPtS5T9ibQfo91t
GLsc5U5HusOBDCKcwYxwuxFsc7h/OIStDmUYwxzOULc4gpEMcbOj2ORoNhrJ
BqNYbzTrjHCtg11juOMYz+/G8puDXO1A3wLQ7h7Q
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{112, 128, 96, 72, 70, 8, 9, 110,
                    75, 11, 27, 154, 129, 7, 76, 1, 5, 155, 19, 98, 145, 31, 
                   87, 153, 151, 2, 103, 46, 5, 1, 54, 2, 16, 83, 27, 65, 5, 
                   27, 151, 98, 9, 131, 39, 18, 5, 84, 65, 14, 137, 77, 50, 
                   51, 64, 88, 107, 138, 68, 148, 75, 43, 74, 70, 135, 109, 
                   97, 57, 11, 144, 35, 115, 136, 26, 146, 29, 129, 16, 97, 
                   26, 30, 72, 53, 127, 56, 10, 140, 142, 7, 63, 65, 17, 96, 
                   81, 66, 86, 151, 69, 76, 138, 78, 12, 98, 116, 5, 64, 116, 
                   34, 148, 113, 41, 126, 24, 71, 27, 20, 133, 3, 113, 98, 76,
                    150, 33, 105, 69, 143, 26, 33, 106, 15, 50, 58, 135, 124, 
                   134, 147, 22, 25, 116, 27, 28}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{1, 7, 7, 4, 3, 5, 7, 2, 1, 2, 7, 7, 4, 
                   1, 7, 7, 6, 5, 5, 3, 7, 6, 1, 6, 1, 2, 4, 2, 7, 5, 5, 3, 1,
                    5, 2, 3, 5, 2, 3, 4, 7, 7, 5, 5, 4, 2, 2, 2, 7, 5, 7, 6, 
                   6, 5, 1, 2, 5, 1, 5, 1, 2, 1, 2, 2, 1, 6, 5, 6, 5, 3, 1, 6,
                    4, 3, 3, 4, 1, 7, 4, 4, 7, 6, 5, 3, 1, 2, 4, 2, 5, 2, 3, 
                   2, 1, 4, 2, 6, 1, 4, 7, 3, 4, 3, 2, 3, 6, 2, 5, 7, 7, 3, 7,
                    3, 4, 5, 4, 2, 6, 4, 6, 2, 5, 5, 2, 1, 6, 1, 7, 5, 4, 2, 
                   6, 7}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwN0XtQEwQcwPFhnoyswENeobJFvAJhRgqi8lthPA7kKLkceNwGgoxW41Ho
1hFPH6QhoKKDEkaeNkarFdhx8vhNWDxGMt4ME9gCxjhibAPGkAHxx/fPz19f
clL6pykWBALhyk7ivb4ulUEmDHSlX5TH/Yf7V1ylRwkEiSBd3xI1soy85LxY
70UDMinxmePNWuT84m2x7ryJnLnp+NPDC8i3tIwwpm0gM1aYKC1eR1PFgYlO
zThqtv/Y14dKdCxfnOy50ApNhb6XY6JX0eaLB+0hqgmkpBx1MazqsGmujVV6
woiBIwX7On11SAqyv2oo2nEs4VOWtR5scuhD7zupkEgucv67SgI258hDta56
DOQG1PhJ+oBBbz1kK9VjWYR1o/zMAuiK+z3oFlokvPAQOzUvo6KQ8tC9ch7z
P/a6OmvSYdmBIHPmG0vYVGPInV5SIyXtwyeyrREg2NnVHq7TojLS4zvzKw0K
CmO61JbL2M30yrgb2YaBu4S3k5itIOnl508bhpBUf+kTDlkP/E0i2T5UjcS4
sDQfKwMWG3q/vRo8hcTIfwpERXoINzJOhha2Q7hnw0d7w3VA/fMRx2e+DjhG
eTQ7ZRYDk6/F6QaXkRK9eGj4cxHYBPdGTslWkKMIUaX+1g42PZpTfVwjEJZK
dRurasxv1zwbr1oCidmRYa5qB5JdzeGwf2dAIRo/Swc9KB1lrwU0jkK/vpVf
O6sCXY/I0+XrBaRZDRzxt60G5fC5fFnVAsb4vay/vWUCk+2b51kCIzKuca1j
/JcwI228Y/v7BsygOXBz95ixf97tDDFPh4KaU9TJqSGkqp26DrZIgR8lwJwb
c8jhx5nHsoswP3t/C4ulRqp7Mz9EacTu1JSqjaYV7E7zd8/7awUpPobkY+8+
Bk6H+ObksgTFgbl1jeRhDO/Sahaz24E/zY7KfFCLGXS6tlosRkri4wn26BQw
7dvu+mcNAMNccoIbsADEOFqil48OaRHJWaejFoGnGjz208tpFOx+54XPwXWg
JiX1mUqWkfDZLPt89TPonjpCklgg8Oslr36NHUZFy5PfC87KQCNPLxU5jyNJ
L65geGpBl+3udf0tDVI1DnOjxjmgFfTe84dy5MW7Nlxmj6LSe1sQZjUGjHWp
yC9BCxLK/XwNVQNi+5zkO3nr4Gmqu17O7kdKrAOvsqwCiIMUf6F251M3zyL1
PTN0X/ENbRTIUXDRkRRQvwaU7afM4FsrQKtIsC+8qQHS/AfypV0KpNF809uK
nwN/oNPQta1ChVfGHuev5pB6XJqn3hwDHvnG8xahEXRf3pJMdxhBLJ15lKie
B9M3d3L6ZWpQyM0Obg/loPgxgX2/1AA2JzdfF5aogHnPcWa70AAUGN3tRlUC
Q/KDbORtAxAucAsucfXAoK2t8bYmsIz78/Esoxb45SOs9bJV+B+oS0eh
                  "], "Children" -> CompressedData["
1:eJwdiXeYDwQAQN939opsZZaV2VGXsinZ4y5khLvcyO5nnHN3HM6okK3sncqq
jJItsvfehIyQPes5/njv+973ikR0D40KAnqmT1FoeGzNQCA8LixDStTr1isy
OjIQHBLz/CenEPSCVKQmDRnJRFrSkZ616hr/d7UZ+N3/XOVTfzMzWXiJrLxN
CNl4mSf+6mOz88gcPHSlOclFblZYlOXmIS/5eIUHLvNVfrEQP3vf/NyzAAX5
ybsutTBFuOMSX2Oxt32dWy7yX4tRnBKU5A3KUJZSLPSmP3rD0lz3B8vxveV5
k39c4DWDuWoFrvidl63I377FJef7DpWI4TPe5T0uOs/KVOGCUVSlGh0Ipzo1
aENbajLXOnxILWrzl3N8n9me9wPOOcu61OOsralPA0KZaUNmeMYmnLYRp2zM
SafblGk2Y6onnGIYH9GcFhx3si351mN+41E/phWTPOJEDzvBQ473E9px0HEe
sD37HWsEn9KRMe5ztHv92khGuceR7jaaXY6wE1/ZmS7s9Eu70o0dJtOdL+xD
LD0Y7ucE6MkwezPU7fZim0PcarJ/Oti+DDKOfsSTwBYHk0h/BpDEZgf6h0lu
coAbHcgg+rvBRNeb4DrjfQbGERLW
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{96, 151, 72, 10, 65, 123, 10, 
                   20, 7, 104, 85, 9, 9, 97, 135, 41, 104, 11, 150, 94, 143, 
                   17, 76, 140, 75, 77, 113, 33, 37, 143, 79, 145, 5, 64, 151,
                    116, 98, 27, 16, 79, 98, 91, 67, 1, 64, 33, 16, 76, 4, 29,
                    44, 103, 25, 109, 24, 78, 147, 27, 31, 115, 58, 119, 124, 
                   16, 29, 98, 113, 9, 98, 9, 78, 13, 76, 86, 50, 8, 141, 91, 
                   98, 110, 65, 139, 65, 10, 72, 75, 1, 81, 76, 5, 71, 1, 46, 
                   15, 89, 5, 151, 116, 100, 16, 72, 9, 43, 151, 104, 98, 87, 
                   5, 51, 101, 98, 126, 15, 143, 105, 72, 3, 83, 97, 70, 133, 
                   114, 9, 11, 148, 61, 144, 140, 83, 134, 11, 117, 116}], 
                 "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{4, 4, 4, 4, 6, 3, 7, 4, 1, 4, 5, 2, 6, 
                   5, 4, 7, 6, 5, 1, 1, 5, 1, 5, 7, 7, 6, 2, 7, 7, 1, 7, 2, 4,
                    3, 3, 6, 4, 3, 6, 2, 5, 2, 5, 5, 1, 5, 5, 3, 4, 3, 5, 1, 
                   3, 4, 5, 1, 3, 6, 2, 4, 1, 3, 2, 1, 4, 1, 2, 1, 4, 2, 2, 6,
                    2, 2, 2, 4, 3, 7, 1, 7, 1, 1, 6, 1, 2, 4, 7, 1, 5, 2, 7, 
                   1, 3, 1, 4, 3, 3, 3, 5, 1, 5, 1, 5, 4, 1, 5, 4, 3, 3, 3, 2,
                    1, 5, 4, 3, 3, 6, 1, 4, 1, 1, 5, 4, 6, 2, 2, 3, 4, 2, 5, 
                   7, 2, 3, 7, 4, 3, 1, 2, 1, 2, 2, 6, 6}], 
                 "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwN0X840wkcwPGdSDqkdDW751DnUElzKiuuz9LJyN3tcY+ndZybUudHSpdc
PaS1oxbPtXX5UVdJujIct0K3Ip856pG0dubHkOVHas7Yd9+R2dLOH++/33+8
Vu09HLn/AwqFIpyP47/Cci9Tjcbjtj6NY0akjD7mpDqoUVawiDccb8ZWdh03
32oKeVOLc+3GCEwN2iP69bAJCbktpcwyjuJnIv3VDWY8Hs56znA1ILFrJjjl
tzE0rg775Y16EgUeWuH3G99i6maJ/8zDMeRsLaqt7pxAaZXDm0hPAomaV2x7
3QSqAi2PfRsn0Xs8Qkjmm5HzPF73YBGBMk1a4MlILbor06qu0Uwo1UMha5RE
lT+9PEKjR2lYhevtVQbguT/mfbxSiaJPE5dGsozI2tH3R8aXJEqy8g6URWtB
VB30zYCWRMapbarLHjpgLVCm0PJ0mDDS0paunkGmo/Ndn2AR8FLGk3odNViS
vIwalP4aLw3HxMTfmMZW37ocJmsQuWbM0Y3rsURTsc5qth4HnyTHlke9QLFt
yNBhHEJZc7KTYHkO8KTl9bY570GiTlTvbm0ElaPbqEvWMBAxLqfPtz1D77jS
b2M32TAlF6rbHkS8QOlT4zHVn1PAeRebsf2iAqle5gtbQtuB42CuWfmzAajJ
F6M/WXsTOZeivH0pBhSNrPasqTKgt2E6QB86AWxPX1mX9SxSXUO5V/uHUMBX
7UtktoMsbdd0rd0kKpJzyaSP9OBEdyZuJZGYSnq4dT+Vg/Fog7PP0U7UrBWH
REiVQKH5L9uyTA9UfnYBjT+Kovq5kn+K5/+n0tfTzgyg96Y7VkNzQ0j0qA55
3J4G0clHy9fYDaC7aepukU0PMp0X5Kb7SFCA7czndp1IFUp6EkJbUVrEX9dZ
04RsVfMdF0snyIophZlkO2g2LXERWf8Lqs3XdiduVAMv8fxQ74lsTCikvrLw
SeDK7puu894DL+a1b028EZjZR/hm10GgdPx4MKpbhbzrIfY+QhLYslC30fRK
EBc4bWhRTGPJEtKLV9oE7O2LryRkEMiV2H7efSYHZaoYS4dDL0qW1ku0MwR4
0/n6OoEOKD85Jp+K+Q8090yZhopJkFXu8JuwnQBFV1iuslQPmjXb9o7dGwaG
V749L3YEGNnLF25rbgLp1i/0H8ofQIJLYtpl5SsgErbsD6hQQElVw60y4X1g
1xf/pZJ3I6X2a+sGazle2id/tzl8FKmK2hRBcQsYTZGa1X1/o2Rt2J49nn0g
yXezCmCpgdqxwi9uZz/Suc51xdMdKLI/oKzI08GicwfL+/ilSFjvFNPaZTA4
91mR3+kOcArq/z38uyagR8dlKXb3oNTzgJFWpgOuzSr3fdEDSA3v9xM+G0d6
AOPs/o48kJ0lr36VNQCSK902I7q34BR1aD0tnABFysOTlRldqOl8yZAGzoHi
UWNc/A+zwFn84mZL/bzHsWrrWa0WxCZ+b8ETPQgaJteE5M/7CBamuAWqwXhE
F3zjIgmMC9QTdeJWoLv1tMktNUCcy80MjWwG1svYE28Lx+F/ruxuRw==
                  "], "Children" -> CompressedData["
1:eJwdiWV0FgQAAO+BlDTSgjRIS0oo3SAxuhkwSvLbYIxmdI4uQQnpku6WUrok
lO4GadBz+OPuvXuXqXW3oHYxgNC40QoKDi8bCARH1I0XHVW7hoW0DwkUKNrh
44+KJsb/xOQTYpGP/OhKYxOHuMTjXxPxKSv8x/h8cLkJWOZ7E/LOpSYmCUlJ
RjrS8xnJSUNa3pqClCzxjYt9bSpemZqXLvJzFvrCn/3bBT53vl+QgYxk4pm5
eeo8n5iZLGQlG9nJxVwfm4NH/uRDvyQnP/rAOd53tvfMQ15+8K6zvONMv6IA
BZnhbetRiMIUoSi3DOJrpnvTaRajOCUoybeU4oZT/YYpXneypSnDNetw1UmW
pRxXLE9NalGBiV62IpWYYGWq8JdRVmW8f1qNS1bnojW44Hecd5x/ONZz1uas
YzzjaE9bl1OOsj4NaMhIBxNJIxrThKb0pBcnHWEzmnPC4R63BcdsyVFbEcww
WzPUNgyxLSG0I9IjhtKeDnSkE7872N/8nsMOsjNdOORAD9qVA3Zjv9351R7s
M8BeBxhGf/fYz92Gs8u+9iaCPvRlp/3YYR+3G2F/BrDNgWy1t1scxGbDHcJQ
NtnLjQ5jg1EMZwQjGcVYxjGanq43zHWOYa2hrnE8vxhwtT1cZXf/Az+xKMs=

                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{96, 63, 6, 2, 98, 79, 5, 79, 72,
                    84, 13, 72, 46, 110, 148, 37, 15, 92, 5, 116, 150, 126, 
                   98, 2, 154, 76, 45, 42, 128, 10, 98, 133, 13, 7, 1, 140, 9,
                    153, 72, 19, 65, 104, 124, 84, 11, 86, 41, 56, 148, 72, 
                   104, 156, 73, 81, 66, 101, 85, 105, 152, 5, 71, 94, 1, 54, 
                   98, 70, 154, 143, 154, 35, 59, 31, 140, 30, 27, 69, 24, 
                   140, 143, 124, 50, 28, 148, 9, 151, 106, 98, 120, 5, 65, 
                   18, 87, 39, 75, 1, 68, 4, 145, 54, 16, 52, 38, 113, 78, 3, 
                   7, 93, 83, 10, 65, 155, 10, 11, 142, 20, 65, 5, 128, 97, 
                   129, 94, 154, 143, 50, 48, 137, 144, 76, 109, 49, 69, 39, 
                   33, 116, 51, 32, 115, 26, 49, 29, 57, 119, 143, 61}], 
                 "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{4, 5, 2, 6, 1, 7, 7, 6, 6, 1, 1, 5, 3, 
                   7, 3, 3, 5, 6, 1, 6, 7, 1, 4, 3, 4, 1, 7, 6, 3, 3, 6, 1, 5,
                    3, 2, 2, 1, 2, 1, 3, 5, 7, 5, 2, 5, 4, 2, 4, 3, 6, 5, 5, 
                   7, 1, 2, 5, 1, 5, 7, 4, 7, 2, 3, 2, 3, 4, 4, 2, 2, 2, 5, 4,
                    4, 7, 3, 2, 3, 3, 7, 5, 1, 5, 7, 2, 6, 5, 3, 1, 1, 2, 7, 
                   5, 5, 5, 3, 2, 2, 2, 6, 7, 6, 3, 3, 7, 5, 6, 1, 3, 3, 7, 7,
                    1, 7, 1, 7, 7, 1, 1, 5, 2, 5, 1, 2, 2, 4, 6, 1, 6, 1, 4, 
                   3, 4, 4, 2, 2, 1, 2, 1, 5, 2, 5, 6, 6, 7, 7}], 
                 "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwN0ftXkgcYwHG0MrdjxtxZMzMFs7K5NY/L6Daft6UbdjkpWdFRkpqVxzkj
yzNTI+xKoambIGtdtHBil6VMC8vjoy7zkiIlOXKZL2COspSr42jg/OH7D3y+
9L0HWfvcKBRK8XRK180v9y4fwtjQ1MAChQmlL7u7kwN8iLD6ygvuUVYU7m/M
vVVnQGo9XfPJZD+aXoXTGJ1m5LlKlgWLxpEaUZshlkygI/l9zvelVvScoM9T
x0xiUfKTSm6HFUmfvMdDfzWDZ9yG7sMPXmPWrlr3JyF2FLozTiZ+PonMpouc
b9gmCPFT9vwp6cT2E6TJQ2VBgd+CX+/mPIPquI4RqVSHWeQra/qAGVNy74sE
S+xoyiT8g1ssSB1fv7IhdAK5lffMIrsNuaHCQ29fGVF9WUrUhltQfv6tqCvH
htQUmUv2mxk90waiM/km5EWUi31pvahVhGytFJihyZDr1+ytB3+OtRMS3Ahu
qnMfO8OIKW1FuaLrLzErzfvY+xIdOPwfnatI6sfYxk3lm8++Q1oho3TPaD8K
/tsrYWUPArn9Fqfz0+tASUib2xKjQcqW55ml83VoqmJKMm70orK6fva9wREk
Qk3k8TN/o1EgZyvCrFD9riQ7fvNrVA7UOPPfmJG4e8kradCM7GejPeunPVO6
w9s7XqtByuK7yIBp14HhwcgnBvR1t1/sybSjOnXnBoafHnnNH6d5ZU8g7XJe
8MGf3AhmuCq03LsP2JFtb0JgFMIaWlYnspqRN/LeM5trQ608Q7kicATYtt8l
Suo9zFqzRpGeZICQDXvGOFttmOK6GuQzZsCm0Qovkd8Y0s40xpA1w0hrSPug
JnU20X6flbm4hAT1kYbV5ZFqcBTR6NRv7bhqrXdrRNMoKG9VifRhDmg/91y/
r0ADnrYofUGdCwRibQz9dC+qZzFWLOZbgPh5eVBnvA7CeEu/y2mzQNaHqo13
mEYMeVfc2sTTY2yd82Z36wtUP2zYsklmB+NDRtISdT8Kl4VqtJw+EHAjIqoS
jLDKKdPxxTagPQ3cMh6rRdPGFQUB/So0KVNZT4deYDVlYfxXHjYs096xxBf2
YdGOS4yoj9Sg9To1Tz5EIpUlkf04/YniX8kyp1iReXBBW/qBLpSe2BWVq9OD
fGqpc5tkFH1fzhXPoFiwbKbhqsY7D7SlXbkeJZeRWrzoQt8/WpAO15w/nG4D
ZcCOYqdyEByx+TEVThs6GgufDh4YxyKv/b03RGMg3J0z9fVhI5R9Zig5vd4M
vofWPQxS9ELZ47iZrVfNIN/0gu/iT//YPvuLqeMkEPmR7kvn/gu0yd1RJ6ta
gFLRTwk4ZQZm/lR++hwNNOlVQUfm1IJvuNH/YuMAUsajT8Rce4YOkVnDjiWB
6bFt0TWxBeQVM6aKdMPgWVd+m3PNAtIfamQGjhV4GvoxvrUD5cyj2pZfqoG4
TR7NL+0CKa951/yyCShLEK+VHbGAMNBtTTThBFIl3xntYwfuQp+V6jgnrFId
zfNv7gVHPXeKXkwhBMmKxETpTRQqKtZV9YwA6TFrwR8PrKB+dD/uSrwTjMJ1
V4IeWOB/Hld9GQ==
                  "], "Children" -> CompressedData["
1:eJwdiXeYDwQAQN+H4qSsyAgdWSF7JWR3dnfKaHA42x2/O7ePu8Pd2XdlbzLS
QqE9lL017D0jmkYDr9Mf733f+15w/6jQQXmA6AK5Cg2PaxUIhCeEBeVGSGRM
xOCIQN1GQ+7/nFzy/E9e8vEAtVjng+SnCEUpQBAFeQhd6z3f967vecdC/OvD
PMK7/mNh/vYd/7IYTxBMcR6lBCW57ds+RiluWZbSlOGma7zhW/7pav/wcX63
HL9Znl+twC+usiKVuO5Kn2SF1XjTa1bmZ6tQleVedZlXrM5PPsVla3DJmlx0
qU9TmzrUpSOdqEd9GtKICzbgvEs852Ib04SzduCMi2zKM5y2Gadc6EmfpTkL
bMF8WzLP52jFCVvTnrketw1tmeMx23HU2R5xls8TwmFnesg3/NHX/cHOdKEr
3ejOeCbwAjl+bxqhhNGDFxlHti/Rk++M5KC96M0MDzjdPrzMK7zKcKb5Gn3Z
71T7McV9hrPXyfZnAHscyG6HsssIdjqIwUxyh0PYbpbDyHSbGW51BCOZ6BYn
GMUovnW8owkQTQxjSXcMsSSRTBxpxpPqN44zgbEmkuJmk/3aJL8yhS9N9AsT
/NxUPjPeT03nE+P82IlkkkUGsX7kGDcZ4yQmM4WpbHQG05jOBqP90IAfONps
RplDlOuN9D/EFyzJ
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{9, 12, 84, 72, 9, 20, 98, 113, 
                   150, 116, 148, 96, 106, 129, 64, 145, 72, 79, 92, 76, 5, 
                   98, 98, 5, 68, 116, 38, 110, 14, 133, 86, 123, 93, 65, 155,
                    103, 16, 9, 7, 133, 3, 97, 39, 148, 11, 107, 110, 17, 42, 
                   41, 7, 135, 106, 155, 116, 148, 11, 98, 109, 132, 75, 66, 
                   33, 116, 154, 1, 33, 58, 49, 83, 143, 146, 151, 72, 117, 
                   27, 74, 69, 82, 27, 9, 98, 104, 120, 85, 153, 1, 76, 65, 
                   54, 138, 126, 64, 50, 5, 9, 65, 18, 78, 8, 110, 83, 155, 
                   84, 124, 140, 14, 132, 11, 35, 126, 29, 71, 17, 88, 152, 
                   13, 21, 154, 2, 101, 20, 125, 71, 154, 83, 39, 76, 1, 64, 
                   76, 33, 51, 54, 147, 30, 140, 94, 76, 91, 119, 97, 140, 25,
                    112, 26}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{1, 7, 4, 7, 3, 7, 2, 5, 7, 5, 2, 1, 4, 
                   1, 5, 4, 1, 5, 4, 3, 1, 4, 7, 4, 5, 4, 1, 4, 5, 5, 4, 1, 6,
                    3, 6, 6, 5, 6, 3, 7, 5, 5, 6, 6, 2, 7, 5, 6, 2, 7, 1, 1, 
                   3, 7, 7, 2, 3, 6, 2, 7, 1, 6, 6, 7, 3, 6, 3, 7, 1, 6, 5, 5,
                    6, 7, 3, 3, 6, 4, 5, 6, 3, 4, 7, 3, 6, 7, 5, 7, 2, 6, 2, 
                   6, 5, 3, 4, 1, 6, 4, 4, 7, 5, 6, 2, 4, 2, 7, 4, 4, 5, 4, 1,
                    2, 7, 4, 1, 1, 3, 7, 6, 7, 1, 5, 2, 2, 1, 6, 7, 4, 3, 3, 
                   5, 3, 3, 1, 1, 3, 6, 7, 2, 7, 1, 5, 5, 6, 7, 5}], 
                 "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwNkWlQEggcxTFzYLaxwUwzOxa1QyuJDidsqz/agWWKaV41FbWVXSZb6rK2
lZkWZTlMzZblne6qmYqOuuBq/6WsLFuFzc2LkkVUUDEOIXRhWD68L+99ee/3
vI4lRZ5wIBAI9+zqrc233pkxoXykbO/rrAnkFsdbelKuY3p5DG4nzmDu8av7
V2v0SO/JiAtaZ0VfxxveEZunUHgrKlXBMtnzd4XVgV+RK+0+LthhQpJH0eot
wknUpqaF6fcqQK7etZJ6KAPNrs4Hz1aYkNdQvK82wQw0jz1zMkL1GBcblHL0
pN3nFeiCfZVAr4yt2tOmwWL2j3py3AQKHCWa37aokCCbLXrsqkbGaetC92Q1
Sr64SPtWTSJfObpcpFAjX9Z9536/Bmkb3AtidxrRbM7PymbZe5xujirLuokE
tU9AjU2FIQxn8tZlWuQkKy/ODzEg5wIx2/uWHntdQ3cTHeUQkiBz88szICXJ
QGdu1aH2GuRnNsqQYCpc1f9pNkqKIig1BQr0WPNmkShaBZxdkYv8b+iQIYr/
uP7IB2AnMAtnTL3IYRqbCkb/QIFc4c1DE8iL8/yW9CHyRJcOXMqfQArUPjZY
lEg6GkVtvmzfF85spSZqkeC0dPCVaACL58a3THcpMZ35hNXHEmOxm4uHb+UY
qqp8SJioQIL/TNP39CoUOny4aX5/H3KjpZdlF/9C/n8xkwe2SVDFykuQ7DEj
z2BkpaZ1oYe8vCW91QrsFr9679Jx4HjKr+X/YudzaN5XbrQG2IeWB2gWNIHW
es1ct2wEJWl1rAWMzxiyPZdkGZMC+5HjT8GF/dDO7N2mihwFiluRP1OhBLOl
dYBFGkXaCrLD6MK3yOHn/PrQeQglrzfI6VvqUfB1JCe26AVEEL+Uhgc2Yrps
zvPFJzpAKOTGPNKPA003po77TgEVZeOfgNOG7fc7LPIABZxzoZ47/IDIEHy2
+fv83Qnk0gp6iu0zmOeNzVrzzwhyB1Nd32/qA25SmeexuXbe3uJLj1kv4c9n
1Iy8Bj2yLQevi2q6kbDuTWXy5hGUbzx6VhElRv4F8cNOUw/QUtdT8xfIkd2x
krdt6QekhItGyNU26JUGMRU6JXDrnzg15ogx4veU8t0bhtG3tGRrVlMHso1t
54yTtXiKJ8zx2fkWtD/ErsxcM4yc6Oy1SSQjRgiPSLvqpBASgDt0DCO0l9Mv
e83rRFoDt3F8SS+cys4O7W/pAnOmQ/CZnm5Ir3pk3UQdhoqJvOGSAR0IOqMo
dfut4EGkBwoym8C39daUW4Iec9XLN+4zNCP7LvF1zksD0F41OLZMSLBiMNs9
M0gHqqaZnw1PJ6F99pKUgy8ngWvqCj9/YhglTs/PWGxDQH5wuH79xmngh57n
e7lN27ncuDdwJRb54qHbuTI1ErDypNL+m9DZ79t/A/vxlPdgamJ5D7Jtzwp3
VHciOZ7xxvbxCwjFIXcX1+ghIkzTv8LLviO4VDU+rQMJzaZupk+Bylh9pZmu
B/JHz+GwKQ2oaEBafVUPpGbKu7JQPbSvnR+zk1MHcUMlL5ydtcDtTPR0aBsD
Ajnlm6djsxj/Aw1zgMs=
                  "], "Children" -> CompressedData["
1:eJwdiWV0FgQAAO8BUpIC0t2KtHQqKCE1UAElBowSNvg2GKMZ3TBKaZRW6VC6
u7tbaaUbjsGPu/fuXfYWYUGt4wDhCWMVFBxZORAIjqqfKDaqh0aEtAkJFCnR
9t2PiSXOe+ISjw9IQlLik4DEfIguMSGLfWMiXrvIV/7pS/8wGcl5YQNSkJJa
1Oa5v/vMj0hFatLwMV/xNWlJR27ykJ4M5GChGclEZrLw1AU+cb5Zmedj55qN
OT4yOw+dbU5+84G5uO+v5mWW+cjPPWf6CZ/yv+UowAz/swyfUZBCTPeu0yxM
Ee441dsW5ZbFKM7n3HSKNyzBdUvyr6X4x9Jcc7JXLcsVf/Gy5blkBSrys5WY
5EUr8wUTveCXnLcK56zKWSd4xvFWozqnrcEpa3LScZ7wG44bYx3qEsRYj1mP
o47xiKOtzygPO9JvGeF3fE9DGhEgnMYMN4xO/MAwf6QJTRlqM5pzyCEeNJgD
htCCwbZkkPttxT4HutfWtKEt7RjgHtuz2/7u8id22oGORLvDULbbz232tTN9
3GpvI+hCVyLZYi8329NuRDGWHnanu4MYTA+i7EkvNtmbjXazD5FusC/r7cc6
o1lrf9Y4gL8dyF92dQhdHM4IhhLhMMJdbcCRdHYUo1llJ1c6hhWGudxQlxnD
Ujv6FppZLsg=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{151, 8, 142, 9, 98, 71, 37, 79, 
                   128, 76, 72, 2, 116, 16, 98, 9, 19, 98, 98, 65, 17, 9, 4, 
                   72, 45, 91, 154, 102, 51, 2, 127, 100, 76, 34, 131, 65, 27,
                    67, 5, 16, 5, 107, 54, 91, 33, 72, 111, 128, 10, 135, 138,
                    155, 131, 77, 152, 56, 20, 24, 1, 11, 83, 142, 132, 17, 
                   74, 78, 101, 155, 126, 8, 11, 154, 33, 44, 119, 126, 22, 
                   28, 26, 96, 150, 6, 5, 151, 20, 5, 27, 75, 92, 1, 150, 79, 
                   126, 5, 129, 98, 68, 87, 109, 14, 151, 13, 90, 148, 150, 
                   18, 7, 113, 76, 15, 98, 148, 50, 69, 3, 3, 153, 7, 9, 133, 
                   52, 138, 3, 86, 133, 10, 39, 65, 83, 104, 14, 132, 29, 94, 
                   156, 96, 105, 48, 147, 147, 41, 154, 27, 11, 16, 117, 26}],
                  "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{4, 3, 6, 7, 4, 2, 7, 6, 2, 5, 7, 6, 5, 
                   3, 4, 6, 4, 5, 6, 5, 3, 4, 3, 2, 4, 1, 1, 1, 2, 1, 6, 3, 6,
                    6, 1, 3, 2, 6, 7, 6, 5, 1, 2, 2, 3, 6, 5, 1, 2, 5, 7, 4, 
                   4, 1, 5, 5, 7, 6, 2, 1, 6, 4, 1, 3, 2, 1, 4, 3, 6, 3, 1, 5,
                    1, 4, 6, 3, 7, 6, 1, 3, 7, 5, 2, 4, 2, 7, 4, 2, 7, 2, 3, 
                   1, 4, 3, 3, 2, 4, 1, 4, 5, 5, 1, 7, 5, 3, 2, 2, 7, 6, 1, 1,
                    2, 2, 2, 7, 4, 5, 3, 7, 1, 4, 4, 4, 4, 4, 6, 1, 2, 7, 7, 
                   2, 1, 2, 6, 7, 7, 3, 2, 1, 3, 1, 5, 5, 2, 3, 4, 2}], 
                 "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwN0H1QkwUcwPEhGpAnrXBFIDbCl+kkfIlTcvgDTji4SwQkxIyXkxcHok4B
HTD0IZ3NilRMnJqKxuHQBEQFTN1vAo4HhZxAsHOAG2vbA2w8GwuZCpF/fO/z
/9d3x964DCcGg3H6XTH9CT3T7s1AGFIEqgYamMTUsii/N+iIXHKrv4cGGRH+
YDyoBx1f7XrxslMH0syhwiI3K1DKg+w73Amg4qL1F0d1oK7nbL5G2EAwkNxx
ffFlVKzKnuXjbQa2/4Lrx4btoKibxTNseosrJ5NyZ/IGUc0K9tnj/Qr5W/fJ
7w+80zlIw/UaQ8UKjH3gP4aq3BwvU40GtY3rq/KZDtRmtvFshv+wosp3bVih
EolWl6qpgpe4cml6QlePHT03PaQ82keQSOJOnBJOoSwsfsEcyoGEuKxzXqER
ZcxLV4OlFAqMvuXCdgooKjnOUDuEFZ2inyp1SkwUv+gqf2tBz7wqV/0TGgl3
4pRc50AZZ7jgKLxGzpqZtsITd3Fdva1EXjaMpC5e7evZjZGK80lhiVZoEmY/
XFPbCyslb2+MXqtG9TZgFD27jZ4DfKItX4PSdFZGWug5YF4d3EnuGAK2ubaF
TNah6kBXOvfmIHJC6dxvLEMgDPi2w5U3CpIr0YHLHGoU/NPbSH347ofCJdNr
2ohNS2i3M9N9yNDq/yyu7EPVJuXReNsQ8kXH5E+MBmTObZl3fjEF2izR590Z
jzEmKCy5sngUBQWi1XMenwAG4b4/N1GCzDiaRrdjSKQGBlZvp0Coet46S38H
yMiJCxl77qI0o90SyKWQGg8K8+NTQLK9jPOLKeREMfXmq4h1pe8FHCyyIidm
qWxzCw2O2CvxEvEgSj+w0JbbNSCIzZGuum5AYX/aIj/hOAjd3l9UUXsTrK0s
n+PL/wLSzfSRZ14PaCPKzokfvwFV6AUbe9IGzM5sEhJq0Eps4HD5paiSqlgb
GlqRULFTIxRGiLFkOIfvt6HE/qk46l4XTEFWeV+Wc4jDp7/gj3AdVITrZ8sP
2UFw+Gzq8K1JPPm9yObIbgbK8PQXpr8Z1cb7+eHRZmRunM0i6VF0OAV0GPaY
wPVZd8LuNhIZ3HCy+pO5IYlqbvC23teo5gUeyTk1A5E5/vL69QZQkFKnncun
oLLQvPDuNCOEv7c5tOysCTgNCcon9aOYWnLr8pevaoDzg3Rk+1k7SvRFIiXL
Bqnuq6JSxOPg2r5FJCulUXvRJHQK+BuYGl7zCYkNTh7pzIIxE8gyPdlrb0yC
gktuvTffCNY4zfLYR3ZI5MpFaTF6FOyjz5VuoSGkLaLzzsZhcPVe+O8XFTZQ
zJ7K4Qa1gCp4147iLRNQ1+iUIqsjgUg3a6pXPAeVa8cufslTpPb9/GN+3QtU
rJt3utfHhAJeO2NSPIbrvt7rnMIcQc6gR0HaDS1Glmi6f2dXYZPyjCTCvRUr
HiV95q35DdmX0vJcWuyoYLNyB9KbQU15vLl/2CkksWm+3OW4FpuW5VvaKzWQ
evrXK7sLKZDwNn53oGEc2DXp0blrjagecByyjdhByNiqXf3xIEgWWUYiC2bA
4dGWd2G3DbR9jZzjRiv8DypggvE=
                  "], "Children" -> CompressedData["
1:eJwdiXeYDwQAQN93EkcJWSGbzCRbWWVmlLsIZdzl3JEbfnfunDucdWfdGUf2
yqwQhYasiowKDRlNe5bKXs/lj/e+732vfHhsSP8gID5vjkLCkloGAmHJocE5
0T4mISIyIlCnQdT/PzuHoAfk4iFy8wa9eJg8hPIqeQlG25CP/NyzCY/wKHd9
1wI8xh1XWZBC3Halt1xhYR7npkUoTgmKUowbLve6y3yCpZahLNcsSSne8aql
ueKT/OcSy1GealSnAhX518X+YyUuu8i/rcxfVuEpFnrJqlx0gTWY7wXnWZNa
PE1tzvsszzDXc86xDrM96yzrUo/6vO0ZZ3raBpyyISdtxAkbc9wZPsfz/GlT
mtGcP8z2d6fbgpb85jRf4EV+daqtaM0vTvGYWbalHUfN9IjteYkOdKQTh53s
z3bmkC/zk5N8hS786ER/MITvnWBXutGT13mN8R60OwfMsAfp7nec3znWbx3j
N452n73pQ1/CGGU4b7LXNPsx0gj6s8cRRhLFboc7gFS/NpuBvMUuB5FOBtHE
EEuKgwmw0zi+cpjxJPClyQ5hqF+YZCKJ7jCJoQwxmQSHkcJ2U9nmOLY6nC2O
4HNHstk0PnMUnzqaTxzDx45lk/FuNOB4JrDBSXzkRD50sOuNc52T+cBMspjC
WqcyjemsMdbVxvi+0b7nIO8DXe0wxw==
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{80, 148, 146, 67, 5, 113, 98, 
                   148, 92, 106, 5, 9, 151, 98, 1, 65, 63, 46, 76, 72, 150, 
                   116, 9, 84, 15, 104, 97, 13, 98, 128, 154, 96, 94, 72, 131,
                    145, 152, 31, 18, 72, 4, 98, 1, 90, 43, 51, 16, 9, 143, 
                   50, 97, 8, 135, 103, 93, 139, 82, 36, 141, 155, 29, 140, 7,
                    10, 65, 153, 156, 83, 1, 32, 142, 105, 135, 140, 49, 75, 
                   21, 11, 11, 128, 58, 3, 24, 140, 16, 124, 113, 76, 70, 96, 
                   37, 143, 79, 5, 27, 76, 14, 98, 85, 92, 76, 7, 53, 27, 51, 
                   148, 51, 33, 64, 151, 91, 68, 104, 81, 2, 33, 38, 98, 98, 
                   18, 52, 98, 3, 84, 26, 128, 9, 132, 40, 138, 132, 97, 78, 
                   66, 27, 70, 96, 77, 46, 137, 26, 10, 114, 133, 27, 119, 22,
                    26}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{4, 6, 4, 5, 7, 4, 7, 3, 6, 7, 5, 6, 5, 
                   5, 2, 2, 2, 2, 2, 5, 3, 1, 7, 3, 7, 6, 3, 7, 5, 5, 7, 3, 3,
                    2, 3, 5, 4, 1, 6, 1, 6, 1, 7, 4, 6, 4, 4, 4, 6, 3, 4, 5, 
                   6, 3, 4, 1, 5, 6, 2, 6, 2, 7, 2, 4, 7, 7, 6, 6, 4, 4, 2, 3,
                    5, 3, 5, 3, 7, 7, 1, 7, 5, 7, 5, 3, 5, 3, 4, 2, 7, 1, 1, 
                   1, 6, 5, 4, 6, 2, 7, 6, 4, 1, 2, 6, 5, 2, 3, 6, 6, 6, 7, 5,
                    2, 6, 7, 5, 3, 1, 4, 7, 2, 1, 6, 4, 6, 3, 3, 2, 5, 4, 6, 
                   1, 4, 5, 1}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwN0vlPkwcYwPFiQCsq6QiXY2pxKDUevGbMlaM81YHAsmHn5Nh0WmBgiRdO
1A6BVVGOgvAiQQ7dAiKmCoFOV6FOeVghUmQqIpdDXUsptEDatxcU0Dh++Obz
D3x9Ek/sTXag0Wi5i1FZE0srYjuRr+4LzquYAV3nNc8f39lAFL7pktZOYU1O
jmI+TgG60URHlwE7Uutmu3+tfoW6cc65VSE2ZA53ymV1r5Fc801xobMO05qt
pZqNC8g1L7BWJ/yHks8CZ46GzSCZyk20/W7CGj+nDSsY95DXM6keq1Mhw9Ua
ccTNiAKbUr2Hb0XW6cytS1xGUUp2B4xUjYNyKFmZGzOCKj+BWlVsQ0GQ+Wbu
FQtSgWYiO+gqMAvvZNqmKfRSiycgQY/0mS9cQ4YGkYziFR29QiFX/bUPyziA
ksuXVfs9jchMGtpuzJ5CFdXFqH08gb3m0KVE+wTaexsCK7wlKLqd9nGRXyIQ
ucGVz9K0SH8vG96se4MUN8xtKlQD+fLHY45rF01py2yUaZCd192//LcJFHSR
mYV1b1Ep9c0q+EmC/Ef5zBuwgDr3DXVbV1lQF/UwvmLShILA4dPe6/uQ90NY
9NPrU8i3+0dUVD1EYcCn++aWWYGQBR/T9/Uj/ULw0dCi80h6KMLnImuRO5ux
m7ayBcn6YB09VIetm3YnmcdfYHuMZ4PC+TmS3M68IFBAa9neEMGdQZCcqqsP
vTSIhItb5R6NHAjfolI+Ww3Kk4bytBI9MNPFCVSBFkUiTWXWERukdf9SLtYb
gMj6ZOWZA/NAJt3tNrCNwA6q2l/c34H5rFjntZs1UHmRtEmFE+CVrCztuGgB
Ie+r2H1xWmRoHBRbWRZgfBt391CjHu0unAxNyihQJ5tY2zxUIBDl7NRco4Db
/Jf8j41jIPHOLBcXq4D3IV2398YcSJ0OZhzeN43cwerjycI+IHd4ZoVz2rF1
3P9t1OpptC8JOOWP7Si9d8HBJBsCyYJY7q42IO2BL4efakG6jKHlihF7663x
plQjskxb9LUvFUA/HClxOtODlYxnwu+kBlRFyC9uYckh8l11yfNHT5Dd0Rb9
0vQGmdrMY/3R/SC56ciJ2VGDrIVb0hPbhoB2z3vGZ34YCPXgwZtUFwiBeNhi
uAOskZDrsi/twJRFza8+pQeRxdRLT3oOktcXLH8TGmhPICjfsinwavA7a1+v
AqKJcysk3or27LfebSNjwPaR58z5TIPX2YGC0V2jyDD0cduSTMja3jRVkPoE
Ww/P73L9pxF7C8t+VoyoId/8J5FdJ0ZSV+Fe8NEYCsucBgRdRqj5Pt/lasx7
iHdbdyjNagY2zWOFOe4ptDd8aMiOVIGUzDin6HiF7Kz5nZM7tFCjHGk5ELz4
dfn95gfxeuD9G1myRuTApacQHPfPe5DGi1sW3doH/PP3eXbRLEhrbh9/UTuK
+emq5ZeGeuB/T4RJUQ==
                  "], "Children" -> CompressedData["
1:eJwdiWV0FgQAAO8BUtIpndKNgHSnUqObIaNDP8rBxsYGo0tBke7GoLu7FVEa
BIMO6TwGP+7eu3c5OvUN6hIH6JcwVkHBg6oGAsGhTRLFRt0+/UO6hgSKl+72
7sfEEuc9cYnHB1SlGvFJgK7zjQlJQ1oSkZgPWWsSkvLaNSZjta9MSXJ+MQU/
+9KfTEVqXvijz11lOlaah7yk5yOeucIMZCQTmXnqxzxxuY/NQlaykZ0cPHKZ
D13q/+YkF0vMzWIfuMj7LjQfCyxBSfJTgIIU4p5FuWth7liE2873lvMsxlxv
WpwbzvETSnHd2ZamDJWZ5X9+SgUqUpZy/OtMyzPDf5zu3/7gNStx1WlW4Xv/
8jurU4MIIqlJLYYw1SvW5rJTrENd6vEZl+zG53zrRb+xPg1oSCO6MNnGTPKC
XxDERJvQlGZMsA1taU4LWjLe87binONszVjPOsYztqMTo/3T9vxhB07bkd8N
5pSj/M2R/mpnThrCCWM8bleOOcLu9KAnvTjqYHoz3D705YjRHvZLDvk1B/2K
AwbYbz/22Z+9DmCPA9ntIHYZ5U5D2eEwtxtpGBGGM9RtDmWr4Q4jii2Gudkh
RjOcTY5gozFscLDrDfUt/qsW1A==
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{146, 87, 96, 9, 6, 98, 79, 96, 
                   13, 65, 75, 39, 110, 72, 128, 50, 5, 151, 92, 37, 145, 98, 
                   116, 114, 51, 143, 98, 16, 1, 68, 3, 88, 105, 131, 3, 36, 
                   7, 78, 155, 103, 133, 9, 100, 39, 126, 135, 104, 34, 65, 
                   133, 71, 57, 33, 81, 118, 125, 91, 151, 42, 94, 74, 26, 69,
                    154, 22, 28, 70, 43, 136, 124, 155, 10, 86, 49, 113, 142, 
                   12, 14, 9, 104, 84, 98, 98, 53, 106, 76, 129, 65, 97, 151, 
                   128, 9, 4, 116, 72, 54, 5, 73, 52, 126, 18, 99, 15, 33, 87,
                    143, 29, 117, 21, 50, 11, 41, 1, 70, 123, 141, 1, 17, 14, 
                   26, 153, 40, 58, 101, 147, 48, 61, 30, 97, 126, 69, 26, 10,
                    141, 78}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{4, 1, 2, 5, 3, 2, 1, 1, 5, 7, 6, 1, 3, 
                   4, 2, 1, 6, 2, 1, 3, 2, 6, 4, 7, 5, 1, 2, 4, 3, 3, 7, 4, 1,
                    7, 3, 5, 3, 3, 3, 7, 4, 4, 4, 2, 4, 7, 4, 2, 7, 4, 5, 4, 
                   1, 2, 6, 2, 4, 2, 2, 1, 5, 5, 3, 3, 2, 5, 1, 2, 1, 1, 2, 7,
                    4, 1, 1, 5, 2, 7, 7, 5, 1, 6, 6, 4, 5, 1, 6, 6, 4, 7, 5, 
                   1, 4, 7, 5, 6, 4, 7, 1, 3, 1, 6, 2, 1, 1, 5, 5, 1, 7, 6, 3,
                    6, 2, 5, 4, 4, 5, 3, 2, 2, 1, 2, 5, 5, 2, 6, 5, 3, 2, 5, 
                   2, 6, 2, 6, 5, 3}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBTQSy+yFib1JlAQAAAIgAAADYWk4KBJHCP5AMZtOqi+8/2D5Ug4nV9T8w
pHzShE32v4BOPX0Tb/M/aL+fhhPQ+r+YMDYWuW7uP6jE3EJfDv6/4CF3BhyW
8b/oOCYlSGDrv+BLMkORz/S/cEqXn+kJ/7/oA/xRWvXFPwg9NCnPteC/eObm
RCeT979In5q9g3b3v1Bv5Hl9pfe/ADxgVurS8r84l1pO2xP3v/A58jB+OpY/
kPmrN99zor+Qf3ACnNbBP5DLJnjqI+6/yLAkfYlkqL8gFZ8tR+LkP1ATGvlF
4eS/OJ8WldXTwj+wdJKLLVvmv7iChohZ+eS/oIYt1RhAwb84miYXOgXsvzDO
JQ2LN+u/sMQ1FNUl8L/whqkI7hPEv8Ategqb9da/EMukMNo2779Isl9Jc1/s
v7AiFXSnEvq/MO55dra85r/YMzCpTOjxv1itt6E6j9S/aJCiR9L26L9oavHx
qI3xv4AKf2Q7SNe/iK9AA+bO07+A0u2ileCkP2DZFIsPcvG/AFblbluewT/I
h/h/brLpP6gJEG2BWtS/8FscpPcW4D+wc/OyU6jgv9DdVhyHQt4/EHzhIYbs
7r9IYRgpaU7DPyA2KAheXuE/gB3eNuAZ27+YcMFZGaD6Pwj1TmDfHrk/WIVe
3rlV0T+4poBDimqpvzjAeEW9Uco/sI61plcU7L9ICyDQzP/kv4DO8bX+avM/
cPTT9cEr8D8IH1cuhC7VPwA3+QJrZMi/GNJnlH2FzT8gnC29bWLRPxD+1US0
1rY/ADAAyT7r3L9QBrMSdy3UvzgleLI8Q8M/uJmkSTQM3T+wWVkqFF7Nv8D0
3tqHmYm/4CeLY/hv47/Qv5STCG3uP0DUbg3z9OK/SHEzDq5h3j8wd1DXl9Xc
vzCFyyTwnuO/4D/bDGB07L/owCE8jnrnvyAbOzTVXvE/uMpM7fFR+D8gInTO
8QLZv8AW6vCBO8U/CNIwM6ru7z+wveZLtxbWv0BHi+BkbPW/wAT8bCs5wz+4
oX9Hwtr7P4jFQ7o+J/g/aE5qxAd98z9QSHQq9tbtP2DYQ6hEWuG/sHH+QFWz
0T9gVuv3kHPuv7BUSfPBp/I/mDqWqgZB0D9QazMUe2P0vwBQVwdOuNI/uF0P
dYpv4b9ojTutJ+rXv0B2VQ18CfS/UAAhxubx9z9wWrZFIjLcv0D5oxBD+q0/
6JvmEBYC3j94ZFObn13xP3A2tEAiC1s/WD6eORaP4L9AP7fitU3uP0gRNhlw
fsw/YJAifx0h3L9Q18LeB3zZv3gaMO4iOuQ/AK4Mw70RxL+Iqf2b/E3oP+h4
sau+4tw/CB+OKhDLxL/QHMlYVNL4P1hkAGdTpOM/AAAtr4Ww7j/wm/7VIlr+
P7DStSF3a/k/aEEPIC6M8z/cfD1lessBQBiMjhHKj/e/aIGhge53+j8I3KDW
TG/lv5DUl36AAuk/4JYQjY3l0r94G89awcLFPwjRO4w=
                  "], "Children" -> CompressedData["
1:eJwdiWeYCAQAQN93obuMCNl0aViF4hBChEPiLjPr5AZxlzPOcWecW/bILntm
Zmak7IyGnT2iKNmr/Vx+vPd973vBXePCogKAPoFZCotIqBcfH5EYHpQVobF9
I6Mj4yuHxPz/M7MIeMwTZCM7bWhLDp6kNV+ogQSxwf9c71PkJBe5yU8B/nWd
eVjr06zxH/Pyt/n4y2f409X+YUGepRAP/dzCFOGB9ShKMapQleKUoBzlKUkp
7luW51jlPVcazAqfZ7mlWeYLLPWuL/ISL3PHz7xtGW65xJsutgKvcMPXeZVF
VmKh163I7y6wMvO95mv85jx/da4hVKMOdblqda5Yg1+c48++QU1qcdnaXHK2
P/kmF53lBWd63k99i/o04G3O2YqGNOKs79GYT2xKM0JpwhlneNrpvsM0W9CS
5kz1lO9y0imeMIxwJvujkzzuxx5zoked4BHH2472HDad9+nAUMbZkbEeshMH
HWNnRtuFCLryAUkk041IfnAgUUTzIT353lF+ZwzdGem39uCAI9xvL/aZaSxx
7DXDj+hNPOkOIJE+9OUb09xjP3bbn10msNNUdzjc7aY4iGFuc6hfO5ivHOIQ
BrvVZIeRZAqDHM5AvzSVLaax2UQzGOAmM9logo8AJLsa0g==
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{12, 9, 150, 72, 98, 79, 85, 113,
                    143, 38, 94, 110, 148, 92, 15, 13, 151, 64, 116, 79, 51, 
                   1, 98, 153, 19, 5, 131, 88, 76, 72, 148, 92, 4, 104, 68, 
                   50, 98, 53, 5, 84, 91, 50, 138, 87, 33, 86, 93, 10, 78, 56,
                    128, 7, 155, 103, 118, 133, 126, 109, 104, 26, 24, 21, 
                   122, 114, 57, 49, 47, 10, 25, 124, 16, 94, 111, 98, 9, 27, 
                   120, 133, 98, 3, 4, 39, 63, 150, 145, 97, 76, 65, 128, 116,
                    116, 89, 33, 90, 54, 98, 129, 101, 76, 51, 126, 7, 27, 
                   143, 13, 5, 50, 7, 106, 52, 97, 72, 29, 46, 153, 97, 140, 
                   11, 10, 22, 74, 40, 65, 147, 11, 24, 41, 140, 82, 75, 26, 
                   143, 96, 117, 105, 61, 27}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{4, 6, 1, 6, 2, 3, 2, 2, 1, 7, 4, 1, 4, 
                   1, 5, 5, 6, 2, 7, 6, 5, 5, 5, 6, 1, 6, 2, 5, 7, 2, 1, 6, 3,
                    6, 4, 6, 7, 3, 3, 1, 6, 2, 2, 3, 4, 3, 7, 1, 6, 5, 7, 4, 
                   3, 2, 4, 2, 1, 2, 7, 2, 4, 4, 4, 2, 2, 2, 6, 4, 2, 1, 5, 3,
                    3, 2, 7, 4, 6, 4, 5, 3, 5, 1, 2, 5, 4, 6, 5, 6, 4, 7, 2, 
                   6, 4, 5, 2, 2, 1, 2, 7, 1, 7, 5, 1, 3, 1, 5, 4, 6, 2, 2, 3,
                    2, 7, 1, 1, 5, 1, 4, 3, 3, 5, 2, 7, 7, 4, 4, 2, 5, 4, 3, 
                   1, 5, 3, 1, 5, 1, 7, 5, 3}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBZQSa+yFib1JlAQAAAIsAAAAwufGBHdLUv2Dh0juHl/Y/GHSmCOPK77+g
V4FTSRH1v4jT39J1/7o/0K/1Gje08b/0mL8zaagSQNAnDMg4f/u/SJ+avYN2
97+wFHyuc4/rv8jkjCGIXfa/sNWSwKZo4j84+U2oIF3uv3g1ZRARGP2/aJRW
gkPy8r9oInkbh+bXvxDFMlgkBO6/qCMHi7la6r+4xZHG1Dz3v4hjDbtJfYQ/
SIERsBle7L8gx+cFqq3pv7AqROqDWPM/wCZSXQvy8b8AoPIt9Z33v2BGtHz6
KPO/OA/8bGHL8r9obZL8fvfzvzALdm0gMfQ/yM6bQHYM9r/o27xkbQTTP/CG
PU4m6+2/4BKBy+TDwT9YBQ65Kyr1PwCANzc6F/W/sO+JqBhN5b+gPkVuNzzK
v+g1P00wIOy/8DnyMH46lj/gLf/4v6XVP6gUKAp/OMu/GInNwp1F8D9Y/DTE
+gzRP8DjfBrBDuI/eHruUdo03r+gSmzCQr3ivzAs8mQ2JKY/2LUj9lCclr+A
7/lkDaDAv5BexChMuOc/iOc4QUQg5j+4BQSVWqm0v+hx50XPCgdAUGszFHtj
9L+Yw9Sw1wzNP9hnir+QdeQ/jKKLwa4KAEAgtUn6GXPpPzgHYKZd/ARAaJ8T
9wdQ4j9Q+kp3VbLUv8BDnOan0NO/KMcrCOT2078oV4Vzos/rvzjPU+HwMM8/
2P9bPXnCwT+Q3QY5g/XUPyBR9O4BptS/0JDiEbhEq7+IRUKeSZPqP3gpwmBk
lO6/iLbRnfZ11r8gCQluHwvWv7jm1jFXaNY/mM2hE7Ue879gG5VJoubMP1Dm
z2SVSOY/gGqKfXlV4D+oSuBCfW3iv2BW6/eQc+6/OGf5hLQ24T8QXMmZaNDU
v8gSIBoXS8s/qLgEiSXJ9z8oLDeqrLfEvzgoDESNEei/aP0E5oqPsT8odxWr
9yriP9iKQaxGVcM/CAAIVO5A8j9oVoM59De6PwigjJy4ypI/+KnRN+T25T/g
PujWKB3ovwBsLlcqq+u/CBxMjd/e0z/wxopqeJfJP0BVZzs0HcM/0ACGdTnu
8b946JA7nkraP7DJAGtjSuI/CMbjVFDK0r9IsGpzLILBP9AP4l6uUPE/sKql
xXW+0j8w+IcPIhH2P4i91VOX+sq/MHdQ15fV3L94OV7VkgnoPzCd3vV5dOc/
cJtlkhzD2b+4cW9PJ+7nP4ihUUA9JNi/SBTCKDAT8D8gWjoaZ3/mP2ADxE3x
5OK/YKrKJFy2xr9Ys5GEtM76P9j6eLOn6fc/kARUFXcX5b+keuwetf0AQJin
drKQouk/oDGuoSX09z+oPAD7563wP/jIBpzShsG/4BcB463B4z+QbRAJaLXu
PwDY7vxgFvY/kLy5thCr4z8giUyCJGXTv3DV71SKPsw/ECcWGqPfmL+4Z/pC
Esysv2CT29omV+M/WKQfYfkg2z845+QOpZjyP5AbK7FTIeI/UGnPULaF2T+s
LMYESPcCQF4TSmc=
                  "], "Children" -> CompressedData["
1:eJwdiVV0EAQAAO8NkBAJQaRbQqkRo7sbN5SQ2nQwkByDMbprhNJd0iGNSigt
0igg3R1KNxyDj7v37l22sE7BrQOAroniFBwaXTEyMjQmJHFc1OwYFd4mPDIw
KOLdj40j4D3xiE8CilKMD0iI/mYiEpOEX33jL752gx+SlFd+RBo+JRnJeWkK
XvgxKVnvc9eZitQ8c62fsManrjYt6XjiKtOTgcdm55ErzUgmHpqZLPzsA1eY
leXeNxv3XGYOlpqTz8jFEnOTh/9dbF4W+TkL/c8FfsF885GfAvzkXedZkELc
MZAizLUwc7ztbG85y5sGUYKZ3rA4151hSUpRmul+T3vKMM2yTPWa5ShPBSoy
xWpUpxKVqcJkrzrJK1blshOtwQRrUotLjvei46xNHepSjzZEUJ8f/ZJgLtiA
8/5gCA05Z3O+YqzfMMazfs0ZG9GYJjRltKcd5SljbcZITzrCE7bgX1ty3FaE
MtxjhvEtwzzqd4TTmn8c6t8O8YhtacdgDzvIQw70oB2Iohsd6cQBO7PfSLow
wH32tyv93Gtfu9PHv4xmj73tQQx/2pOR9HK3vehNT/sQ4y770o/+7HQAI+jh
QKLd4SC2O5htDmGrQ/nDYfzucLbY3c12c5OxbDTKty7MIM8=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{113, 113, 98, 150, 96, 84, 27, 
                   142, 13, 143, 113, 98, 87, 72, 97, 98, 37, 4, 68, 116, 2, 
                   5, 65, 128, 10, 64, 50, 53, 143, 9, 19, 1, 56, 140, 17, 
                   153, 31, 7, 105, 21, 52, 36, 10, 49, 133, 141, 65, 98, 41, 
                   71, 83, 152, 75, 147, 146, 86, 149, 125, 151, 48, 72, 45, 
                   42, 94, 77, 152, 115, 16, 143, 119, 111, 13, 9, 76, 96, 76,
                    110, 151, 72, 4, 79, 5, 85, 87, 98, 114, 92, 15, 50, 16, 
                   150, 104, 126, 76, 1, 9, 67, 98, 78, 78, 29, 126, 54, 33, 
                   72, 150, 13, 124, 133, 14, 11, 155, 43, 47, 26, 46, 70, 51,
                    105, 140, 49, 104, 32, 122, 109, 135, 30, 44, 136, 147, 
                   91, 3, 26, 72, 27, 57, 140, 16, 61, 28}], "RootIndex" -> 1,
                  "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{3, 1, 6, 4, 5, 7, 2, 5, 3, 6, 7, 4, 7, 
                   4, 4, 3, 5, 5, 1, 2, 4, 5, 7, 5, 2, 5, 2, 7, 3, 4, 5, 7, 7,
                    3, 3, 7, 1, 5, 2, 1, 7, 6, 1, 7, 4, 3, 3, 6, 4, 6, 4, 5, 
                   4, 6, 5, 3, 7, 2, 4, 5, 3, 2, 4, 6, 7, 7, 7, 2, 5, 4, 1, 4,
                    7, 2, 4, 1, 7, 6, 3, 5, 3, 5, 4, 2, 7, 3, 4, 6, 2, 3, 4, 
                   6, 2, 2, 4, 3, 3, 2, 7, 5, 7, 6, 7, 6, 7, 6, 4, 3, 3, 5, 3,
                    7, 6, 2, 7, 5, 7, 4, 2, 6, 5, 5, 1, 6, 3, 5, 6, 6, 3, 6, 
                   6, 2, 6, 4, 2, 2}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBTQSy+yFib1JlAQAAAIgAAABwN9wwPvj4PxBDtq9cPP0/yAF9ibGO47+A
c1htFHHUv1A90/Audfo/UDqgEvhC27+4sLkHt9/rvzCkfNKETfa/SNcpdXAP
8z9QmHwO2vr0v6CV3fpAiua/oJu3vSkC2b9AH84BNgfkv+Cub0HHIOS/uAnO
41nI1L+glx/3uLX3vwiBdv0pCPG/4MlrXqlV3L+YhRFH7Qb8v9BAH4m/aeW/
cNQxcrkr67/gpjUhzKDxv7AC4WnR/+2/gL3Zfose078QjHKrnOTrv8DgJbWq
vem/eCCSIQE44D9wObl69bLyP1B7YaYJqN0/6HcvdjbP+L9YW9iycYv3v1Be
sGf+y9e/iNyAnIm1zT9oockUhHThvwg8eIxx3Pi/GDQM7A9cor9gbrvt/tnz
v1jSnP7EAdM/IG4qHnb98L+A9GY8UfXIv2CsxP6fQLO/0D5dtC6C578wNG0h
IY3Ev1ikKwcvTtC/8JAWqnPi8L+oUhMLxsfpvxg61LCiRuO/IDxX0jxQv78w
NCa2fJnyvwCY0ISFCd+/EIcuNXs23r8A66zwBm5cP/TNlVA4UgxAkNCetAZG
/T8wZITi7+q1vzgaq3yI9PK/oKpEgnF017/whK0xqHLrv2Aip4FsqvM/YIJ6
20di6T9wnspDIRU1P3hevVFIfuu/OGq/gOBS/z/4dEwjgEvov3Dv7YD5dOg/
0EayTqPO/b/gagLV2Tj2v+BzGfyYodc/0DMJho4n4D9YwwbQa9fTv6D93s6F
MuK/eLmfQmsb1L+Am43obq31v2BN9jAfFuW/yH/4xiVp9z+4I5yPSDXjP6gz
dN6Pie6/8PpVYPIWrz8Av0Kk92i7v0hRFh9q0+W/eANmFJio8b8wUEPRevLd
vygvPXptRuM/6DY/X5Sz9j+AO9w35urmv9i2kEOPve6/8FNEfi2s078YMIYT
a5nTv5CPfOrJdcM/2ACSIpzh3b+goGiZPATLv6gG0osKCdU/kGaEo1Vjpz8o
TFKYE8nlv9B1XhsnlfQ/ICzKXnBw0T9o1VRqGKPjP+hqWzdHHeg/AHkGzB73
AkDw33CRL1upv3D7m5Qltbe/aFLzKmT66z+o/slJ5QTwv/ho8Qxd6/A/OBU0
FCN9AEDwOLfU/u/iv9DhRxObxMS/YDPxjtRT2T+4DGwdDOfjPwg4VwQarOY/
2JkXC0He4j8QWAIBc/Lgv5B2BhNzeMK/OGQqt1vz3D8AANjzyA7wP8Csb0YA
GfY/IBRCJFvH8j8Q+Gzv/WboP9CMrh3JIMU/iMLhi8Bh07+w9kGjtGjnv8Bm
tNPxXeS/yJvgXgS96j+oAew/e6/qPxiEvtAtx+4/QOhwCHqO/D/Q7D056VuR
vziqSFkiNfi/mBmPSXny/D/wiYp8R1LDPwjk8o0wScI/aEaKVGSg7j+wTzTK
hGf/PyDJv+wJ1f8/sJt9xoC3ub+wwbpT/ynCP3fOTFU=
                  "], "Children" -> CompressedData["
1:eJwdiWeYCAQAQN93obuMCNl0aViF4hBChEPiLjPr5AZxlzPOcWecW/bILntm
Zmak7IyGnT2iKNmr/Vx+vPd973vBXePCogKAPoFZCotIqBcfH5EYHpQVobF9
I6Mj4yuHxPz/M7MIeMwTZCM7gxlCDp4kiWQCCaIqITxFTopSDF1nLnKTh6f5
zyLkJR+FWeu/PsM/rjE/Bfjbgvzlap+lEH/6uX+4yoeu9IErLE4J7luFkiy3
NC9wz1Lc9TnuGMzzLPO2S73li9y0Mjd8iZcpw3XL8ruvUo7yXLMCr/CZv7nE
X13sVStyxUr84iJ/9jVeZ6GXXeAl51uNeb5BTaoz15+swUXnWIvaXHC2bzLL
erxFHWZal0897yfWpwHn7MTbNKQ979OIGTYmlLNO94zTPG0TTtmUZkz1HabY
nHc5aQvCmewJW/KjYRx3ku/xsa2Y6DFbc9Q2HLEth23HISd40A784Hg7Ms7v
Het3dqYLEXTlAwYyxm5EEsVov3WUBxxpNDHstzv7HGEPMt3rh/SkF98YSxwf
sccMe5Pubvuyy3h22ocdptmPVPsz3ARS3O4AtpnI1w7zKwex1aF+6RC3ONih
JDuMFDab5CYHOZxUNjrQNNLJINEvHOAGM1lvgo8APN8a0g==
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{9, 106, 63, 133, 72, 76, 27, 72,
                    151, 85, 114, 87, 19, 46, 98, 92, 76, 37, 116, 5, 1, 98, 
                   16, 2, 107, 64, 143, 126, 87, 8, 78, 29, 141, 132, 127, 65,
                    70, 24, 1, 7, 41, 8, 140, 148, 116, 16, 19, 70, 54, 90, 
                   27, 9, 152, 86, 148, 122, 151, 73, 84, 9, 7, 77, 11, 97, 3,
                    78, 65, 16, 117, 78, 143, 9, 26, 114, 11, 96, 53, 110, 53,
                    9, 20, 94, 148, 5, 98, 79, 98, 145, 5, 9, 106, 98, 16, 10,
                    39, 103, 110, 33, 17, 152, 34, 154, 56, 150, 137, 39, 127,
                    155, 126, 129, 72, 98, 154, 51, 128, 69, 75, 109, 30, 97, 
                   50, 69, 118, 49, 125, 133, 27, 76, 61, 25, 138, 3, 47, 50, 
                   111, 82, 3}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{7, 4, 4, 3, 3, 2, 1, 1, 6, 5, 5, 7, 4, 
                   3, 4, 5, 6, 6, 1, 4, 6, 6, 6, 4, 2, 3, 1, 5, 2, 7, 3, 3, 3,
                    7, 6, 4, 4, 5, 2, 2, 3, 6, 3, 5, 7, 5, 7, 5, 3, 6, 3, 2, 
                   4, 2, 1, 5, 6, 5, 1, 4, 7, 6, 1, 2, 3, 1, 3, 5, 1, 7, 3, 4,
                    4, 5, 6, 7, 7, 3, 6, 5, 1, 5, 6, 6, 1, 7, 5, 3, 1, 7, 4, 
                   6, 3, 7, 6, 5, 4, 6, 3, 5, 6, 4, 1, 3, 7, 5, 6, 5, 4, 1, 1,
                    4, 2, 4, 6, 3, 5, 7, 2, 6, 5, 7, 7, 6, 1, 1, 2, 7, 4, 3, 
                   4, 5, 2, 4, 7, 1}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwNww1QkgcYAGDq1LS0c9M4Ng+lv61W6yhvSWK+VjOxZFrqQs3FbF1qYc6f
pmdNss5olbqdGatJWjdHnRJSKneevZ/hLbHJISp+mSj+JYnpJ4phkdueu2dt
ypnDJ5bRaDTJ/93jVuHevhfofeDyI9/JFhQHHyGiPu0E1ocs4r7vCAr1Iysc
tEWUcJvWsR8MgfL4Ou7pdArN9/hK0ZgdHX9wGJF+VpRzGXsz+2dRUAuxbgVm
VPqeU2SXWpERZ3wgFrzCTP+2G4VVL1HtoRtNaO9B8oSkaQ2lQXnNoGdNy3Mk
fVP2lxSMoLI06979/n5QU0/8pt63IiPrquxhbQfGfLaN6HVZRDLSZ6GTMiLZ
tSdiZHYMCGnyn5RxGoTb66NOJlqAbCnTyq8YIe9QkAvVMoBlNFXBqdtvUZhQ
1vzduwVMDf5WxZ+0obI8YHkQbxA4bNG4S4Ud5IVvT5/dtIhS0v/XtJS7wJH5
hbCWv4KYfl4pU7wsjLE796Bv+iMQFsy9uBhgQve/u68EnB1HakLTsJnUQLs2
Pv6xtRaqHpl6MiLsyCp+Emmuf4WpmmuVoZuHQD/pVpVdMYFEVcUUef4Ouhft
r/6314bmJm5NrrcDWZk8t9/dh1BAlnJ2LdmQENZp+LU0ol1XmZRUokNaHTNu
qU6NRPW2gJs9CyhOsq4rDKdQHZG4VldAocXOTDhmfY1EdNulFJkRJGfv8sZj
JlDf8rUX6U6iRTEYvc/NDjyRwXRwfS8QTobQeespUAbzVNaMFqnZ8egVfiQQ
3GFrt7Mfy7ZkrcoRNYKg+CNpjWQU2y87CjNUr4GVn3i+/tkYZl6buekitGLM
mdh5xeQcykNezocUSZH3sKRHJLMhdepWkGuEBeTp6zNLarVoPhqX7Ea3ouBp
iKIxpwvzhL80vz8yjnLVNLmqoRWkw4addwdGUR+wo6wvjUL5ra+Sd3mQyFOm
Z28tagVekfKbDO44cDawVyY+06AFL7VFSEdRzTayZBuNcPT6+VzT565htMHt
scWefeiYEGXwLzYj2zNSUSmdAU4lv2PrfAfI//KJCoo1g/qkak0rsQiOHQH2
kEADeg97PJ1260T1gXTFnZcd6K3Qp6f9bADaOVZO6M5qpMShm7akXkce0xSv
Xt0Lji5REu29A8I2Wj0HxO+AdL1UrAq3gVh6uK0gtx/JB3EhutXlKHzNcO02
zQHjx92L2mw9Mlr5frYaGwgCDY17fjIBg/wwM3xjAgTi/CXJ7Tkg6OzofV6V
qPyHPQXVo2CJL2muUCzCpnCv3obvdcDpPBNab7BBKmd+Q/RSBwpCZbvopWZs
/20g9A2zCyR1s8k+h54DUXh1pdJTA97lX/hn3LRAGP3NEeehISDpzt14wYpU
67RTL5mEPHrUlxtdh0Gy83jwsk8mQD31IlASuQDuV1esjjn2Bsi4jx8HHXAC
I3/9D1qPLqD5lCt41e9AzrwwlsJbHvYf8Z1Mlg==
                  "], "Children" -> CompressedData["
1:eJwdknl4CAQAR9/nyIZyk9vIfa4ylfu2cmRuCRs7OmzaltnJNmwoV5Szi0I5
C5XcZ+ikg9yKUKjchWf88X7f977fvy8oIi4sKh+QEJA3YeFJbePjw5N7BeZJ
aGxiZHRkfHBIzL0/N49898lPAQpSnwY8QCG0LAGs9SGKEUhh7liE2xbllmt8
kE/930/8z9UWpwQlWeVNS3HDlZZmhWVY7nWXec1yPEx5KlCRqlSjEh971Y+s
zFKvWIXLLvFfg6jHYqvzof9Yg0eoyd9+YC0WWZs6XLIuF13oBd/3L9+zIY2I
JobGvOujPMafNuG8wZzzHR+nKWdtyR+G8BRv24wFPsGTnHG+p51nc+bagjn+
7mx/sxWtaUNb2nHKt2xPB/rRn4504ll60pkunPRNTzjLUJ7muM9wzK4cdabd
6M4R3/CwPfjVGR4yjIP25Rd78bO9+ck+/Oh0DzjN/Q7gBwfyvVN9jikO4nm+
83UHM4RvHUoUrxnOZL8xgq8dxj6Hs9dI9jjJr5zobnN9gRd5iRzHMZ6XGcEu
JxhLHDsdSRbZvEI8CSQymvHu8FWSGOcost1ultvMdKvJbDGFVNJIZ6ybzWCT
Y9zoGDY4lkwy/NJ015vmF6b6uSlOINnPzMnrY7TrTPIurhca0g==
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{140, 20, 133, 76, 9, 65, 14, 97,
                    72, 128, 155, 133, 138, 41, 78, 1, 8, 124, 140, 77, 145, 
                   12, 148, 116, 87, 98, 79, 72, 101, 113, 51, 89, 92, 70, 98,
                    149, 2, 116, 5, 148, 102, 126, 98, 99, 106, 7, 4, 138, 
                   143, 151, 33, 54, 105, 46, 31, 50, 83, 122, 24, 39, 135, 
                   147, 21, 126, 104, 39, 36, 33, 41, 71, 27, 11, 47, 22, 94, 
                   63, 98, 110, 27, 50, 151, 129, 65, 53, 143, 139, 151, 91, 
                   69, 11, 66, 110, 49, 7, 96, 5, 37, 16, 98, 151, 27, 87, 18,
                    39, 71, 116, 151, 5, 5, 116, 98, 15, 109, 3, 76, 148, 98, 
                   29, 26, 3, 97, 152, 134, 27, 63, 11, 94, 57, 137, 140, 25, 
                   24, 116, 119, 28, 112, 82}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{4, 7, 4, 1, 4, 6, 2, 7, 2, 4, 2, 6, 5, 
                   2, 6, 1, 5, 7, 1, 1, 3, 3, 4, 3, 2, 4, 6, 2, 3, 7, 1, 6, 5,
                    1, 6, 4, 7, 2, 5, 5, 4, 4, 1, 5, 6, 4, 1, 2, 7, 6, 3, 3, 
                   1, 6, 4, 1, 3, 1, 6, 2, 5, 2, 2, 3, 6, 3, 4, 3, 4, 7, 5, 6,
                    6, 5, 5, 2, 6, 6, 4, 1, 4, 1, 4, 5, 6, 3, 2, 3, 7, 7, 1, 
                   6, 3, 3, 6, 5, 7, 2, 5, 2, 6, 2, 7, 6, 5, 6, 2, 6, 4, 6, 4,
                    2, 3, 3, 2, 2, 4, 1, 1, 3, 5, 4, 6, 2, 7, 6, 3, 2, 5, 6, 
                   2, 2, 2, 3, 2, 4}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwN0v871AccAPBPume7Z67CzHyJiJZHT+1M97CavT+mIlu6JrpivsVFKN8y
PY/q9shc30/a6Is9etpyrehaxJW8LxpKzsclTijfrjuOu/s43I1s88PrP3i5
xR/+PnEJQRDCRczsjPesK5M4aJngMDrRgdnbvVs2prHI0mRLD9s6E1J6685e
Lx22xiXMM5cakHl6lalhWIuahL2CVftHUKCIdTjoTmN6SBa9pGYK2a9E1+aq
aRStWh/2h5pGT/cz9Mfto5hUP7IumWgCe/bcSZckA6YPW+znR6iQF3f58fh5
IypTZLKW1CEUu8itBaY5JMSN8TFsGXB32/880mvG0kCW3ZN8HQZPVPYp3I1I
VTjmxbhMoCuZOV2cSSOxreV040kay7nhCaPXtTh41Y2XOzyEIoPTWGlULVB0
Ve24QAmx827fZPf2Q+m9P52s775EoeJEybXXY2j/tMbni+FWtPfVSzWKKbAK
KbxvO/4YyVP85wl9BuBalk1Pls8CkeY0afXDLDIvnfz8b+MLNNglxiSWyJEt
pX9yVnQhST5l0NHdWHqh8nznlyo0f/TrfrHpDQ4StIwzrMHc5W7sMb4alRa5
PpdZs8i2zElz9Z6G2N6d24M+UaFwoSxLUN0Ffpx91FWpHoKlSSYPIYVc+cuQ
m1vb0EobHeEY+QbZFRkWGxX9IIvocQn16gGhYvZ5d7UKgh0257W8b0NJdaMt
81EzSo5ctIgLeIES1/yz/KwiNGTeK8yTPwGmZ8PbWNkYksaCSwc6dCBm2jxU
bL8NgpoB22XO/SirGgz672I/UDnmD+56ytFqyD0yT0WQopjU65F8M0hEm8s4
t94BkRrRd585Bczg33wYJ8xAhEeHPVg5C9yj69NCC5qArN91Y1JDA+nrPhzs
qAdNyePVXr/cRoOvXVFB4ltIn5ZnBi1rglJBxc56xnNQng64sy28CZR9vXtZ
vFFkrtiS25bWCNzijrwPm/VgeNaddblz8V++NW9H4j/ADPRMHvLSI/HQwz82
2YjMZ2F54nN6JHd8mvt7sApjI7QmUZYOXQeu9U4cUoNn/k2tZUMXcld30ppq
NZZ3AO+GUYfKf6mqWz0UUpzlgsq1/cgtUvjyNlJIzNSefZAtQ805uBMQpEbK
r/14DsMAmvGtx2Y6DKAcMB+nx40gG2f5d6zLhLp33d57krpBxN8VZNIt/uZt
ONwgbAdJCGNTwOwbFJ+HuaILnVBOThxXndGC60LUijXfjgCxKXSzzaM+tBLO
HDwRuJRsZTgfiWzSQeuh+ELP9BEon2cUz4AaqISJDdFXpyCdX5TMqZgB8WvH
HVdSxoC3jxFVfWABBrHPPO8iB16T5JzUJEXlu4WMOvU0fPeX/5qcrxikYfLA
lOHoEyT2TG7hJ1HY+pmNIiZ/8dOxlaycqDngHnKkOawBqOvyaY5hdAMvt45e
y9GCMOVHavqVDvx21+oldVIQ1Ee2fe1Iw/9xlE8n
                  "], "Children" -> CompressedData["
1:eJwdiWeYCAQAQN93obuMCNl0aViF4hBChEPiLjPr5AZxlzPOcWecW/bILntm
Zmak7IyGnT2iKNmr/Vx+vPd973vBXePCogKAPoFZCotIqBcfH5EYHpQVobF9
I6Mj4yuHxPz/M7MIeMwTZCM7pVltDp4kPwUI5HNzkosgVqlP8Z8r/dcV5iYP
/7jcp8nL3+bjL5f5p8/wh0styLME85kPXWIhClOExT6wKPddZDGKU4KF3vM5
SlKKuy7wjvO97Txv+Tw3nesLvMhLvEwSyZShLDdsSDnKc905VuAVqlGdV6nI
71bhmpX4zdf51cq8xmyvOssrzrQqn/qLIfzsJ152hjV4g5pMtwFvU4vaXPJN
frIuF63DBad53nq8xVTrM8VzTvaskzzjxzaiMaE04bQTbcoETzmQZoz3HZrz
Li2IJoaTtuSE4wwjnPdoxY+25rhjPeYY29CWdrTnqKM94ijfpwOH7cghO3PQ
TvzgSL+3C98ZQVc+4FtH2I1IDpjpfqPYZ4bd6cFe0/2QNL8xgT32ZLe9iCWO
XX7ETuPZYW+2m+o2+9CX4fajP1+b4lcOcwCJbHWoXzrEQQx2i8kOZgibzWAo
SQ4nlWEMcpMpbHSgX5joBtNYbzrrHOBaM1ljgo8A1Nwa0g==
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{6, 96, 65, 151, 27, 104, 84, 13,
                    5, 89, 2, 126, 79, 143, 5, 72, 5, 128, 145, 65, 46, 63, 
                   87, 4, 151, 9, 99, 50, 116, 72, 31, 33, 131, 5, 143, 4, 
                   126, 49, 34, 32, 31, 10, 116, 21, 123, 141, 153, 56, 155, 
                   83, 7, 11, 9, 133, 36, 26, 136, 76, 98, 91, 20, 109, 151, 
                   16, 48, 74, 33, 118, 1, 71, 110, 85, 146, 113, 30, 117, 
                   114, 29, 132, 98, 98, 151, 76, 53, 96, 98, 15, 19, 116, 92,
                    64, 16, 3, 38, 98, 151, 18, 98, 126, 3, 27, 94, 68, 43, 
                   149, 75, 51, 50, 72, 97, 127, 77, 33, 70, 5, 11, 39, 138, 
                   5, 104, 10, 3, 22, 42, 119, 65, 28, 27, 26, 82, 26, 124, 
                   14, 105, 41, 25, 116}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{7, 4, 4, 6, 4, 3, 6, 3, 1, 1, 4, 7, 6, 
                   3, 5, 1, 7, 1, 1, 5, 3, 6, 3, 6, 4, 5, 1, 6, 6, 1, 6, 3, 4,
                    5, 1, 5, 3, 4, 5, 2, 5, 5, 7, 2, 4, 4, 2, 7, 3, 7, 2, 6, 
                   3, 2, 5, 5, 4, 3, 2, 5, 6, 1, 1, 4, 3, 4, 3, 1, 1, 4, 5, 1,
                    3, 5, 3, 6, 7, 3, 4, 7, 1, 2, 5, 4, 4, 3, 1, 2, 3, 6, 2, 
                   1, 3, 6, 2, 1, 5, 5, 6, 6, 1, 4, 2, 4, 3, 5, 2, 2, 3, 1, 5,
                    2, 5, 4, 2, 6, 2, 2, 3, 3, 3, 6, 1, 4, 2, 3, 6, 1, 5, 2, 
                   2, 3, 4, 6, 6, 4, 2}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBVQSq+yFib1JlAQAAAIkAAAAoxYB46jvgv+DLng/lVvG/CMCsKMM07L8o
M9Wnw03ov2j5TPhhHdg/MOv+tGN94r9gF2WDbEjzvyh7fR5Xove/ODD/tHfF
879okRU2TzD2v4BJsPWyGcI/OEYdICnR4L9o0E24iQXZv9BoC3dm+vE/OHb/
T0wB778Abwz+vHfxv4B9Z8ebM+a/gNvJQkBA9b/wL9hxGvn0v2jmLuDjy+C/
MMgK8LAaib/gwLpavdntv6i2j/oLKrc/yAoMDZ9Z1D/or4/KMZ3ivzCiY8Eg
Mdi/CIbpn2PD7L+ohY/HOwP2P+iWPUySF8u/COyaFd/R8b8Qjud4GSbYP9CF
QyfPnNO/2I6wiPYb/j+Axqa/WbDqv5imTMhCEsQ/GC0Wp+uZ7r9IlpHmh1LO
v9hmoAA/+u4/AItW7EWlxL9oe4QBVOndv3iXRybiA7m/CELKe7QEwj9k4dnU
APUAwKguCEvNTcS/KON5NSjSAEDIlI/gAi/wv5jezc1kHhJAeFQv78kv1b/Y
fA4kMBLXvxg1MdaGqdu/6NV5/Hf4+j/gXNsxj8Hyv+CSQ8nvPpQ/eNAbno9M
9L9IYtnMOVr3v5irsL+85LS/ME3JWp0Q87+YQwwWwYPuv5gss9t8qvK/gODv
0W3Her9Q+COdsNDxv8AUDWAxe+y/qHqC3bqp7L94L95QiAnSPzCN6nrrpuK/
cLsp4pRo0z8YOtSwokbjv/h6CGCcp80/WMEBmz1W+b+4CU6H9Nm1vwgwYUUj
kfC/kG8ctxOD4L/gHzvdqebrv8j7JQuY1aG/qLwkHys25j+A6eiLmlTZvyAX
z5rofPU/IAwGpjhF4L8QNDfQuu+Uv+hGoCvXOZi/GOBiSSU8xr/o8xM1HVnQ
vwDVg+D4m7K/2GFAbITn079YZOOA0cLHv/gL8x97o8Q/uPyj/ch2xL/4P1wZ
GRjjv6irYmE0/0G/WDhNb5mq6z8QtySCC9rSvwh/sF59+OM/IMSz2lImxb/o
1gkIICS8vzgL3uOpu6+/KFAnqE/D7z/IUuOY3IPmP1gFJy5iV/E/sJhhhVGF
zj9wAkQqtrqsP+gFYUQAV9U/wAf1p7abhr+I8WPkVGmxPyAgqcbPPcu/+MLj
thFE0T/03wLWWc4BQNhlXygKacU/qOroJmGl8j9QTar6N6vWv9C4karfkv4/
oOJ5pfwO9j/g7unj9FAHQJCnPwT4WPA/oM9T7lp26j9wNRFwaADsv5jSEJoC
hfw/KE3SHqukyj9A9+ra1SG1P7gOYlWH8JU/qCEdtTNy7z+w8z2yvjjZP3i4
0NQONqC/mLbpqKI7wT9o/m0y4s/bPwgcTI3f3tM/KIsv5u8R1D+IsqU8qc/r
P5CiKe9AVgJA0BKWxEt56j8gDiyEJhnZP5hw25/Pr+E/eFEWu3SCAUDAFIbh
oJrYP7ApWpFRpNu/MKXItRWbyz+ALLZuOibhP2iY7VoLfvA/EoNQSA==
                  "], "Children" -> CompressedData["
1:eJwdiVV0EAQAAO/RJQ0KgqQ0SsikpKUkZHQIDBmbxIARYzRjA4Z0N0h3dzdK
G3RIKN2pgB6Dj7v37l2ONp0D28UDuiWJU2BQRMXw8KDI+knjokZY9+CQ4PCi
AaHvfmwc8d4TnwQk5DM+JxFbTUJSErNF3ez/JuM/s/LG5KTgA1KyyY/JQio2
mpo0pGWD6cnAa9PxyvVm5EP+dZ3/uNaPyERm1vjS1b5wlc9d6TNX+AnZeGp2
PiUPT8xBTnKRm+U+dpmPXGpe8pGfAjx0iQ9c7H0XWZCF3rMQhVngXedbhKJU
YJ7FKE45ynPHuX7BT5YggC8pyW1Lc8tS3HSON5xtGcryt7P8ipn+5QyvO91r
TrMilahMFX6gPV8z1W+oxVWrUo0pXrE6f1qDy9bkkpOtzSQv2oQ61OWC33Le
idYjkHNOsD4NaMh4GzHOs461MWM842hP25RmNKcFozxlS75jpH84wla05neD
aMP3/OaPtmW4vxrrSYM5YTtCGOZxQznmUDvQkU6EcdQhHjHGznThsNF2ZbDd
iTKcQXZjoL84wB70tycR9KKfP9uPSHrTh74esi8H7eMBe7vf/uxzAAMZRBSR
7jWWPQ5mt9HE0MtdDmGnQ9nhMLYb4TZ7+haVZhzR
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{96, 63, 128, 20, 140, 84, 72, 
                   72, 13, 17, 10, 1, 138, 141, 138, 155, 140, 49, 11, 10, 
                   132, 98, 153, 19, 143, 2, 116, 79, 1, 98, 9, 46, 16, 2, 
                   145, 106, 151, 90, 4, 39, 27, 52, 46, 88, 47, 76, 33, 151, 
                   5, 114, 71, 63, 48, 117, 35, 94, 21, 24, 97, 49, 135, 140, 
                   58, 122, 125, 3, 71, 147, 119, 72, 96, 53, 65, 84, 65, 9, 
                   50, 91, 70, 7, 76, 135, 105, 155, 139, 123, 66, 52, 5, 17, 
                   78, 110, 27, 113, 64, 16, 98, 67, 15, 5, 5, 15, 9, 116, 31,
                    98, 9, 131, 116, 99, 153, 98, 1, 76, 98, 51, 50, 113, 44, 
                   7, 73, 147, 26, 112, 39, 61, 41, 36, 16, 143, 24, 133, 14, 
                   11, 82, 28, 26, 25}], "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{6, 7, 2, 6, 7, 2, 3, 1, 4, 5, 6, 1, 7, 
                   4, 2, 2, 2, 2, 6, 3, 5, 1, 7, 1, 4, 2, 3, 6, 2, 6, 5, 5, 1,
                    3, 1, 7, 6, 5, 4, 3, 7, 4, 3, 5, 6, 2, 6, 5, 3, 3, 6, 7, 
                   3, 3, 6, 2, 7, 4, 6, 6, 2, 4, 4, 3, 7, 6, 4, 4, 4, 6, 6, 2,
                    7, 7, 7, 4, 6, 1, 2, 7, 7, 6, 1, 4, 5, 3, 4, 1, 6, 5, 3, 
                   5, 5, 3, 7, 7, 7, 6, 2, 5, 4, 6, 4, 7, 1, 4, 5, 6, 3, 2, 2,
                    2, 3, 3, 5, 2, 6, 1, 2, 3, 4, 1, 2, 3, 6, 3, 2, 2, 4, 3, 
                   3, 7, 1, 2, 7, 7, 6, 5, 6, 4, 5, 2, 5, 3, 1, 6}], 
                 "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwN0GtUkgcYwHHMaMpxjrLTala6sqKsjbKLXR/SuShbaWd5qGOb2pxwckbJ
TM2StS5slCNrQkblySzUSFoaLJ2PtlLSnGYIWikXb68iDO9vinN++J//99+n
MUf3xbpQKJTMqUQekQEFd14Bh/VZePSwERX60Rtc6ShW0AWT1uUEUtY8dMi3
GpC8nVVGO24GxvPV61zrLKjwaWhY8J0R+UbdrSObelFhz+WkPrGj8GhNme6D
XqSoiqrkM0ZR0l8PMzZPoCyIs6BT3A7csnZ/HuVvoIR59ezP7kHmcGz+IpUV
2X20+LWZHcjIHmDGRU0gvfnNpTsnnUjszhEIwkdQZlvSSE3WA3eU2HGuugsr
3LcbOvwagZv+U6DETiAjOPrfQ3uHsKHLtDBjP4F830LLoqQO5G58+ntpKAEU
HnW2SJyDrErdXe75SmgWKL1T5W9w7uQPNiVNjWye/MUJNwMqsr3IcpkFk5vU
OU2ZDnR4/XdNmlCLjLNv93xZX4XCsbGIU36DaFJvvvsjnUQhr/LdlRID8g+r
vvhkVg9GyX1qHj3rBkXynx7rC6e+9qA3J6cPTRft968v1AAjhUrp/acfmSWJ
4cV5epA4vHtkkWqgtznTT75wIIfyfmd2yCAyx1fdCXxQipLDLv482RAynhfl
88KnvKbVrkLmELq91Jd5fP8OTceqV6V8VIyq7ETekUM69C2dtX1dQjdKrhPd
/rJG9CUi3M+saUXN7AtXRGctKNn2R+na5SQEBhn7in+xocw5eWtzWxoQHtQQ
F54FuZLbOxpHCCQKraL5d82Y3PnNcUFQFwqFl2+kPKpH9vR0c6jXS5QEJXQm
31Ajc9u1y1uu9QCzXa5MotWB79ywEEOBARg1S2hzglpQddPcuslQi5pLc2I+
1gpRZdwg1b9vAvI3a4fUzwGOI9kbqDsIEK04szvhTR8yFu0Jxm36KSdbblpy
LoblXW+TF5AgectOE/jfBtZYwXC0qhLYxwI8H0S3Aasmlb9saRuYTtHKH55w
YFTW4v7mLjXEN6bNPl3rynKLPBHsf5EE9opd9izRezBVtBvrmsZx7uKMK+P8
AWj4Nr7lvm0cTQWeTecnqCz2Hu/7FS1maJ5WJ47z7EVHt5j38FIccp8EOI3i
cRAGYEwJexS4W/tfrXQfQA2/dGNk0QAo8i6+tZe/Azf2zYDp6SQQxnnNnkod
MGn3codT7UieuRzoV25HhrgmceRnPaioMxWnCl6D78rOWItKi6RrbiHv8SSY
DvrkF1fXAn/dTD6X0ofazKKZw/uckBN31YWfpEatVbrUXvYUNAbbAZ/1NuDu
0kib5rQg/fOnPuIuJZD7HB751VYktwwMxadaUKvLjBl06ICuSXLNiDWjNsPz
sfhlK3JCihIYzgbMcaarqk4/Q0aXVBYx2Yp0RXpElv4Jiq4KhlJD+5BS+vpe
fHMl+JbsHJuX2AOEV9bqF79KscF7WXzovF4gIuvNByxWoA/m0eW0SiDF/TpO
mAlY86sE5zqUINFlMGMX24H7oZv4r4UjoK39qmOWEZFTuNe1pr0VKCm3RpZ9
PQGBa5Tulqh++B8oEocP
                  "], "Children" -> CompressedData["
1:eJwdiWV0FgQAAO8BUpIC0t2KtHQqKCE1UAElBowSNvg2GKMZ3TBKaZRW6VC6
u7tbaaUbjsGPu/fuXfYWYUGt4wDhCWMVFBxZORAIjqqfKDaqh0aEtAkJFCnR
9t2PiSXOe+ISjw9oRGPik4C85CMhiUhLOhKz2I9Z5IckISl/qn/4xmQk53dT
sNCUfEQqFvja+b4yNS9Nwwvn+dy5pmeOmcnCMzPw1IxkYrZP/M2sZCM3v5qd
WT52pjmY4SNz8tBcPHC6eZjmfad6z/z8bwE+4VP+c4p3nexnFKQQhQmiPkUo
SmnKUIxfvGMpivM5ty3BLX/2piW54SSvO9GylKM2dfjXCZanAv9YkWt+RSXG
e9XKXPELvqQKl63KJcd50Rgv+DXnrUZ1anDOsZ61Jmf8htPW4pRjPGld6jHa
E47yuCM9ZgOO+h3fMsIjDvew39OQYR5yqAcd4g/8yAEH24SmNKM5+x1kMC0Y
y0D3OcCW9LcVIbSmDQMZxF6jbUs72vMTA+jnHvvagT7utiOhhLHL3naiMwHC
2WkvI+jpDvuz3S50pYfbjKQb3Y0iyq12Z4s92GxPNtmLjfZmg31Yb1/W2Y+1
RrPGbv5tpH/Z1cEMYTgjWG0XhxLhKoex0nBXGHC5IxlFZ0czhmV2cqlhxhDq
Ejv6FvSDLsg=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{113, 151, 20, 9, 96, 8, 96, 129,
                    9, 133, 45, 65, 17, 1, 141, 98, 148, 98, 151, 1, 79, 37, 
                   19, 98, 98, 4, 71, 9, 54, 122, 116, 31, 51, 9, 99, 154, 19,
                    100, 126, 90, 5, 64, 33, 3, 15, 143, 54, 16, 132, 78, 30, 
                   17, 14, 70, 38, 113, 150, 126, 35, 126, 76, 72, 40, 33, 46,
                    32, 154, 85, 113, 88, 29, 49, 98, 75, 148, 33, 154, 125, 
                   16, 16, 138, 50, 72, 72, 128, 104, 141, 27, 6, 13, 150, 7, 
                   56, 69, 53, 151, 65, 52, 77, 155, 9, 138, 143, 116, 16, 5, 
                   145, 3, 98, 27, 39, 97, 59, 1, 51, 47, 143, 83, 50, 10, 3, 
                   26, 29, 78, 116, 142, 140, 11, 58, 41, 156, 114, 146, 144, 
                   11, 5, 76, 124, 152, 71, 149, 147, 26, 74, 27, 25, 117}], 
                 "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{2, 4, 1, 4, 7, 5, 3, 1, 3, 7, 6, 2, 7, 
                   5, 3, 3, 6, 5, 5, 4, 7, 1, 7, 4, 3, 5, 5, 7, 6, 2, 4, 2, 6,
                    4, 3, 3, 7, 7, 1, 1, 1, 5, 2, 5, 7, 7, 1, 5, 4, 2, 7, 5, 
                   5, 2, 7, 3, 5, 7, 2, 7, 2, 1, 3, 2, 5, 2, 6, 7, 4, 7, 6, 5,
                    2, 3, 4, 5, 1, 4, 4, 6, 6, 1, 1, 5, 7, 4, 6, 7, 1, 4, 2, 
                   4, 1, 2, 5, 6, 5, 4, 2, 6, 4, 2, 2, 4, 1, 5, 1, 4, 3, 7, 4,
                    1, 1, 3, 6, 4, 7, 6, 7, 2, 7, 6, 3, 7, 4, 4, 6, 5, 6, 7, 
                   2, 2, 2, 4, 3, 7, 1}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwNz/tXUwUcAPDJo8BhjFowRdgVwiBeQ8nAjnwvCEiERyQ0CrPbIt2JeGkk
vnIIeOQhog0DREDG0WF4nKUwFc6Xh9jkYRsh3kRwgOBgPG4TYS4G+cPnD/is
EabEfLeMxWLlvnajfnRiKMeapM/uzfgmvBflbB9+6UYDMqvOJPvvM4Dhk847
E7psSAVFzvKrL4Bms9a2sI0oCuGurAETxmnL4woJI3LKG01vFE3iSYuEW6I9
JhT/XjFHXZpHIv/KkZeTDBZ9fZOu81mAZpt6iSlzGJlAveDnjeeA9PBTJ7lM
o2i/MWvZIw3GPZsvy6zuA3fig7Rd5XpUyt87mpsgQ/fvrWPPcDqxaGlqNlUx
hgFvO/mdqNWjzOnstKhgCq3CH+iTNjEYrannHt8+iRHZlUEqh3Eskb1jd6pl
Cpn7V935P+qQibELF0b9h1ZCXaNNbysY3t3lrYjXoqqG/1xopkVxOrcxMXEM
DTK1RFI9jYzSlrL0HAWVbxX11Q/j4H7MvF0Wcw1IXSB/rWMLnNziWxKi7weF
dBlp7jgMdLbsoZfdLaSxNd7oOobNaU3ZTU8mgN446dy6/Clo2Dnc4TAFCMK9
y2HFBKo85i9LMwZR5RjGt2DakCVg3Q/SPcGqkbT3t300ieLSdYH+HjqUdzfY
fF7xF3BCxR9X/msCwto6mc/uQ0FdsfONVQzSQyWb+cYZTNUtWB2iZrGEveYi
/diEvICasOoKHWqGm7cKd7xEg5n/fl9sRqKmL9tMEIrMnxeLiecPgKS893El
ciReaUIOvHiE2qoIpzdPGUDk2WGWdboL5J+VN9fOaIDwTu/6dW4KiduxOUaP
IaS2zgn49qMocFYNbHDswejgviy3Qi0oofTLq0nXQdBVc3SNXAWC2A8jN2hG
oeS87b3JwBGg3vJXDi2pgdrtb/TqbAV3rsbb5/AoatMK8tLljzFjv9OxQ5uH
kMz0yfWSzyI1yDNFC58BfWhLcL+0FzJOV1OWSzNALmYqrXJ6gH5893ZYkhx4
bi685FfFQHUeGdYqVCCXfhE1El4JrG85ezwWDRBA88MtDj5Hg2e3OHLKCCXt
gRHNsT0QvfOA37XkXCzybsOqnwzAqqb1igo1suyF9qLu20DJ410L8vuAV2Yr
iTylB2VNh+svvmrkDQYNlDrQoAxIPOzWTgNvaxw2SdtA1LRy+wyvGxnXbWb8
qkeokTTsLXSlkTKuIHWX5yGuDKR1xYtAsosv5KWpgSnIuEAWvv7U7V58yTFA
3Pqe+uADA2DVI1h/ZXoGCE+bFFz3EIhBl47YnT0oPt9beWlOB7zeg0dTQvtR
W7ZXfS1BD7LrF6Rcj16I/sMy33zuLiqHXBbuiUegqPFWPee3ESD9TrTk3eiH
6E1/Mz7pRkhtPcdNlAxD1FMgx2vNSSIhqSGQMwCsV8RqufoOkDMKdXrSAhp2
dl+ytDPCape8Hf/Um5EcL6uQhk/nkFh706HWZQD+B8gwPSw=
                  "], "Children" -> CompressedData["
1:eJwdiVV0EAQAAO/RJQ0KgqQ0SsikpKUkZHQIDBmbxIARYzRjA4Z0N0h3dzdK
G3RIKN2pgB6Dj7v37l2ONp0D28UDuiWJU2BQRMXw8KDI+knjokZY9+CQ4PCi
AaHvfmwc8d6z2fgkICGJ+IISJCYJH5CSpCRDU/C/m/zP5Lxxo6/dYCpS88r1
piEt6UjPv67zH9eagYy8ND8f8hGfkodMZOaFOXnuxzzzE7KQlaeu8YmrzUZ2
HrvKHKz0kSvMxXJzs8yHLvWBS8xLPu672HsusgAFKURh7rrQz/icOy7wtkUo
xnxvWZSbzrM4c73hTwbwJYOJpiRzrEBFSlGaMsy2HLP827L85Vdcd6bXLM9V
Z1iJykQx3Sp8TTOaU5VpNqEp1ajOFWvwp42oyTfUYqp1mOJla3PJydZlkt8y
0XoEUp8JXrQBFxzveRtyznE2ZqxnHeMZR3vaUZ5ypH/Ygu9oSSta05ku/O4I
g/jRNnxPW4IJZbi/2Y5fjfWkIZxwmD/Qng4M9bgdOeYQj9qJI4Zx2Bi7Es5A
ov3FbvzsYLvTg55EcMgoD9qLSHpzwEHud6B9GOA++7LXfuyxP7sdwC77O4h+
7rSvO+xjDL0dwlC2G+k2ezmMCLcayxZ7+hYwyhzR
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{12, 5, 6, 9, 19, 113, 53, 84, 
                   143, 16, 110, 85, 65, 72, 92, 151, 116, 5, 113, 1, 114, 16,
                    27, 5, 87, 50, 103, 78, 10, 128, 138, 155, 65, 24, 39, 
                   127, 1, 142, 70, 27, 113, 5, 43, 116, 100, 45, 152, 80, 99,
                    101, 51, 54, 59, 75, 26, 116, 25, 83, 147, 74, 57, 71, 
                   118, 115, 133, 119, 97, 10, 78, 139, 155, 61, 150, 98, 148,
                    52, 76, 76, 97, 75, 1, 145, 4, 31, 5, 89, 98, 64, 107, 50,
                    126, 104, 98, 13, 98, 3, 16, 14, 19, 123, 31, 70, 17, 8, 
                   32, 85, 126, 7, 71, 11, 40, 46, 5, 11, 151, 72, 71, 129, 
                   20, 151, 50, 150, 26, 28, 26, 29, 26, 137, 119, 22, 117, 
                   16, 126, 155, 128, 132, 82, 3}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{1, 4, 1, 7, 5, 7, 7, 6, 4, 2, 1, 6, 2, 
                   7, 3, 2, 3, 6, 4, 5, 6, 6, 7, 4, 3, 5, 3, 4, 3, 6, 6, 3, 4,
                    1, 1, 3, 1, 4, 2, 6, 4, 3, 2, 1, 4, 5, 2, 6, 7, 3, 4, 7, 
                   2, 2, 4, 4, 6, 6, 7, 5, 6, 5, 4, 4, 7, 3, 3, 2, 5, 1, 2, 5,
                    2, 6, 4, 7, 6, 6, 6, 7, 6, 4, 5, 6, 5, 4, 5, 2, 5, 2, 1, 
                   3, 4, 6, 5, 4, 5, 4, 3, 2, 4, 4, 1, 5, 2, 3, 7, 1, 7, 3, 3,
                    3, 2, 5, 1, 1, 2, 5, 3, 4, 1, 4, 4, 3, 7, 1, 6, 6, 2, 3, 
                   4, 4, 1, 5, 1, 2, 6, 5, 3, 6, 5, 2}], 
                 "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBfQSC+yFib1JlAQAAAI4AAACQDGbTqovvP1j0ujkmbf4/eORFHD0Q8D8g
SItrFyYAQDj/o+LUqui/AErp0tI6/z9s9ZoEOxYDQLgWOHobgP2/wBbq8IE7
xT94T+YZsYPzP3B/l2Dpsfe/EMnoPc559j9gLZRsNWT3P9Ca/zRZNti/0FrO
pbET57+I7BmoDfDhPziOt6lALey/8EqYeO9h8L/weBa4vs/tvyB7H04sh+6/
uFY49ruT4r/AZLcHABzwv8gUfTL+TOy/sMhbkv9a7r+gf2ndXkX1v4hSJsdu
EfO/AHVsX3My9b/wR+7RRQXpv3DpOXc29PS/kB8tU6Xn8b84Il2KEcvtv/jF
EADSD+8/wMrkKTRa3r94Ddzl8V7ov1ibKZ7TDOi/mJb0Vq5B0r/gUez02Tzc
vyBR9O4BptS/eBovFlfqh7/ANrQuat6+v1h2LZFGw8K/2D5lF4WTyr+4XMVs
pz/5v/iZqH9BcMm/KEowYv7p7b8gFZ8tR+LkP1ipX9RDrP+/SGoYWF9F3784
t2imwbLnPzh++HxzBq+/iPrSBdbn7b/YTkWEgFjVv/hh30Jrou2/UMyT7qBC
9L9IR+yKvbP1v0CL1XI8iea/AGpupINF879g+7+F7+vxv2Apvumz/7M/KJao
OUwE2L8ox7bd5VXxv5jh0jai3OO/4HOTiiM1678ISGsaJZ33v7CD940UWPg/
YJGF0KeP8z8wqYfcWk7RP7DUFTxGxNY/UC99E/J58L9IsGpzLILBP0DEe28n
A8M/sMUrhCVX4L94lNAbiRS5v5AGrx7LX8u/iHKoYmEl47/oP5X/2rbmPzCa
NtWX+tW/yKOQ0HZW1r8IaK5g2lviv5jrq2frAfA/CPDD6WvGnL9QTex+8Hjn
v/gO3fN8YOg/COvPEzNn2L+I8l7NFfD4P3BBQJG6xOG/YDj/E38x0z+AHc5F
AVvlP6DmZgq5mOI/gGA1Nalb6D/AJQNXam7XPxgJcfCjp4a/KKerNzP/4L8Y
1Uwy4V3iv+hlcKA9Lu4/iAKAzLUjzz/AAgf8RXj4P1hwHqtJCck/6JI0tM+f
9D9IE4aK1q72P2AyllXd0vg/YClE+N+/+T/wtfwI9MfpP6hFYrDebek/ADL/
C7Rh4j9Ql00eXCnvPyBWsCifdeq/AKk1iMeW4j8I9eigoCrzv0AsIgNUosS/
UJvQmJWP8L9gVuv3kHPuv2jZ3aoQAeS/6HL2K1fb8r9QiqYsBx7ov1i+m2d8
l9O/6NqlT7J73b8YOllCgzG5v8D3kUa4ZNu/IF2RtUx/0j+YtdE/+CXeP3RJ
Mcc0bQxA8IvMBIx3zD+44zsXEunEP+Cti179Xpm/ODK4pZ4X8D8w4LVRrPAF
QKiUxRW2yfM/+KOI00QP9T9oFMufTqgCQPAMUitKJvg/uIRA9h6Z8D9Ix5Mc
Jtb2P0DPGbaakq4/QIkB7a2W8j+wjWRWn9jkP3iSBpTXPdU/EGyCFw7a0z+I
3TPyRlvgPzi4xkaZeK0/EFVuLRpK8D8QkIBpYWnQv8PSZHI=
                  "], "Children" -> CompressedData["
1:eJwdkmeYDwQAh98H4URJKIROKipy5JCVopxknFG2uxxn879zG2fcnV323ptQ
yV5F2VvKKpvIqOxSr8uH9/c87/P7+gZH9gzvmAWIyZk54RHxtQKBiMQmQZkS
1iM2qlNUICQ0+v9/VCZZHpOVbDxBMilkJweaSE6W+J+L/dcgcvEkucnDQ9vx
FItsRWueJi/PkI/XeYNnyU8xilOAgvzjQp/jef62EA9c4H3ne8/C3LUId3yB
2xbllvP8y7n+6YsEM8cSvMQfzvamJbnhy1z3Fa75Kr9biquW5oqv8ZuzLENZ
LtucN5lpOUK45AzLU4GGNOItKvIOtbhoKBesznkrcc7KVGG6Z32bqlTjjNM8
7VR/tQY1meIvTvaUk3yX96jNRBswwTq8z0k/4ITjrcs4jxtGPT7kmPX52Y/4
ybEedYw/OtojNuaw4Rzycw/ahAM2Zb/N2Odnfswn7LUFe2zJbke5y5HudIRt
aMsOh7vdYbYngkg+5QeH+r1D7EAUHclwm+l2Is1oBtuZQXahK90Y6FYH2J1U
e9CTXvTmOwN8a3+32M/NxrDJWDbahzji2WBf15vAOlNcaxJrTHa1SfalH6tM
9Bv7k0qCAxjIIAZnthBvGumsNM4MhvC1IxnKML6yj18a6wqHs9wRLDPGLwy4
1N4+Ahr1Jsw=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{138, 31, 143, 8, 9, 20, 96, 76, 
                   142, 140, 41, 148, 98, 53, 128, 13, 65, 72, 151, 53, 128, 
                   13, 75, 154, 100, 113, 151, 120, 2, 15, 98, 116, 1, 16, 98,
                    92, 19, 99, 72, 116, 9, 34, 148, 43, 138, 51, 50, 52, 143,
                    107, 105, 98, 54, 68, 131, 104, 145, 91, 133, 140, 86, 
                   127, 148, 56, 17, 83, 9, 8, 11, 142, 9, 139, 132, 33, 154, 
                   125, 119, 11, 49, 83, 97, 118, 72, 140, 124, 126, 3, 113, 
                   72, 72, 150, 70, 27, 42, 50, 65, 46, 12, 1, 79, 89, 98, 4, 
                   5, 3, 18, 98, 7, 154, 5, 59, 76, 4, 16, 149, 151, 151, 76, 
                   1, 109, 16, 3, 49, 146, 40, 21, 96, 144, 155, 1, 135, 14, 
                   132, 147, 29, 116, 114, 27, 22, 44, 24, 26, 61}], 
                 "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{1, 7, 3, 4, 7, 2, 5, 1, 6, 1, 5, 6, 5, 
                   4, 7, 4, 7, 6, 5, 7, 7, 1, 6, 7, 3, 5, 2, 1, 2, 2, 6, 7, 4,
                    5, 5, 5, 5, 5, 7, 5, 1, 4, 2, 7, 6, 1, 7, 2, 6, 6, 7, 4, 
                   5, 3, 2, 7, 6, 6, 6, 1, 7, 4, 3, 5, 6, 6, 2, 2, 6, 2, 1, 5,
                    6, 6, 4, 7, 3, 7, 7, 7, 2, 4, 6, 2, 2, 4, 1, 6, 5, 2, 2, 
                   3, 7, 4, 4, 3, 5, 7, 4, 5, 5, 5, 2, 2, 4, 2, 1, 3, 1, 3, 7,
                    7, 1, 2, 1, 6, 4, 7, 6, 7, 5, 5, 6, 7, 4, 5, 1, 5, 4, 3, 
                   1, 2, 2, 5, 5, 2, 5, 3}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwN0WtUknccwHFIZ5yuuKnTVl5WOXTtnOe4TrLT5c84y1m5jSUVbcuoJWNF
k055bGbGahbdFOcN0xaJF1wy8ZIyl/4MDckuknahYfZAkBjMHhDpYWmtF98X
n9ffmJ0ZG9OpFArl1JtYDm1VSiwJ+NPqFH2eC/B67F4t142MJWaaNMMNpq+v
akXBl8F0c4MidorajSVe3TbeQIKQHRJRjaZBFaJIMWWfQkRZGjXe3ImYAbxn
mX9YAIveZy2L6EUUwekfmDw74IK+VW77K+DQNIIrCc9AS5pWxM51oYPLioJK
Gz2gyPyETR11g+FkSVZgmBdkf9kDX6cQIB1dVzXi8gLdKcyw3p6A8PYjL3f3
u0GWvmNI+pMLjJ41QVj3KMhl4hT+MQKi75QU7m1wgqHILFY3e4GiXsR9pdYC
84K0b/OlF0Dft9we9WUT8IhdyULbKNC0bc/G9TaQO0N5fp4PwmNahbaPvMBq
q5yz/bEb8DuBw5lXCcD5H+DMJDsQGx7U8sofAZPce2v1DRw4FcTZ91ILESW0
WtHd+C+o9vQYt+XcB6yCe2461YH48/ekrgpwgsyXOG04YIRwNk0jw1ygmrnW
kgEWIPVqv1tEAMX4KxnldIMkNuiEo2oYwq2fbWqQv7GjoiMi9DaS3NSrqpV6
0LQJN8V56kHbWTO29O5DRE98xV9JjABL0Ll1uKEQHBFppU90djA0kqMBY3+D
oem3FLXZAab9S3TfjViQ9CtB5mxDKQrfHd8VRX+AcI+fmXZtCJKnzhUMdPYD
40S+ecaJJyDOcilRURck897Sziy/Afy77PzIlhsgDmnt6tfcQbSjK0VrzvwC
ZG4Zx4D1gaxqji64rAcppo5o9Lm9wBKxNjv2j4G4bnD+21esSOo9VqBwPgUW
eXjrc8YjMHw+4A/2e4CQuB395j/BlIVR1np6wKgNrTveOIHoh3yccu444j2f
8WlOfS90X89/btriA03Rgcrhd3AkuYR/sWjQhoTs9xe2TgyDLIossIX5kGq6
+PpTpR1JwrC8M2EGYK1WrLk79yUkq0S/E/MsiLyXnZTTQmM56n5eEi1ygebb
HcL2zbdBWnzAm73BBYymmObgChJh0m7lso/zQMqhrW8lvMBbtyD6xwg7kjnu
t+QFjACtOSkxcmYTYvDLQl77JhAe/+GuWbZHgCnTBxbqrIi4pT7IPX0fDMu+
d3G7riEOWkwUm/sgWjeLXj395is//z9v1kUQO1Wq+fOsSDHZFDngt4E2UplP
0zxAjCRfwD/8aYQdXn8+KXkIEVMvLFtPPgEaNTdOvtyF8IoVgyHZbsSrzUno
ibKDSm45pGt3AZ3RsrOGMYkO1rVxHx6dRIaOjZlLi3FEdOaknkw1gmz7+W8e
5/gQVmmdUVNpArk6kxJf/wKRZxn9XP0kYrxL7bi4N5DFCrrMnj1uQxrBBVLY
OwbJ3NqgwnYPMnondrWWmdDNxQuOS3KpLMPu4KNbRCTixYcmnIqbRP8DrzZr
SQ==
                  "], "Children" -> CompressedData["
1:eJwdiVV0EAQAAO8B0t0dAtIxOoWBioTE6GaD0TlijGZBTBAVBUVRuhulQ7q7
uzuVto7Bx9179y5PSJ+gzvGA/onjFBQcHhgWFhzROElc1O49ILRLaFhAua7v
fmwc8d4TnwR8QBKSoglJRGL+d43/+bv/+pvJSM4/RpCClNShLqlIzd8WJA1p
+YjVpiM92cjOGzOQicxkZJWvXekrV5iF5b40Ky9c5nOX+swc5GSJf5mL3Cz2
T/Pw1A95Yl4em49H5uehi3xgAe670EIU5p4LLEJRilGcspSjBPO9axnuWJIA
5lmKuZZmjred7S1nWZ4KfEYtKlKJ6gRSmSpUZaY3neENf/W6H1ONX7zmdK9a
gyv+bE0+4bKfcsmfvOg0L/ijn1Ob8/7gOadajy9oRBBnrU9DpnjGBpz2e0/5
nY1pwklb0ZTJNqcFzfjWE35jS772uJM85le2pg1tacdRB9OeDvRnAMFMNISO
HHGCnfjSzsQayngPO84udOWQ3ehLP7oz1oP2oCdjPGAv9tubffZhrzHuMYzd
RrvLKHc6kEFEusPRbjecbY7yD0c6hKEMYzgjGMlWR7jF4Y5iNJsdZiRDjSKa
TQ4xhgg3OtgNjmEs41hvuOMZ5DpjWetA3wKA/R7Q
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{150, 6, 9, 12, 71, 92, 84, 140, 
                   93, 9, 27, 79, 148, 87, 14, 4, 128, 103, 133, 39, 1, 135, 
                   91, 5, 76, 106, 64, 54, 9, 94, 151, 68, 106, 39, 148, 68, 
                   116, 98, 50, 52, 140, 146, 154, 88, 153, 76, 18, 81, 78, 
                   140, 126, 11, 26, 65, 154, 140, 39, 76, 32, 154, 48, 96, 
                   74, 61, 3, 97, 114, 21, 140, 124, 42, 50, 52, 142, 98, 19, 
                   65, 123, 104, 65, 20, 128, 10, 98, 98, 9, 1, 99, 67, 16, 
                   15, 89, 37, 96, 145, 50, 154, 71, 151, 33, 1, 76, 1, 90, 
                   31, 33, 33, 7, 113, 5, 38, 73, 98, 75, 10, 17, 124, 49, 41,
                    132, 24, 144, 14, 76, 11, 117, 147, 137, 116, 9, 11, 143, 
                   122, 11, 26, 26, 83, 16, 47}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{4, 5, 7, 7, 2, 1, 5, 5, 4, 1, 6, 6, 5, 
                   4, 7, 4, 3, 3, 6, 3, 7, 5, 7, 2, 7, 7, 6, 2, 5, 7, 1, 2, 1,
                    4, 2, 7, 5, 7, 6, 4, 7, 2, 5, 5, 6, 3, 2, 3, 7, 3, 5, 2, 
                   6, 6, 1, 5, 4, 2, 2, 7, 4, 2, 3, 7, 1, 1, 7, 2, 7, 5, 5, 3,
                    5, 6, 6, 5, 2, 6, 3, 1, 3, 6, 3, 3, 6, 6, 2, 3, 4, 3, 4, 
                   1, 5, 7, 3, 4, 3, 5, 5, 5, 7, 1, 6, 3, 6, 7, 1, 2, 6, 1, 3,
                    5, 6, 3, 1, 4, 6, 1, 5, 1, 6, 7, 3, 6, 4, 3, 6, 2, 7, 6, 
                   1, 1, 1, 3, 3, 7, 6, 6, 6, 5}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwNy3tQzAkcAPBNZK9k1pUeWj2c6cprVmQSN18ZNTlZG3VlVbO0PW68Fst0
CotL22O0nEjXzW6GxG7N70KzpuWb1NXK9m4tSb9tbW1bm32UStL54/Pnx+/Q
8b0pdhQKpeA7zo0uWYSoGwXhgdn6KTPyxp2Tn83MgIG7X+CTrMNmtnCD3HMC
Df5R1KsPxjH+gKb6RP4kkuXBfq8lFhTwUv1Uke+RI06YvaixqyOOGJg5cbNY
kduhZnt/Rmr2vAnyuQXbrfRHSwMn0PfARva1KiUKdr82BMaMYPrTXWxWPInx
g/c/+HePY2TUxT/iBqxo3mxlnA+9CRkTCdKYXTMgkLWqUup7kXDNqjpVOIKa
fdn/vdCPoGjONM6TD6LgKXk073cLUoOtOTdOmrE5P+9ZmEKPwqeZ7MzSUWSc
6nq2wdWGU4W/PJiLMSFnwczPiWtMqDEVY1mrAeVc5cqZxcNY3O3c6hBoRtp5
Jn3yjgJJwyQZnTqE5pHo1e+5ncj4MKf+Wt4LvE3X1yU9sKB8/Z6c6N+s0M5P
9KOPvkNO/jHSxJkCwuKSnLskHwP4r/bQVBokF7xNT/a0AN9KNPLVi7cRzVQX
nuM4RJpSMPaEEg2NKvd+1WfIqKY1RnmMAe1bz47H6hqIX/rxoFt0FwoHix76
0KvB3NBWJblSB3Wx7tJ6xzYUXqaXsvp0KKkYu9/CtQEnOMs+tGAONUe4a8+K
ZqFi9nj5Yl43Cudvr9TYI2QcsX47nq4Dxhnxj3r/aYjvmFdExHUCb1mtzfmS
FChn+YqwbzPI6U1KcpGqsVhV5vLE24aSix7zj656iwEv7rPcftVj3fP5fYHX
DBiwsOkw87kRmw9urbVNV4IoTWksPzeAIltQ2EPD91eyX3vlnAxJfssawrEH
qQWSYI5ai5L6ygZ/7StgeLf3bfLqRI0n+PaXlKEo/GAqaxGJHluIXtn1VmSt
yGK+DNVCgM/NfNHrbggxMgtzrg2gfK9TtLG6An1flN7OzdVByFe1t3vHGEra
9o2xzxiBMC1iXogYhqnaneahsz0grFlWkNY0ixqDy5faC3bb5G79q8P/JaB5
nXRhvqMeOfcSZHeXDAB5S/wXldoCBtnQ1bxLb6HY6fawJECMdaJbNZtiLECr
KVRUFk0Dz6k/QvrnBFQktJUmOo+C0ClCMXTjDdJWhimWUfqAmkyR/r3DAu1B
zMfFPAVS7TMzYpd3YcjyRRtLsAk8Ws5vEXobkbPe/e6OzZ1YQaaNNnl9AnNa
1b1CmhZEqx+GJtbUYEZ/SAn9+hiY26Y9HAyfIB7bk9576TA9JbVhzbZekOiO
RZ34pwzTf9LzEx2KMMQ3zrR9VQ8SoVL25bl6EGzAQ08iJ4GYUorF9nfQd23Q
4bCdJLC0u1mu9HEQrTh5mqt6g4xBioOo6CVQbFt3NjIsQPgoQzzFRpCvymqg
ZFuhLnxQ68uaBFGmz9Wo9d0Q4FbmteX0GBA/5HDadO+AcsX1mPrLR5g65XGO
KzNCZO+j4VHlR/gf6T9iXw==
                  "], "Children" -> CompressedData["
1:eJwdiWl4CAQAQN+3IlMUUVKOORIKc0XOqWiEbDlSYWMbctRO2xjbHNsMlXIk
RXLkVohylrOUW+6jHJFbuXmWH+993/teUGT/sOgAIK5AnsIikkJiYyOSwwPz
IrRffFRMVGxw3Z7//9w8Au7zAA+SjwY0JD8PUYSiFCCQwjxKQb5Tv/WuD3PH
R7htIW65yJsu9DEWeMP5Xneej1OMa861OE/wJHOsRnVK8BQleZoylOWqs/3P
Z/jXUlyxNJf9xkvOMohylGemFajIRWf4LJW4YBXOO93n+NpzVuas0/zHqjzP
V57xBU471b+dYg2+NJia1KI2p/zCOky2Li9y0s+txyRP+BLHrc9ffuafTvSY
jTjqBI/YmCY0JYRmRBDJy7zCYbtwyFfpxFs0pwWvMd7Xac1BQzlgS1oxzv1+
6j7b0I4w2vIGe/3EPxxrOG+yx49tz0futgO7/NCOjHGno+3MKN8h1x2+zXZH
+i45bjPbrXalG1n+7gi704PfHO4Wo4gmhl8dZk96kcpQe5PpL2b4Hn3oS7px
xNOP/mz2fTYZy0Y/YINDXO9gE0hknWkmMcifHehPDiCZVNeawhpTHMggVpts
GoMZQjqrHOBKk8wgkxUmOpRh/GiCPzicEWSx3GyWGe/35rDUkSwxl8XGeQ9L
XSLO
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{154, 96, 9, 6, 20, 19, 98, 113, 
                   148, 65, 53, 110, 65, 76, 97, 2, 4, 148, 64, 5, 76, 151, 1,
                    98, 52, 50, 148, 143, 126, 16, 10, 59, 154, 138, 17, 140, 
                   123, 155, 14, 10, 9, 128, 17, 39, 27, 124, 35, 88, 132, 
                   143, 43, 72, 101, 27, 72, 127, 155, 97, 65, 151, 71, 131, 
                   98, 150, 33, 82, 66, 69, 73, 115, 57, 22, 49, 58, 16, 118, 
                   9, 133, 27, 9, 5, 9, 87, 145, 2, 76, 94, 129, 67, 106, 1, 
                   98, 116, 4, 9, 18, 13, 3, 68, 13, 38, 98, 104, 72, 11, 7, 
                   1, 65, 14, 116, 24, 41, 49, 8, 46, 39, 36, 113, 105, 78, 
                   11, 26, 41, 25, 91, 3, 48, 42, 84, 152, 26, 125, 80, 7, 
                   147, 140, 94, 75, 33, 26, 24}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{2, 6, 1, 6, 7, 7, 7, 1, 5, 6, 4, 2, 5, 
                   7, 2, 6, 4, 2, 6, 2, 7, 2, 5, 5, 2, 6, 5, 7, 5, 6, 4, 5, 5,
                    5, 7, 2, 3, 1, 5, 6, 4, 7, 5, 3, 1, 4, 6, 4, 3, 6, 4, 5, 
                   2, 1, 5, 7, 5, 3, 5, 7, 1, 4, 4, 7, 3, 4, 5, 6, 5, 3, 3, 3,
                    4, 5, 7, 4, 3, 3, 3, 2, 3, 7, 6, 3, 1, 7, 4, 1, 7, 6, 2, 
                   2, 6, 7, 6, 3, 4, 1, 6, 2, 1, 3, 4, 6, 7, 3, 5, 3, 4, 2, 6,
                    6, 5, 7, 4, 2, 5, 6, 1, 7, 4, 4, 5, 4, 1, 2, 5, 2, 3, 3, 
                   4, 3, 5, 2, 2, 4, 5, 5}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBXQSi+yFib1JlAQAAAIoAAADE7rUprNcHQID/XJRGtPe/AK+qC9Kw+b/Q
sQpHNXr5P+hkWYAfY+O/kFN8C3Hm+7+Ym7L1bgTwP4jgG4HPmP4/mAezvIZr
/b+IQhNLXQnLv7g5ntYQSsI/GJ6Uw+a07j+Y6xVY+Vj2v4gMMBUcEN2/iNcN
BgrL7j/YGXBTlMr0vwC2wn5p5Oi/0CcMyDh/+7/Yw9CIh7jhPzCs753F0vm/
iJTS/FsA479o5hN3A83evyieM6KctvC/kGJ0HAG08L8wV8AMNADev7jJ3U/A
JfC/SCrUEopu5b/wUd0/MFHwv0AG6gqdk+C/GHKLnq+syr+gJOihSSbrvwiJ
Rm7j88K/kBxTdEu45D+AiX4OWPrSv+ALZBnk7M+/8PmSwhfr5z+A9AqKCenw
v4hmvnysteO/qBdZ5yR+4r/owZ1I3BrPP8iUj+ACL/C/OEm+HHbgxL/wE+Eu
H373v/DHOjm1/b8/6AgE3Gi89b84oCO+2N32v6DtYD8C6vO/+BZZKdy9878Q
rp5+VOTyv0hn3BUpm/O/cCFzoL108b+oHI3T0AnjP4B4f+hAhus/qJRSqYKv
6b/4IW19YtzjP/BrmjcFR+g/UC99E/J58L841cLk6pC4v1jrlAORtuI/+JUc
3cbo2b8AcUSG8RHov3jlXnJ0Qua/iNMB2xSN4b9IXKQdEfrXv3Bx/5S/KeW/
EJZSSLO03r+Al2HoSfPbvyisocKv/dW/CPiNlY6c5D+o0LzNIQzZP7DUhTiH
ZcI/mKUOGn26079o4DpKak2vvzhqSSL89ps/SBSIrsLw9L84A6j6Qdi5v1Cy
/rBVVew/AEP87Ly39L9YR+6xhqX4P8jL5hoxRvQ/PMgEe7RLBkAozPyWryDh
vwiJbP6WMMu/wDjKP5Ak8b+YfDGD5s6yv/hb9EMqX+y/9GnBf0oHC0DwAyI7
AX3JPxjeD5UDAPK/4D6P3nvQ5b8g2Ddmse/gvzCiAYLeMus/UObPZJVI5j/Q
vsKEGpfpv/Cv8TYF3N6/2Gu9AZdJ7L9AU8uV6XfUP+hm5uSZSNU/wCXXXx58
y78gFjIrLkDQP4Dran7FoNk/yLRIdAUj5b8IEtWruhXdPxA8/QqqjeE/UKYU
L/IJl7+gyCVF6PDhP0AQN07Edfg/KB/BmBzW4r94NqzskWr1P3A1EXBoAOy/
wJtMHSmXzj8YQK/OCtzlP0AjapiLWso/GC/qL3ZFxz+o4v6XWL3mP2hNdHcM
ffE/wMNrEIgUhT/g798c8NLIvxhA5TUVNMo/GCQxMvva9j8Afnh0ZxKsPzCr
rEnGbtK/iNlvN7pj6r8ohVPImhXwvwDRG5qSeM0/4O62P8cs7D+gj3LP1AnJ
vxhCklfw7O8/WDcpNVyG+D9kMMIccA4CQHB0I7XN39a/QB9/xnXNzD8oe6c6
rt3FP9ilakD+4N2/6HpAxZ68q79I3zIzsmn8P9x8PWV6ywFAsEQOvvO5tb+3
6FdI
                  "], "Children" -> CompressedData["
1:eJwdiVV0EAQAAO8B0t0dAtIxOoWBioTE6GaD0TlijGZBTBAVBUVRuhulQ7q7
uzuVto7Bx9179y5PSJ+gzvGA/onjFBQcHhgWFhzROElc1O49ILRLaFhAua7v
fmwc8d6z3Pgk4AMSkojE6DL/d6lJSMo4lvifyRjIIJKTgpSk4l/rk5o0/GMt
0pKOvOTjbxebnkW+MQMZyURmsvDaPGQlG6/MzksX+sIF5iAnz51vLub5zNz8
5Vw/ZI5/Otv8fEQZylKAWRakEE+daWFmWIpffWIRHluUYvziI4vz0BI8sCT3
DeCe071rae74s+Uoz2f85G0rcMtPqUglblqZG35CFaZ53apc82OuWo0rVuey
gVyyBhetyQV/9Lw/eM6pnnWKn1ObOtTlC773jPU47XeecrIn/dYTNqAhjQii
MWF8YxOactyvPWYzOhBMc1rQkkm2oz2t+MqjtuaIbWjLRA87wUN+6UFjPeB4
Q+jIfjsRSmf2Oc69jnWPXehKN3Y7xu70YJcx9iTanfaiN1HusA/b7cs2+/GH
kW61P1scwGZHG85gNjmUCEY5hJFudIQbHO4whrPeYa5zBCMZxWgiWetQ1zjE
KCL83Wh+M4bVjmGVY1npYMcTbiyDXOFA3wJRUB7Q
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{6, 123, 93, 128, 42, 113, 39, 
                   85, 9, 20, 65, 7, 129, 72, 65, 151, 15, 19, 37, 67, 2, 145,
                    116, 16, 5, 4, 51, 19, 116, 13, 54, 51, 102, 101, 16, 106,
                    71, 98, 73, 131, 145, 76, 96, 104, 41, 86, 132, 138, 1, 
                   155, 10, 141, 103, 26, 46, 133, 39, 135, 137, 36, 35, 65, 
                   147, 85, 11, 28, 119, 87, 98, 1, 9, 72, 26, 126, 143, 98, 
                   125, 124, 31, 143, 61, 98, 76, 29, 9, 70, 84, 106, 9, 128, 
                   94, 68, 50, 98, 113, 153, 5, 120, 72, 126, 148, 64, 33, 99,
                    113, 68, 91, 151, 81, 16, 3, 16, 139, 5, 154, 11, 10, 30, 
                   126, 48, 152, 144, 11, 58, 24, 32, 119, 11, 107, 9, 54, 18,
                    26, 97, 50, 33, 124, 117, 25}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{4, 6, 2, 7, 6, 7, 4, 3, 5, 5, 6, 5, 4, 
                   3, 1, 6, 7, 5, 5, 4, 2, 2, 7, 2, 7, 2, 4, 7, 7, 5, 1, 5, 2,
                    1, 2, 7, 7, 2, 1, 1, 6, 2, 6, 2, 6, 1, 2, 1, 4, 6, 5, 3, 
                   1, 6, 5, 4, 4, 3, 5, 2, 4, 3, 2, 4, 7, 4, 2, 6, 4, 2, 6, 1,
                    4, 4, 4, 6, 4, 6, 1, 3, 6, 5, 7, 2, 5, 5, 6, 5, 5, 5, 4, 
                   1, 2, 7, 4, 2, 3, 3, 5, 6, 7, 3, 2, 2, 1, 6, 6, 6, 7, 3, 4,
                    5, 1, 3, 2, 6, 2, 6, 4, 6, 6, 2, 1, 4, 2, 5, 4, 2, 7, 1, 
                   2, 4, 2, 6, 4, 1, 4, 7, 6, 4}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwNyHtQ0gccAHAsXZTZzGrRlptWFrky3dUkzb6YrUF1RVr563RFDxeuF5tY
TnuQS+MqT3frQbo6ykxE7dwsI1d9xTT1TKOExDfKYCAoPzAIKGv98fnnE7zn
SHyKF4VCufBRwSqGxVr6AAiKm1343RiG347q/SnQAUHlp7fLaG4ktn6y8svy
EWR0ZhOxEeMYlMao4ly2Y1UoNd/GGYTmTI/6wEoHUgIr3faiHqA89q3RnfNg
uM+xFs0SBxpzLxp01SYkN0zZVal2gCSee97fy4gZSf4z343bkLv4san6QzWI
pvhtzVragYzDO/zSNZ1IfZGVx/7KgVqF15ZHvlbMOJpXlJ88jK78pf92a+xI
K5LIGtlGbB5Xvynme4Dw6ekOudOK9C3zpAH7beivPdT7IHICk8OXdM6raEYR
sajrTN8ABHUIKq997kFXrL3H29aKwiZ6epvMjJy2vQYxpw6I+/zrPy4mkVff
lhz/pw2q9l1d0VDbD9SkvhdlR+zArUkWlvSrgGKq99KkNaBWecon7fogkvRN
615YekH4xaWNBXO0aDzxg7Ov5CUQk43XJrE7kSZLECScJZExe9n0GbUqUFa8
cTbpSRR/WleVpx5BTUWcV6bWiPzpmSE9TXakpw8fcDaNIS/MII+N+vitQ0Pv
CD0qDwU/U122IW1uUtaESUYk3QItNUWPVHoJP/K+DZXOqr1BBhNSju+9bV6r
R3qA74reyH6U61vTpSlPUH7Xb2d+hAJ550qTji0yoTh9w4xodiMQR5f+vu5J
PfrvP9sgGykFyfqC1yFlPUiNKEtedVqIYr5ixxyJB6iTBLcLu0dB+o05elmp
AqgLR5e3Z3chI8H5PveEGcUHnwYv3G1G/uGK2ujPBtDF21LsmqlDaVpxyeqc
V8iIOBk6tFMB4VPZd66JrWC807857hMH0GOtadtGhoB+avFbQmuAuqH2eQK/
uyAPyVndMK4HTeLa+UnRo1AwKEl91N8GzLorLx8px0HbVVF46/lEJmsgfrNv
4EsM/2u2yN2ugGe7Z80VEhOYTLKGmz7gQT55+oKU40RONys/UOjFbJ6vXn8v
xAisTqs/OV+F/LHEe74bLcj19g+orpQh9ZVsU3BFF7iiYx5nHnkDlLh3lof3
XyM9MSft5nMzSqaGDl6p6UONaJvk6+phUF4keA81duDFCfSGyW7k3qKHLRm1
AaV2QQw3dQzF/+S+T+jqQVGD/TfPUxOIpkKH2taB1JaE49I8K7JSB45nNeqA
cjAsMbTcjPI/LMX7rDeR1b66JXZaPhqpH35WBziQmdB6yXRMBZr15c+GrXqQ
nzyTHRSvA1rR2sZXv6iAFbPc23pIAYQubsEe9yAoNzCiDGtUQLLr7YXFdnCR
Yd/O4tlAWupM8RxsQdqN7O2urS5kjUUpazOGIOjXG8yCHBOEX5oYueaBBYx/
T8uNAQtQUn1mis5LkFaymRQQOhB6Z0R9f9UOjBTHKQf5H0j3bCyL3DUMpOdt
zY6jRpBnyCknLnTC/yXRZJw=
                  "], "Children" -> CompressedData["
1:eJwdiWl4CAQAQN+3IlMUUVKOORIKc0XOqWiEbDlSYWMbctRO2xjbHNsMlXIk
RXLkVohylrOUW+6jHJFbuXmWH+993/teUGT/sOgAIK5AnsIikkJiYyOSwwPz
IrRffFRMVGxw3Z7//9w8Au7zAA+Sj7foTH4eohCF0fkWIJCCzPOuc32YOd7x
EW4720f5xqcoyWPMsghFueVMH2eGxZjuTYtzwye47pNcswRX/dqneYb/7EQp
StOBaZahLEGU41+/8opTLU8FQmlJRab4LJW47Jc+R2Uu+YVVqMpFX+V5XuCC
TahGdc472RoEc87PPesk/7EmZ6zFaWvzt3U4ZV1O+iInrMdx6/OXL/GnDThm
Q47aiCM25rCfecimHDSEZrzMASe631fY5wSbM94WjPM1PnWvn9iK12lDW/6w
NXsc624/dpcfudM3aMeHhjHGHYaz3TfZZnu2OtqOjPJ3c/3Nkb5NjlvM4Vff
4V2y7UJXfjHLbkQQSXc2O8IeRLHJDDYaTQw92eBwe9Gb9Q7zPYbal36ssw8/
m2l/3ucn0/iADGOJY63pxpPAGpNY7RATGewq0xxAMikMMpWBrHSgKxzEj6b6
gykOJtkhpLPcAS4zye/NZCjDWGqiSxzOYkfwnVl8azaLTHAk8S40lwXGeQ9Q
BCLO
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{151, 6, 12, 19, 37, 87, 89, 128,
                    84, 13, 71, 72, 145, 46, 43, 91, 98, 50, 102, 9, 150, 54, 
                   14, 127, 129, 151, 39, 98, 31, 70, 19, 34, 50, 72, 114, 98,
                    75, 9, 148, 151, 67, 39, 1, 16, 64, 33, 76, 116, 51, 126, 
                   26, 86, 131, 10, 110, 125, 8, 41, 154, 123, 35, 85, 141, 
                   36, 10, 78, 46, 135, 144, 49, 14, 17, 48, 147, 57, 77, 25, 
                   140, 118, 27, 81, 96, 143, 98, 67, 9, 72, 5, 79, 116, 53, 
                   20, 69, 76, 92, 110, 87, 5, 100, 104, 65, 7, 42, 106, 146, 
                   76, 149, 104, 116, 5, 38, 50, 113, 4, 72, 44, 143, 30, 82, 
                   133, 152, 132, 97, 124, 40, 66, 155, 1, 133, 11, 26, 83, 5,
                    58, 29, 114, 140, 136, 26, 28, 61}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{2, 4, 6, 2, 2, 3, 3, 1, 3, 7, 7, 5, 4, 
                   1, 7, 7, 7, 7, 3, 6, 7, 1, 2, 1, 6, 6, 5, 6, 3, 2, 2, 1, 2,
                    6, 7, 1, 1, 7, 2, 2, 1, 3, 1, 1, 4, 3, 5, 7, 4, 5, 7, 6, 
                   3, 3, 1, 7, 2, 3, 7, 5, 4, 2, 3, 2, 1, 5, 6, 6, 4, 2, 1, 4,
                    2, 6, 2, 1, 6, 2, 4, 3, 7, 5, 2, 7, 3, 1, 3, 2, 7, 7, 3, 
                   3, 2, 7, 1, 2, 2, 5, 1, 3, 1, 5, 3, 2, 5, 1, 4, 2, 7, 7, 7,
                    5, 3, 4, 2, 6, 5, 7, 4, 3, 5, 7, 3, 1, 7, 2, 6, 2, 1, 4, 
                   7, 2, 4, 2, 4, 4, 2, 2, 7, 3, 5, 1}], 
                 "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBfQSC+yFib1JlAQAAAI4AAAA4jm2iJmj3P0DeHfHrxvg/2CAnrVzk7z9A
iTwOxHXnP6Dv8/yswuw/GP1T+8ua8L/YlhIAcYb3PygquVImbcW/oEpswkK9
4r/w61Er3GTSvxDjDm2XNdQ/AOYgBAUB7L+Ax+fh2+ztv6gLJIC8mfq/mOb8
mQM27L+AqxqxHdfXv4D7s2np/Ny/qNWIRF1I4b/Yg2TObWb7vyhOIiPulPe/
UFG0P5FBrD8Ytj5QSyXqv+jXMn2gUN2/cGWvU1eM9r+AG5VMkBngv+hqz8O1
GvO/2AmYJJcq/T8IKl0Wsljzv2AUK11D1+K/oHlHSo7PwL94R01Zj7HDv0Ay
L9qyhr4/sLTCFAi7xr845+6XsOHvP5i/1ydDI76/IKMJVvEZzL/4xXfHYsfF
vxBBuyFWSN2/gNsp1CV18r/YD4ffgmbovxAx9OggAfW/YMKwWUhY7r8IBkX0
+XD0v9Bymkxk09A/AGk7qG0pz7+IID/yUartv4Cu5xxt2ma/iOc4QUQg5j8o
yDsSX3vsv3CoPYliRPc/KIL2x0gs8j9IMWAdNfvnv/AL4x2DUu4/+NXXYDxC
yr+gsZNXlRjjv5iLhlTiYfC/+FVC3E7D4b9Q0pTs9vjXv4gYzdhYM+u/AG0b
7RBd9r/Yu/49Mubzv0A2Nb7zpae/KOhuMXlH3j/Y5DgrPGHQvwCYkqcQsNS/
0NyHSGPl179wmPtUlOLwP2BeNPosy8I/CFUxGl354D9AfW8mtKndvwAgM3oH
V9A/AKdXXqC08T+oOFsi6aTXP9D2Mw7mxqE/SHXNHh2i1D/w8eVPBxvYPyho
+OY8Fe0/yEmptLrV1j9ojQiAS3/SP1gqRslZaqM/2CRKq3Je5b/YuUBHSPfi
P9il49wI2da/EOmM6+F/8T+gb37Rh1TjP+hV6crYHd4/UFg6IkW95D/4qXXq
7VWwv0A8ohb+N+I/eIJ0D0p19D/AfYbiMOfqPzD/umg+jvQ/qKbLF4I10L9w
qkRyTAn0PyB8DQMEptM/UIPe9Jst3z8IR2tnDevgP9AVFYO6Q+s/aNOPwPtB
yT+o496clNHvP2hszmb4+fo/qM3oAiFX8D+QLTHsMfbbvygCMnyYtOu/wHIF
o2Fl9j+YUaUo4B7ZP3hgke8BnfU/6E0KcVzY5z9AiOU5LIPjP9C3zAQiL/I/
+JvQM6WN878IwIVNnbftP0Ar2OpuR+I/0CfzhUb29T/oD16L6efnP2CKawa9
9Og/ULIhHXb26b+4HKPHIBzwP2hQujOx7Og/iKl5d0uz1D/4MXWAzELuPwhz
1onJ8e8/iDSN7EJP7r/oSYF+8gKtP0iDvQxt6dM/kG0QCWi17j/QgrgLig+f
v4AT2uLqxO4/GGOs8O3c5z+YiZoifzX7PzD/GLXj4dy/EDtyKXVS5b9oqsMG
KeP/Pxje67alLvg/OElOL6es8D9AXcVbjrvKPzAZ+2Nrzvg/+GkRPTNwA0CI
L0iyQ+/cPyDrBBpkJNW/iPqmHrfj0z9Ymj+jrJX+P15PYGU=
                  "], "Children" -> CompressedData["
1:eJwdkmeYDwQAh98H4URJKIROKipy5JCVopxknFG2uxxn879zG2fcnV323ptQ
yV5F2VvKKpvIqOxSr8uH9/c87/P7+gZH9gzvmAWIyZk54RHxtQKBiMQmQZkS
1iM2qlNUICQ0+v9/VCZZHpOVbDxBOuvNTg4Gss6cBNGN7uTiSZ6nELnJg671
KdaYnwI8TV7+c7XPsMp8fOOzrPRfv/ahBfnHr3yOL/3bFRamCOUI4YHLfYFl
3rcoxfjC4rxIMEt9nTcowRJfYrEleZlXWOQ9F/oqC7xrKUrzGnec723necsy
/OVcyzLHP32TP5xteSpw01q8xSxvONOKhFKJGV63JpWpwttU5ZrT/d1qXLUG
V6zOb07zslO95DtcdIrv8h61mez7fEAdJnnBidYljE/pQD0m+CH1Oe94P6IB
7WhPQ8bZlrE2ojHhNOGcrWnKGM/ajDOOtjkfc9rP/dVP+MUWnLIlJ23FCT+z
DaM87kiPOcKfHe5PRnDUSH50mEccahQd6cQQD5thNJ05ZLpdSPOgXTngYPfb
g30Osie96E2AvQ50jwOMIdVY+rDb/u4yjnj6mUBfE0kimRT7kexOU9hhX7ab
ZH9S+cFEv3cA20xwq4MYTBrfGe+3xrnFDIbQx6EMY7PDM1uJdQQxbnIkGw24
wd4+AgxhJsw=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{148, 151, 140, 12, 1, 2, 98, 
                   106, 116, 133, 128, 56, 76, 116, 5, 72, 38, 98, 65, 126, 
                   141, 27, 128, 76, 98, 135, 71, 1, 18, 1, 46, 64, 39, 154, 
                   47, 73, 5, 69, 21, 3, 66, 98, 156, 59, 142, 114, 40, 105, 
                   76, 44, 119, 71, 154, 75, 86, 146, 131, 109, 68, 42, 16, 
                   78, 10, 11, 27, 81, 96, 91, 16, 117, 3, 113, 76, 9, 151, 
                   46, 85, 8, 34, 5, 145, 20, 63, 9, 107, 31, 36, 126, 92, 15,
                    110, 7, 4, 16, 5, 138, 1, 143, 5, 6, 97, 68, 24, 7, 140, 
                   65, 52, 5, 58, 51, 90, 50, 18, 11, 39, 126, 109, 54, 14, 
                   29, 111, 32, 146, 24, 26, 147, 75, 155, 101, 118, 57, 33, 
                   115, 104, 48, 137, 132, 140, 27, 119, 87, 151, 28}], 
                 "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{6, 7, 4, 2, 1, 3, 4, 4, 5, 4, 5, 2, 1, 
                   2, 6, 5, 7, 1, 3, 2, 4, 5, 5, 4, 6, 5, 3, 2, 2, 5, 7, 4, 1,
                    1, 7, 1, 3, 7, 5, 7, 5, 3, 3, 7, 6, 7, 1, 6, 3, 4, 4, 6, 
                   2, 3, 2, 7, 4, 1, 1, 5, 3, 1, 2, 3, 4, 5, 4, 6, 1, 7, 7, 4,
                    3, 3, 6, 7, 4, 2, 7, 3, 2, 3, 3, 5, 1, 6, 7, 5, 2, 7, 1, 
                   1, 1, 1, 4, 1, 6, 4, 2, 4, 7, 3, 6, 1, 1, 7, 2, 4, 1, 7, 1,
                    6, 1, 6, 2, 2, 4, 2, 5, 6, 1, 3, 3, 6, 1, 6, 5, 6, 1, 6, 
                   4, 4, 5, 6, 7, 5, 1, 6, 2, 2, 3}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwNkn1Q0gccxjFn4bVErSm6Fuhu8y2TajO05hdtlq9l3sb5sutlK8NMZKwX
szTMTNQsW2/m3cwt3NGck/nS3Hn6pbKF5ArFBZXKT4ykIPwJaeRZjD+eP56/
nvt87gn4tiB9jwuFQqlxRnBlKK+OpgFtj8VR5GZG1bGTn8e0WFHxzTkFbdQC
zKqEPr7/MDTuu09ITLcw2IVcE9JhANb9T5ZUrzNhsH48t1TzHInJHwZS2l+i
ipO9YWnHNCoiDzzRNViRFOUL0rgucmoV43Wv3oTG9V+6nxAZkPziYtOLWxYk
3R6elRAkeroGxQ4U2lAbuORUxdoZ1NIqdCdyjCib49uoLycwYZsPY5/agKrk
sK1qxjBqW9uyR0QTELyy69XbjQO4MyfGxOJb0L4jLJZJvY91gpuZfo1zICAW
Rb0fbgSi90jciJDCIfPq17ltNgIva7ApbsKMAm7rryqlClR+13QxBUPIygr7
i3RXIfV8aH35hzaUjf307NxeLRrruc1H+gjk5W0PqFw+hY0Rmv1PqZNIqta6
yX0nMK1SdDxUO44C96DU7MAhVBTsGS7CRyhuuNNawlBAxk62ie4YQ1k+p/T6
tBbrFF2rasVj2LX+7zf67n6Um+k/r2U9QEp+zmX2QjsKzop9js1PI4fQFM1L
XmPapYh+Sj6J8gO+oqAyAmsXfkysdHLVHl7Bzjw9g0aP85d8Rt+iZ6536mRF
J9D9hdElRy3Iia5MNJzRoyDV4/e94kK0u1bNR9zTgF06eOHCLxYk2D2lXnum
kXk3LNIYakBF9+7ovngTJgRLOoS7DCi1KnMHnmiQ4AojopS9SC0JeJC+4yoS
pHe02mBEcogwC6f6sTFRn2pY/Rxl492Z4cf7UOuIvMZrs0HC5YmMLVsfgyKy
tI9x+y0o2mnFEZ82QULUQNBvlGFUhOyO2l+tdvYbKVc/aAfVuh0SzXbnzqHK
yOqzepAPzfBWykhgc/sXBXaakeW78fQh8h1kHFp9ZZnyBlKWafLKQ+xA3VL2
WNI7CYLlB6caQv8D3h1rlCtXB/LLHXkjjyaBXlfGZddrofBev1L93iBI1dRV
6Y5RIBa3sb7foHb+NCY4jFeDzDO7/ehOr9RNR4r5L4aQPka76EqxYm0NimpG
daj9Q+9jO0UAvctq9p9/hbV/fneT26KGwpHulrGvX2Gdv2dAM20cxP+UEMwm
K0h11T4nY6fBeNMjvGlmFjwzOXcdD6eAGb4mLzaRAGpfo3sBpxfozUGH7YEE
iGE0aNc2CxBRPottPbOwk5FrMvnqQZpUorTHGTFtDWvAt9uFo0goil1stAK9
2NO4uV0NAlZihVDZg7Vb42nd00/Rzo7P4TPnQEaf3X/u4F2n99E0nXkWMhL9
mbl+BhAneZWFffYMBCaplOahB8WPrV4z6fMgn7CEV+MbkPI6yycp48Dmz236
SKVB+qBDAv/aQHSdcZvtSgLZsNzxbqkVZCuKLdyvbCAdFvplZz0F6mt+JC95
AUfgzU46nGIH5tHkBcnXLfA/8nxcHA==
                  "], "Children" -> CompressedData["
1:eJwdkmeYDwQAh9/nrEMkI4rKlRkpKauSQ3Eyj8pK7nLIzP+O23eO4+64y5a9
yy57ZVZkVPYuI7NQaFtvVx/e3/O8z+/rGxI5ILxHEBAdnDvhEbGhgUBEfLuC
uRLWPyaqZ1SgZu1e//05uQT9Tx7ykg+NIj8FeIzHCaYgZdlgIQpThkd4gPUW
pwT3LcI9i3LXBynGOh9irXdc421X+48l+dtS/OXD/Glp/nCVv/sov7nSW67w
puW44XKfoDxt+MwQnuRXW/EUn/qLzahARSpRmVq8QBWW+TTVuG5VrrnUqy7x
Z6vzDIutwSKfZaHPUZOfXOAVn+eyn/gitWlEYy75sXWoSz3m+xLzvGh9LjjX
l5njeV+hAbN9lVk2ZKY/Gso5Z3jW6Z6xCad9jR98ne9tyimnedIwmvMGJ2xB
S6Z63Ckec7Kt+cijTrIt4Rxxou1oz2En+CZv8TbjPeS7dGCcHelEZ7rQlbEe
9B0OOMb9jnafH9qNHL8zgm+N5D2y7c4ov3GkPehJL96nH/3Za2/6kmUfMt1j
hrsd4QA+IIZBDGS40aS7ywBfO8ydDnUwsewwzTjiGckQvzLVBBJJIsUUUkkm
2S9N8gsTHUIa2x3KCDIYRoLpxDucOLcZ61YHm8kgt5jFZmPc5Ciyc4v53Gg3
GvBf0yQkzQ==
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{153, 9, 96, 76, 13, 93, 63, 110,
                    72, 7, 8, 123, 139, 138, 96, 151, 64, 87, 98, 72, 10, 72, 
                   135, 140, 50, 67, 37, 12, 19, 116, 76, 79, 126, 153, 102, 
                   24, 76, 116, 31, 116, 98, 42, 105, 98, 138, 104, 87, 18, 
                   109, 16, 143, 33, 140, 70, 11, 72, 33, 44, 112, 35, 5, 4, 
                   144, 3, 76, 156, 135, 129, 27, 27, 86, 9, 75, 128, 27, 141,
                    49, 7, 123, 76, 52, 133, 98, 113, 65, 98, 65, 13, 128, 
                   143, 15, 54, 33, 5, 64, 151, 39, 100, 5, 143, 20, 18, 70, 
                   11, 145, 104, 59, 51, 97, 31, 46, 91, 3, 151, 83, 26, 72, 
                   50, 75, 110, 81, 78, 147, 140, 63, 28, 26, 28, 124, 127, 
                   142, 26, 96, 146, 11, 118, 114, 113, 29, 25, 16, 61}], 
                 "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{2, 4, 7, 6, 5, 1, 5, 7, 2, 3, 6, 7, 7, 
                   3, 1, 1, 2, 2, 1, 5, 5, 4, 1, 4, 4, 3, 6, 1, 2, 5, 1, 7, 2,
                    2, 1, 2, 5, 7, 5, 6, 1, 1, 5, 4, 7, 2, 2, 4, 4, 4, 7, 7, 
                   6, 3, 7, 3, 4, 3, 6, 4, 2, 4, 2, 5, 1, 5, 3, 5, 3, 7, 7, 1,
                    7, 3, 3, 7, 7, 1, 7, 5, 2, 6, 7, 2, 3, 4, 3, 6, 4, 1, 2, 
                   3, 5, 5, 4, 5, 3, 3, 5, 5, 6, 5, 6, 7, 6, 7, 2, 7, 7, 5, 1,
                    5, 7, 7, 4, 2, 4, 1, 7, 2, 2, 2, 1, 2, 6, 4, 4, 3, 6, 1, 
                   6, 4, 7, 5, 1, 5, 2, 1}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBXQSi+yFib1JlAQAAAIoAAACQn6Hk6VsHQCi/V8iGmu2/MMDo6hCw1L+4
ljV0zT7mP1iYVSguAPO/oFJgixAB6L/Y8SYVFqvxv2BY9PyCa+o/eObmRCeT
9784C89q5TDsvwjWOsbmoe+/AA/nREhN77/w8S1wKG3Pv4hvGtvdOvu/IFBW
B4QD9b/Q3r8aFND0v2hqrOOIG8S/iJmKjfzY7r84Bsl4Nxzyv6hYE8XHM9e/
2BeXuxza179w5Na36BHuv0DnxlJiQIM/yJSP4AIv8L+wl2eYl2vEv3jQs6eO
kvY/iPlG8fxfwL/w0ehhRazzv2iJzaIKP/e/EHJp2hP18b8QebD+RiffP/DD
WEaQWdc/KHVsinLbmD+gu2t8TMrrv4BiVPYGu9A/WJvA3ldt1j9Q+go9nxHv
v0CDqHZTy+O/+LZxr0ha8L9YYdDXLDTov8DNb0jHXve/OJy6Oum69L/Qsc6F
wGTev8DuuFxV3PQ/4EHJ/P+g5b9ANfmLX97gvyCDt+03o+u/IKApfEH8478Y
hAUIW2mKvwD5twJrPvE/GPt1wOBZ+L/I3Qzezb3zv6hhsSRUJOW/kCtP6egI
5b9QETwHuuvwv5C3wdnhyta/wMrkKTRa3r+4O7n54rvJv6C6RVTFecQ/VCO3
U9XRAUBIp0mX0g/Mv/haIjsSXfI/qN6oBIo05b94r8OyjN/0P8AfvitIxKq/
iAFB2Z5/A0CYqdhxZ8/gv4AbXVGzCHG/4KInFidH7r/w14b03KTJv4i3DgF6
hsI/mCV8ASTo8T/QszsdLIHIP1j8nTwMw/I/EPlzeXnDu78wfyuZT2HfvwA6
Lzm79vC/oPM+E1yg4j/wWp5hIbD1v5jKttyzlb2/MLttYInV4T+wI5ZC5kvp
PxiVqYF3PsW/yG4acv3Y7j/Iq1wqLHqxP1ASD+o9Ls+/kCeIiKfqzT8AqnW8
PnXLv0jAGvBLtaY/+EeZTwtHzT+4bWXQbtTlP0D61Fw2qPQ/eBFIys3P/j/o
RiBWVSDnPxgPRqQKzOm/SHGrRcedtz/ooEA2nDSov7j0KXGOO8U/mEVKv2Jf
sb+44nf+K7KxP7AriP67HeG/+DZ+jMza6b+wAWCnnhTOPzikciLEKP0/2N3A
RFYS2z94KQmZfFLrP0ir9rAuoI2/EHGEjJQS3z+YXAKRygXgP8guDq6OROo/
wI268VWXyr9AhiAhTBvbP3AYUQmboeA/SNjzPQGv+D9wqoTUhDXUvxj6nL+t
yME/EGiwIRGdvr8w4023G1XIPzAIMKf5BPk/gAc1blCVeT/YdstY/k62P4AD
Ub+mPsU/IHwNAwSm0z+4QxkW8HvPPyiz/Oc+7+Q/6Gt2pbzYyz+gGl5Us6WF
P9CeJQIY/OQ/UDr9xJ7HoL+Aa4/YtprxP5B0GYVe7vo/EIYNgswX0z/gWvkO
QxXwP9jd+H7x6vM/wD+xO+Qk+T8QL7PRqZr2P7CbfcaAt7m/QJkCpPqh/j9r
pFZH
                  "], "Children" -> CompressedData["
1:eJwdkmV0EAQABu8hII2AdEt3dyNSSg0BaQZsoyQG2xhs9EZ3GHQblHSHonQ3
0h1KKih1DH7c99697+/l7NgrIDge0DdR3AQERtQIDQ2MbJo4Tur17BcUEhRa
omyXd/+YOOK95wPikwBdbUJ+MSOZ+JBEJCYJ6VllUpKRgpS8caWvTc4rV/jS
j/iYtLwwFalZbhqW+b8/+58/mY4ffe4PZmCpz1xiZrKQjez862Kzssh/XOhT
c/DEoeTkE3KRm3a0Jw95qUFN8pGfSlSmAAssRGEeW5BHzrcI8yzKXB86x2IU
54El+NuS/OVsSzHL+5bmnmW4a1nuWI7blueWFbhpRW440+tWoTrfW5XvvGY1
rvqtV/zGT6nFZ8zwstO95DRrU4eLTrUu9ajPFC/Yms/5ggY05E8n24jGfMkk
zzvRczbhrAE0ZYJnHG8zmnPaFpxynCf9ihO25LitOOZYj9qGtozxiKM97CgP
2YFAOtKJznSnBwcdaRCxBhPCAWPsQle6McL9Dnefw/yanuy1P3vsRT/C+MPe
/G4fdhtKX4b6m0MMJ4JfHewuB7nTaHcYyXYHsM2BbDWKLUYziMFsNspNDmGj
Ax3GcDY4wBFEGkMs6+3vSEYxOq6QdUa41nDXGOZbDPse0A==
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{13, 5, 84, 98, 113, 148, 2, 106,
                    79, 5, 14, 8, 133, 45, 142, 85, 123, 39, 68, 17, 127, 7, 
                   143, 16, 9, 142, 50, 140, 141, 105, 124, 133, 129, 139, 
                   146, 109, 84, 154, 72, 150, 94, 127, 50, 75, 131, 98, 20, 
                   100, 57, 113, 52, 51, 27, 27, 104, 144, 146, 31, 9, 33, 76,
                    105, 51, 116, 11, 143, 24, 106, 50, 33, 71, 115, 143, 26, 
                   22, 114, 119, 64, 153, 143, 72, 79, 145, 1, 89, 76, 53, 97,
                    138, 5, 18, 10, 140, 65, 137, 54, 17, 4, 135, 56, 21, 152,
                    140, 132, 39, 30, 72, 76, 41, 58, 42, 77, 66, 149, 131, 
                   151, 65, 91, 117, 40, 70, 46, 98, 126, 125, 5, 2, 32, 29, 
                   116, 59, 83, 16, 47, 143, 50, 82, 3, 26}], "RootIndex" -> 
                 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{1, 2, 2, 6, 5, 5, 5, 1, 7, 7, 2, 6, 2, 
                   6, 6, 3, 4, 3, 4, 2, 6, 7, 3, 7, 2, 4, 3, 7, 5, 4, 2, 6, 5,
                    1, 6, 4, 2, 1, 7, 5, 6, 2, 6, 6, 5, 3, 6, 7, 7, 2, 4, 4, 
                   5, 4, 3, 4, 3, 2, 5, 5, 5, 4, 2, 7, 7, 3, 4, 6, 4, 4, 7, 2,
                    2, 4, 1, 7, 3, 2, 2, 3, 6, 6, 7, 3, 4, 7, 5, 2, 2, 2, 1, 
                   6, 5, 2, 7, 2, 5, 1, 6, 7, 4, 6, 3, 5, 4, 5, 5, 4, 2, 2, 1,
                    3, 3, 5, 1, 2, 4, 1, 3, 1, 3, 7, 4, 6, 3, 1, 5, 5, 7, 5, 
                   1, 2, 7, 2, 6, 3, 4, 1, 6, 6, 3, 1, 3, 1}], 
                 "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwV0v1T0gccwHHMHqjMPKecdmXkXA/nSqdOv7byQ3UyetCMY6U9UsMLNSdn
5r66LMramZahlUdbKyy764GRaTl7/GCKuVNROBWuDFESUXz4igo+pK398P4H
3vdacSSFG+9Eo9EkX3JLK9M235oBuuOXUOH2WSyidoGpzd4NAltZpsuQM0so
QKlW4wDWkbBqo8MMq+H0w98O2FFY5PXx81kbUB778LH6HMay1u06PNaB9/x9
HcqBEiDViT8YGuzAXJy1g8erBrKgqzAiZRDHlf0JW1wmgXW0SLswRIl133/u
AcIBgS/fhO/nVmHMOaZXiWoCRKccgzP+RqSyiIj85EkU+yUUvdCZUFKerWmU
1SA1qWZPJPWicU+u56kVYygWFa2U+48hsfy8T7Tcjjm78/c/O21C8fWg8JA1
VmzWNvim8azIP5GfeiPSAnrr71Xc2VakMpmvtjV/BL3JY7xJPIxkvnbV8Yle
1BeXbJi6YEapqCrOWzYJzGlu5tnqUZRN01cw2GbkXyz8aUb3DmNFJzfQSA3S
4/yeZoR3I+3f2FZ2GQIRF/6MrfgAsrUFelVHOfL3PosS3dQCswBrV7UbkD+v
otQ31IrihKr2K091SN4dwPPHVaAP8M6OeVoFtPvP5dUHTSBL+eTaVNiD9zal
PWRfNoHEEZR+oFUN5JrNA3dytCAKFaT55ljxondDyE4FTSk59Ld5xz4KKcOl
bckb7Vh5bKnprsqGtF9Tjt+YNYrNr1gK/7AulETd+yd5egqohW2VzGAtcpr2
dURHNIIyj2MZ7mpEi+c3d9YuGkHWmY5jU7fKwRgUUcaAEcx5oQ1ZOPTFg1GX
+anEgfoO7rzKBSMoY+Tphj8MIGdtYqO3vQ/F1TDcWG8GotkniF1oR37idHxs
qgW9rk3FjXnWY/Nb+cn0b1vRraBHln2SQs7g1PtIHyOujmlZIvxuFCqLDuiH
e4aAXOZceFVIAYe7tHZDYz8QT6L3PhL3oaWgr3+ppQ0DAyZ5khPVUDoxP7T9
DwMIGa+vBqdqQOImoLvUW4HkF89zL25H6aLN9Nt8HVB1i/lz/LuBlM4yqOI1
EPjIW/Oqvhe9xq85Zx/uA3pSemzW4w/oZaPW22dPAKfhtlrG6MbSVHlQZrwR
xDV/PhfW2EHptzGqqFgLpc5tKS2sIaDejo8v2qVBIs796x8TXiKfEJlrr5jA
7WzxiUOkDWR7It9IZ9TA2V4WfDR6DIQe3tc91uvQeKUlrNy5D8kM+YNVl21Q
6pM1uJs3AvRzAZcv1DzAJ+5zE/yv0Vh1JctzFdE2kDJ5ltr+TiAYhv7dTloI
dNmq+Es6BLQ1jLrkZRqg/ZxxJj1jGCwKw84tc8dASYh4FVwVWPxWbopSWYGV
O/u+q2kU9G8E7/ISe4F597A66X0XEEcOLmFuHQC36Zkkd2kTBH41ERPMVYLx
TIXmSSwFfI7AtT+gG/hknmfYTTUoI82dzBgH5LAF631cO///GKWe/OKiJYtZ
mTSHldPQOn/bqAVoPXucr3cqkHRa5/JaZAFCXkGUZFpgx6mMYHGTE+s/BUpl
pA==
                  "], "Children" -> CompressedData["
1:eJwdiWV0FgQAAO+Ro0GkpBGRTqW7dKCoI6RhwACpwbfBGN0dQ5RQUglRQFC6
Ubq7u7u7jsGPu/fuXfYW4SGt4wARQbEKCY2qFAiERtdOFBvBnSLD2oQFihRv
++7HxBLnPXGJR3x0LAlIyCiWGEQi3jiCxCShM11ISjJe24HkpKAIRUlJKl5Z
mA9ITSYy8yH/+tJ/TMNiX5iWdCwyPX+bgYU+9yOemZGnLjALWXliQbKRnQLM
97E5+Ji/fOSfPjQnD/yEXMzzvp+Smz/MQ17umY+75ueOc73tHG8525sW4oaz
vO7vFuMzGtCQa/7m5xSnBCW5al1KMdOKVKI0ZbhiWcpTgcuW45IzvOh0LzjN
ylThvFOtSjXOOcXqfMF3hPAlv1qDXzxrMGecbE2+4mtq8Q3fctpJnnKiJ53g
CX/2uLU55k/WYbxH/dF6fE99xnnEGA871kOOsRGNaUJTQmnBQZvRnNEecJT7
Hek+W7LXEe6xFWEMd7etaUNbfmCYuxxqO4a40/bscLAd6cR2B7nNcLY60AAR
bDGazQ4wkv5usivd6GcUfe1OH/+3tz3oyX/2YjC97E1P+9CXfvRwo4PYYH/W
O4B1DmSt0a6xu0OIcijDWG03h9PVVUY6kghXGnA0XVzhGJbb2WXGsNRw3wKY
UyrK
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{29, 10, 11, 78, 123, 8, 113, 76,
                    96, 155, 84, 72, 110, 63, 140, 45, 17, 9, 151, 65, 49, 
                   141, 142, 98, 21, 87, 103, 5, 19, 4, 126, 2, 67, 2, 92, 76,
                    1, 116, 126, 153, 5, 137, 133, 144, 99, 150, 43, 100, 148,
                    104, 145, 48, 20, 42, 118, 24, 140, 63, 133, 68, 53, 57, 
                   50, 32, 33, 54, 107, 69, 50, 16, 124, 64, 152, 27, 28, 117,
                    133, 138, 53, 10, 138, 106, 20, 74, 154, 150, 76, 72, 8, 
                   11, 50, 128, 96, 14, 18, 72, 19, 27, 24, 31, 16, 154, 37, 
                   116, 5, 9, 1, 9, 98, 71, 11, 78, 11, 145, 109, 98, 126, 71,
                    44, 87, 94, 136, 151, 27, 143, 39, 30, 154, 135, 69, 77, 
                   134, 113, 147, 4, 33, 3, 49, 26, 25, 116, 124, 61, 13, 
                   112}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{2, 7, 1, 6, 7, 4, 2, 1, 2, 4, 7, 5, 6, 
                   6, 6, 3, 2, 7, 5, 2, 6, 7, 2, 2, 4, 5, 7, 1, 5, 2, 4, 7, 6,
                    1, 1, 6, 2, 5, 2, 3, 3, 7, 7, 1, 5, 7, 5, 1, 7, 6, 2, 2, 
                   5, 1, 5, 3, 7, 4, 7, 6, 4, 4, 7, 5, 6, 5, 1, 7, 2, 3, 7, 1,
                    3, 1, 3, 7, 3, 6, 7, 7, 3, 5, 4, 4, 3, 1, 2, 1, 7, 3, 5, 
                   6, 6, 6, 2, 2, 7, 5, 4, 5, 3, 2, 7, 2, 5, 5, 4, 4, 6, 4, 5,
                    3, 1, 2, 5, 2, 2, 3, 2, 4, 2, 6, 6, 5, 1, 2, 5, 4, 7, 7, 
                   1, 6, 3, 3, 4, 3, 2, 2, 4, 3}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwNkn1QkwUcxzfyZerpYYjsUuypBhJLwKkxOfT3gISDJBFJd4fggGNHIDQl
UvKlHR2B2gtO6ARRwSgmgTfAl0HIb6irnRhbILCRcA8yYQP3BmM84tD44/P3
93P3/byX9mVCBpPBYPywgKnslvLxL6/wEtmU6jlhR8WKoHcrwmi0J9wZC4l5
A+yq2g7zfheeCB6OL1nWAyHTI3mtax0oX8GRtlfMoepcysk54yRKYvMczNtT
aKo607h9pw5NNebo1ppxlLwu+5Bz3oWsXFx8+Ldp0KWc5vmm9qLka89sWmQB
lZstclfeh+pVQvrBs17QSaxScUsniFStc9ekr4EYEHHq7lqQiKgpki14lEjr
mMnSh6gLDzvotc0J/Lm/mfMRdlTuefrqZ6URFJOp/0qONIDEK++L3FkKdS+0
wS0fTCC1htzCnBoAYeDnfuIL3Vg9n3VTZnWi0JUwKuaYUBoUe0qdOYuMqBx3
3zEnaoYGbZsqHSggp7Nkhyew9F7+lpnGaWRfrq5Xx5jQziv69jZnAHXLNwSG
Ns+i4pj6Xr7HDZTKBnnrV3aiIM65uYJ7HzShrNikLjOWlPW4kxijmDkWRI12
UShoaPJPD+9AUWdE8951Y6gnE6LuZhiQ+HWYMrr+QPlV7fWYsGeo4Wef9FPr
IUAf91Z3sRaJ+MLcQO5zVAZWLGY2O1DEOSxu2D6Cooj+DaYkB7pZUZ32UA+y
eon/XtkVK1RTfi0VjRbk+6V0vVFbkAwuBM5RPai2GIhlHWbQWDkXZ4aeA5mz
wXjFMIUsHf9h/qcOIATns338GaTGlvKk75NBIJqo8iovO1L7d4xdjLFD5o+e
Xh0bF3a5tX1SlhE8N31cs+KGCvh9940TpUqkBf5NT5/YgDqUmLxk7SQyMtNW
qy6pkKrKzq/8zwIa5rK9YqcTyKILCvO4HoSb2945dUCBAvpoLd1BId+DjhkX
DWB86MrUkke9KL0Vcj33mA40I1fSNbvUQGr2Kbfm/AUnWhK9I10GLMX5oXNx
U0B4F6zrSplFdt8e3kjyM6Qr3JE9yhmUy92bjrgn8MT30ceLgk0g9ylOCPbQ
AT8yeniNz0tk5KyzeCa7UGcZqHR8NwT6rwrv9O52LXRVuzqInAfNo1vseksT
Sg8syrm6/QXq5XHlxQ0LvyelZt490I3UjmurnC/NuL7NXeCduYSUqHL+lAwP
gadTXceeLwAyvvn9qI16kLf4ctNYY6jUnhanBVhAaP6oPyKyG+ITz4h+L32y
0F8z/BTWjgp20XNbyGNUXO5fPGpzAW3oKxR/Y0DKah51xi8lyXIREVloBdpm
bV862Q8k92pAAYsGU0bGbkIwCsIgmaDStxcv7bh53IPTiXL32Qfy2mEgzFu1
Ng89KsKJUzvbXMDeVpwhlP0DBH06uj3OCJJD5QfrdzkgwNuS11ZEgXTaoWOl
a0HOTZlgSd5AddzyukFeL6iyFQpfsQHIfRtbw7NoEKbXc2N93ibli2bMvDo9
MD5r4413zML/SKRfCg==
                  "], "Children" -> CompressedData["
1:eJwdiWl4CAQAQN+3IlMUUVKOORIKc0XOqWiEbDlSYWMbctRO2xjbHNsMlXIk
RXLkVohylrOUW+6jHJFbuXmWH+993/teUGT/sOgAIK5AnsIikkJiYyOSwwPz
IrRffFRMVGxw3Z7//9w8Au7zAA/yrfnIjy7yIQpQmEe5ayAP8wh3LMhtF1qI
Bd5yvjed52MUoRsRFOVxbtiVYhSnAx15grm+RAOepATXfYqSzPGas32aZyhF
aa5anzKU5T+/MYhZ/mtlylGeK1bgss9xyYpc9FkuWInzzvScMzxrFaryPC8w
3bp87T9Wozo1OGMwtalDTaZ52lr87VeecqonneKLfOkJ63HcL/zLyf7p5zZk
ko34zMY0oSkTPWYIR51gM8Z7xJd5hXG+yqc2pwWHfY1DtuegobTkE1vxOq0Z
6wHfYL9taMvH7vMj99qOMD70D8PZ45vsdoy7HG0n3uJdRrnTXHfYme2+zTbf
Yasj/d0u/GaOW8w2kix70Zvu9OBXR/iLUUQz3BiGudmebHKo75FpH/qy0Qw3
mG4/+rPe94kngQ8YYixxrHOwP5vmTw4ykSQGkEw2OaQw0EGkkUqqax3IGlNc
7WBWmclKh5BOsivM4EcHOJRh/GCSyx3OCBJdZhbfm+BSR7LEeBeby3fGeQ9k
DSLO
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{6, 150, 63, 96, 98, 98, 113, 
                   127, 76, 5, 19, 110, 46, 76, 27, 110, 84, 13, 65, 92, 72, 
                   91, 17, 9, 1, 65, 153, 5, 53, 67, 68, 64, 18, 34, 33, 51, 
                   51, 2, 116, 50, 43, 107, 143, 54, 45, 42, 18, 9, 91, 3, 
                   143, 146, 93, 123, 138, 133, 78, 142, 24, 1, 65, 7, 63, 
                   155, 140, 58, 11, 135, 76, 147, 57, 83, 30, 27, 61, 94, 16,
                    113, 10, 151, 5, 113, 9, 129, 151, 76, 20, 16, 20, 14, 
                   151, 150, 72, 151, 50, 75, 131, 54, 76, 98, 69, 4, 15, 67, 
                   88, 72, 31, 154, 39, 9, 116, 126, 70, 98, 50, 98, 3, 143, 
                   154, 128, 128, 78, 155, 11, 17, 132, 3, 21, 10, 133, 133, 
                   39, 85, 26, 140, 11, 48, 26, 22, 27, 28}], "RootIndex" -> 
                 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{1, 5, 2, 4, 5, 7, 4, 4, 7, 4, 7, 3, 5, 
                   5, 5, 5, 7, 6, 7, 6, 2, 6, 6, 4, 6, 7, 7, 2, 7, 4, 7, 4, 4,
                    7, 4, 6, 4, 6, 2, 4, 7, 7, 1, 7, 6, 3, 5, 6, 3, 5, 3, 7, 
                   3, 6, 1, 7, 2, 3, 4, 5, 2, 5, 1, 4, 4, 4, 7, 4, 7, 4, 5, 6,
                    1, 3, 3, 6, 1, 6, 3, 1, 4, 1, 4, 3, 7, 2, 4, 7, 3, 1, 4, 
                   7, 2, 3, 3, 6, 1, 3, 5, 1, 7, 1, 5, 1, 6, 7, 5, 3, 4, 6, 2,
                    7, 1, 4, 5, 7, 4, 7, 4, 2, 3, 2, 4, 3, 1, 1, 6, 7, 3, 7, 
                   7, 6, 2, 6, 7, 7}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBTQSy+yFib1JlAQAAAIgAAACoRwbsHlzTP4D1VpAqYfa/gCxRV6a+7j/4
JkosAxjeP9jGMmMM0+I/yLWa3dlk8L94oFn813WDv1BfhA+zI/C/WHuaN/H6
17+Q2RdQNdZxv7ChXZr7//q/cGgguPKG8L/QLAWNuU/lv/B6MpBQH/C/uOqH
vrKY8b+QHDr8cQzvv5AdTY6LCui/uMndT8Al8L+gL9ds5AjnvwgMRJUo/+e/
2HTq2LTU27/QLs2Xnh7fv3AgWKtiQOK/sMhbkv9a7r+IKDWwsyv2v1iJWQ28
ZPG/kElQjGyS8L/ImichUJj2v2DjMnmrB/C/EDipkeSb8r/oT5tn0Er4vwBJ
QTM3vtS/CBxZvnbc5L9IsR8UIeDivwBwfIENf+C/sGg2R5UJy79ARTOnsF/z
vyhOIiPulPe/CEFUFQ0d/r8Ao5lmjbH7v+h6trhKqHs/EHVqA00uyr+ARTcH
687LP4jnOEFEIOY/OMXEh+XW8r+AzMaopKPGv5gGxwl6r9y/CGt2WH2x3b9I
iMpslrDkP2BKWrA70tY/0KcafF8e7L+Y0jS3uOfAvwCYjEHSJOe/UFkk0bct
678wCbevINvDvzh/PtiZJO8/yDaBxB/D/T+g6LGuvovuv0D7AQKWauu/yJnw
oy8r7L9I97TO3HK3v+DZ6UPKgds/kOkygA0lrD9AP2nkChbzP4iB58RQoeg/
gPcujJkO9D+oZhggN6v3P8DY1iN+Few/+Na3h+kM9b9wC7Ev5FzjPyhhyr/l
XOW/UNQ/Sbmd1L+o+cvy1p7ev4jcD6A7kbg/iKq6ZRU66L9IWlzfTvftv4AT
CFXHf86/iGZbFhJf4r/wyoXN8dDAvwiqwaHNeby/uDOcHtzLyD/wAyI7AX3J
P7CuzjJgj/Y/qBORMhrO5T+I2cVOVyThP1DcfEd89a2/kJ7zcaLX07/QXrPh
ewb1v0gLINDM/+S/sM5TILFU/T+wJEIKSIa3v2COhi95cPU/EGPtn5AB6D9A
O0WiXNbMv3iP83KyW+0/KBXtc7qF4D84kb58srfUP+jCWT7jO/I/OFia+iyu
8T/wRBt5rKPyP4B1/VvG0qC/EKcwgOpe7T8gEY04MfrlvzjGEy2crOQ/8CvB
OJW+6z+gmRWGuDrlPzAVMepZ8OK/oNizCLPE0L9wC5GICArevxAos2KlKPU/
eJfGl9o65z+I2CYLuQDUP5jXtWpMqPA/EEIpMBt44r94s3CPjT7tvwALlzbr
RPQ/8IvMBIx3zD8ggBvnNIr1P7DX9RKI19W/iILJQEiEeD9YJIgDKfH6P0As
+Ux/SdM/eASsbGNf6T/wl9ZJswH3P2jxu+CsINY/uGwl7hbx9z8g8pf/ayfs
P+iJH5NcDP8/KJRNM6tO9z8QdQOViUO6vxjDs07mp+8/YN7AtBJC1T+4wq1u
JP31P1jbLnwOXvY/YLJczMfO5z9Y2tjoSQPoP2ewSiU=
                  "], "Children" -> CompressedData["
1:eJwdkXl4CAQAR9/nyIZyk9vIfa4ylfu2cmRuCRs7OmzaltnJNmwoV5Szi0I5
C5XcZ+ikg9yKUKjchWf88X7f977fny8oIi4sKh+QEJA3YeFJbePjw5N7BeZJ
aGxiZHRkfHBIzL0/N49898lPAQoygIE8wBoLEYB+aiCFuWMfilCU1rThQR6i
Bo9w208sRnFKsNoylKUkpbhlaf53lf+50puusBwPU57l3rAq163ANSty1Upc
sTKXrcK/LvMfqxFEdf72Yy/5kTVZaj3qU4vaXLQOF6zLXy7xTxd73gY8yYc2
pBGNaUIznuCcHxjMIh9loY/xvmd9nD9syhlDOO17/u67/uY7PsXbnrI5J23B
CVty3FYcc4FHnW9b2tGeDhwxjI7M87Bz7URnfnWOXQjlaZ7hkN3pymwP2o1f
fMuffdOf7MGz9ORHZ3nAme63Fz/Ym+99w7704zv7860z/MbpPscgUknja6f5
PIMZwlD2OYpwIkhkqnsdxh5jGU4kUUzxK0cQzevuNoYXeM0XmewuX2KnL7PD
SW53onGM5BVy3WaO8UxwqwlscbyvMs7NZrvJJEaTzEazTCHTDY41nQxy8qp/
6RjGM4GxjDGTDLNId73ZjCPNL0z1c1P8zGTXOdq1JnkXf1ga0g==
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{78, 67, 154, 20, 98, 150, 65, 
                   76, 113, 65, 75, 39, 128, 106, 127, 150, 70, 148, 113, 92, 
                   5, 98, 98, 89, 15, 87, 120, 98, 98, 98, 38, 39, 154, 9, 7, 
                   86, 8, 141, 1, 9, 8, 7, 143, 41, 151, 10, 65, 49, 5, 51, 
                   154, 4, 105, 140, 11, 39, 133, 109, 5, 88, 113, 111, 52, 3,
                    33, 29, 3, 51, 64, 13, 16, 96, 119, 61, 82, 128, 19, 63, 
                   9, 72, 142, 148, 50, 72, 151, 84, 34, 2, 5, 27, 16, 106, 
                   126, 5, 27, 1, 98, 145, 131, 152, 70, 132, 123, 131, 103, 
                   9, 5, 20, 128, 116, 76, 10, 48, 124, 24, 144, 73, 50, 76, 
                   75, 114, 83, 11, 136, 147, 143, 47, 126, 137, 97, 87, 72, 
                   16, 27, 61, 28, 26}], "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 2, 7, 5, 4, 3, 7, 6, 4, 7, 1, 7, 6, 
                   3, 6, 5, 1, 3, 4, 2, 2, 2, 3, 5, 4, 7, 4, 7, 7, 5, 1, 4, 2,
                    5, 4, 4, 2, 3, 3, 1, 6, 4, 5, 6, 7, 7, 5, 4, 2, 5, 4, 5, 
                   7, 2, 6, 1, 3, 2, 4, 2, 2, 1, 1, 3, 1, 4, 2, 2, 6, 2, 4, 5,
                    1, 3, 2, 1, 4, 7, 6, 4, 2, 3, 3, 1, 5, 4, 3, 6, 7, 2, 4, 
                   6, 6, 6, 3, 3, 7, 1, 1, 7, 7, 7, 7, 4, 6, 6, 7, 6, 4, 1, 1,
                    2, 6, 7, 5, 6, 1, 6, 3, 5, 5, 7, 7, 5, 3, 7, 2, 7, 7, 4, 
                   6, 1, 4, 6, 5, 5, 2}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwNyGswGwYcAPB4tONaGh25rK1Jj2qKrbpZz7T6Dy1znVs9Tzynq13VtjaK
a2YembumqRrRutKtR9BHtGzqETHcP0TJijSNhNCNYCoak6d31frh9+W3/5tL
Ed9aEAiE6++QPTzsoguNSG94akkumcCK35qWLlrrgRJgfHnIfxmZ11un8r5v
QQ5pQpprNCKVZ4CtMjWGVeTYj6+bsSKQ7jx7Ywb0Y3U12evNSNP+LRCtGJFH
SrKiry8jucVqntK1gvS4K1uB9xeQONkIu0ljaJ60HImVWtDItNnPnHyeAX+/
c+unl3XAiJ1rmKG/Bo6bijWRbAZK+YT/vvpe0JS1CAdvbyBFa70nxU2JIVPU
3KN13aDvM5NOaVaR+TB40VXaA96F7U8y6qeB7LNzYVdCDfKySwVK+ynk7vN7
k75Th0Ivyj1rtxGgeerV+exRpKLDG0exFimPrNnDSwYk2oqOnPldBCzHTG7q
vSXkul5wiAhZRaKiNEQZPofJ8trCRy3v3sANtP5LhZKzxztMaw3Az8xKOZSo
Ahv7tZWLpwcx2d5HMrX1AhgnrpYo89XInTWI1c0GDDuZJWB2L6LemV/daJBi
iCp6OOkXIyQrrdi92nagfMHND74jReGOp+Hna42gj949UXtpGtU2j05nhPaA
TOj0kP2HCbyDZ4QBrk3Al3UO7d85BiFnf2bmBIuRW2lKrxkdxgpaj+/RyhVk
yvZWloSakZLHWjfe0WNYRMOPi3tfIzNRy+8tHEHyhi1q31OjJONarwfJjOqC
KPUdxQz4hjq19BXNgt4iz/9DqRp9PS93lZYtAtHXlPbfLgXS+fLZuMSXIPr1
ZGdJ/wBoVGkLvUEtwPzTP8VC/ByIpa7FIy9VINEdbi89ZgQb775bx1zGkUFW
GPqCJ1EhzbYou0qg0avnU+yt5pFFzJcMd4mQVTzWfdw4gLTO6uuX1znAszwo
tNXVQNh4SIkzy4LGX4OmSr9R1AsCYqBtCRoj74rqdGrglV2JSX4jQ+ph/+wf
gmeAQL9GOtOrA00kKfFjgwEad0tdHGYMwJMcCNLop4Arvl11pOoFcpwH47vb
yrExMznXJbUDhQ25Sexz/4BvCjtWLzehKO7MT3MLw+greJonZwyA8H3RuonR
AzYa9zSG0gTkMvcHF6ykQFaGfjKVOI0cwZ6i8/2bSKRfTLfLf4U2z+XMU19J
kCfyuiVQTICM2hbq90wOhKIcU6S3FoTZgQpq5jIwm6OcApfHkHFzc9AY3g+y
hNcBRSfUQIvYsW3xySrwe0bonCwpiLzj3KXb/kWR+Dsix/Eq0AZWM+6+mEfm
UsLjqC83gJV/7q3Y5S0wTh48UDzaCvp64mK4bhq8PatGdwxtAP/xfaqX/AFQ
HAPd4vuNwJi2i3G9aQYZxzC8/VIrNq68Ko6p6oGFcsLXJdsJNJsgdsEHz4dQ
Zdk+2+UgBoZXaeRHJ5Sgcf68gFu3CalhofGxHbX4Pwd7UWM=
                  "], "Children" -> CompressedData["
1:eJwdiVV0EAQAAO/RJQ0KgqQ0SsikpKUkZHQIDBmbxIARYzRjA4Z0N0h3dzdK
G3RIKN2pgB6Dj7v37l2ONp0D28UDuiWJU2BQRMXw8KDI+knjokZY9+CQ4PCi
AaHvfmwc8d4TnwQkJDVpSERidJ1JSEoKPuB/15qMNSZntf+5yjem5LUrfWUq
/nWFaUlHTyJITwZ6sNyMfMgPtOcjMtGG7/nHZWbmY1661Cxk5ROyUZs6ZCcH
AXxJTnKRh7y8MDfPXeIzP+Wpi33iIh+bj/wUoCCFKMpCC7PAR873M+b50M95
YBHuO9di/GRxvuCeJbjrHO8425KUoibfUJoyVKIyZZnlbWd6y6+4aTluWJ6/
rUBFZviX071uFa45za+pylWrccWpVqcGfzrFy072krW46CQvONG6fMt5m1CP
QBrSiHNOsD4NOOt4zzjOxoz1tGM85Wib0ozmtOAPR/m73/GbI23JCFvxo60Z
7q8GcdJYTzjMtgRz3HYcM4SjDvWIoRx2iL/YgY504mdjPGS0YXTmoIM9YBf2
25VwotxnN/banT0OcrcD7cUAd9mHSHqz0/7usJ996Ud/BrDdYQykr1EMZpuD
2Goft9jbzUYTQ6SbHMJGh7LBXsYS4Xp7+hbneBzR
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{98, 9, 6, 138, 79, 20, 10, 113, 
                   143, 133, 65, 150, 46, 76, 145, 7, 1, 97, 128, 13, 76, 72, 
                   51, 67, 153, 116, 120, 5, 64, 106, 102, 131, 148, 19, 76, 
                   113, 109, 14, 141, 140, 52, 124, 132, 85, 148, 65, 35, 137,
                    96, 76, 129, 151, 94, 61, 21, 132, 3, 87, 128, 75, 42, 97,
                    28, 30, 4, 5, 107, 72, 27, 125, 143, 50, 33, 98, 88, 31, 
                   83, 10, 128, 19, 103, 98, 14, 117, 39, 148, 9, 98, 15, 11, 
                   94, 70, 4, 17, 146, 1, 24, 9, 116, 39, 67, 68, 98, 15, 26, 
                   41, 147, 123, 5, 140, 155, 110, 78, 146, 40, 33, 36, 133, 
                   57, 81, 64, 27, 11, 91, 50, 25, 22, 28, 72, 98, 2, 18, 11, 
                   154, 140, 26, 69, 126}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 4, 3, 5, 5, 3, 4, 7, 5, 2, 4, 2, 2, 
                   7, 7, 1, 1, 3, 2, 6, 1, 4, 7, 6, 6, 4, 7, 4, 1, 4, 4, 5, 4,
                    5, 1, 7, 5, 4, 3, 4, 1, 4, 6, 1, 6, 7, 6, 2, 6, 7, 5, 1, 
                   4, 4, 2, 5, 6, 4, 6, 3, 2, 3, 1, 3, 4, 6, 5, 5, 6, 2, 5, 6,
                    6, 4, 7, 6, 6, 1, 4, 7, 5, 4, 4, 4, 5, 4, 1, 7, 7, 6, 5, 
                   1, 6, 7, 3, 5, 7, 1, 7, 1, 3, 3, 1, 4, 6, 1, 6, 6, 1, 2, 4,
                    2, 6, 1, 1, 6, 4, 5, 5, 1, 4, 2, 3, 1, 5, 2, 7, 7, 2, 7, 
                   4, 4, 7}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBNQTK+yFib1JlAQAAAIUAAABIS8ueXlXpP7Cfwe7rFuC/YDnaTjg/8j9g
SlqwO9LWP1B6KsOX5t8/yBSuVCOb/b/4knlvxmvsv2jDjJ0+Kd8/MC8c1Oys
8b8gQeXRqB3xv9CgdDVMquy/6OfW2noa9b/4d3Onol0BwAAP50RITe+/IJPZ
GBp647/4EOY0iNL0vwCkeN4sDfW/oGpBSNpn8L+ox/dc/qTmvzhSVhv3l8q/
uIIud1BO9b9oV3G+u932v9C75jUe3M8/8MLrZmdX4r+YdrXT0ILwv4iOyqfI
/PG/IHqTKI0ugz/YK3FcASzrv/hj+osksPS/8MJot4GB5r9Avsn+vrHyvyCO
5eTD/7O/YNkUiw9y8b/42Y5Hd+bavxBjKzMZOvO/mDzl0NKk279gOEY7Qqu0
vyAsY6osBum/aAmC/oUZ5r9Ymr26D6vyvwAQItiNtgK/GAeJwt0B5L+AXjq8
lkHxvygEHkUahfw/kI7E/Leey7/Qz7BN4qnzv2AN2pYGF/c/yG4acv3Y7j/A
Er96HI/ov6gf+6kKHPm/AIfDkaZp8r/g4sBNYlX1v5DscWshb+M/oMMekHpE
2D9oVS1VZxrPv7AiJMWTEe+/4NB/BXOe4b/og1L2VrTNv3jfkZKi+OK/CHzY
Datm1r9IWQh/7OXBPxA1IN7I7PK/GEGcT9Dd1b9IgTC0+vNoPyjjeTUo0gBA
8D3mnGlr078IDvn3bkrMv2CYMqZtd+y/YPGO/vIm4z/A/xYpyA/lv4DxMNxJ
Wcy/OEzoX6Ze4L9Q1D9JuZ3Uvxjkw9nR8NO/cPOzkvhN9D/YF16idS/dP1Ch
F7kcQNY/MFICROzc3D+4DzqUqLLxP6CjKGcvnuo/cIWJeNrT6b+4RZt2wfLH
v0AEZrWY7KS/8FHa78Gf0j+gYwc6waznvzBUNUo24OU/GPL72e52wj/ITf4p
i4zxv+AAG+e0+cE/KMOApqP+6z8Io63W1fDCv/iPJxrqjco/OKyeTlQ35b+w
i0KC8DHXv9B+jJtwxLc/IPiXKZd7eD/wa5o3BUfoP8heYS+HyOQ/yLceVGgr
8b+AisFh3j/pP5BZ0Hx3d7m/EEPZtXR18L/Q8b2goeXhP9j7w/+tYeo/mFdk
Kt9tor/gCadjK1PjPzi1qn47980/wHp4hiJi1T/gA33IHJLyPzjAF+bQffI/
cAuRiAgK3r/ItFECte3qP4Asd+9twvM/wJSd3KkJ8D+QDGbTqovvPxDNIzNx
ff4/MLR4tesd2D84Yl4aIEntPxiByPjJpPA/QJe/gmPG4D+4zE2SfrCwPyDp
dJp8vMU/WFDeRuLznr/okUWEdJn+P6icB+o1Mfo/kB48Wd1txD8obH1nrADz
P6jcqnVIBug/QI9gHwP/4D8gLvVxtoX7P8gYQ2QSa/0/SJinDzvg5j8w3H4n
Gw38P6OrSr4=
                  "], "Children" -> CompressedData["
1:eJwdiWWYCAYAQN+nu7vb1DjdnROz07FxuMP0YVy4U6ebaSY33W2b7o7pXLDW
teE5frz3fe97uTv1CQyJA/RPFKvAoEE1QkODwpoljo0GvQcEdw0ODSjb7f2P
iSXOB+ISj/j0oS8JSEhRiqGJKERhEpOEpCTjrflJzk7fmIrXpuB/U/KfO0xN
GtKy3YxkIh3bTM9WM7DFV242M5vMxkZfmoUXZuW5G8xODp6Zk6fm44m5yM16
H5uHvKzzkWt96BoLUJCPWO0DV/mvKy3CCv/xO//2Wz9muUF0ojglCGCZ5alA
SUpRmjL8ZVn+dKl/uMTfLcd9F1uRSnzOF9yzMlWoym8u8le/8RerUZ0a1GSh
tVngz9birvO9Yx3qUo/b1qclrbhlA276CTdsSCPm2Zi5NmGOnzLbpszyM2Z6
3UCu2YyrNueKLbjs17amDZdsx0+25aIzvOB0z9uec07zrFPtQEfOOMXTTvaU
k+xMF04azAl7EUJXjtuNY060OxM86pf0YLxH7Mlhx9mbsR5yjP0IJZqhHHS0
/RnAQEYZQYxfMYgDDma/I91nGOGMcK/D3WMkQxhmFEP90WiHMZwRjOQHo/ze
Ie420hgi3GW47wAyPxTV
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{96, 87, 113, 6, 84, 98, 37, 116,
                    145, 98, 9, 72, 53, 79, 65, 110, 31, 9, 1, 98, 140, 128, 
                   141, 7, 132, 65, 10, 11, 41, 17, 155, 18, 24, 71, 131, 90, 
                   100, 99, 42, 84, 52, 5, 11, 85, 126, 26, 150, 86, 151, 104,
                    39, 66, 144, 113, 76, 51, 116, 154, 31, 4, 54, 33, 76, 
                   105, 147, 11, 138, 124, 22, 26, 142, 98, 148, 27, 85, 128, 
                   76, 2, 50, 54, 96, 89, 75, 68, 87, 9, 5, 64, 126, 5, 27, 
                   140, 123, 138, 11, 3, 122, 13, 110, 94, 125, 147, 133, 80, 
                   65, 104, 8, 11, 114, 71, 91, 155, 152, 116, 50, 36, 59, 32,
                    24, 140, 113, 33, 29, 39, 69, 50, 28, 117, 58, 83, 3, 82, 
                   119, 112}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> CompressedData["
1:eJw9UEEOAjEIhFKKPsMnePHu0ev6gjVZ9aRJNTH+xOc6nVZDOqUwMNDN6T6d
k4g8VoBpfu1rnd/HNR6H23O5LHW7uypeHxyTJEVCsqg40HAn3M6ow7d/xhEp
I+cjl2DdD7JaN4P1fkovE521hTXKGiezqQVVg9VKzPQM+It1K9Qw9mn9W20M
r2FhF+cJcIIqynkSJwyyymD17Ywx5V7G3+g7ZWrmwW7zfAEIMQwm
                  "], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwNkX1Q0gcch2HWot2hTp1iWaJZQ886rhdTM7/qpkc1FFYUtjo9U2cuk96U
XEtO3Ya9ydVyZC+jrFX25mVb1Mwv2otgTaFMybcQUQl8+fEiUmibf3z+eP74
3D13T1BG/rdZZBKJJJ0ZbXqj63kVgZQGK+Vitw5lPOWhIpIVZEkD50lz+yBy
xVmqr5xAcXL60pA0E9KflOJhzwmUVpu2HtzgQHH+vO7eaBca3U9V+vZOI6G6
xQjcb0aJU2e7ltqPTprW5Ha/E52lZgPNZEOlMMv3YaQVJQ1ebefarKiID/Ep
ZztR656kz3A4kJk4qOH4tCPnnoccivTA6WJVLBCR45R5m48VlhHISO6v8Ffp
Ib1bE1D3/CMo/ALY2zsGQRJXwEs61wSRRd6eJV4zv1FyGTdlCCS25fE1Rhsq
6O89qTYbitKEG6Ksw6AtX9ZBnWgD7YKIS3lssoKmNNRoHgyi+lCOm0egA5Xk
3w58LrEhZX5nNWw3grrqv5WpEVoUJYb+POgkkGnSCz0+GwLm9fonS7fVopOa
qYi2WNBz/W3P0pxu9FzITWopH8G4GEvukvoZ38WzwmPHu4G5PjW/ZrgDdNwR
+5uYHuRYm8o+aTGg0t57U7+rHWmbOmpE/CGU25ZE+X0YQEV6albBWjMy/baa
B6jjM3zlQoLZggxaQcZGYgyd9x4GbthDoLE4INPLZwDlnIUxeQkzncIDB7O7
rCgUHzb+e6YTZd0vP6mTDKNs1Lqm6boFxfbvdiTmvAFK64vwIv8R0B19PJuR
/RKEstSpzgOlKN1eIHc72YnEOr+wR6omZERRLq8m1EDwomi3q18B338hdVXm
I6SxNCtzUgiUJKRVMP6xIUl10fSizookdZkzcMbz2t0py5j/BHLEm9325hKo
LZu7Jo2vQF1bBjvR1Y+6ihsq/RedqDj8Ze997xoUUHPqasYbgVWbuy+8pBGU
vtXRN7hdQBedSRph66E2rasvqLAZ6Kfyk1vMb5HYER12Z7wPZd7Nn5KD2rFW
pw8WowNIv5+oDFvxGlmXs22/zFehOrGnStGlA/qUxmXf+RKULt4fO/WtwB8r
P7f70jPgxPZILie+Q1r8sYZVgneoUO/7unH5PSCWHd/7w9+tGMlz7g8ZGQRh
naDieOwoMpeUvA25ewFrDYve1DeZgVX5U3/4mddAbAmeCgy9DkTzxdP04VYQ
zil81tI8DtcCjr9Szx0AAS9+9VmRFoXBFi499Ckog0kOUakL5B/XiSpH7UBb
pK7dVTqGArb7ze/FQlTYCk/wmQRK5VPaXfa/QJic8vDdgBnlRyvDuDffg/RX
nzvCq03AKA518XVDwP/mVt0h+VsQJc5T901r0FgyyZ2v6gKWYVaerl0HOcey
J9ewJ0HkxsU/Y5+C4Gp7hKllAkiTVO6mdXeAwrqwYlaxE9Ld0hLmeA8Bp+dJ
SG6MA4g4R+2+Rit6UlNfUakGkC0WV8WnjwDzyDYdRTwNrM7QAwIPGyge8fre
Z06CVC31cv+oA8GP4qAE+gfQHjmpThq2g9D/YFPR7g5gxX+l2bOWHCesbNim
nukvKNjyYONjKxizcotPZ1iAshtnp12xAT8rW1O/TIVG2vn8lb16TF/gFaHm
ToM24ZQhRaGH/wEbo5Fv
                  "], "Children" -> CompressedData["
1:eJwdiXeYDwQAQN93qU5JWmhIJEmDk66i0hXlrLgrleadbnHzd3ducLhl3eKW
M7M1jJYRDdJGGQ2zaJetMqvn8sd73/e+1yo6JSI2CEgPrldEVFZYIBCVE9mw
PsKTM2LiYgIhofH//7p6gs5yDg04l8u5gvN4Sb2M81loMA35zwv41wv5xwU2
Yr4XMc/GzPW0F3PKJpz0Ek54Kced4zFn25RmlDHLv23OXyZxJVdxNdfwp4m0
4EUH8wLX0pLrmGkbbqAVMzxqa65nukec5mHb8iSDuJF23ER7unE/NzPVQ97G
LUzxoLdywDo7MNmO1BpCJ26nM/u9lzuocZ+h/GG1v3snv3kXv3o3v9iFn+3K
T97Dj1Z5H5X+4CT3GsYeH+cBHqQ7PfjeiX7nQ+z2UR6mwp6E04tyd/kIO+3N
Dvuw3b5ssx/fWmZ/BvCNpX5tBJGU+JUT3OpjbHEgmx3vE4xzk2P90jE+xdN8
4TNs9Fk2WOxzPE8URa43ms8t9DML/NR8Y4jlE+P42NF+ZDwfmsA6hzCUUX7g
SNeaZzIprDGV9x1HGgHSGeFIRvGeGWQyjHcd7jtmsdpscsg1l+GscgRvm8dK
c1xhtqPJcrmF5DPMAjJdZoZvWcSbFjOGdN9wLK8bcDxpTiDVEkp5zRSXmmw5
FUwkySVOZhKJLraSKoZazRAXWcOr1vKKCdYR78vGeQYndzrC
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{116, 9, 113, 12, 2, 150, 72, 46,
                    113, 148, 78, 33, 126, 6, 93, 10, 53, 20, 9, 13, 7, 75, 
                   65, 155, 65, 133, 128, 135, 13, 52, 98, 104, 98, 16, 102, 
                   5, 143, 116, 126, 15, 89, 31, 148, 9, 99, 80, 59, 11, 68, 
                   104, 72, 87, 45, 151, 86, 155, 11, 81, 3, 126, 104, 5, 97, 
                   116, 129, 92, 76, 39, 35, 76, 32, 54, 154, 33, 53, 49, 33, 
                   3, 138, 50, 16, 29, 85, 101, 14, 142, 30, 148, 128, 5, 151,
                    39, 63, 1, 148, 110, 1, 14, 18, 84, 98, 104, 27, 141, 141,
                    75, 110, 72, 1, 56, 128, 21, 43, 151, 4, 39, 5, 27, 20, 
                   71, 133, 131, 145, 94, 109, 3, 152, 27, 148, 26, 31, 98, 5,
                    4, 51, 156, 83, 50, 143, 11, 69, 47, 137, 26, 72, 28, 113,
                    124, 116, 140, 41, 25, 117}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{3, 1, 2, 4, 4, 7, 1, 5, 5, 4, 5, 7, 2, 
                   3, 2, 2, 3, 2, 1, 4, 3, 4, 4, 4, 3, 3, 3, 5, 1, 3, 3, 1, 2,
                    5, 6, 2, 6, 3, 6, 7, 7, 5, 7, 5, 2, 6, 3, 7, 1, 3, 3, 7, 
                   4, 3, 4, 5, 5, 3, 6, 7, 3, 4, 5, 3, 3, 2, 6, 5, 2, 1, 3, 4,
                    5, 2, 7, 6, 2, 7, 5, 1, 3, 5, 3, 4, 4, 4, 2, 4, 6, 1, 3, 
                   4, 4, 5, 4, 7, 7, 1, 7, 6, 1, 7, 2, 7, 6, 5, 2, 4, 2, 6, 1,
                    6, 6, 6, 5, 6, 5, 1, 6, 1, 2, 1, 3, 2, 6, 1, 1, 1, 1, 4, 
                   3, 2, 2, 2, 1, 4, 1, 3, 4, 7, 4, 6, 1}], 
                 "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwNkH040wkcwOfazU+pR06hy5M63OKPLNL0XL6/qG51jwunWjmRpOXlWobj
XEV5PCsqL+VZSs1LWullPbnOVfo2RDfKQjZMtknbDmtmnbW6df74/PH57/N8
liccitpvR6FQzs6iO6zd1D3XnqRfaeIVJPwHHJID1nf3UHQoYUWLQQKK4qb6
xOI2JPZwr+ZyRcg5UJXl3zGDur98XTK6jMj5bdWDYN4YyvYeWh5SOYOyNbzS
rJVjSMQxOsp5asw+f2vLx30azBOPVOxeI0ci+ORBftwE+lNLw+9xppGo54R8
+nEQPX2a3U+zx0H1TW3ORNUEMh2jooW5BmyaKW/ILdSjeN/cGIf9UrQ0eceE
MKYx25b8mVyqR4vXBmPNyx7MvhtLOvMU8CQ1yKBUvkHxNCEd6FPPdg5v1RYb
0Rhs8j+6rgIo6gUNIL2AqsgJ88B3SmQzY80ZNDHEF5dtt8kHUbwxIHbeXg0S
XlWrlaU9yHWJDItI6kVBhXnH7Q2z/v37+1Xah8gv+ByXNGRES0pdjFuoGvgN
Ds7VtTYgT6Y4+br2gOwfmpBXoUXds8wCOeMDil+tEXlWtwI73JGaFKZH4cae
m/MH/4W83eVEhb0Mucv6fmC0DSHrTvTVqfsWiM8Yanx/4ApyLi8MP2aqBbcz
b4vluwzIbqXJUuS9yF9B6911XAPGi0Xy9CQ1EDmvlUe+NaNiW2z6ubhq5LQW
V4WsHAHh1tSW0GYNOu32cTGPDiP7zUxlfk0/WHxjmNs79chJvzVoOz6JzJdR
+fQcHZaY6Xd6Ns3+/EVhjbuhQkFdvkp5Xg3GLa6+zX+3IHMX7dJAUCaoDl4P
y3Kow4io7j3JUb3IoXKuh4zUA39P7uf1PB04UUfkb+Y9wpLUgFIfUT0YJdmb
KTvlED+yyJ25JB/p61iXBLVSYB6Wnu3I0IFAS+n8qDPP/mMLRteqQDjnyKTM
9gcSyYEPWTc6URczp3LsFIU0Hk8oNxSagCsJGvEYo5LCIZqfR6YNBME/jT3m
m8BSt1a3rugd8BWMuwPRr0C4g3Vx+NoL8G9/Xdj+3AqshUHu3KNd4CZ5ZHta
No30e3f0ZJ0WPNPDi7z+1IBCRLytWW4GUa/zMbRpkSUNNan3ipD+KS+BFj2N
7Gp94oI5emyyf39KVWPDpiV2BYu0Q5hXZe+93jyK3HGWhrJZhvHJqsiMopdA
MHxNseJ+5Bu6y18sUyFFUHbNSdyHQvJcwLZfrUD6XabnEBYgDrBEX2Z1YkSQ
JKvG+QuS9anybHezFLkFzZdqc5XoGbVdcvNEN7JaiBOhm8zAbv36+mLbKER8
WFp99ME4kh2bnzdu1IOAsqqsUarHJ8z55f0eWrTcdrSGKWuQRa33iU5sRtb6
QOq7NAmUVI4XPnN4DkLK45iLvxuAY0tbrekeAmNGv6Vt1AqW4NeZ/VueALMs
ctnUzjYU97Zbz9gNgEU6qqj9+Bb4peYPx3ZMgvAC4+kq0wzQFYsdvQNVUFJi
qpR+pQTP8CmP+J+nIFvc5RfaOgnxp+3bz7ROA93V7kF1GpX8H0PWbTc=
                  "], "Children" -> CompressedData["
1:eJwdiWV0FgQAAO+BlDTSgjRIS0oo3SAxuhkwSvLbYIxmdI4uQQnpku6WUrok
lO4GadBz+OPuvXuXqXW3oHYxgNC40QoKDi8bCARH1I0XHVW7hoW0DwkUKNrh
44+KJsb/xOQTYqHrjE0c/nUscYnHPzbgU+KTk1x8MAGJSUJC1pqINb73F9+Z
lLcmJxmr/YxVvnGlKUhJKlaYmjS8drlp+ZxMZCYdy3zlF7w0PS9cagaW+LcZ
ee5in7nIp2bhiVl5bDYemZ2H5uCBX3LfheYmDwUpRF7y8RU/e8/83HWBd5xv
AeZ527kWpgi3/MmifE0FKnLTHy1GcUpQkhuW5xu+5bpzvOZsS/GDpZllGcpS
jpledYZXnO5lp1mJyvzlVP90ilWoSjUmW4PvuGR1LjrJmky0FrW54ATPW4c/
DOKcUdZlvPWoz1nHecaxNqQRjWnCacfYlGaMZBTNacEpR9CSVkQy2mBGGUI7
WtOGtoz0pCM84XDbM8zjdqIDQz1mR446xO/pTBciPWI3ujLY3x3kb3anBwMN
MMDDhhJGfw/Zk16Ec9B+9qavEfThgH3Z72B+tR/77M9eB7DHgex2ELvs404j
HMJQdtjbYQxnu+Fus5db7ekWw9zsaDY5ho2GOo7xbDBgFD1cb3f/A443KMs=

                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{78, 111, 8, 98, 20, 65, 113, 13,
                    145, 94, 1, 75, 151, 151, 127, 45, 143, 17, 151, 72, 42, 
                   154, 5, 72, 100, 87, 52, 116, 34, 67, 148, 5, 2, 54, 76, 
                   51, 1, 33, 71, 154, 68, 16, 15, 50, 124, 29, 46, 153, 123, 
                   78, 128, 20, 93, 24, 133, 39, 8, 35, 144, 148, 32, 10, 11, 
                   135, 49, 137, 97, 21, 128, 142, 140, 27, 116, 117, 28, 26, 
                   3, 98, 84, 6, 97, 96, 16, 15, 76, 13, 5, 50, 128, 146, 65, 
                   5, 3, 98, 9, 39, 143, 131, 92, 5, 98, 72, 9, 2, 116, 116, 
                   131, 99, 98, 51, 27, 98, 143, 33, 80, 7, 154, 47, 156, 77, 
                   31, 109, 66, 155, 132, 83, 14, 9, 105, 85, 30, 126, 41, 1, 
                   57, 83, 11, 122, 146, 86, 134, 27, 29, 26}], "RootIndex" -> 
                 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{2, 3, 4, 2, 7, 1, 3, 6, 1, 3, 5, 2, 1, 
                   3, 7, 1, 2, 6, 6, 1, 7, 3, 2, 1, 7, 6, 2, 1, 3, 3, 2, 2, 2,
                    7, 6, 2, 7, 5, 5, 6, 2, 6, 5, 4, 2, 5, 2, 3, 6, 1, 6, 3, 
                   2, 5, 7, 2, 5, 6, 5, 6, 5, 5, 1, 2, 6, 1, 6, 7, 2, 3, 1, 2,
                    7, 2, 1, 4, 6, 4, 6, 7, 3, 7, 4, 3, 5, 5, 1, 3, 1, 1, 2, 
                   7, 6, 6, 2, 6, 4, 4, 3, 5, 5, 1, 2, 7, 1, 1, 1, 2, 5, 5, 2,
                    7, 5, 2, 5, 7, 6, 7, 3, 4, 4, 5, 6, 2, 6, 7, 6, 1, 3, 2, 
                   6, 3, 5, 4, 1, 2, 7, 6, 2, 1, 1, 6, 6}], 
                 "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwN0/tXkwUcx/FnWTrJCxxvEwtnIiIpIYIOAr/ziAWGOkHsSTQWB2IHlHbg
WCqKIIiXE/poUlNMUQQmFxk3mdj8DlhjyAabJIo42bgvGe4COISw/fD5B96v
81kR/VNYLI0giIv2SU9mJG2IHUWb2ML62n8MTScGZ/6xV4bS0rGf5bRpFMXf
Tzx6X4P80nr+dywbSudOXBDEm1DBqeFe+WAUzwbGclFDYyuyy+ZcMg8jNyla
PlfXB+K7fnvLX+mBM26sStg6gY45b+mLqC5k1fIK6ysHQfcbtUSeMo6kh5+k
KvQ/IOIT72RssyJ3Ek+/eW1G2+Vzq3lFJqQWyg5ualCCwGCqjhjpQtMXxS6U
pANtd3oCrMYmoKbrN0/dNqDQt6ZdebUd1U8TK3GhFR2TZq059pcFebt8F54p
eot58VuCX8SZUPAEl+Q91QP95iQEpQ8hazy5o6BrBLlTFf68kj4geNFOUoEU
n7v1Jv1Q2oLCarbw5UETOv5eVAkSLQisvWaV1oBp4QURqwbMaMJit2MWPQbH
M8iobd1o25j6q/KFAalPTl38hv43EmWf7pkuE2Pasgofj1kNQIbEJAWFGoFQ
u574Ut6IHCqd5C/vRHLsfb5fgwYZOUXVvcdVKOi+xtBmDgC5TyU9NFyConue
txzCBlF6ffLFe7YMRKJsntP2IXTfN6ZszbehsKUqY+mNRiD4LjsHr77EPN/N
OcyUduT7Fpj15weALhvcz904AsHx679/2KwD8dali00pbaAz10U07elH6llQ
f8BECYhD5/ncrq3H0G5gG+7OYJPvdngSblZIW1UedznEAgyxZdh5yu6eRYZ5
lE8Cp0R01vm+Ffm71tyImTkE0qjAqbphI4gU2lMBKx+AdNWzKJfjLchumpid
PKID/nQ4TXSiFdlxXrHjkWYgH/Uwu191oOMRQtNUNwaKEWxj2jsJXRtkRtcW
VPT4yx2ZRtQVxv24InsIiazdHWvdu5DuXsDfVGtG0RP5OhXVAaRfrENgrhb5
CRrNlHIAKK/dx6L73gBL6OWijXmMwVPXLrZJHqNUEt5YktgH/OS3y+rSbyHD
2y403Q/iI6k7P56UIE8pMDXKOvCs566huXoD8j6/tH7Be7vn8R09Ne4vUfdw
+eXUfgUybl7yWMT4F9jNmVUt89uRO2NrwYV6DTLzZ+81L1XauzvxecQwBvu/
O2MU9CL/gCGhs78TOd/G5Mx49Rql5cnZubE2fJ518tB0sRqF/9yVq8peo2LL
uXMsmgwFzhWS+SYrppVvnjMzIhLz9nxlyRq1/6LgSuJIiglFTnS3dws6gRdV
xPZx1QJX7329lnEYOVWl+uJIPTCP3mJTpw2Q1x9JZT1oAq97gYUB5CgySlb/
YvtMB0KHwnVrnXtAnZqfHpTcBvuXTxDlBz5i02mpawQ+wyC2/Jm4jGYGZtaj
EF3FABIOi8M3fKgCnspb0WxQA+l8/va8zAZQZ+fkFioGgVkjSy7OaUCSqehi
SNXI8Q9bd8HXAtRhTWvUUQuw3iRsz61oA/eV5w+fChmA/wFFbHnh
                  "], "Children" -> CompressedData["
1:eJwdiWV0FgQAAO+BlDTSgjRIS0oo3SAxuhkwSvLbYIxmdI4uQQnpku6WUrok
lO4GadBz+OPuvXuXqXW3oHYxgNC40QoKDi8bCARH1I0XHVW7hoW0DwkUKNrh
44+KJsb/xOQTYhGXeGhs/jUO/7jSD67wU+JTgYokICGJSMx7l/vOZSYhKd/w
LW9NRjay88bPSE4KXrvUlKQiNUvMRGbSsNi0fE46FvnK9Lx0oS/8gr/NQEZ+
9rkLfOZ8n5qFrMzziXPNwZc89icf+aM5ycVD55ibPOQlHwWY7QN/MD+z/IqZ
3neGBSnEPadbmCLcdZpF+ZpiTLUEU7xjcW472ZJM8pYTLUVpblqGG07wulGW
ZbzXLMdVy3PFcVZirJcdY2WqUJVqDGM4fzna6tTgO2rSl37UojZ/Oso6jLQR
jblkEHUZ4UXrccH6nLcBf9iQcw63CU056zDPONRmDLE5kbagJacdbCsGGUxr
2jDQU7blpAMMoR3t6e8JO3Dcfnakr8fsxFG/54id+d0u/GZXDtuNQ3bnoD04
YID9hvKrYeyzJ3vtxR7D2W1vdhnBTvuwwz5uN8L+DGCbA9nqILbY280OZpOR
DCHcofRyoz0dwUg2GOZ6Qx3FaMYQcJ1jWWsP1ziOXxzPaqNYZXf/A1y0KMs=

                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{10, 85, 72, 128, 151, 9, 37, 98,
                    116, 153, 76, 92, 98, 15, 113, 5, 5, 64, 84, 126, 27, 51, 
                   17, 51, 14, 9, 151, 126, 16, 76, 67, 92, 143, 112, 140, 29,
                    141, 143, 83, 138, 11, 135, 5, 70, 137, 65, 1, 7, 9, 11, 
                   52, 56, 35, 133, 126, 40, 17, 20, 36, 7, 140, 109, 49, 34, 
                   135, 144, 132, 72, 136, 81, 33, 74, 57, 27, 97, 86, 45, 71,
                    75, 44, 83, 26, 46, 87, 96, 143, 64, 96, 148, 94, 110, 
                   131, 150, 2, 9, 116, 129, 9, 16, 98, 98, 68, 104, 98, 148, 
                   87, 27, 19, 18, 73, 128, 68, 50, 33, 105, 126, 26, 93, 124,
                    133, 9, 128, 59, 41, 101, 80, 148, 71, 104, 24, 100, 142, 
                   116, 5, 152, 147, 61, 137, 134, 16, 3, 124, 11, 22}], 
                 "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 4, 3, 3, 3, 1, 5, 7, 3, 7, 3, 6, 1, 
                   5, 4, 5, 7, 6, 1, 1, 2, 4, 5, 1, 2, 6, 2, 4, 1, 3, 6, 1, 4,
                    7, 3, 6, 3, 4, 4, 3, 5, 6, 4, 2, 4, 6, 6, 1, 5, 7, 3, 7, 
                   4, 3, 2, 3, 6, 3, 3, 4, 2, 7, 1, 3, 3, 7, 5, 3, 5, 5, 2, 3,
                    2, 7, 7, 5, 7, 3, 6, 6, 6, 2, 4, 4, 5, 6, 2, 4, 5, 5, 2, 
                   6, 1, 5, 6, 4, 2, 2, 6, 2, 3, 2, 3, 4, 1, 6, 3, 1, 2, 7, 7,
                    3, 3, 1, 7, 7, 2, 4, 4, 2, 5, 4, 1, 3, 7, 3, 5, 3, 5, 7, 
                   7, 2, 7, 4, 2, 3, 2, 5, 7, 2, 3, 2, 1, 3}], 
                 "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwNkW9Qkgccx7FdA6d1zjqztAVzK3Olz5lW6s4fSZ32R8M/GVMss2aZlqat
KOdlmadpLRybQes6M4dalrRsUs39KCuprQJLw1QilHwA0QdCwco2X3xffd58
7vNlZeQmfO9Co9GEU+O2ZqY1ZdqQlhXVMS/aiE77tXX3pQ5kc13s/gYbOqeF
FAShAsmZomqv/knkpWr+2FfpQEG+kSr624zEn88K4ub8g+Vus+e+D9QhTSqI
qizuRYbxmyNruyxIqclta5reIpV1K7GutAxjdrb6DB2zglj84GOAiELymVma
VvsRmUuDs1et1QFv6X1nycv/oHyBS/ga9iQQi91D+yomIK83PLlQNo48H+Ko
IXccVkY2VMkCKJTz7+fUwwTmXRKXFCa8RR3JSN2Q9gGJPW8CT9gsyCBfjt29
aMRdY5JZPw6MovcgX+2MJlHhmeZdNL8HGfGnYh8HUihO/e6O9ls9EouTN/Nb
rSiX7zhPW+zEBtYngxn8KU42e8apxlBB/5KfVWHHmmhN/6KgTlRWz5HmSh/j
ypLzV1d0jgBz2s0P9QoLyoMfEB0hBuSdl/3WiMPIluk35ufogKmVHKwKITGm
Q+S7sHsc2Oqnb/bbKNQscotq7elC5vAWTjaIoEY0uN98zQA1TxNHUg6YwKP3
BDu0UALpsePEAi8Deoy07G4O0SH7VbVeO4NETUacp9zUi4KkVdzInS+R6drX
ezHMBMr9dSmBDWZUrVQWxwZNgDcRXzHx8yA4L+RLfA+bsZwJtvhLFswTpMyo
32NDBStsrn29FtKjhza5+PShOIw+JP/cADG7r7iz1N3AfdRFzOruR2WtIazS
3YRK1vOOoEMqFJSdPXAmcwCFayM5YblPwP+0sE1U6YDyr0PaT7WpkdnUv6+3
VIOMJwNuFr/LwPS2S9mZNchQnzVtLb6FQl7EnU02JWp8NmelXdBBXu3Feb8a
O5F5fPmhpVwrqFg5hYf7NaiLHohQTZOBxjWx+eZnL8AjXO/76O4gCN7RvZal
69B/B/3IEOcWNqiqOI4r57DYX1wk/aIIhYteo0oyhDEfUuuW0HUof3jw1bO9
Q5he47d+okaPTDLZ9VhwP5Lbw9vF/Km+KQsvnLL2oYafV9XSNACaiubJFz/Y
gLCajLwIPbAV5sbmAQPk8RovTT9OAbeveEttnB69C8rWPz9gB38OGSwwtUF5
hnhr5yYLxNwWVzFevQdqzfXS0EgHcHOHf48/qYZdru/C680aYEa6ceb/dA94
JX4za+09SJS89gntLkVmsvs8ScRzEGbf5Uzv7EExfXajoOUGyh46loRsGIXi
kwnX0+cYgfLckBQ7awRkHtybX62zAu9ThlY01wYktOVzeqwgnEw/t/EkjU2d
GVsd6rSDzFSZZImxoUfB7atJ1U4oJ+j+R5PHkenppZjs1IKy/XIdPZUCuV97
QQ6UonKbekXXlLd8ODCApTKg4PAq7c4z91DcUtG3PNsOXENAlJEQIjt42Y3R
xKnffAK2Gj1IoE7vXtf0C4nk6HbH3gc6pCT/Jvhm2cH78UaXv1bb4H97pm+D

                  "], "Children" -> CompressedData["
1:eJwdiWV0FgQAAO+Ro0GkpBGRTqW7dKCoI6RhwACpwbfBGN0dQ5RQUglRQFC6
Ubq7u7u7jsGPu/fuXfYW4SGt4wARQbEKCY2qFAiERtdOFBvBnSLD2oQFihRv
++7HxBLnPXGJR3ySk4IEJCQRi9S/fWMQr11oYhaYhKQkY76v/MuX/mlK5pmK
D3jhHz43Nb3pw4ekIS3peOZc05OBp/biI+aYkUw8cbaPnWVmspCVbOQlH9nJ
wSM/4WN+96G/+cCc3Hem98zFXT/ljrm5bR5uOcP8TLcQhSlAQW46zRtO9bpT
LMKvFqUY1/yMzynOVX+xBCWpx/eUojRXrMtly1CeCpRlsuWY5CUnWpEJ1uQr
KlGZi/7sBatQlWpU5yfPO94v+NFzfslZgzljDU47zq+pxSlj/IZvOWkdviOE
E471uGM8Zm2OOtojjvKwIz3kCOvTgIY0ojVtaEwTDhpGU4Z7wObstxn7HOZe
Q9ljC3bbkl22YqdD3eEQ2/ID3YmmHYONYpDbbU8HOrLNTmx1oOEMsDP93WIX
NhtgkxH8byT/2ZWNdmOD/VxvX3vQx3X2ZK29XWMvV9vTvvRwONH2oz+rHMBK
u7vCgQwiysF0cwhdXe5QljmMpUY6gghHMorRBBxDF5fY2X8dyz/GsNhw3wIC
KirK
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{12, 19, 84, 9, 140, 150, 76, 
                   112, 61, 67, 39, 5, 65, 116, 76, 98, 92, 3, 96, 5, 1, 148, 
                   13, 9, 3, 36, 4, 39, 5, 81, 64, 126, 100, 70, 129, 105, 76,
                    102, 72, 105, 76, 51, 52, 50, 133, 53, 27, 135, 52, 27, 
                   71, 143, 98, 104, 68, 65, 125, 109, 147, 99, 42, 48, 7, 
                   106, 104, 50, 15, 33, 117, 132, 58, 139, 133, 152, 49, 124,
                    17, 140, 76, 123, 5, 98, 128, 14, 103, 10, 92, 113, 28, 
                   64, 15, 46, 97, 153, 9, 38, 41, 34, 70, 75, 49, 39, 24, 35,
                    32, 107, 72, 85, 116, 101, 9, 113, 94, 1, 5, 51, 39, 13, 
                   5, 9, 31, 11, 74, 27, 45, 44, 43, 98, 91, 72, 135, 50, 124,
                    136, 119, 82, 65, 86, 122, 128, 116, 11, 22, 110, 140}], 
                 "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 7, 1, 5, 2, 7, 1, 2, 7, 4, 3, 1, 1, 
                   2, 1, 5, 5, 3, 1, 4, 5, 2, 6, 4, 2, 4, 7, 4, 3, 7, 1, 4, 5,
                    3, 1, 1, 1, 7, 3, 5, 6, 3, 3, 6, 4, 4, 3, 6, 2, 5, 7, 1, 
                   4, 7, 7, 4, 5, 2, 4, 6, 6, 4, 5, 7, 2, 3, 3, 7, 2, 7, 4, 3,
                    6, 5, 7, 3, 6, 6, 5, 2, 7, 5, 1, 5, 2, 5, 6, 2, 7, 1, 2, 
                   7, 6, 6, 1, 1, 3, 4, 2, 4, 5, 2, 6, 7, 2, 2, 6, 3, 5, 4, 3,
                    7, 1, 1, 6, 7, 1, 4, 5, 4, 3, 7, 7, 1, 1, 7, 2, 4, 6, 2, 
                   2, 1, 6, 3, 2, 4, 4}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBVQSq+yFib1JlAQAAAIkAAACQg7xxNI/xv5AdTY6LCui/KLCNFiVw+b/Q
lJUDeDL5vwAx3WgW1Pq/eP5aZJk4+b+gnPTx1gf+v2iJzaIKP/e/6AXswTFk
/L/ocmu1qJTwv0D3aEOWx+K/6A6Tlhbd/b9AtIo/PNjov/giSYPn3u6/yJSH
UkzBub+oMzn2bET2v9hO8M37//K/IPeDlqwH8L84nLo66br0vwDhqhQQ7eG/
UEN1tnjB7r+Q1rYQx/rov9iXT9c9vr8/AMoESWDH479YSoH6IDqnPzApxKIC
EeS/QLGSmNBX7T+gWoiQY+T4vxhxP9tg9M4/YJ3vHRke67+ICa81GILzvyj1
VHD5HeS/2NUQ1XF87L/4Kls4Vcvpv/h5GkLD3vK/KKwmdHzK6b/g5V3N5YXz
vwhX1CMV0bY/8FNNxFvi9r9AkR7QdZHFPxBt7mtp8u2/+ADaUJah4r9g+Egw
2Snpv9jhO7la2fG/oFbhZBIm7b84U/b+hn3rvxApm+L1Vua/sNLWWVFw5b9g
oh7yqNbdvyD3nqpJiue/WLNKdStS7T9AdR4aYF7rP/AMUitKJvg/OJomFzoF
7L+w35RWWwL1v7Ddfuw7Zs6/uNDRZ1eVzr94Xr1RSH7rvwBnIdguO/8/sCuI
/rsd4b8gLTJrQUngP3igWfzXdYO/YLqR2XJu4j+gdTFKeTviP0D6qDYZcbQ/
yGgUnDr5sT/gHVuRCJjzPyQ9VHqXzwFAwL9tLe4u8z9obLMVkt/5P1jQat19
MfQ/kLEcZ8KR2L+gL7BX853Zv+ASp2IbLN6/cFWQfAUC/z8AMjX9rPjdvxhZ
kJm+tcq/cBtinFYS+D/oYf16Xsu3v/gAdA1oltC/WG8Bu6ND9r8ogYV6D/rW
P+BR7PTZPNy/ADWaT/X8rz84u+CRDP/Pv8CHySkuQdM/yIb8Tp2V9j+In6I0
SZThPxjeD5UDAPK/MFw1F5AQ3z8IYe4yfyvoPwjdpA1nLvQ/oJwDGN8bwz8Y
jyR0/DDZv0hHAI1fMb4/cNN8bU0w2r/QtxZ3svDVvxgwOImIlcq/MP9h6sj6
4b/Irdn/tHevvyioilgxlue/aI+p/RCI0L8AoIQcZJ3wP2hHTm3CMOw/4DkW
C/O99j/AUT0+eCHsP0h1gm4Olfk/SJ3WuI+P7r9wlY8o2vL8P5A/xO/GpcI/
MPHq6Vg74j8w3ZD+9C7yPzAbYSAoL7A/IO8jU1kF2j9QeETANSfgP6gRUW5e
Yvc/qNxllpFH3z9oohiqGvfTv/ipn5RWtuQ/8IA+KCtojb8ATroy5773P/BP
J/tY6PQ/EJRdA2Sn7T9oJ61uXUL9P0AJzASwqcw/UEXo4M7g7j+cX7y9Ml0H
QNingLfBM9A/8OqwiuZC8T9IHdiXZXGwv0BGFLejCKQ/cA4Jsrzr5z9gk09N
c0vjP7DDm69B+c6/6JGu0S1EpL+oGMB3wnv6PziBA5/eqv4/DlxOHw==
                  "], "Children" -> CompressedData["
1:eJwdiVV0EAQAAO/RJQ0KgqQ0SsikpKUkZHQIDBmbxIARYzRjA4Z0N0h3dzdK
G3RIKN2pgB6Dj7v37l2ONp0D28UDuiWJU2BQRMXw8KDI+knjokZY9+CQ4PCi
AaHvfmwc8d4TnwQkRNOTiMSk4AP+d5X/mYQ3JuW1yXhlcv51pf+4wpSkIjXL
fekyX5iG56YlHUt95hIzkJGnfsgXlOAjMpGZjynGYrOQlScu8rGfUJSFZiM7
OVhgTub7yHnmIjefkoeH5icvc31gPu77k/ecYwEKctdC3LEwt53tLT/jpp9z
wyL87Sz/cqbXLc41ZxjAdMvyFV9SkqtOsxSlueJUyzDFP51sOcozhKFUoCKV
qcJlJ1mJiV5ygl9TlQ6MtxrVac84a1CTi/7ABb/hvGOtxRhrU4dz1qU+DfiW
epx1tGcM5LSjbEgjThnKH460MU1oygh/90d/sxnNGW4LYv2OYbakFb/ampOG
cMIgjtuGY37PUdtyxGAO245fHOrPDvGQMR402gMOtiOd2G8Y+4yyM13oSjiR
9Gav3dhjBN3pQU8GuduB7nKAO+3FDvvbh75sN4Z+9Geb/dzqALbY14H0cbOD
iKK3mxzMRqPZYKTr7eU6h7HWCNcYy2p7+hawghzR
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{96, 78, 150, 8, 154, 9, 140, 12,
                    18, 9, 98, 98, 97, 102, 148, 128, 79, 116, 67, 116, 98, 
                   31, 126, 138, 16, 145, 50, 50, 153, 5, 17, 65, 35, 27, 155,
                    96, 16, 65, 94, 7, 56, 70, 85, 1, 150, 11, 106, 65, 128, 
                   19, 99, 24, 109, 52, 133, 5, 146, 104, 125, 41, 76, 53, 76,
                    76, 51, 73, 50, 147, 119, 66, 11, 156, 39, 133, 1, 154, 
                   154, 132, 155, 49, 93, 14, 87, 79, 3, 133, 98, 15, 2, 87, 
                   72, 1, 65, 1, 37, 5, 5, 52, 98, 38, 124, 110, 39, 17, 152, 
                   98, 122, 71, 69, 97, 10, 126, 72, 101, 151, 14, 44, 80, 
                   152, 90, 20, 114, 71, 27, 148, 117, 72, 29, 33, 26, 22, 49,
                    61, 57, 24, 26, 140, 82}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 4, 3, 5, 7, 4, 5, 3, 5, 2, 2, 4, 1, 
                   4, 2, 2, 7, 2, 4, 5, 3, 5, 3, 6, 6, 4, 3, 6, 2, 5, 1, 2, 6,
                    3, 2, 1, 4, 7, 7, 3, 5, 6, 4, 7, 4, 2, 2, 6, 1, 7, 3, 4, 
                   6, 6, 1, 7, 7, 2, 5, 1, 4, 7, 2, 5, 1, 4, 2, 5, 6, 2, 1, 7,
                    3, 4, 6, 2, 7, 1, 4, 4, 2, 3, 2, 5, 2, 2, 3, 3, 7, 5, 6, 
                   6, 4, 7, 2, 6, 1, 4, 6, 1, 3, 2, 1, 5, 3, 1, 7, 6, 2, 4, 2,
                    1, 6, 7, 1, 7, 5, 5, 7, 1, 2, 4, 1, 2, 7, 6, 1, 2, 4, 3, 
                   2, 4, 7, 3, 6, 3, 4, 3, 7, 7}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBbQSS+yFib1JlAQAAAIwAAAAgMdgcnLPxv6hBfdvDoey/iG8a2906+7/o
5nOXqBT2vwjVDrAGHv6/SBuAHwlu879YW9iycYv3vwj4ldlNjPa/IGsvDy3l
+b9oicCc40KnPyhDYe9dT/S/+AdfnqRC6L9YP81B0/n0v7gquFdYJO6/SMei
IsvJ3b/YWJ7qiWjyPyihe7gs08i/6F9Whd2Xw7/ousFGPav3vxAlpDdbYts/
ABZTOk5H9L8YbFdhgq7nv+hVDCQPLPi/6OTXoZn08b8gwiifprvyvzBJRUQd
zvK/oAwLP/flAkCIASRgKlr7PzAac54UMeq/cN34uABK6T9AdR4aYF7rP6ga
aNpK492/+JePGcnx8b8AY//+OlX2v1Bx29/Oduu/qIn6nyN63z/4Mi61Vebt
v0CAnOv/Pfm/GOvswCuS6b9Ashx0/Kbxv8D8t3GWp/C/WLz8MBPR7L+IRFUl
ZoXmv9B6mtZvOua/EISlyecf2b/oaf2y1/Lhv0ipEFMVle4/kGBStiEA679Q
j2S8n5Xpv1gtit7DcPC/kIU4u5t0678oqiR1+XHhvzABYH0Qx8I/8KQoUwQl
6T+gsZNXlRjjv8DPHQl5N9I/cJlFNCA40D/oJ2VRQXndv8BUOxkzs82/GM3K
9lMn5r9w5Na36BHuvxg4TOL+W+G/eHlhIa9ftz/oSazrd4/gv9D4QnDPity/
8HN/L7k21L+IgqSHBPrcv1hJGiBpGeU/OHqovtUj479oSUX9TsroP+hoQCrk
K70/AErp0tI6/z848L2pvBT3P5BAdlVGnMI/kLhGXHaL278Aby0vpyHCP3iI
IX43Ivc/sKcVLkJp1j94PZlMYXzhvzCQdx9MecW/8PmSwhfr5z+Q6RfWof/W
v6CJtV+gcuA/WOovrxkG5D/oVxmfGNbhP4g+O4DegtM/oI5In9G27z/oRh5P
mSLSvwAFZLRcl/U/2MYyYwzT4j9woGnV+4XKvxCWXrIyNPk/IKBNOP0od7+Q
xE3U48PNv3BGM2Bhr76/YBlZPYA+yr+guNkxb0LTv9iiKFBZY+k/wA3aUBoy
1T+wi07p06Oxv+BdN7ycPdq/OAuKwTeL0L/gBEUhXNDYPxADHYD1YNs/mOb6
n1nEtz/ovqbRbO3cP1DiHrVqw/s/sPfmjlefwj9o6W2HCFLAPzB0rFFxAcw/
gFnrUV71eD94/9x9OjDfP4BVtd+Q6eU/ILmGRsLH8j9IgQhVXgf2P7AiUdzX
S6G/CEieMwR/+D8wb6Mtda79P2jUzeW+rOU/UJcByLxK8z+QbRAJaLXuP7jG
/c8Rzvc/mIt9rebs3T9oqI/zFVb1P7A7d8OHlte/cO8DszuW6z/IckRGhFbR
P/iVQuUtFvQ/0CfzhUb29T9QUUw2Owrpv/AFtqu58vg/MNpP7ZPU7T9ohn4l
hAPlP4CBXnK9Rbu/AOmWY1O3mb94M/rNRGrOP7j+qK0tM+W/mPjy/CpX4D9Q
Nh1XNSurP4ioFKiMKuU/yn1ZGg==
                  "], "Children" -> CompressedData["
1:eJwdiWl4CAQAQN+3IlMUUVKOORIKc0XOqWiEbDlSYWMbctRO2xjbHNsMlXIk
RXLkVohylrOUW+6jHJFbuXmWH+993/teUGT/sOgAIK5AnsIikkJiYyOSwwPz
IrRffFRMVGxw3Z7//9w8Au7zAA+SDy1Mfr71rgV5iAIEssg7LvS2C3yY+T5C
IW45z5vO9VEeowhFeZpneJxiPEVJblicJ5njdZ/gmrO9agn+8xv/dZZXnGkp
SpPKQMpQlsumEMQMq1GdS5bjouWpwHQr8rUXfJbzVuI5KnPOKpy1Kv84zTM+
z2lf4G+/sgbBvEg9TlmTk9blhLU4bm3+sg5/OtVjTrE+L5FIEg340qaE0JAv
bMRkj9qYJnzuESd52Ga8zCsc8jMPOtFXaU4LXuM9JnjA8YbSkla8zn7H2Zo2
7PNT2/KJ7Qhjr2/wh2MN52P3GM2btKcDH7nbHnSkE2/xobvsTmfG+Daj3ek7
vMsou9CVHXZju5FsM4Kt5vq7I/3NHLcYxa9m+4sxbLYnvchyk73Z6Aj7MNy+
9KM/7/MBsWxwmOsd6jrjSCDTeDL82XR/cogDGOxa00xmkGsc6GpTHUQaq0xx
MEMYyjDSSXalmWQwwBUm+aOJDmcEP5jLcrNYZoLfm81Sc1jiSBYb73fGeQ91
oiLO
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{113, 10, 5, 9, 142, 20, 15, 76, 
                   27, 92, 37, 16, 143, 78, 152, 39, 120, 17, 132, 85, 128, 1,
                    135, 113, 13, 9, 1, 72, 4, 65, 11, 104, 75, 52, 2, 5, 50, 
                   126, 11, 102, 98, 59, 65, 150, 13, 128, 140, 154, 19, 5, 
                   98, 100, 101, 46, 109, 139, 18, 68, 54, 33, 146, 49, 148, 
                   48, 112, 96, 16, 146, 151, 61, 129, 86, 152, 13, 115, 50, 
                   134, 98, 98, 6, 19, 3, 9, 133, 67, 76, 126, 5, 64, 124, 32,
                    40, 110, 36, 135, 126, 51, 54, 151, 16, 129, 70, 7, 147, 
                   122, 31, 140, 43, 71, 131, 5, 21, 90, 116, 105, 7, 10, 3, 
                   20, 144, 71, 143, 105, 50, 29, 111, 76, 30, 117, 26, 119, 
                   42, 82, 116, 97, 155, 76, 16, 27, 26, 25}], "RootIndex" -> 
                 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{4, 1, 7, 4, 6, 4, 4, 5, 6, 2, 1, 1, 2, 
                   1, 1, 7, 1, 4, 7, 7, 7, 3, 4, 2, 7, 4, 4, 4, 3, 5, 2, 3, 6,
                    5, 1, 2, 7, 4, 3, 6, 6, 6, 5, 3, 4, 1, 3, 4, 1, 6, 5, 3, 
                   5, 1, 7, 5, 2, 5, 3, 1, 7, 5, 4, 4, 2, 3, 1, 1, 7, 3, 2, 1,
                    1, 2, 4, 6, 2, 3, 1, 3, 3, 4, 4, 1, 6, 3, 1, 1, 3, 6, 2, 
                   3, 7, 5, 2, 4, 4, 5, 4, 5, 7, 6, 7, 3, 5, 6, 6, 1, 7, 7, 6,
                    7, 7, 5, 3, 2, 2, 7, 5, 4, 1, 5, 2, 3, 3, 4, 5, 6, 1, 3, 
                   4, 7, 3, 7, 4, 2, 1, 3}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwNyXsw1AkcAPC9muRRTW8qmVVGa6jbUzft1PDd0sMIbY5ouPpFeUU2KZur
zmrQ6LA3ciOXrDIsrkuN1eLW16tCynqU3T2y3j+H3d+vdlnPrj8+f31sg2N8
Ln7HYDDSvilP3pPkLqSR4x9npLfqkVxmktB2pA81bJ4uq8uIjKLYFJ/tM5jj
tb/v6qARiS3RkcnGGdSIus7avKQxfGF/b9VPBuT5cx53757FRGLLH/H20xh+
eOOWQljEHPK6b42JDkVJH7PT19EoPl9A1SvzULagbzUINbjWfvt6d2gHdvF8
N8fMgsu0vLr8jEM/EtuEwyqbAdQEbB2qevAFraqCkjomy/Du38UbBhomkdNg
d2Bd+ieQ5BaveuE6i1alWsnZzAHkT6cFml8YRa7167jk4aegGev05RkmMNE8
uNb4ph/Ybvwk6YZxJE5PzIiuarHZzOlPl/MksJ0DA6KX5pDpbVk2t6TEgNWF
2hXSEhScXoonSAopG+cbfil30Gqn9cosaxJZE1S67nsSidhrdEeECiVvH95w
XDeBghdrX3laaYEfurJ/pHIKqU13Qe7RAOy9m/P8jxpQdLjipov3ELp7e+7a
HP0blj9ab6cbVIL7st1Ogi864NVu2B2/MI7iNbn3D8arce0nH7dqixFURnlf
yjpHAr+6LL7LgUZl3K3BsKpeTFSdOfSXrQIYukxq3jCKnAizewdnRCDJPhPq
8awZBIagMt8T82BsD2tRf5YBMeDQaHd9CFgiiwsxfm1QN/h+R9zqChBt05cc
S6aQPJ5WsJjWjYRh8ZTBZBoVRek+NRflyEvYx1h2bhTLKxo2mta8RtGJ2/1S
IgrJ/ObUyJhKYJweuRz4qB4YPokm2b39WF4g3r5PQKHGpSjEQtyCzaXr/fuE
7SDju5/Yn/cOFFb/zfcIVcC0/OfOhx9aUVE18bYjugeNrp30w4pmUNqs4u16
3IQKl7C6W2FdyNHe9xWHfAbWkFNKh6YdJBujF+X/DgN5Zexou/lKLlHI2uOk
pYEIfLPJTToN7HTpoSf2GuQn6D8/ljSBhNirmeJ0gft715ZDazJRMO4wG6ee
gqjNKlV+yXKuTO5hc9tED/wnIfGCHs23r3VWvlJhuH2ocKKgB3n5h9uaWsTI
PTaUuuPyRwxoeqh2vE4DSat/vMvUAFNhfOUyo4Ycv52LYxajoKDl4oKRARA/
2JQiOzACxncZer/MSSCP8Fp3FamBudrgUeszBSL2qYTgYR2YRkkPyDKyQBEc
ejLS4ilwI35xlj5vBKuqQIV9XB/yhdeeFdfPQ45ZsZxFzQGV6MpyDE9Hkjr3
a73wK4Rr57LzM2bBeGfG1vTkJCi+dk6aedUCdzS/U+5fjcy2WLdQbQfKPJXS
pSeTwH0ZNJ5a2AgELBX9zBuHclmeb6z/a5RVWt40hneBoLXZ7lg3DXXCjmFa
Pwzi3z9cmhUZICfs+fQ46wtQfaNebrkUsFdcycl3nALCUPrsuHEB/gdtEWMf

                  "], "Children" -> CompressedData["
1:eJwdkmV0EAQABu8hII2AdEt3dyNSSg0BaQZsoyQG2xhs9EZ3GHQblHSHonQ3
0h1KKih1DH7c99697+/l7NgrIDge0DdR3AQERtQIDQ2MbJo4Tur17BcUEhRa
omyXd/+YOOK95wPik4CPSEVCPkRTkIh1vjExr11rEpKSjOS8co0vXe0Lf/F/
U/Kfq0xNGipQkY9Z6XNXmJZ0pCcDz1xuRjLxCbn412VmJgv/+LNZycZTfzI7
P/rEHDw2J4/8wYfm5oElycNS85KP/BSgIIX42yX+5WLvW5giLPKeCy1KMe5a
nDuW4LYLvOV8S1Gam5bhhvO8blnKMddrlueqc6xEZZrTgipUpTFNqMZsP2eW
1ZlpDb63Jp9Si8+4Yn0u+52XrE0d6nLRb71gPf70G887wy9owDkb0ojpnnWa
Z5xqAFM87WRP2ZQvmeRJm3HCiR73K47ZkqNOsBXjbU0b2tKOI46gPR0YyjAC
6UhXunHYcXZirIfszEGDOGAw+w1hn13Y6xi704MhjPZrehJGOHvsRT9G2ZuR
/mEffjeUvsS62xh/c4S/GkF/ItnlcAcwkEEMM4qhRjPEnQ52h4Pc7mC2Ge1W
o9ziQDc7nE0OMIZYRjIqro1IR9PfjUa4wXDXG+Zbz6Ie0A==
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{67, 98, 87, 5, 12, 98, 15, 92, 
                   65, 133, 76, 63, 70, 17, 56, 155, 93, 94, 6, 8, 20, 39, 
                   128, 7, 17, 10, 155, 96, 84, 151, 91, 151, 46, 4, 116, 9, 
                   116, 51, 126, 98, 11, 148, 104, 100, 131, 18, 101, 3, 40, 
                   11, 16, 133, 48, 71, 156, 137, 109, 104, 46, 51, 144, 154, 
                   76, 105, 147, 143, 31, 65, 16, 129, 28, 111, 146, 29, 150, 
                   92, 106, 19, 76, 143, 139, 9, 74, 84, 110, 154, 66, 81, 
                   128, 65, 8, 68, 9, 143, 124, 127, 13, 50, 2, 148, 83, 39, 
                   1, 116, 1, 33, 27, 18, 21, 99, 98, 20, 98, 3, 78, 152, 58, 
                   140, 24, 88, 125, 80, 5, 148, 63, 112, 4, 26, 50, 33, 72, 
                   49, 27, 61, 116, 76, 117, 113, 124}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{1, 4, 2, 2, 5, 5, 5, 4, 7, 5, 6, 6, 6, 
                   7, 3, 5, 2, 3, 5, 6, 7, 7, 5, 1, 3, 4, 6, 5, 6, 5, 7, 2, 2,
                    5, 4, 1, 5, 5, 1, 6, 4, 7, 2, 7, 2, 5, 6, 2, 6, 6, 4, 7, 
                   3, 1, 5, 2, 7, 2, 3, 3, 3, 1, 6, 5, 4, 2, 3, 5, 1, 5, 4, 2,
                    6, 4, 7, 5, 5, 6, 5, 6, 2, 3, 6, 6, 2, 1, 6, 6, 3, 5, 3, 
                   2, 7, 2, 7, 5, 3, 4, 3, 6, 5, 5, 6, 3, 6, 5, 2, 7, 2, 7, 3,
                    3, 2, 2, 6, 4, 3, 7, 2, 7, 2, 7, 5, 7, 5, 7, 6, 7, 3, 4, 
                   6, 7, 7, 5, 1, 2, 7, 5, 2, 2}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwN0vtXkwUYAOABahOKkE4wNBTUCLwAIuQE6h2JuUyPXI44UnHKxYkgQ9EU
taiZzo4icFohaH55gARSUTGHCC+iTS6KY+MyEGhsjH0ykG/7trFAMH94/oPH
e09GTLIdg8E49xZHFm93jDcNpLV0R2xBB4rXvFh7zlMHDYXPRNusUyDPXuQz
eFqHgSUnFKc2W5FVe3FOULoCcmj/pA9VNFLR/RAYTaHQs57qvqZHZnlkrjbe
gr4G6vx4AIkcv1Xt6YtfITvpdDyloLHJNWrrtJ0ZpYvcb9sq9Mj6eAUr9q8J
FIYu6dxUZERW3CFV1W9dIL38Q1b4cUSpt6WphR7ApkU9eS1/6yBH/iSl4lMl
Evc02VE2GTZMPftprsMkuhgS4uZvH0AO6Xgn1IlGaQa5rCePRn6r56OrZRo8
uid+r/UmhZwLLe2ayR70nRPy0CWRBpdm5mwn1iCwJSsUackUNlyg7b5uHUPO
wMmHUy+tKP2SMvvJCpDZM6EIdhhFkjmrT/DAgsQYH+xHaLS5xfv11dFI9LX2
MVe1olf62H1GrQGrDv5Td9i+HFkJwrOPRF3Ae5AlVMiVkLNAsinPQ41UoogS
+VxH4hrtHXymDdjnX1wIlTWCer+3aeZGB9pMzWODnSYQfiatiZw1ClT9g/U2
RQdwXAQrqeARyJNN6UTF/Xg0hHXqmM8gqqPXf6f7kwKufq/0zrtWoMRLl7Zc
bEGvi7y1bj3PkGVvKXp+2IK8L/jl5ox6tE3v7m4kjahqj9igMQ6BWhatd2A8
Qf6t9DnjHzwHgt88UZAwilWGAxvldiQQqUrvhJ9HkKTyp98UMTnEdklYSZYJ
fK8s+PEdJy1yI1+LFbU6UBdLLnHC3oC6YVbmvtU6jLovCh6ZpwGi8ap+3DAD
DG5E8XJ3HfBftVeZ9hnB1zEwK3Z6HPj7XeWmFAJVK0ca82f3Avfmjqy1qY9A
PVtsTrbpQVgdUxHu2Qnssx8dX1jQBuJLj0ur2wbefvsm8dauLmB2uoe9v1QN
0q1drUGLaeBmZub/aiBBuFCSGjk4hL7nTrLnNZajOC53R833WpR6bOg5cvYp
CiduKyVHuoBwqDNnBHQgcWC3u0Q5BUTr4U/uhvXD0Q2f58aY/4XCJmfBYFY1
SpW/E/ZKE/BTLtcc1LZj1cRw7rYrjUANTTUX1GuBSyqyf3HUYIMgl413h5GR
5r9tWaUBC/XR+UaBBXjrZJhi3w885/muB2urkXri47VurAr43CTn0QAd8CoH
/CuNRuBYNj10jm1DW7jJnJatwRx7SWx+eS8IttwN3rizHwP782bM/iYgH3de
bSjrAmHejZJwsxkYh95o+85YgTsesjzOwwAu90QRW4JGweuWIHTuLisKl6zh
7WUPQU52ReS3QR1ALnHzcNSqIOfMsPa1azeowmdq7/deB7GzLGBCOIq2p8cW
lApoKKybXB2bOQ18mCnbGfUSokrlJ9aQcuT1qsivHEiQ44H3hiv/g8fVQ3/M
TbDj8CY3+zN8aPgfu6ZuJg==
                  "], "Children" -> CompressedData["
1:eJwdkmeYDwQAh9/nzKvskVQyszLOuCiUmQvRHdFAdzpOdFf/O+7OODeMG8jM
KitlVbKKzOzKVimZZTQoe/M6fXh/z/M+v69vhai48N5BQHzB3AmPTGweCEQm
RwTnSlhsQnSf6EBIaMz9f3QuQf+Th7zkI5Ms8lOAxjxDQYLRtd51jQ/wIA9R
iKIU447feNvCFGG1t1zlTb+2OCUoyVeWojQ3XOnDlKEuITxCWZ6gPNd9lGuu
8KqPccXHKcdyL7vMS1agFkutyJdWojIXXeIFq/AkX3jeqvxnNf61OueswVlr
8o9P8befW5vPrMNi/3KR9VhofRrwpwtsyHzP+KmhfOLTzLMRH3vauT5LE16g
LU2ZYyta04znOOXzNKcFJ53tH7bkd2d5wpke9yPb8KHHnGEY0x1GKi/SjvZM
swNTPeoUX6IjnfjAGPryMuFEMNk+TLIzXXiFrvRiot14lSNO8LCv8ZvjfZ1x
vsH7dmesPejJIcf4q28SyWh/MYqD5vgW2f5sNL3J8icz/dFRvk0/+vMOBxzp
fke4z1jiSSCO4b7Le+w1wz0G2G26u0xzpwMYSCI/mOr3JpHMIAYzhO8c5g5T
HMpQt5vCNoe41cGmkU4Gw9niCDY7yE0mO5IkR5Hotw50o9nk5JaywQGuN8F1
xnsP8zEizg==
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{96, 12, 13, 53, 63, 98, 46, 98, 
                   50, 106, 72, 9, 13, 120, 151, 79, 37, 2, 145, 4, 89, 151, 
                   98, 5, 4, 126, 93, 10, 138, 52, 155, 16, 14, 153, 7, 71, 
                   104, 1, 72, 20, 154, 135, 26, 127, 116, 124, 69, 39, 143, 
                   50, 36, 33, 41, 32, 147, 76, 83, 75, 72, 117, 151, 86, 16, 
                   124, 140, 82, 26, 13, 9, 65, 53, 76, 67, 87, 113, 94, 76, 
                   72, 104, 64, 18, 15, 5, 98, 9, 148, 68, 76, 116, 38, 52, 
                   15, 107, 1, 132, 65, 78, 86, 100, 3, 133, 152, 122, 31, 39,
                    146, 45, 71, 147, 46, 109, 148, 21, 42, 128, 98, 5, 11, 
                   144, 41, 101, 154, 105, 47, 77, 26, 40, 33, 29, 49, 33, 
                   119, 117, 96, 91, 116, 25, 27, 29, 27, 26}], "RootIndex" -> 
                 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{2, 1, 6, 2, 7, 4, 1, 5, 7, 7, 2, 1, 6, 
                   6, 5, 2, 4, 7, 6, 4, 1, 5, 2, 1, 7, 5, 4, 4, 2, 2, 7, 6, 3,
                    2, 5, 5, 3, 4, 3, 4, 4, 6, 4, 7, 2, 4, 5, 3, 5, 6, 2, 5, 
                   7, 6, 1, 6, 4, 1, 7, 5, 4, 6, 4, 4, 1, 2, 2, 5, 7, 1, 7, 6,
                    1, 6, 4, 3, 6, 6, 3, 2, 6, 6, 1, 4, 7, 5, 1, 1, 3, 3, 7, 
                   1, 4, 6, 7, 4, 4, 4, 4, 2, 2, 5, 2, 4, 7, 1, 6, 5, 1, 1, 2,
                    7, 1, 1, 7, 1, 1, 7, 2, 1, 1, 5, 4, 6, 4, 4, 4, 1, 7, 1, 
                   3, 3, 7, 4, 3, 3, 3, 4, 1, 6, 5, 4, 7, 1, 5, 3, 6, 7, 6}], 
                 "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwN0vtXkgcYAGA8mtnaTpalZuSw5oKshjgZNdtr7VimuVnrYpZNTZOyKeY8
6k4tmsswPZMK0zWvuZ1oscqumKuXxEzSChpewMhPFMVh7ENMoFTWD89/8AQk
Z25NdaFQKGXvtJhvMSTdM8PjVj60F2idwBnen1P9xghtGX6Hp3rMQIuxLE7c
YwFxZvKSZvMDEC/Rh9xfOwX8CMYJg53E2pt8j6qYUZQBedrtCIFkaOL2UJ/X
yIsqrxmZ5US+HymuT9IgR2X8WNtiQSIg1516zoK1y2YEzva8gYlJ6vuHqseQ
z36t7Ng3huIiVVe8/wTSxGA4Vm1GI3st1WXuBHq4plyolNrR2Jbzc3ewA4ne
w4LyQCsK2zxXbue/RLKlK/NpIImRzyQimv138BX57GQ1kCi7OCekSatHmfuJ
pZdlOuRsWExjqAhkFv+YvWjoFUoN7TniVDnaSeJ5/tlWpPD8vxr+9QUKnxw8
9KrLjLSj59Q2cytyo6Tlnd4azAtz+WTSiii7c30+PYhEo1d6tClAjfYC06Dv
v1as9S7utuheYQXrlunPPAXycuppb1cogeDcOz431YIVJVeCLic0o12sEoku
mNFzMGuP9ogdiMqGJzM3aVC6/PuyiANySKwKX+jY0wu+HwWz3monQDY5GbJx
3i6geK0oz3grRP6iss3ChQQKCqiVsboBzGtc5bi6vB8qwjTjrind2FNXSFQ1
6ZG0GxOW5juQy85eTE3RY1v7/H0lS/5DivsZtzI8iZy/dke8rx4A6c0P9pYG
P0BehusF9XwDVMzKsvaphlGqP67RqmwQG3T3j1DLPaQ8/DajOF+BdEld89Wp
TiQL3dJvjN2DSLdj/dFeHcgNO7ejQ9GBxrqrm9RUCxC/pN49suMpCL2bIxyR
dch9/FNJTNwkkB/2/nCp2ADMoeC7J8KcELlLk97t046EXhaTvP019vgOna27
REKcwnn7tz4SE/d/YWJmmFF5Yw3nb7kVPUbPL+hTWZCX4P15vKAdydKDURKR
EfmxhtJVzgn0DQy11FdJkesad37rSwPQqeZ0Z+cUUKgXt1q4VuT5PD36XoEd
jP5BNVu+HANpSOH5tJhm4Jm1wokBK8SW2pJFJUqUDh2ryftpGGi2T/sz/QaQ
9zWjOsXdCMxTjQ3ZEj1c2+3RQL9jA4IRz0nPN6GwvFVZtE0J9jPVui0mEgWn
09irbA+RFGUJH3/TD9futyzjJl/B2s84ym2PziK/Ym3YxSQdtKkHm+ytcpDR
FmTrUpqBQ6G05h7ognAy+VGa+gV4trHjWqM1wAudy+NSRjGxPf47R1EfMDeu
FnplDAFz25qB+oJh6GGvzjXcVgL9WUGZnfUMmEejqjZE/gOywtDNmqwBUObs
XbSsbBxqgwLm7VT3gqDQuTprxShUjJ+c4fHcBIRy9hyHdBoE6bnK8U4ziKcV
mwxuJNJdSBbjpgFInX9JimIE7ZM1tOqk5+8eD7IOhzuA3niy95FajlxLEyGh
dYFvbmeRfr0ee5YXRisoMuRMv5y2MXogT17ud4ptwFiqrJEqGIO8BYLKEdYd
kKa9WT+vQ4K1LK5hw3U5CNc9KeEq+ShYt2s8YXAE/wfLzZlV
                  "], "Children" -> CompressedData["
1:eJwdiXeYFwIAQN93RXdEKJGsM4uSK66yryiHojujonKnG27f7/beey8rFZq2
qIxklNUge8+mUfYo67n88d73ve+FxqZHxQcBWcG9iorJiwgEYgqiQ3ojMi07
LiEuEBaeuP/39BL0P33oywG9vcwD6YcuNZgQqqjmIA7mGqbRn0M4miEcygAG
s8R/XexhLPJw7vMfj+BvB/KXg/jTI9nnve71KP7wHn93occwlN88llNY4K8e
xy8ez8+ewInM9ydDOYmT+dG7/cF5fu+pnMbpDGM4exzHGZzJbsfynSP41jC+
cSRncZejOJuvvdNd3uFobncM53Aut7nTcHbY43a73WaX4zmP87mAS4hgqxfy
lZ1+6UVcTIdf2O4E2rySq/jciVxKq595GZNo8VMn84mX87GRfOQVfGizH9jk
FKbyvo2+59W8a4NR1BtDndFcyztexwxmcj213kCNbzudt6z2Rm7iTW9mi7N4
wypnU+kcKnzdcjdbZiy3MJc4NlnGRkuNJ4FEbmWDJSSRTCppvGaJKRT7qkW+
YjovW2gGmbxkgPUWss4sXjSbF8zheXN5zjzWms+zFrDGAp+xiKct5inzfdJS
VpvnKstZaQWV5PqEOdaQ7eNmWUsd9QRcYQOPmWkjGTbRTAvpPmorj5hmG+08
bAddpPqQnTxoig/Yzf0mu9wk/wPFfzTF
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{28, 96, 72, 84, 6, 27, 20, 12, 
                   5, 113, 110, 76, 65, 150, 97, 75, 151, 16, 98, 72, 2, 5, 
                   15, 37, 116, 9, 1, 2, 34, 138, 102, 143, 16, 114, 18, 13, 
                   98, 148, 154, 99, 50, 33, 143, 44, 128, 123, 138, 132, 140,
                    8, 155, 17, 122, 135, 30, 10, 83, 126, 70, 39, 104, 135, 
                   21, 133, 46, 63, 35, 32, 40, 144, 156, 83, 33, 147, 71, 65,
                    141, 117, 146, 81, 91, 104, 45, 97, 94, 155, 137, 13, 61, 
                   26, 9, 150, 9, 104, 14, 98, 87, 76, 65, 72, 50, 64, 92, 89,
                    4, 5, 107, 5, 51, 98, 126, 4, 7, 42, 43, 15, 73, 29, 50, 
                   75, 29, 128, 123, 138, 5, 66, 142, 1, 49, 126, 9, 133, 11, 
                   31, 47, 11, 57, 136, 11, 119, 16, 86, 151, 3, 16, 96, 27, 
                   26, 16, 64}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{4, 7, 2, 7, 1, 7, 5, 5, 3, 4, 3, 6, 4, 
                   3, 4, 2, 7, 7, 1, 1, 7, 4, 3, 4, 2, 6, 6, 3, 3, 1, 5, 2, 5,
                    5, 6, 4, 6, 1, 4, 4, 3, 6, 2, 2, 4, 3, 4, 6, 2, 5, 4, 7, 
                   2, 6, 5, 7, 3, 7, 2, 3, 5, 5, 1, 4, 6, 2, 4, 2, 1, 3, 2, 4,
                    2, 2, 7, 3, 7, 2, 7, 6, 6, 2, 1, 1, 2, 5, 7, 4, 2, 6, 7, 
                   4, 7, 1, 5, 6, 3, 2, 1, 2, 1, 4, 5, 4, 5, 5, 5, 2, 7, 3, 4,
                    7, 3, 5, 2, 4, 6, 4, 7, 6, 5, 1, 6, 4, 3, 2, 3, 4, 3, 4, 
                   6, 6, 6, 6, 6, 7, 6, 6, 1, 1, 7}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBdQSK+yFib1JlAQAAAI0AAACwwvT/8U/CP1hALlFh9d+/nIoO//WLBUAg
cP4+po/lv7AaeBd2ZZe/gH1nx5sz5r/4RaUjiO7SvyjA0qrJIOW/4KzQfB9e
07+wyFuS/1ruv0ini8Xs/OG/eDMDCrLe3r8o5+CAuuzKv3AexJV/oNu/CIxv
Mziw8r/oxpsP6UH4vwigE+DOgP6/+N4w338h+b+oyFdQrW79v3CKzKG4LPi/
CPQmKP0V8b+w2E9OOkvsvwgrWFoxZPK/6L0eZ4Wn8r/QW67ZZzPlv3hRKz5/
3sM/kIss1NXey78wy6+estLQPzjE7q2DY/C/oLqy1L1Lwz9wEpYxtyXnP5AV
O1SNit6/cIwLDMkl4T9YxadS6S/dP+AOKz7QHPW/UF+ED7Mj8L+ASHNJaJr6
v2iyUf0qJqS/QFwgPt7a+L8wNwVAusLjv/gqFBXDgPC/wJU5tX9Z5b8IQVQV
DR3+v2AJj/citLA/8C+7TnfU7b/Y97I3YPvwv9gpJ06oiPK/WGdOP6/g8b9I
6EI9nS3yvxCgk29dL6i/sDngsIBF4r8IDEsOKtG1vyDoVgmCMt2/6K7eT0MG
9T/wA3HXBg/gv3BVkHwFAv8/SHR6e9OU8z+0q8I8EkYCQMg2gcQfw/0/4B1b
kQiY8z+IbSyzvZDgv9BYrrlc7OK/SHHS0Gynzz8YxJZ5NQvev+j0Ty7U5a6/
IN2JF8766z94/Z51n7nEvzifFpXV08I/kNFndVDO5z9gBK/SQ6alP3jYY7tt
y8M/IJnG7VRG2b9wfVX2tIrQv5BNb5kQUd2/oEhnaqH/9D+geD7GwF3bv9iq
tvvJzs2/6BISKNvv8D84dLvfY1TiP6iSUYUwyus/sPfmjlefwj9Y/S6heTPe
P/hNfsBcOPE/UD9m/eHf0T/IqRxp7QD+v+gZ0SQ/ntC/qHrJR+En/D9Uop5H
CRMGQMjL5hoxRvQ/UObPZJVI5j9Qtl6IOYvXv0BuZ0FANABAuAf1iuCi/r/Y
BZLybSe9P2iNO60n6te/UJe5ikzB2L/4IGbRJ5ftP9ir/rmI99a/WJ++hhq6
8b9AKxBlGFKlPwjJU3yoje+/SI2ROJgG7z/ooISyXaPov4jSJvBc9vQ/oHKG
JV4P5L+QqzgwIZzgvwiKMGY5k+C/cDURcGgA7L84L6+V0JHmv7hehXN2EOy/
2NnRHq8e6z8MLn8AtAcAQLCkX3oHUOK/mNlujNYJ7j8IxtOJH3blv2jS6bdL
res/WL2KVT7Zzj8InO1GXtjCP4jjzO4RFfw/GI/K4rK8uD+gqreim72wvyj/
OQ0PDtA/wHkYWGFv1T+omGx65qzhP5C7nsHRGvs/WNcdyTvE4T8Utf8JYksA
QGBMil3wCtE/eFHV/xZ01D94YJHvAZ31P0CCM1u9YeA/MOYxuoU8/z+4foSC
IFLjP6h/yamZy+k/MPpalag/8j8gFEIkW8fyP8BhMPAkk+s/KEiEP1Go6j8Q
eKBNIj3wP/DD7WgKsOs/OAwcykrX5z/RvV7D
                  "], "Children" -> CompressedData["
1:eJwdiXWYDwYAQN+nbWJymJzO6encdB6mxhxOx/zuOKedjtPd3WaaYdOx2Sx0
m+7ueI4/3vu+971MLbsGtYkBhMaLVlBwePlAIDiiXvzoqNolLKRtSKBA0XYf
flQ0MT4Sk1jEpgFbjENcMvEl8dhsejIQn0/4lASkIjUJSYRuMjEbfecGPyMJ
b03KG5Px2vW+MjkvTcELU/Lcz3nmOp+61iem4Qt+Ni3peOwaH/mTGVntQ1f5
wJVmJgtFKEpWsnHfFd4zOzlY7l2XmZNc5CYPdyzEbfOSn6XmY4lfsdhbLvKm
BbhhQa670GsW5qoL/JpifMO3XHG+xSlBSUpx2XmWZq7/O8cylOWSsy1HeS5a
gQtW5LyzPOdMK1GZ+sywClU5a02qUZ0zTve006zBVE85xZPWojaTrUNdTjjJ
IOpx3Ikec4JHHe9/fkdDGtGYcXaiM00Ya1O+pxnN6cgY//UH2tGeFkQZTEta
Mdo2tOUfWxPCKP92pEcc4V8O90+HedgO/OFQf3eIh+zCQQfblR854CC7EWmA
UPY70DC6s88B9iCcvfakN/2NoJ977MVu+9qHvuyyj/3ozwAGstMofjOSoQxj
EL391cEMoZc7jHC7PR1OuCPo4UhGMZrubjPMXwx1qwHfAz8TJM0=
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{135, 65, 113, 154, 96, 151, 142,
                    13, 128, 98, 76, 17, 151, 150, 143, 65, 67, 12, 148, 27, 
                   113, 5, 89, 87, 98, 102, 16, 71, 126, 3, 5, 148, 43, 98, 
                   71, 64, 138, 2, 116, 129, 76, 50, 15, 113, 10, 78, 10, 141,
                    7, 155, 83, 11, 21, 3, 35, 154, 41, 32, 40, 77, 71, 70, 
                   46, 22, 156, 58, 39, 147, 137, 48, 82, 61, 72, 14, 140, 27,
                    9, 20, 76, 76, 13, 7, 84, 68, 65, 5, 5, 98, 98, 72, 64, 
                   151, 116, 19, 27, 9, 145, 91, 99, 104, 88, 113, 143, 1, 
                   105, 51, 16, 73, 26, 29, 146, 97, 86, 110, 10, 128, 139, 
                   123, 132, 155, 137, 104, 11, 152, 56, 31, 39, 124, 112, 83,
                    1, 49, 24, 29, 76, 57, 30, 125, 115, 118, 27, 28}], 
                 "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{1, 4, 2, 5, 6, 2, 2, 5, 6, 7, 7, 7, 1, 
                   3, 5, 7, 6, 3, 5, 4, 1, 7, 1, 2, 7, 2, 6, 1, 5, 4, 3, 6, 4,
                    2, 1, 3, 2, 5, 3, 3, 6, 3, 3, 6, 2, 3, 6, 6, 3, 7, 6, 2, 
                   1, 7, 6, 7, 2, 1, 4, 1, 2, 5, 5, 1, 3, 1, 2, 2, 1, 2, 2, 5,
                    3, 5, 7, 7, 1, 1, 6, 4, 1, 2, 7, 7, 3, 7, 7, 3, 5, 2, 6, 
                   4, 1, 6, 3, 3, 4, 4, 7, 1, 4, 6, 2, 2, 6, 2, 6, 2, 3, 1, 7,
                    4, 1, 4, 7, 4, 7, 3, 6, 6, 2, 5, 3, 1, 5, 5, 1, 6, 2, 5, 
                   3, 4, 2, 3, 4, 7, 1, 1, 6, 5, 6, 4, 2, 4, 7, 5, 3, 4, 2, 
                   6}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwNk/9bywkcwBfJkqj0eLLQ4tH2RORyri/0XqnH5NDX63MuGZ1KF41cV04M
h3Rkj46tlLrqHrvTl52Sjru9pzotom9ck9Ra7UutZV+ypjLXD68/4PU8r5f7
wbTIQ1YkEunmLAx1Q9mXHmaUxGU0Ef8pkXRtYYxyyzAke+899vrRONJTjpOe
qyeRa1dbGbj7A0pMJ+J+kutRoMwpMl6cRPIakZpimMaGjZ8er3XSoZrU016w
9RPq9t4+4C58j8It6xZdt5agOLYo9WPuDBIvfBIiup8j083R/7KtCRjOr5iE
7QeUNm9vsj9mBHXb4uOF22RIspsTsTZcj3yPyQD6P92Q6XfuD5vlYvC9FBpK
y3mPnPwzATdaDNghfpXYf3UEhYsjrtKU46iOqjCJ5mkwfDM1VHa+F4m6oMjO
vh5knB1InS6pBfOcTekbUIylPYlWAg8N8hXxjAxzD7DIEa33hBpk6d88LBmW
Ib/DYmcz8Bj5WwdVY1NDyKbWfpVlN42Zx+KJC85ylMi7fOhMJWaSyO1RpcMo
SKw6pTBOIPtBqzUnawKJI9mHv9ghR+lniS+T8ifRHHHQyqx8AL56y1N2pBRd
6IG5rpJ3yE1Jjy9vrQf11qbbH6J1QPaLnqYdeIay3kyKY7IICdGtpFO8btTN
z76T1zyJksPHSxbEGkBsCboRTVWA7JHb9dMKCZqTaF/vPPEC6WXFK3dtNkD4
vSTS9q4OYG90TBhMl6JEu3SfyWcUmcJGx7f2sz5HVgXY5CtB56iyuAaZQRwy
mJ2Q0A7cFYR8RtkHLJ1d/P6rGpRGdV/gBSJ4V9Xi+pa32DA896/E3irkxFJS
RJYB8D1YU41WGiCrIs74uz1HYo7h2wxRI/CT6ipo14zIlV2IG0mbQIHb3P64
ZwbketWviurRoi9PvqD+hQyYnj/TQtIVyFnyY26IVyX69j49eeKHUSBZtNPF
qu9RdreA+U1uNXq3yZ+czDeidDU3Z2FBD7CXaVdRCiuRbuKNUsofIil1fazn
XQ1yqyVFLSVtwEx64Ko6pwdBf7l58HQ38IfvDPF3VEGm0SZ7ZrQVfV31zukJ
KhRwQv82+L1E80r1yf7DMiQKYsQrZZ1IZ9VMFV6Rg9C2uO2Rhw7C/ywatVK+
Rtalmrx1+mEUVvzeWZjWgQTHTUdMdCI7NHKRE+U3ZNkssN6laMLS0xwvSfR1
KFU3XrHPeoPeNWE2y4OHgFqczGtKm0IXeUhMJV+PbOe9R2PvN4KDf/C/A9Vy
5N/yP9tb8gm4ZZ8HX65WofS2QbsnsRVJvLybnj6vkJucM2+EkIEwzNo/yNSP
1Ps7ppalj4BDWJtnqncfMrpQvp+tQrWT36YjHVJgaVasyW5qxvAl5/UtRVrg
bjBsHNO+A9LQ/BvCdj3w72Tc45aNQIMrpaKIZgRmfeD4x81mcHjTl+VQp0GH
nPcpZ7bNZdB/2eVzd/ckNFgEVV4+CuwgP60JizED3y9KIcoxQEP5vi0XHbSg
A5VV3UI1sNXOQ7/WjKPAwlksnP2MumjGpT7lNRKrXS6OPRkH6cypZ3FL2lGc
nOeL95UoMFFD93gq0Py4ecj+aBeSjDSnQ99JgRG805YXMDPb2VL3t+Qx+B/2
z5Ha
                  "], "Children" -> CompressedData["
1:eJwdiXl4DwQAQN8315CSXIlEKbo0oaJoRTV02JB0bppjs+u3e+wyNrsdM3TK
WaRDOXIU5ahQoZMOOt063TzLH+993/teu6iE8BFBQHJwjcIj00MDgcjMiPo1
ERafEj0yOhDSfdT/v7qGoAvUojZ1aMhF1KUe+prB1Oecr3rWhZ6xAaddYCMu
JoFETjnfk15CYy6lCZdxwntoSjN6M8/mtOC4vWjJXK+gNce8nP9sxb/O8R9f
sQ1X0pbZduYWrqId7bmam3nZa+jAdbzktbzo377gXz5vR56zE7P80+s56g0c
8UYOexOHnOlBZxhCFw7Yjf1WeyvT3WdX/rDK3+3Ob97G7dxBD6b5q1P9xZ7c
yV387BT3Otk9Vno3FYZS7k+WeS996EupQ3mM+7ifBwjjRx+lH/0ZSIk/OIBH
KPZ7H2S3D7HLh/nOSX5rkd8YTgSDGEyhXzvRIUzwKwv80vEOI9/HeYKd5rnD
XJ/kKZ7mGbab4xdm+7mRRDGczxzns0SzzbGOIMutjmSLo/jU0XxiDB8by2bH
sMk4NhrPBjP9yAw/NIkAyaSQSibprjfNNNJZZwYfmOr7ppjFWNY6jjXmsdps
VplDLsm+Z8B8xrPSAlaY5AQmstxCppNoEQkucxLFxFtCKWXE+a5VvGM5S63g
bSt5y8m86RTecCpLnMbrjnGxsVYT4yJHex4fqjbE
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{8, 113, 19, 96, 142, 78, 140, 
                   76, 11, 153, 53, 143, 13, 155, 93, 133, 85, 127, 110, 132, 
                   135, 11, 102, 99, 39, 8, 78, 14, 52, 21, 138, 3, 18, 107, 
                   116, 70, 92, 113, 15, 39, 54, 72, 56, 150, 35, 51, 152, 
                   105, 63, 138, 1, 43, 32, 46, 54, 31, 50, 11, 88, 76, 154, 
                   64, 50, 72, 131, 91, 84, 96, 109, 147, 71, 125, 61, 16, 13,
                    27, 155, 86, 50, 148, 149, 69, 97, 16, 28, 26, 9, 63, 5, 
                   98, 132, 27, 89, 79, 46, 128, 123, 155, 138, 27, 128, 65, 
                   75, 9, 7, 98, 5, 7, 104, 142, 133, 122, 78, 126, 97, 9, 66,
                    143, 67, 34, 148, 92, 1, 16, 5, 116, 124, 33, 85, 140, 76,
                    143, 156, 146, 49, 154, 112, 145, 152, 151, 147, 136, 117,
                    119, 87, 97, 115, 77, 16, 28, 22}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{3, 2, 4, 4, 3, 6, 3, 1, 1, 6, 6, 1, 1, 
                   5, 1, 4, 7, 4, 1, 6, 5, 4, 4, 4, 1, 6, 4, 7, 3, 2, 2, 5, 3,
                    5, 6, 7, 6, 5, 3, 6, 3, 2, 4, 2, 5, 2, 7, 4, 5, 7, 7, 5, 
                   2, 5, 1, 3, 3, 1, 1, 3, 5, 2, 7, 1, 1, 1, 5, 2, 1, 1, 4, 3,
                    7, 1, 1, 7, 1, 6, 1, 4, 5, 1, 6, 2, 4, 2, 5, 3, 1, 2, 4, 
                   7, 3, 2, 3, 7, 6, 1, 2, 7, 1, 1, 1, 2, 1, 2, 2, 7, 5, 2, 2,
                    3, 7, 2, 3, 3, 4, 6, 7, 7, 6, 5, 7, 1, 2, 6, 1, 4, 7, 3, 
                   4, 2, 5, 6, 7, 6, 1, 2}], "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwBXQSi+yFib1JlAQAAAIoAAACglx/3uLX3v8haiDO4GfW/YBltaoX497/A
Xs5IDS78PyjmnTFkV/C/TLI9JXY8BEBQWjPNmOuvv1TD/6z9HARAaFzZ1Etj
+r9w/pQpJIv2v0Ac83vHzgJAWHQo/mda/r+YhRFH7Qb8v4BFKYXl+PC/SN1W
4kNU67/of3RC9RD3v/CzCVDaoMI/8GcuHmNg5T9wYFTimcP5v4Alpdrugfi/
4CF3BhyW8b+QD4s8V8ftv3idJuDf4+2/gFUIik+14b84nLo66br0vxDfsD8S
Ftm/IIGJJZfV6b8gZNP/Lwb7vygHPpLDmPC/0Bx3HCII4r/Yiq/913XyP5CC
L0npYuI/oFUs6vW+9b+AVxpqvv7fP1Ccv/yS6/G/OPA3vCOE8b+gwqLn7+v+
P/hx/8vb9sG/UJYvyQBt8L8w5jG6hTz/P4jmA4UDgfC/qGqPYFNQ6D+I8fRE
gS7YPxhJ432SW+g/BG9vDit8AEBgUvn/NHHWP4ihUUA9JNi/EN+18CFZir/4
Ha8lfKitvyC4+lLx2/C/sAV0bsYR7794kpxye1rfv1A1tDstrd6/mDHV/HO9
4r8IXsmAwsbyv7jly3WoZcO/QMQxrmRN7r8oqwxfQVDWv/hHfmRnvOK/uArr
ldWU4z9wkIKJZBGov5jLTwF8cqq/2K/x59UX/D+4jRZiF8iAvwDu8k6afaM/
wOKehD5dt7+IbSyzvZDgvxih04tqkcw/uCNhHSyv7r8Yzcr2Uyfmv1CMyEa5
5+2/SD+fAIo+8j/YVbHm29T3Pxh9OlbXY8E/KN1Q4teVwD/QjiyQPtDwP4DC
6MHZmu8/iEuONl0G9T+gKuOUhUHxP1gtobmQ/cI/oIpFQWap1j/AI0SmOhno
P6iSUYUwyus/CDaeAMFP1j+4AUmPfBXUv2D3zHbFCNo/SO+UramN4T/wHqq/
fcXBv3CsXIsobOE/SGIzQhHwwj9A+qr1YbDBPwj5S41xGfW/kDeSqmvmkD/I
CKKEbXnAPyhklYGqdOC/EEVXDQZC+79AvFGj7ejxPxBcyZlo0NS/WKvmL8IO
4794ri1BdifUv1i+m2d8l9O/gIRrB8Gn8j9AyYSzyw/Tv4CuP3PSKN+/WEwJ
Pvn9p78osUf7MsSwPygCHnLojdC/kP3qZ2NH8r/Y4VaMzJjav5BusBUkzeg/
eEppGD1f6D9whjcEgyfVv2D5f3uKKfK/mKd2spCi6T+IyJzkJgHoP+hkKn9p
6fU/2C6LkJeP4L8QJCY3a2jkP8C9Vd75ZPc/AADY88gO8D8IZkZ8Tri7v+gj
p1JcMdO/wGiOOL+15r/Qi5NywtvhPzjlEMpvNOw/GHfVieJC4r9wFFpuV7XC
PxiqStduSOM/IP47UWo687/glDevmjv8P+gQZDxJTee/8IJik+6G8j8QWQXV
2fb6P/AKi0QR/Og/uBPA+vNwwj9I31559pbrPwC9SyUoXP0/wNn2EkOY8j8V
VVd4
                  "], "Children" -> CompressedData["
1:eJwdkmV0EAQABu8hII2AdEt3dyNSSg0BaQZsoyQG2xhs9EZ3GHQblHSHonQ3
0h1KKih1DH7c99697+/l7NgrIDge0DdR3AQERtQIDQ2MbJo4Tur17BcUEhRa
omyXd/+YOOK95wPis94EJETX+cYPScRaX7vGxKw2CUlJRnJS8IuvXOVLV5qS
j0hFal6YlTSs8H+X+58f89y0pGOZ6cnAM382I5nIzE9m4Uf/9Qf/canZyE4O
cpKHvHzCEp+am1ws9omLfOxC85GfQQymAAV55AIfOt9CFKYIRXlgT4oxzza0
pTglKEkpqlGd0pThb6tQlrmWozx/Ocf7zrYCFblnJe5amTvO8rYzvWVVbvq9
NfjOG35OTT6lFt963bp8xjdeszZXrcMVZ1iP6dZnmped6hc04JJTbEgjGjPZ
i7aiCQFcsCktmeSXTLQZzWnBBP90vOf9inOO86xjPWNrTjvGdrTnlD3owGgD
6chJR3nCkR63E8fsTBDBHDWEbsR6xC4ctiuHjLE7IzzocA/4NfsdZi96s8+h
7rUPewylL/34wyGGEc7vRrDbwfZnkJFE+5sD+NWB7DKKnUazwyiHMNChDGO7
A9zmcEYQw1Yj3WIsm+3vSEaxyQg3Ojquk3A3GOZbSTce0A==
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{113, 9, 98, 12, 72, 37, 9, 8, 
                   128, 27, 20, 154, 145, 2, 127, 146, 64, 94, 7, 76, 110, 
                   150, 50, 72, 13, 135, 105, 5, 99, 116, 16, 126, 98, 116, 
                   33, 150, 76, 38, 64, 154, 69, 50, 66, 78, 35, 140, 65, 8, 
                   11, 138, 52, 11, 75, 65, 152, 147, 154, 136, 16, 26, 42, 
                   148, 69, 74, 57, 91, 76, 96, 97, 22, 152, 28, 140, 92, 10, 
                   124, 143, 82, 110, 98, 9, 98, 128, 9, 84, 98, 14, 46, 103, 
                   113, 39, 1, 148, 29, 54, 52, 75, 9, 65, 72, 65, 1, 51, 71, 
                   102, 27, 114, 43, 98, 1, 113, 31, 73, 51, 54, 15, 156, 83, 
                   139, 155, 32, 140, 14, 144, 11, 135, 109, 125, 112, 72, 
                   118, 48, 87, 86, 151, 26, 27, 61, 25}], "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{1, 4, 3, 5, 5, 7, 3, 4, 7, 4, 1, 6, 1, 
                   2, 5, 2, 7, 4, 1, 5, 4, 1, 2, 2, 5, 7, 6, 1, 6, 4, 6, 5, 7,
                    6, 3, 4, 6, 1, 7, 3, 5, 4, 7, 3, 5, 6, 1, 6, 4, 1, 5, 6, 
                   4, 6, 7, 7, 4, 1, 7, 4, 2, 6, 5, 4, 4, 6, 4, 5, 4, 3, 5, 5,
                    2, 6, 4, 3, 3, 6, 7, 7, 6, 1, 5, 3, 3, 5, 7, 5, 1, 7, 1, 
                   4, 1, 4, 6, 7, 1, 2, 4, 4, 6, 1, 3, 3, 7, 1, 4, 1, 2, 2, 4,
                    7, 2, 4, 4, 5, 4, 2, 1, 2, 3, 3, 6, 7, 3, 2, 6, 2, 2, 7, 
                   2, 3, 7, 6, 2, 5, 6, 4, 7, 7, 4, 1, 1, 6}], 
                 "NominalSplits" -> {}, 
                 "NumericalThresholds" -> CompressedData["
1:eJwNk2lM0wcYh1vlMgpWRKhAAjqBJgI2OI/J8C3BA5RIAWVYmIiCFtRZwTFw
TplzypGNapQU5JZp5RhV0AEbvMAKFjnWKnhgZH9aKm0n5V/aQhUK64ffxyf5
fXiedcfORiVTKRQK3zLhevnm9iAzMFx8XZ4EDSH9arvU76kWGLs/m795nMry
PGQQJSXMI3+hc+d8lRrtVnk39fCHIEf6xKP1hQmbb589PBb8AYm+spXKGB1K
gPdVSzO1Q/JuZMqvWIfEDEf6cjW1g7tDo4oa00DO2rSxrHodktcu9C44G5DH
i6wc51j4ifT+8MZJVF26vtbgoUfmts6vtXUmFNzVcLL2z6Boub9H0Q4TSpjN
Rx0cjMhz6KHY/NkFgl+7VtSvacejdeKFclYjStWyW9b1eoz9Ys/t5JJSVDlR
L4t+MqBA4hSi8SORNvC2ZmkWibFhpdbu41JkRzbBjeA6EEaU/Wew1aKqYTI3
7IwCGVReVqrgFfKe60/9cUOBFfptNM+TM6iyXW9/+oAS2A2PmBuvqJDpRtta
fFUOzJmi2b4tJGY2brp2/7gRyOjAKyUtcswp87ZatYwAqVUfdatrDVCqVJns
4EmgyxarYUAP3FSdTviLDlVawaLdpudAxrlXzzoTQOd8sqZpJpDvXPlau3EI
ndqWL7yfW8qi7coOLNeZgW2/LSN1lR7ZT0PEwpMDwJJdyzVEG1Hy+N+mXB2J
hNrm8dyhN0DvTl3kfNQDWftiZLqoD7N77uFhkQYzax+od49r4PPWAJXPTmsW
4eNYcT/qDUqnTk2mq/vB5KhZ4jv8Huk3m/xuM0nY7luQ+6hRjh1h6SZyXI4C
1zZmm/8H7DD5+yDjFfLzCwpGrIeBmLIyK952Im/eeTj9+ASa+J7raHuM2Dw7
XZk2/BE821fWHvhnANm/Hysc9CNge17VXKd+FBldHXNuVdMgSNuSv4YtB7ow
LdimzQjEiXulrWWDYLqV/218shIpESkK1xA58gPEhiMXlZid15k4CmpgnWbF
qNLVKPih9cr34UqQive1eEdOAzPhx/6IQjmEdqmsZjjPkZJi7ZSTX4F2NbX7
Fc+egeS8b+x0ohxYpr5M9uFXSOm1s3OP7kZRQsp4nkEPrK2nV5z/NIHMjAD/
EhcCJd0ZRZfWvUNuv4D8W/wSmfPlu9yWkMgunjuxmGLxb2zv6jtiscXj4Le5
h3ohs2SLC7YIwXMxaGjzyGswRWgv71h/F9kDR8Yv8ibwqM37B16jln8PxHsr
k2qAbxchNCZMQnaprVeQQYGhvx3bV9DxAhnhUYLVvUqU9jb8nCjTQ2zgO8ra
y3KkVGwnHcsIFBkHqInJoyjdrAvkLk6jqtprowdXDQyr9kvn5TJk2OdlxNf/
BUK/UPOHh8NIiVF+E1fWCdmy6rjCgCng0SOX3akkgKvdQHtULANRdcIFW7bc
0tOG0YPGKZAqdp9z+NIA0vDAJHunUWwO+I6T80YJoYX5SW5aCRINIXXDEXrI
HDzjShVbOnfQxoSNTAA3JYRqdc4MlLb9Xox4M4gGoz0fHjRDqGDNpmYtCf8D
e/R3tw==
                  "], "Children" -> CompressedData["
1:eJwdiWV0FgQAAO+Ro0GkpBGRTqW7dKCoI6RhwACpwbfBGN0dQ5RQUglRQFC6
Ubq7u7u7jsGPu/fuXfYW4SGt4wARQbEKCY2qFAiERtdOFBvBnSLD2oQFihRv
++7HxBLnPXGJR3xGMJIELFA/JyFBJGK+qfmQxPxlEpLyxmSkICWvTc4r//Sl
83xhKj7gD58712fOMQ1peeps05GeJ84yAx+RkUw8tgiZyUJu8vDI381KNh76
m9mZaQ4+5oE5ue+nfMIMczHde07zrlPNSz4KUog7TjE/v1qAX7ztZG85ycJM
9KYTvGFRivGzn/GT1x3vNYtTgh8tSSlKU4arjrMs5bhidS4bY3nGWoGKXLIS
VahKZcZ40dFecJTnrcY5R/oFXxJMDb7hW85akzN+xWlH+DXDPWUtTjrM7xhq
CLU54RDrUJdIulKP7zluBPVpwDEH25BBNqIxRx1oEwZ4xP42pRmHbc4hA4TS
gpb086B9PWArwujjfluzzzbstS17/IHdtmOX7dlpB3bYke12YpvhbLUzW+zC
Znu7yV7+b0//sxv96M9Go+hODzcYzXp7sM6erLUXa+zNavuwyr6sNNoVdncA
US53IIMYzDKHsNRuDqWrSxzGvw7nHyNdbISjGM0YAo6li4vs7N/GsNBw3wJ2
yyrK
                  "], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{93, 96, 113, 76, 6, 142, 75, 87,
                    9, 5, 145, 79, 116, 1, 72, 46, 51, 67, 9, 2, 76, 64, 5, 
                   128, 31, 8, 140, 123, 151, 154, 132, 66, 7, 146, 16, 148, 
                   41, 65, 57, 45, 52, 146, 150, 77, 133, 17, 143, 135, 72, 1,
                    5, 24, 151, 20, 21, 98, 42, 127, 122, 148, 30, 9, 27, 65, 
                   70, 88, 78, 98, 59, 90, 43, 51, 33, 32, 51, 40, 116, 47, 
                   117, 25, 16, 26, 143, 53, 76, 96, 27, 20, 9, 15, 9, 98, 
                   151, 76, 54, 151, 98, 4, 18, 5, 98, 5, 5, 38, 52, 113, 126,
                    64, 98, 124, 97, 128, 81, 139, 155, 11, 17, 16, 101, 96, 
                   137, 14, 11, 131, 133, 144, 24, 71, 26, 65, 48, 69, 135, 
                   114, 27, 33, 140, 29, 113, 11, 116, 28, 140, 61, 124}], 
                 "RootIndex" -> 1, "NominalDimension" -> 0|>]}, "Processor" -> 
             MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 7|>, 
                "Key" -> "(f1f2f3f4f5f6f7)", "Invertibility" -> "Perfect", 
                "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
             "OOBConfusionMatrix" -> CompressedData["
1:eJzt3X+oX3Udx/Gx5SwMJ4llKbIkmVTOXxWKf+jN9nXsXgxXS9NcXJu6IrdC
mDKwVfg7nDqxKd6rYF1EzbXMnKk0SwOx5hA0FRmxCTMJk63MFSUtPK/t7u05
93zP93vO97w/n8/zj3E45/v9nvv9+djrfT6/Pn7B8oUXTp82bdpY9u/CA845
9/ahlade9sAN8+/YvX32EzNn/XTS/o1HzDpi5qTjN09sf+X83dvnbn78u3/t
rDz16x8bP2TR7v0tl22fe/nu7dW3/OI/x+ec59cHH/bDNZOO77z8jLe+P2nf
bnV/bYuen26/7dtf/eLIpOeh40V/Z/XZ6x67bvf2hAM/d/dFOect2y96fvb+
9nF2q+fx2bHDrjt90vOxt2/KzmO3K7L7aWtvL3q87r84+/zs8Uey12XPr+1n
sudbdN7V2fdmc/Y90fPQectexyvZ57ii5H2wr7vs/XrP88zu/+TdnZ3vnFp+
fm31/PR4+77Z++/Ivof2+Pwv/2jp8pzjN/zsvpeu77z3cyh7XUX3t39H+/Z+
9v0/Pvs+6na7b/+ufb32/Pq+2c9b7+ONmS/2dWhf70vR52Nfl36fT/7tj7Pv
zvk9Fvmmx8XuW2f9rpP/0cG3Xn3TeVLxTZ7369uV2e8I3/b9Pup9qeqbfk+P
/fyM1+4bqt835b3QfCO/+fBt9sKr792W44Y33+rKb158G5/5l2s3Tnrf+/Vt
66GP73qg055v+j0qz6We3/DNh29N57dXF2648ex5+NZ0fvPim/aPnXPK2G+G
8a1p326buGfpWAff2vLt89/4wNLRRd379vayT330uU7/vl36h5lnPZ2TS736
ZvNcVd96rU9V99ftm/Kb6lZ8I7/F6Fss9akc8Jrf2r7+Vta+cNerhzy0ZAjf
8C0u36hPfee3fttPq/YPUb8SfMO3GHyLJb9165vq4qby29wdi7a+nHN+b/nt
zr8fumPxpHbPM+/YMDFrZO/jXjrwmTfOG9rryurM17Z825VdF8G3Zn1bm10v
jMW36TOOPmb9gnR8o31h6vxm69Nfrjl8/1VD5LfQfNP3jfyWVn4r803tJ/36
Ni/rP+o1v1XtH/LY6AvPnzSFB1V9U7+5WH1Tvy7rm/oVe81vVX3T68S3tHxr
uj61ftbt27bs/397/c32Eya/+cxvXH/Dt0HWp6HltyLfdH/1E8a3qX1rq/8b
9Sm+4Vv39WnR9Te1t+Kbr/yGb/g2lW91j8+K1TfdX3Urvvnwran6dDxrd8e3
3nxj/pB2+ofUNX5hyZZVm67JcQDffPhm+8HHnt+89u8tGo9Q1Tc7Dgzfmslv
tj5VnsM3X77RflrNN7XjxVafxu5bU/nNumOdw7e4fCO/4ZtH3/ptP63aP0TO
4Ru+4Ru+te1bU+NP1d6Kb2n6pv6lodSn+ObLN10vqNu3useflq0PgW9x+hba
9Td88+Wb9/xm/ShaH2KPY2+uO26ig2/4hm/4Fp5vOk/RuC/yG77hG76F7ptu
t+O+8A3f8C2c/m+6PoZvUz8/XZ/DN3yL0be6+veS3/J/x4Pq/1bmW9k6pN/7
yJVzvjTpeWhepVB8S319Gfv/Ob5Rn3rIb3X3f6ua32x9+ux1ozteZP7ePduy
dUO9+NZWftP7w/y9+NZmfitzZuTS933oneG9z0N1a+q+hZLfqE/xDd+q93/7
86axiZNHin27M5v/Bd/q9Y35Q/AN35r3rWgcP/mtGd90HY38hm/4Njjf9Dg5
h2/Up559q3v+N2/9Q/CtGd+0Hdvv9VtuGurdN7XP4hu+kd/wzZtvajd78daL
V16Sc95B57d/rztx/lvDe68H4hu+pejbstmbn3g4J7fiW3/9e+24L+pTfGvT
N+Ynx7c6fdPxonH81Kf4Rn7Dt1B8U31adP2tLM+R3/AN3/DNq2/dtp+WzcuE
b/iGb/X7Zsfdxj7+tC3fivIcvuEbvpHfYvHN5rm6fFOdjG/t+tbW+gu2X5o3
31jfOS7fiuYpsftF60OQ38L0jfxGfuvGt7rXX/CW3zpm3Qq7PgS+4Ru+xetb
6Pmt1/5vqlvxrR7fWD8L3/DNj286bttb8S2M/Mb6p/iGb923n9r5SvDNt2+x
5zfG1+Nbnb7p/rZfCb5Rn5Lf/Pq2PBv/im/V+ofY63P45iu/UZ/iG/mt//69
1jl88+Eb+W0wvm3N1mvBtzh9s87hG76l5BvzI/Xm28431x030QnHN201z2bs
vmmcBr7hG/VpOr7peVz/39NHFwz5md/Sjm+227XZeq1F52V9GXxrwjfNi5ea
b6pPd2Xtbm35Zsd3Ve0fovmE2/at3/yGb/35xvyWtJ/m+RZqfrP1qb0+F5pv
XH8jv9G+gG9l7Qu6Pheab/c/feRTG4bxDd/Cym+x+RbK+s6PZv2EQ/GN/Naf
b9Sn+JZCfrO/V+scvsXpG/kN31L0zTqHb/iGb3v3Nc4W38L2TdvfZe0Q+IZv
g/DNzufrzTfyW1y+6XOUc/iGb/iGb7H5pq29Podv3fnG+PrufPNen+Jb3L7p
uJzDN/IbvsXjW9vjF7z4pm1R/zl88+0b/UPwjfxW7ltR/zl88+0b+Q3fJp83
9PH1g5o/xPYrwbfB+DZ3x6KtL+dcl8e3dn1j/fq4fNNW7a345jO//fj3P3no
1WF8G3R+Y3x9HL7p/tvf31m58Sv1+xb7/CFaHyL2+pT16/EtZN/0fbN1K/mt
3fzmxbfQ8lvV8QvUp2n4puOqW/FtML7ZdfvwjfwWo2+3ZfPhtu2bji854Jxz
b885P769u02lPsU3fIspv9nvkx3fqm3Z/OTyTfOcx+Yb9Sm+4Vv4vmnfOpd6
+0KRb/Ic3/DNg2+hzG/Ztm/WudjqU8af5vsWe/tpWfvCtmw+dXxLwzdtr83W
+4rFt+kzjj5m/YJ0fLPtjKHkt9TXz6I+HYxvym9F475SrU9D8Y36FN+a9E3r
CIbumx5n+8+Flt/wDd+68W11lh/xLY38Zs+r63Ox+DYv+38I39r1Te02qY0/
fS573aH7pv5vdv36B0cWrz1lpDnftB5lVd/K+occdMWcf35wKHzf6spvjK9/
93i/659y/S1M37zmN+WXbvObrU/VTzh138hv/eW3tutTzStJfRqXb1Xr06Lr
b5pnE9/S8E15NRbfyG/4NpVveh7Kc958S61/CPkN3/Ctft+0X7ZONf178Q3f
8C1U33T/onWqqU/xjfaFSY4xP3mQvmlrx7fiG755zG+htS8wPsuHb3qcnMO3
en2z88zhW1j5re31ATUeAd/6803bB9ccvv+qnO8/vpHfUvaN+jQO3/T72jMe
gvaFVnyLff4QfMO3Nn3T/txpv/3B61OMlyC/kd/+v191/QV8wzcPvunxRf1K
tD974dX3bstx0Gt+Y/0F8ltKvtnxp/iW/z7YfiXkN3zDN/++kd+6801bXZ+L
zTf188I3fMO3dH3T7cpztC/gG77hW2y+aV/j+Lv1TdfrvOU3fMv3re7xC97n
f8M3fLsj5/XadojQ6tPUfdN8luQ3fMO34tdb5FzqvoW6vkwovh2bzQ+Fb2H6
1u36zm37VuRc6r55z2+h+0Z+C9u3UPJbkXP4hm/d+Bb6+qfefSvrr9qrb5p3
PDXftLXjvvDNp2/6nnrJb6HNH+LdN6/57V/rTpz/1rA/36qOX1B7K7759K2p
/Kb5MB54+sinNgyT35r2rWj9LK++9Xr97bVZi0e/kLMeWJFv88w6sXXlN/u7
OuG1u371zLf8+JZq/95lszc/8XDO626qfwjX38hvMdan9rzq31s2vpX8Fkd+
o/0U31LyzdanReNb8Q3fUspvWl8a3+LyTVs7vhXf8C0l38hvcfhWNv7U1q34
hm/4hm+h+NZt+6mcC903xi/gWwq+bc3av7359na2joaX/GaPa32IUH0LNb95
bT/VdSp8m9q3UPqHpJrfbH2q/nP4Rn4jv/nLb035Np7NOxOKb/3O/6Z2CHzD
N3yL37dU8putT5cccM65t+fcn/69+IZv+Ba6b3p9tr2V/IZvbfjG+vX41uT4
ejmHb/X45rV9watv5LdmfLs/G7ecum/aXrBl1aZrco579U3t1958I7/hmwff
yG/73l+/d1u3evWtqfym/kj4Vs23nW+uO26ig2/45ts37cu51Hwjv5Hf2vTN
zifYq2+Pjn967UFn+fXNzrvUq2+ab66qb9peddTG01bkHMc3n74xv2XYvpHf
BpPftNU4KVu34ptP38hv+IZv3ftm3ZFzofs2N5v/rG3f7Pw+g/LNy/xv3vqH
1D0+q2i+7lh8U53Zr2/e1q9/dPSF50/K+RxC8Y38Vk9+k8/ktzR9iy2/2fpU
4yHwLU3fqE+pT2P2TecrmmfTq29e6tNYfLP9Q5Tr8A3fYvBN57ftEF59I7+R
3/DNj2/err+VtS8UOYdv+IZv+BZqfrP3s87hG77hW+++qb0S33z4Zp3DN3zD
N/JbbL5pW9Temsr6C/Z1xe7bJd9csumEEXzDt3Z9U3ti074VtbeS3+L0jfyG
bx58a2v+t6Jx/F59WzZ78xMP54x/bmr8wp3ZPPo6vjz7+/iGbzH4pv7Psfqm
43YcP/Mj9ZbfGF8fp29qV4jNt9jzm/07Ns95y29efduVzfdJfovTN7tdO3HP
0rEpxn3h2773H/T1t7L2BeW5unzbnNWBbfuWWvsCvuGbB9+85De7b9shvOc3
1l/At0H4Rn0ah2+2HcK7b3XXp7Z9YVC+qd0D3/AN35r3TceV51LxrSi/yR/a
F/AN3/z5ZufFq9o/5ME1h++/aihd3/S4bVl7b1O+lfVf6dU39QvAN3yL0bde
85t9//9068UrL5l0+3g2/2oqvnH9rV3fbL8NfMO3On1TXtP1udTyW1u+dbLf
deq+kd/2fd1F8xXjWz3jF2yeq8s3fW74FmZ+k8f4Rn4L2Teb58hv+DZVftP/
W/iGbyH5pn07L1Os+a3q+AUv62e17Rv5Dd9C9k1bzcvUdn5j/AK+4Ru+lfn2
dpZXqvYPUZ4LtT4tmj/k4Iu+M+OTI+31f7Pry6Tmm+3vhG9x+Vb0+XrJb/Z1
X7Bl1aZrcs7v3Tfym0/fyG9x++Y9vxWNr7fjW/Ht3S3js/AtBN90XTw23+oe
n6W6Fd/izm+2n4iex/mPbJxz5ln41pZvoa0PWNU3XXdvyzcdf/HAZ944L+fz
9t5+im/kt5B9oz4djG/6vqlutZ9D3fOT4xu+4Zs/3zTPWay+6bic67Y+Zf43
fBuEb2XzW45n82rh29S+2boxlfxmP++x/V6/5aYh6lN88+Eb+S3N+rTp+UO+
9vL2Kz48Ur9vuu6Nb9V8s/M34Vs9vql/wqB8mz7j6GPWL8A365v1bFDzh9h1
qslv5LeYfKP91Idvbc9vqetzTfnW1vzk+IZv+IZvul15ru72hbL1ne38vdY3
O08bvqXhW2jtC1XrU9XP+DYY3/aMbx194fmTpvh8qE/xjfxG+4L27bhW7Xtf
v96u94Vv+BaCb/b3hW9x5zd93r2Oz7LjW/EN3wbhW2j1adXrb6pPGX/an2/2
c+h1/ILyXNO+sT4gvjVRnxatq0B+23ereTzKfLPzQHrxrd/+vVcdtfG0FUPN
+UZ+w7cmfKM+9ZHfQlkfUHXr/wCanuok
              "], "Calibrator" -> 
             MachineLearning`CalibratorFunction[
              "TemperatureScaling", <|"Theta" -> 1.0160959319856193`|>], 
             "Method" -> "RandomForest", "PostProcessor" -> 
             MachineLearning`MLProcessor["Identity"], 
             "Options" -> <|
              "FeatureFraction" -> <|
                "Value" -> 7^Rational[-1, 2], "Options" -> <||>|>, 
               "LeafSize" -> <|"Value" -> 5, "Options" -> <||>|>, 
               "TreeNumber" -> <|"Value" -> 50, "Options" -> <||>|>, 
               "DistributionSmoothing" -> <|
                "Value" -> 0.5, "Options" -> <||>|>, 
               "Implementation" -> <|
                "Value" -> "Default", "Options" -> <||>|>|>|>, 
           "TrainingInformation" -> <|
            "Configurations" -> 
             Dataset[<|<|
                 "Value" -> "RandomForest", 
                  "Options" -> <|
                   "FeatureFraction" -> <|"Value" -> Automatic|>, 
                    "LeafSize" -> <|"Value" -> Automatic|>, 
                    "TreeNumber" -> <|"Value" -> Automatic|>, 
                    "DistributionSmoothing" -> <|"Value" -> 0.5|>, 
                    "Implementation" -> <|"Value" -> Automatic|>|>, 
                  "NaiveImputer" -> Missing["KeyAbsent", "NaiveImputer"], 
                  "EMIterations" -> 
                  Missing["KeyAbsent", "EMIterations"]|> -> <||>|>, 
               TypeSystem`Assoc[
                
                TypeSystem`Struct[{
                 "Value", "Options", "NaiveImputer", "EMIterations"}, {
                  TypeSystem`Atom[String], 
                  TypeSystem`Assoc[
                   TypeSystem`Atom[String], 
                   TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 5], 
                  TypeSystem`UnknownType, TypeSystem`UnknownType}], 
                TypeSystem`Assoc[
                TypeSystem`UnknownType, TypeSystem`UnknownType, 
                 TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
             Dataset[<|
               "Configuration" -> {
                 "RandomForest", "FeatureFraction" -> Automatic, "LeafSize" -> 
                  Automatic, "TreeNumber" -> Automatic, 
                  "DistributionSmoothing" -> 0.5, "Implementation" -> 
                  Automatic}, "ModelUtility" -> Missing[]|>, 
               TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                 TypeSystem`Tuple[{
                   TypeSystem`Atom[String], TypeSystem`AnyType, 
                   TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType,
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>], 
             "InputDimension" -> 7, "OutputDimension" -> 1|>, 
           "AnomalyDetector" -> None, 
           "Log" -> <|
            "Example" -> 
             MachineLearning`MLDataset[<|
               "f1" -> <|
                 "Type" -> "Numerical", "Weight" -> 1, "Values" -> {700}, 
                  "ID" -> 8535734355147341023|>, 
                "f2" -> <|
                 "Type" -> "Numerical", "Weight" -> 1, "Values" -> {100}, 
                  "ID" -> 998275991997603375|>, 
                "f3" -> <|
                 "Type" -> "Numerical", "Weight" -> 1, "Values" -> {164}, 
                  "ID" -> 3629733169513138855|>, 
                "f4" -> <|
                 "Type" -> "Numerical", "Weight" -> 1, "Values" -> {150}, 
                  "ID" -> 449388412109565700|>, 
                "f5" -> <|
                 "Type" -> "Numerical", "Weight" -> 1, "Values" -> {95}, "ID" -> 
                  1107047122513506220|>, 
                "f6" -> <|
                 "Type" -> "Numerical", "Weight" -> 1, "Values" -> {120}, 
                  "ID" -> 617199241913160797|>, 
                "f7" -> <|
                 "Type" -> "Numerical", "Weight" -> 1, "Values" -> {71}, "ID" -> 
                  3978018923208285880|>|>, <|
               "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                "LogDensityRatios" -> 0, "RawExample" -> False|>], 
             "TrainingTime" -> 0.185538, "MaxTrainingMemory" -> 2065944, 
             "DataMemory" -> 573240, "FunctionMemory" -> 700616, 
             "LanguageVersion" -> {14.2, 0}, "Date" -> 
             DateObject[{2025, 4, 6, 20, 12, 29.237306`8.218512334377404}, 
               "Instant", "Gregorian", 2.], "ProcessorCount" -> 8, 
             "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX", 
             "SystemWordLength" -> 64, "Evaluations" -> {}|>|>],
         Editable->False,
         SelectWithContents->True,
         Selectable->False], "[", 
        RowBox[{"\<\"Probabilities\"\>", ",", 
         RowBox[{"\[LeftAssociation]", 
          RowBox[{
           RowBox[{"\<\"Total\"\>", "\[Rule]", "680"}], ",", 
           RowBox[{"\<\"HP\"\>", "\[Rule]", "126"}], ",", 
           RowBox[{"\<\"Attack\"\>", "\[Rule]", "131"}], ",", 
           RowBox[{"\<\"Defense\"\>", "\[Rule]", "95"}], ",", 
           RowBox[{"\<\"Sp. Atk\"\>", "\[Rule]", "131"}], ",", 
           RowBox[{"\<\"Sp. Def\"\>", "\[Rule]", "98"}], ",", 
           RowBox[{"\<\"Speed\"\>", "\[Rule]", "99"}]}], 
          "\[RightAssociation]"}]}], "]"}], ",", "3"}], "]"}]}
   },
   AutoDelete->False,
   GridBoxBackground->{"Columns" -> {{None}}, "Rows" -> {
       GrayLevel[0.85], None, None}},
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
   GridBoxItemStyle->{"Columns" -> {{
        Directive[FontFamily -> "Helvetica", 14]}}, "Rows" -> {{
        Directive[FontFamily -> "Helvetica", 14]}}}],
  "Grid"]], "Output",
 CellChangeTimes->{{3.952952035636692*^9, 3.952952062231298*^9}},
 CellLabel->
  "Out[372]=",ExpressionUUID->"1d0d6684-eff6-4f72-8643-d75bca9fde92"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Liste de Pok\[EAcute]mon \[AGrave] tester dans \
l\[CloseCurlyQuote]outil : ",
  FontWeight->"Bold"],
 "\n\n",
 StyleBox["Vous pouvez entrer l\[CloseCurlyQuote]un des noms suivants (en \
anglais) pour tester la pr\[EAcute]diction automatique des types \
bas\[EAcute]e sur les statistiques :",
  FontWeight->"Bold"],
 "\n\n",
 StyleBox["Pikachu : Type1 = Electric, Type2 = (aucun)\n\nYveltal : Type1 = \
Dark, Type2 = Flying\n\nReshiram : Type1 = Dragon, Type2 = Fire\n\nGarchomp : \
Type1 = Dragon, Type2 = Ground\n\nLucario : Type1 = Fighting, Type2 = Steel\n\
\nSwampert : Type1 = Water, Type2 = Ground\n\nTogekiss : Type1 = Fairy, Type2 \
= Flying\n\nAlakazam : Type1 = Psychic, Type2 = (aucun)\n\nInfernape : Type1 \
= Fire, Type2 = Fighting\n\nTorterra : Type1 = Grass, Type2 = Ground\n\nCes \
exemples couvrent \[AGrave] la fois des Pok\[EAcute]mon monotypes (ex. \
Pikachu, Alakazam) et double-types (ex. Yveltal, Lucario), ce qui permet d\
\[CloseCurlyQuote]\[EAcute]valuer la pertinence des diff\[EAcute]rents mod\
\[EGrave]les d\[CloseCurlyQuote]apprentissage utilis\[EAcute]s dans le \
projet.\n\nOn remarque \[AGrave] travers les r\[EAcute]sultats que le mod\
\[EGrave]le du Round 3, sp\[EAcute]cifiquement entra\[IHat]n\[EAcute] sur les \
Pok\[EAcute]mon \[AGrave] double type, est souvent plus pertinent pour pr\
\[EAcute]dire l\[CloseCurlyQuote]un des deux types de ces Pok\[EAcute]mon, m\
\[EHat]me s\[CloseCurlyQuote]il ne vise que le Type1. \n\[CapitalAGrave] l\
\[CloseCurlyQuote]inverse, les mod\[EGrave]les des Rounds 1 et 2 donnent g\
\[EAcute]n\[EAcute]ralement de meilleurs r\[EAcute]sultats sur les Pok\
\[EAcute]mon \[AGrave] type unique, ce qui confirme que \
l\[CloseCurlyQuote]entra\[IHat]nement sp\[EAcute]cialis\[EAcute] permet au \
mod\[EGrave]le de mieux capter la structure particuli\[EGrave]re des profils \
statistiques dans chaque cat\[EAcute]gorie.\n",
  FontWeight->"Bold"],
 "\n"
}], "Text",
 CellChangeTimes->{{3.952943119980755*^9, 3.9529431298742943`*^9}, {
   3.9529432200380306`*^9, 3.952943234139738*^9}, {3.952943268244335*^9, 
   3.9529433034680996`*^9}, 
   3.952950050810932*^9},ExpressionUUID->"8c0e1c85-5519-614a-9cc6-\
fd898db7dff2"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Conclusion", "Chapter",
 CellChangeTimes->{{3.952946333487068*^9, 
  3.952946339007044*^9}},ExpressionUUID->"a10dfd48-95c3-d945-b3d2-\
f5fefdf3a07d"],

Cell[CellGroupData[{

Cell["R\[EAcute]sultats ", "Section",
 CellChangeTimes->{{3.9529463771509113`*^9, 
  3.9529463840059814`*^9}},ExpressionUUID->"96ad3a0d-30c3-4341-8664-\
eff1c216ec7b"],

Cell["\<\
Dans ce projet, nous avons cherch\[EAcute] \[AGrave] \[EAcute]valuer dans \
quelle mesure il est possible de pr\[EAcute]dire le type \
d\[CloseCurlyQuote]un Pok\[EAcute]mon \[AGrave] partir de ses seules \
statistiques de combat. Pour cela, deux approches compl\[EAcute]mentaires ont \
\[EAcute]t\[EAcute] mises en \[OE]uvre : une analyse non supervis\[EAcute]e \
bas\[EAcute]e sur des m\[EAcute]thodes de clustering, et une analyse supervis\
\[EAcute]e utilisant des mod\[EGrave]les de machine learning.

L\[CloseCurlyQuote]analyse non supervis\[EAcute]e a permis de former des \
regroupements automatiques de Pok\[EAcute]mon selon diff\[EAcute]rentes \
combinaisons de statistiques. Le meilleur clustering a \[EAcute]t\[EAcute] \
obtenu avec les variables \[OpenCurlyDoubleQuote]hp\[CloseCurlyDoubleQuote] \
et \[OpenCurlyDoubleQuote]sp_attack\[CloseCurlyDoubleQuote] et un nombre de \
clusters fix\[EAcute] \[AGrave] 10. Cependant, l\[CloseCurlyQuote]examen de \
la r\[EAcute]partition des types dans chacun de ces clusters a r\[EAcute]v\
\[EAcute]l\[EAcute] une forte dominance du type \[OpenCurlyDoubleQuote]grass\
\[CloseCurlyDoubleQuote] dans l\[CloseCurlyQuote]ensemble des groupes. Ce r\
\[EAcute]sultat met en \[EAcute]vidence une forme d\[CloseCurlyQuote]homog\
\[EAcute]n\[EAcute]it\[EAcute] statistique propre \[AGrave] certains types \
comme \[OpenCurlyDoubleQuote]grass\[CloseCurlyDoubleQuote], mais montre aussi \
que la plupart des types ne sont pas bien diff\[EAcute]renci\[EAcute]s par ce \
type d\[CloseCurlyQuote]analyse. Autrement dit, la structure des clusters ne \
refl\[EGrave]te pas les types d\[EAcute]finis dans le jeu, ce qui sugg\
\[EGrave]re une faible corr\[EAcute]lation entre regroupement statistique.

L\[CloseCurlyQuote]analyse supervis\[EAcute]e, quant \[AGrave] elle, s\
\[CloseCurlyQuote]est d\[EAcute]roul\[EAcute]e en trois phases. Dans un \
premier temps, nous avons utilis\[EAcute] l\[CloseCurlyQuote]ensemble des Pok\
\[EAcute]mon pour entra\[IHat]ner plusieurs mod\[EGrave]les sur leurs \
statistiques en vue de pr\[EAcute]dire leur type principal. Les \
r\[EAcute]sultats de cette premi\[EGrave]re phase montrent une \
pr\[EAcute]cision limit\[EAcute]e, avec un maximum de 16 % sur les \
g\[EAcute]n\[EAcute]rations r\[EAcute]centes. En se concentrant uniquement \
sur les Pok\[EAcute]mon de type unique, la pr\[EAcute]cision est \
mont\[EAcute]e \[AGrave] 22 %, d\[EAcute]montrant que les mod\[EGrave]les \
sont plus performants sur des cas plus simples. Enfin, lorsque seuls les Pok\
\[EAcute]mon \[AGrave] double type sont utilis\[EAcute]s pour l\
\[CloseCurlyQuote]entra\[IHat]nement, la pr\[EAcute]cision chute \[AGrave] 3 \
%, confirmant la difficult\[EAcute] du probl\[EGrave]me dans sa forme la plus \
complexe. Ces r\[EAcute]sultats indiquent que les mod\[EGrave]les apprennent \
certaines r\[EAcute]gularit\[EAcute]s, mais qu\[CloseCurlyQuote]ils restent \
limit\[EAcute]s pour g\[EAcute]n\[EAcute]raliser \[AGrave] de nouveaux Pok\
\[EAcute]mon.

L\[CloseCurlyQuote]ensemble de ces analyses r\[EAcute]v\[EGrave]le que les \
statistiques de combat ne suffisent pas \[AGrave] expliquer ou \
pr\[EAcute]dire pr\[EAcute]cis\[EAcute]ment les types des Pok\[EAcute]mon. \
Cela sugg\[EGrave]re que les classifications utilis\[EAcute]es dans le jeu \
sont guid\[EAcute]es par des crit\[EGrave]res plus larges que les seules \
performances num\[EAcute]riques, comme des choix de conception ou des \
logiques de gameplay. N\[EAcute]anmoins, les outils de machine learning mis \
en place permettent de d\[EAcute]gager des tendances int\[EAcute]ressantes et \
pourraient \[EHat]tre am\[EAcute]lior\[EAcute]s par l\[CloseCurlyQuote]ajout \
d\[CloseCurlyQuote]autres variables explicatives comme les attaques, les r\
\[EAcute]sistances ou les habitats. Ce travail a donc permis d\
\[CloseCurlyQuote]\[EAcute]valuer la port\[EAcute]e et les limites de l\
\[CloseCurlyQuote]approche statistique dans la mod\[EAcute]lisation d\
\[CloseCurlyQuote]un syst\[EGrave]me issu d\[CloseCurlyQuote]un univers \
fictif, en combinant rigueur analytique et outils interactifs.
\
\>", "Text",
 CellChangeTimes->{
  3.9529464029844627`*^9, {3.952946450599306*^9, 3.9529464515754967`*^9}, {
   3.9529467644790554`*^9, 
   3.952946771373911*^9}},ExpressionUUID->"ae9702f5-e52f-8b44-b826-\
ac00d4541593"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Difficult\[EAcute]s", "Section",
 CellChangeTimes->{{3.952946778925913*^9, 
  3.9529467814785404`*^9}},ExpressionUUID->"6df70d86-8d9c-d748-ab36-\
46dba9b121c9"],

Cell[TextData[{
 "Ce projet a pr\[EAcute]sent\[EAcute] plusieurs d\[EAcute]fis, tant sur le \
plan technique que m\[EAcute]thodologique. L\[CloseCurlyQuote]un des points \
les plus complexes a \[EAcute]t\[EAcute] la visualisation des performances \
des mod\[EGrave]les. Bien que les taux de pr\[EAcute]cision aient pu \
\[EHat]tre calcul\[EAcute]s et compar\[EAcute]s num\[EAcute]riquement, il \
aurait \[EAcute]t\[EAcute] enrichissant de les repr\[EAcute]senter \
graphiquement pour mieux mettre en \[EAcute]vidence les \[EAcute]carts entre \
les diff\[EAcute]rentes m\[EAcute]thodes et rounds. Cependant, cela n\
\[CloseCurlyQuote]a pas pu \[EHat]tre r\[EAcute]alis\[EAcute] de \
mani\[EGrave]re satisfaisante dans le temps imparti.\n\nUn autre d\[EAcute]fi \
majeur a \[EAcute]t\[EAcute] la prise en main du logiciel Mathematica. \
Contrairement \[AGrave] Python, que je ma\[IHat]trise davantage, Mathematica \
repose sur une logique fonctionnelle particuli\[EGrave]re avec des \
conventions syntaxiques et des comportements propres. De nombreuses heures \
ont \[EAcute]t\[EAcute] consacr\[EAcute]es \[AGrave] comprendre comment \
manipuler les donn\[EAcute]es, ex\[EAcute]cuter les fonctions de clustering \
ou de classification, ou encore structurer les r\[EAcute]sultats de mani\
\[EGrave]re lisible. Cette diff\[EAcute]rence a rendu certaines \
\[EAcute]tapes plus lentes et parfois frustrantes.\n\nSur le plan de l\
\[CloseCurlyQuote]am\[EAcute]lioration des mod\[EGrave]les, il aurait \
\[EAcute]t\[EAcute] pertinent d\[CloseCurlyQuote]aller plus loin dans l\
\[CloseCurlyQuote]optimisation des param\[EGrave]tres. Par exemple, les mod\
\[EGrave]les ont \[EAcute]t\[EAcute] test\[EAcute]s avec leurs \
r\[EAcute]glages par d\[EAcute]faut, mais un ajustement des ",
 StyleBox["hyperparam\[EGrave]tres",
  IgnoreSpellCheck->True],
 " aurait pu am\[EAcute]liorer sensiblement leurs performances. De plus, l\
\[CloseCurlyQuote]ajout d\[CloseCurlyQuote]autres variables explicatives, \
comme les r\[EAcute]sistances, les capacit\[EAcute]s ou encore les types d\
\[CloseCurlyQuote]attaques des Pok\[EAcute]mon, aurait permis de mieux caract\
\[EAcute]riser leur type et d\[CloseCurlyQuote]enrichir \
l\[CloseCurlyQuote]apprentissage.\n\nEnfin, un aspect m\[EAcute]thodologique \
important n\[CloseCurlyQuote]a pas \[EAcute]t\[EAcute] pleinement explor\
\[EAcute] : le choix du nombre optimal de clusters (k) dans la phase de \
clustering. Tout au long du projet, une valeur fixe de k = 10 a \[EAcute]t\
\[EAcute] utilis\[EAcute]e, sans r\[EAcute]elle validation de sa pertinence. \
Il aurait \[EAcute]t\[EAcute] int\[EAcute]ressant \
d\[CloseCurlyQuote]\[EAcute]valuer diff\[EAcute]rentes valeurs de k \[AGrave] \
l\[CloseCurlyQuote]aide de crit\[EGrave]res comme la silhouette score ou la \
variance expliqu\[EAcute]e, afin de mieux justifier la structure retenue. \
Cette \[EAcute]tape aurait permis d\[CloseCurlyQuote]assurer une meilleure \
coh\[EAcute]rence dans l\[CloseCurlyQuote]analyse non supervis\[EAcute]e et d\
\[CloseCurlyQuote]obtenir des regroupements potentiellement plus \
repr\[EAcute]sentatifs."
}], "Text",
 CellChangeTimes->{
  3.9529467920636177`*^9, {3.9529514491602287`*^9, 
   3.9529514552386665`*^9}},ExpressionUUID->"824eb748-59f9-a549-a657-\
856c0b5b2bf1"]
}, Open  ]]
}, Closed]]
}, Open  ]]
},
WindowSize->{Full, Full},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
SpellingDictionaries->{"CorrectWords"->{
 "clustering", "hp", "learning", "Pikachu", "intra", "grass", "electric", 
  "psychic", "fire", "water", "Naive"}},
Magnification:>0.8 Inherited,
FrontEndVersion->"14.2 pour Mac OS X ARM (64-bit) (December 26, 2024)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"e0a69e39-f9d8-0d4e-ada7-b8a30e1d0adf"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[576, 22, 52867, 874, 244, "Title",ExpressionUUID->"fb717318-f344-1f4f-b221-cc450818d27f"],
Cell[CellGroupData[{
Cell[53468, 900, 215, 4, 54, "Chapter",ExpressionUUID->"c2169d29-b1b9-9b43-a4e5-5ffad79c768e"],
Cell[53686, 906, 2576, 41, 394, "Text",ExpressionUUID->"3e08dfeb-c7bb-ed48-9bb1-4e31b849324c"],
Cell[CellGroupData[{
Cell[56287, 951, 203, 3, 52, "Section",ExpressionUUID->"f383a589-1b5c-2a43-b058-64513c97c4c8"],
Cell[56493, 956, 2354, 59, 224, "Code",ExpressionUUID->"1de8c188-4d0d-444a-af79-fde691ca7e29"]
}, Closed]],
Cell[CellGroupData[{
Cell[58884, 1020, 178, 3, 42, "Section",ExpressionUUID->"5859ff63-110b-964e-8726-bf3a2b0c07da"],
Cell[59065, 1025, 1111, 24, 166, "Text",ExpressionUUID->"fa3ae523-93ff-e147-a571-1b5265762494"],
Cell[60179, 1051, 4517, 108, 671, "Code",ExpressionUUID->"a29d5978-6e92-f24c-96c0-2ad368285510"],
Cell[64699, 1161, 677, 12, 44, "Text",ExpressionUUID->"8aa77e87-82fa-3f4f-91ff-dd73d79a7abd"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[65425, 1179, 185, 3, 46, "Chapter",ExpressionUUID->"9b4324f8-61b3-6140-9556-c9406131c7dd"],
Cell[CellGroupData[{
Cell[65635, 1186, 244, 7, 52, "Section",ExpressionUUID->"d12f39cc-a1a6-3e4b-bcc8-e91b2ed791a1"],
Cell[65882, 1195, 2289, 38, 166, "Text",ExpressionUUID->"918909d6-469e-5243-9691-fb440e6a8519"],
Cell[68174, 1235, 16641, 351, 1753, "Code",ExpressionUUID->"3abfaaa4-9182-8a47-8924-7473566459be"],
Cell[84818, 1588, 995, 16, 62, "Text",ExpressionUUID->"5b3c893e-888e-d448-9a98-f47a656c1e17"]
}, Closed]],
Cell[CellGroupData[{
Cell[85850, 1609, 180, 3, 42, "Section",ExpressionUUID->"f0403bef-14bb-1847-9930-40cf752d983e"],
Cell[86033, 1614, 1282, 21, 97, "Text",ExpressionUUID->"e1b2f99b-2dfc-014e-b620-845850d4e21b"],
Cell[CellGroupData[{
Cell[87340, 1639, 11601, 269, 1571, "Code",ExpressionUUID->"521266de-849c-0143-9c5b-ecbd302105b1"],
Cell[98944, 1910, 377, 9, 18, "Print",ExpressionUUID->"8728d1f2-8965-4b14-a4b9-5ba410564d60"],
Cell[99324, 1921, 7686, 191, 384, "Output",ExpressionUUID->"de932296-7258-4c29-af22-e6ad14b214ce"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[107059, 2118, 266, 5, 42, "Section",ExpressionUUID->"5d7c68a1-bfd0-7147-baa0-2b90c45f9923"],
Cell[CellGroupData[{
Cell[107350, 2127, 220, 6, 35, "Subsubsection",ExpressionUUID->"413630dc-b0f0-e343-ac64-d025deee82d7"],
Cell[107573, 2135, 1669, 27, 149, "Text",ExpressionUUID->"d8a61598-23b9-0c4f-9a24-ccf341f9b981"],
Cell[CellGroupData[{
Cell[109267, 2166, 11513, 244, 1576, "Code",ExpressionUUID->"0c30bb8f-5ade-7f43-a89b-a9988c63cbea"],
Cell[120783, 2412, 24608, 457, 526, "Output",ExpressionUUID->"306bd1c0-fb07-4913-beb8-3b4271c0268c"]
}, Open  ]],
Cell[145406, 2872, 2827, 51, 289, "Text",ExpressionUUID->"a90105b0-02e9-f64b-95cb-ac4bf1662f3a"],
Cell[148236, 2925, 156, 3, 23, "Input",ExpressionUUID->"d3c6a27c-8f12-f844-9864-46998859dc20"]
}, Open  ]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[148453, 2935, 276, 9, 46, "Chapter",ExpressionUUID->"bdd0080a-10f3-b84e-a064-a16d9808856f"],
Cell[148732, 2946, 4450, 72, 411, "Text",ExpressionUUID->"b78ce72b-9fa6-4546-9fbf-c003598b27b7"],
Cell[CellGroupData[{
Cell[153207, 3022, 254, 4, 42, "Subsection",ExpressionUUID->"48ca5c2d-4cf0-944e-8c65-167baa3e767f"],
Cell[153464, 3028, 269, 5, 27, "Text",ExpressionUUID->"80406caf-e29e-7e45-a66d-171c7e8118ee"],
Cell[CellGroupData[{
Cell[153758, 3037, 9691, 235, 976, "Code",ExpressionUUID->"c775eb44-4414-4645-ab0e-b6a828950df2"],
Cell[163452, 3274, 2013, 46, 104, "Output",ExpressionUUID->"ea6c48cb-d20f-4568-bc09-c324b247f136"],
Cell[165468, 3322, 280, 7, 26, "Output",ExpressionUUID->"630c0397-444d-40de-ac2e-477f291ad560"],
Cell[165751, 3331, 7207, 173, 310, "Output",ExpressionUUID->"cc5c7f22-c731-4ea7-91c4-c22f7af431a7"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[173007, 3510, 240, 4, 30, "Subsection",ExpressionUUID->"0926d658-2348-634a-8c38-80d96b279110"],
Cell[173250, 3516, 382, 8, 27, "Text",ExpressionUUID->"a1e68e15-caad-7b49-85ec-f415a67089f2"],
Cell[CellGroupData[{
Cell[173657, 3528, 12503, 289, 1511, "Code",ExpressionUUID->"c79ae938-e2c9-ef49-a680-0e5431af4e4f"],
Cell[186163, 3819, 333, 5, 33, "Print",ExpressionUUID->"e7e85b42-00df-487b-ab64-fa202192fbd6"],
Cell[186499, 3826, 1503, 38, 104, "Output",ExpressionUUID->"5355dbdb-2961-40e8-a920-0ea0654e9461"],
Cell[188005, 3866, 304, 7, 26, "Output",ExpressionUUID->"2a6c4c89-d407-4e5a-b838-26d8fa6e5cb7"],
Cell[188312, 3875, 7228, 172, 310, "Output",ExpressionUUID->"a3a59354-e0ee-4bca-b6c5-91d212317ed2"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[195589, 4053, 213, 4, 30, "Subsection",ExpressionUUID->"afea28e6-b360-464c-a62e-5ab5916914ab"],
Cell[195805, 4059, 448, 10, 27, "Text",ExpressionUUID->"bc43f115-6992-a34f-9e73-30a155e54026"],
Cell[CellGroupData[{
Cell[196278, 4073, 8643, 203, 1096, "Code",ExpressionUUID->"15357cc7-ccb6-5e47-9f43-79226b647f71"],
Cell[204924, 4278, 1504, 38, 104, "Output",ExpressionUUID->"051b2b8b-119a-4f12-8d90-572ed12192bf"],
Cell[206431, 4318, 298, 7, 26, "Output",ExpressionUUID->"063b5549-d706-4640-82da-e1df183c2722"],
Cell[206732, 4327, 7257, 172, 307, "Output",ExpressionUUID->"fd54c7dd-c3e4-45e5-a527-959b1cb1d1b7"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[214038, 4505, 177, 3, 42, "Section",ExpressionUUID->"4b1c55fa-ec1e-2c4b-9121-dba81089212c"],
Cell[214218, 4510, 1342, 27, 236, "Text",ExpressionUUID->"7d7be42b-7736-164b-a75d-37f28782505e"],
Cell[CellGroupData[{
Cell[215585, 4541, 7031, 189, 719, "Code",ExpressionUUID->"c88fd43f-8faa-6d4b-8c91-5134faf3b039"],
Cell[222619, 4732, 2077, 63, 75, "Output",ExpressionUUID->"c4ccb257-28c8-409c-b5b1-3990cf205f95"]
}, Open  ]],
Cell[CellGroupData[{
Cell[224733, 4800, 15461, 384, 1322, "Code",ExpressionUUID->"3abe3c43-8a89-f34d-9505-8399d30a9faf"],
Cell[240197, 5186, 13065, 298, 299, "Output",ExpressionUUID->"f386ee48-60de-4d55-aa1e-9ad25b06a32f"]
}, Open  ]],
Cell[253277, 5487, 169, 3, 39, "Input",ExpressionUUID->"c58222c0-022c-664c-8883-7d22fcc0232f"],
Cell[253449, 5492, 1785, 30, 149, "Text",ExpressionUUID->"251dc72b-3f33-0546-b1f1-33a1b5ecf8a4"],
Cell[255237, 5524, 77, 0, 42, "Subsection",ExpressionUUID->"be2153a2-3af8-fc47-9283-7399f362c2b7"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[255363, 5530, 233, 4, 46, "Chapter",ExpressionUUID->"dbceb49b-29dd-fc4d-ae32-d23fd4547898"],
Cell[CellGroupData[{
Cell[255621, 5538, 266, 6, 42, "Subsection",ExpressionUUID->"d2697d1e-f5b9-ed43-b846-fc68af0754cc"],
Cell[255890, 5546, 1172, 25, 184, "Text",ExpressionUUID->"4b47193b-0049-924a-9bf4-ffbb805c1f26"],
Cell[CellGroupData[{
Cell[257087, 5575, 9916, 237, 1111, "Code",ExpressionUUID->"a526a004-fdbb-1945-a61a-873d3abe398b"],
Cell[267006, 5814, 989, 20, 18, "Print",ExpressionUUID->"92b1a8a0-8800-4d8d-aa95-3cc0182190df"],
Cell[267998, 5836, 766798, 12614, 155, "Output",ExpressionUUID->"1d0d6684-eff6-4f72-8643-d75bca9fde92"]
}, Open  ]],
Cell[1034811, 18453, 2213, 38, 551, "Text",ExpressionUUID->"8c0e1c85-5519-614a-9cc6-fd898db7dff2"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[1037073, 18497, 155, 3, 46, "Chapter",ExpressionUUID->"a10dfd48-95c3-d945-b3d2-f5fefdf3a07d"],
Cell[CellGroupData[{
Cell[1037253, 18504, 167, 3, 52, "Section",ExpressionUUID->"96ad3a0d-30c3-4341-8664-eff1c216ec7b"],
Cell[1037423, 18509, 4337, 66, 289, "Text",ExpressionUUID->"ae9702f5-e52f-8b44-b826-ac00d4541593"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1041797, 18580, 166, 3, 52, "Section",ExpressionUUID->"6df70d86-8d9c-d748-ab36-46dba9b121c9"],
Cell[1041966, 18585, 3288, 49, 219, "Text",ExpressionUUID->"824eb748-59f9-a549-a657-856c0b5b2bf1"]
}, Open  ]]
}, Closed]]
}, Open  ]]
}
]
*)

